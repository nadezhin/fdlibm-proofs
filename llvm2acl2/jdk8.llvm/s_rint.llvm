; ModuleID = '../jdk8/src/s_rint.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@TWO52 = internal constant [2 x double] [double 0x4330000000000000, double 0xC330000000000000], align 16

; Function Attrs: nounwind readnone uwtable
define double @rint(double %x) #0 {
  %1 = alloca double, align 8
  %2 = alloca double, align 8
  %i0 = alloca i32, align 4
  %j0 = alloca i32, align 4
  %sx = alloca i32, align 4
  %i = alloca i32, align 4
  %i1 = alloca i32, align 4
  %w = alloca double, align 8
  %t = alloca double, align 8
  store double %x, double* %2, align 8
  %3 = bitcast double* %2 to i32*
  %4 = getelementptr inbounds i32, i32* %3, i64 1
  %5 = load i32, i32* %4, align 4
  store i32 %5, i32* %i0, align 4
  %6 = load i32, i32* %i0, align 4
  %7 = ashr i32 %6, 31
  %8 = and i32 %7, 1
  store i32 %8, i32* %sx, align 4
  %9 = bitcast double* %2 to i32*
  %10 = load i32, i32* %9, align 4
  store i32 %10, i32* %i1, align 4
  %11 = load i32, i32* %i0, align 4
  %12 = ashr i32 %11, 20
  %13 = and i32 %12, 2047
  %14 = sub nsw i32 %13, 1023
  store i32 %14, i32* %j0, align 4
  %15 = load i32, i32* %j0, align 4
  %16 = icmp slt i32 %15, 20
  br i1 %16, label %17, label %104

; <label>:17                                      ; preds = %0
  %18 = load i32, i32* %j0, align 4
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %20, label %69

; <label>:20                                      ; preds = %17
  %21 = load i32, i32* %i0, align 4
  %22 = and i32 %21, 2147483647
  %23 = load i32, i32* %i1, align 4
  %24 = or i32 %22, %23
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %28

; <label>:26                                      ; preds = %20
  %27 = load double, double* %2, align 8
  store double %27, double* %1
  br label %162

; <label>:28                                      ; preds = %20
  %29 = load i32, i32* %i0, align 4
  %30 = and i32 %29, 1048575
  %31 = load i32, i32* %i1, align 4
  %32 = or i32 %31, %30
  store i32 %32, i32* %i1, align 4
  %33 = load i32, i32* %i0, align 4
  %34 = and i32 %33, -131072
  store i32 %34, i32* %i0, align 4
  %35 = load i32, i32* %i1, align 4
  %36 = load i32, i32* %i1, align 4
  %37 = sub i32 0, %36
  %38 = or i32 %35, %37
  %39 = lshr i32 %38, 12
  %40 = and i32 %39, 524288
  %41 = load i32, i32* %i0, align 4
  %42 = or i32 %41, %40
  store i32 %42, i32* %i0, align 4
  %43 = load i32, i32* %i0, align 4
  %44 = bitcast double* %2 to i32*
  %45 = getelementptr inbounds i32, i32* %44, i64 1
  store i32 %43, i32* %45, align 4
  %46 = load i32, i32* %sx, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds [2 x double], [2 x double]* @TWO52, i32 0, i64 %47
  %49 = load double, double* %48, align 8
  %50 = load double, double* %2, align 8
  %51 = fadd double %49, %50
  store double %51, double* %w, align 8
  %52 = load double, double* %w, align 8
  %53 = load i32, i32* %sx, align 4
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds [2 x double], [2 x double]* @TWO52, i32 0, i64 %54
  %56 = load double, double* %55, align 8
  %57 = fsub double %52, %56
  store double %57, double* %t, align 8
  %58 = bitcast double* %t to i32*
  %59 = getelementptr inbounds i32, i32* %58, i64 1
  %60 = load i32, i32* %59, align 4
  store i32 %60, i32* %i0, align 4
  %61 = load i32, i32* %i0, align 4
  %62 = and i32 %61, 2147483647
  %63 = load i32, i32* %sx, align 4
  %64 = shl i32 %63, 31
  %65 = or i32 %62, %64
  %66 = bitcast double* %t to i32*
  %67 = getelementptr inbounds i32, i32* %66, i64 1
  store i32 %65, i32* %67, align 4
  %68 = load double, double* %t, align 8
  store double %68, double* %1
  br label %162

; <label>:69                                      ; preds = %17
  %70 = load i32, i32* %j0, align 4
  %71 = ashr i32 1048575, %70
  store i32 %71, i32* %i, align 4
  %72 = load i32, i32* %i0, align 4
  %73 = load i32, i32* %i, align 4
  %74 = and i32 %72, %73
  %75 = load i32, i32* %i1, align 4
  %76 = or i32 %74, %75
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %80

; <label>:78                                      ; preds = %69
  %79 = load double, double* %2, align 8
  store double %79, double* %1
  br label %162

; <label>:80                                      ; preds = %69
  %81 = load i32, i32* %i, align 4
  %82 = lshr i32 %81, 1
  store i32 %82, i32* %i, align 4
  %83 = load i32, i32* %i0, align 4
  %84 = load i32, i32* %i, align 4
  %85 = and i32 %83, %84
  %86 = load i32, i32* %i1, align 4
  %87 = or i32 %85, %86
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %89, label %102

; <label>:89                                      ; preds = %80
  %90 = load i32, i32* %j0, align 4
  %91 = icmp eq i32 %90, 19
  br i1 %91, label %92, label %93

; <label>:92                                      ; preds = %89
  store i32 1073741824, i32* %i1, align 4
  br label %101

; <label>:93                                      ; preds = %89
  %94 = load i32, i32* %i0, align 4
  %95 = load i32, i32* %i, align 4
  %96 = xor i32 %95, -1
  %97 = and i32 %94, %96
  %98 = load i32, i32* %j0, align 4
  %99 = ashr i32 131072, %98
  %100 = or i32 %97, %99
  store i32 %100, i32* %i0, align 4
  br label %101

; <label>:101                                     ; preds = %93, %92
  br label %102

; <label>:102                                     ; preds = %101, %80
  br label %103

; <label>:103                                     ; preds = %102
  br label %144

; <label>:104                                     ; preds = %0
  %105 = load i32, i32* %j0, align 4
  %106 = icmp sgt i32 %105, 51
  br i1 %106, label %107, label %116

; <label>:107                                     ; preds = %104
  %108 = load i32, i32* %j0, align 4
  %109 = icmp eq i32 %108, 1024
  br i1 %109, label %110, label %114

; <label>:110                                     ; preds = %107
  %111 = load double, double* %2, align 8
  %112 = load double, double* %2, align 8
  %113 = fadd double %111, %112
  store double %113, double* %1
  br label %162

; <label>:114                                     ; preds = %107
  %115 = load double, double* %2, align 8
  store double %115, double* %1
  br label %162

; <label>:116                                     ; preds = %104
  %117 = load i32, i32* %j0, align 4
  %118 = sub nsw i32 %117, 20
  %119 = lshr i32 -1, %118
  store i32 %119, i32* %i, align 4
  %120 = load i32, i32* %i1, align 4
  %121 = load i32, i32* %i, align 4
  %122 = and i32 %120, %121
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %124, label %126

; <label>:124                                     ; preds = %116
  %125 = load double, double* %2, align 8
  store double %125, double* %1
  br label %162

; <label>:126                                     ; preds = %116
  %127 = load i32, i32* %i, align 4
  %128 = lshr i32 %127, 1
  store i32 %128, i32* %i, align 4
  %129 = load i32, i32* %i1, align 4
  %130 = load i32, i32* %i, align 4
  %131 = and i32 %129, %130
  %132 = icmp ne i32 %131, 0
  br i1 %132, label %133, label %142

; <label>:133                                     ; preds = %126
  %134 = load i32, i32* %i1, align 4
  %135 = load i32, i32* %i, align 4
  %136 = xor i32 %135, -1
  %137 = and i32 %134, %136
  %138 = load i32, i32* %j0, align 4
  %139 = sub nsw i32 %138, 20
  %140 = ashr i32 1073741824, %139
  %141 = or i32 %137, %140
  store i32 %141, i32* %i1, align 4
  br label %142

; <label>:142                                     ; preds = %133, %126
  br label %143

; <label>:143                                     ; preds = %142
  br label %144

; <label>:144                                     ; preds = %143, %103
  %145 = load i32, i32* %i0, align 4
  %146 = bitcast double* %2 to i32*
  %147 = getelementptr inbounds i32, i32* %146, i64 1
  store i32 %145, i32* %147, align 4
  %148 = load i32, i32* %i1, align 4
  %149 = bitcast double* %2 to i32*
  store i32 %148, i32* %149, align 4
  %150 = load i32, i32* %sx, align 4
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds [2 x double], [2 x double]* @TWO52, i32 0, i64 %151
  %153 = load double, double* %152, align 8
  %154 = load double, double* %2, align 8
  %155 = fadd double %153, %154
  store double %155, double* %w, align 8
  %156 = load double, double* %w, align 8
  %157 = load i32, i32* %sx, align 4
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds [2 x double], [2 x double]* @TWO52, i32 0, i64 %158
  %160 = load double, double* %159, align 8
  %161 = fsub double %156, %160
  store double %161, double* %1
  br label %162

; <label>:162                                     ; preds = %144, %124, %114, %110, %78, %28, %26
  %163 = load double, double* %1
  ret double %163
}

attributes #0 = { nounwind readnone uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"Ubuntu clang version 3.7.0-2ubuntu1 (tags/RELEASE_370/final) (based on LLVM 3.7.0)"}
