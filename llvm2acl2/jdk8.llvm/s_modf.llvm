; ModuleID = '../jdk8/src/s_modf.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: nounwind uwtable
define double @modf(double %x, double* %iptr) #0 {
  %1 = alloca double, align 8
  %2 = alloca double, align 8
  %3 = alloca double*, align 8
  %i0 = alloca i32, align 4
  %i1 = alloca i32, align 4
  %j0 = alloca i32, align 4
  %i = alloca i32, align 4
  store double %x, double* %2, align 8
  store double* %iptr, double** %3, align 8
  %4 = bitcast double* %2 to i32*
  %5 = getelementptr inbounds i32, i32* %4, i64 1
  %6 = load i32, i32* %5, align 4
  store i32 %6, i32* %i0, align 4
  %7 = bitcast double* %2 to i32*
  %8 = load i32, i32* %7, align 4
  store i32 %8, i32* %i1, align 4
  %9 = load i32, i32* %i0, align 4
  %10 = ashr i32 %9, 20
  %11 = and i32 %10, 2047
  %12 = sub nsw i32 %11, 1023
  store i32 %12, i32* %j0, align 4
  %13 = load i32, i32* %j0, align 4
  %14 = icmp slt i32 %13, 20
  br i1 %14, label %15, label %59

; <label>:15                                      ; preds = %0
  %16 = load i32, i32* %j0, align 4
  %17 = icmp slt i32 %16, 0
  br i1 %17, label %18, label %27

; <label>:18                                      ; preds = %15
  %19 = load i32, i32* %i0, align 4
  %20 = and i32 %19, -2147483648
  %21 = load double*, double** %3, align 8
  %22 = bitcast double* %21 to i32*
  %23 = getelementptr inbounds i32, i32* %22, i64 1
  store i32 %20, i32* %23, align 4
  %24 = load double*, double** %3, align 8
  %25 = bitcast double* %24 to i32*
  store i32 0, i32* %25, align 4
  %26 = load double, double* %2, align 8
  store double %26, double* %1
  br label %104

; <label>:27                                      ; preds = %15
  %28 = load i32, i32* %j0, align 4
  %29 = ashr i32 1048575, %28
  store i32 %29, i32* %i, align 4
  %30 = load i32, i32* %i0, align 4
  %31 = load i32, i32* %i, align 4
  %32 = and i32 %30, %31
  %33 = load i32, i32* %i1, align 4
  %34 = or i32 %32, %33
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %45

; <label>:36                                      ; preds = %27
  %37 = load double, double* %2, align 8
  %38 = load double*, double** %3, align 8
  store double %37, double* %38, align 8
  %39 = bitcast double* %2 to i32*
  %40 = getelementptr inbounds i32, i32* %39, i64 1
  %41 = load i32, i32* %40, align 4
  %42 = and i32 %41, -2147483648
  store i32 %42, i32* %40, align 4
  %43 = bitcast double* %2 to i32*
  store i32 0, i32* %43, align 4
  %44 = load double, double* %2, align 8
  store double %44, double* %1
  br label %104

; <label>:45                                      ; preds = %27
  %46 = load i32, i32* %i0, align 4
  %47 = load i32, i32* %i, align 4
  %48 = xor i32 %47, -1
  %49 = and i32 %46, %48
  %50 = load double*, double** %3, align 8
  %51 = bitcast double* %50 to i32*
  %52 = getelementptr inbounds i32, i32* %51, i64 1
  store i32 %49, i32* %52, align 4
  %53 = load double*, double** %3, align 8
  %54 = bitcast double* %53 to i32*
  store i32 0, i32* %54, align 4
  %55 = load double, double* %2, align 8
  %56 = load double*, double** %3, align 8
  %57 = load double, double* %56, align 8
  %58 = fsub double %55, %57
  store double %58, double* %1
  br label %104

; <label>:59                                      ; preds = %0
  %60 = load i32, i32* %j0, align 4
  %61 = icmp sgt i32 %60, 51
  br i1 %61, label %62, label %72

; <label>:62                                      ; preds = %59
  %63 = load double, double* %2, align 8
  %64 = fmul double %63, 1.000000e+00
  %65 = load double*, double** %3, align 8
  store double %64, double* %65, align 8
  %66 = bitcast double* %2 to i32*
  %67 = getelementptr inbounds i32, i32* %66, i64 1
  %68 = load i32, i32* %67, align 4
  %69 = and i32 %68, -2147483648
  store i32 %69, i32* %67, align 4
  %70 = bitcast double* %2 to i32*
  store i32 0, i32* %70, align 4
  %71 = load double, double* %2, align 8
  store double %71, double* %1
  br label %104

; <label>:72                                      ; preds = %59
  %73 = load i32, i32* %j0, align 4
  %74 = sub nsw i32 %73, 20
  %75 = lshr i32 -1, %74
  store i32 %75, i32* %i, align 4
  %76 = load i32, i32* %i1, align 4
  %77 = load i32, i32* %i, align 4
  %78 = and i32 %76, %77
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %89

; <label>:80                                      ; preds = %72
  %81 = load double, double* %2, align 8
  %82 = load double*, double** %3, align 8
  store double %81, double* %82, align 8
  %83 = bitcast double* %2 to i32*
  %84 = getelementptr inbounds i32, i32* %83, i64 1
  %85 = load i32, i32* %84, align 4
  %86 = and i32 %85, -2147483648
  store i32 %86, i32* %84, align 4
  %87 = bitcast double* %2 to i32*
  store i32 0, i32* %87, align 4
  %88 = load double, double* %2, align 8
  store double %88, double* %1
  br label %104

; <label>:89                                      ; preds = %72
  %90 = load i32, i32* %i0, align 4
  %91 = load double*, double** %3, align 8
  %92 = bitcast double* %91 to i32*
  %93 = getelementptr inbounds i32, i32* %92, i64 1
  store i32 %90, i32* %93, align 4
  %94 = load i32, i32* %i1, align 4
  %95 = load i32, i32* %i, align 4
  %96 = xor i32 %95, -1
  %97 = and i32 %94, %96
  %98 = load double*, double** %3, align 8
  %99 = bitcast double* %98 to i32*
  store i32 %97, i32* %99, align 4
  %100 = load double, double* %2, align 8
  %101 = load double*, double** %3, align 8
  %102 = load double, double* %101, align 8
  %103 = fsub double %100, %102
  store double %103, double* %1
  br label %104

; <label>:104                                     ; preds = %89, %80, %62, %45, %36, %18
  %105 = load double, double* %1
  ret double %105
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"Ubuntu clang version 3.7.0-2ubuntu1 (tags/RELEASE_370/final) (based on LLVM 3.7.0)"}
