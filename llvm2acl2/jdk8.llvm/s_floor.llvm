; ModuleID = '../jdk8/src/s_floor.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: nounwind uwtable
define double @jfloor(double %x) #0 {
  %1 = alloca double, align 8
  %2 = alloca double, align 8
  %i0 = alloca i32, align 4
  %i1 = alloca i32, align 4
  %j0 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double %x, double* %2, align 8
  %3 = bitcast double* %2 to i32*
  %4 = getelementptr inbounds i32, i32* %3, i64 1
  %5 = load i32, i32* %4, align 4
  store i32 %5, i32* %i0, align 4
  %6 = bitcast double* %2 to i32*
  %7 = load i32, i32* %6, align 4
  store i32 %7, i32* %i1, align 4
  %8 = load i32, i32* %i0, align 4
  %9 = ashr i32 %8, 20
  %10 = and i32 %9, 2047
  %11 = sub nsw i32 %10, 1023
  store i32 %11, i32* %j0, align 4
  %12 = load i32, i32* %j0, align 4
  %13 = icmp slt i32 %12, 20
  br i1 %13, label %14, label %65

; <label>:14                                      ; preds = %0
  %15 = load i32, i32* %j0, align 4
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %17, label %35

; <label>:17                                      ; preds = %14
  %18 = load double, double* %2, align 8
  %19 = fadd double 1.000000e+300, %18
  %20 = fcmp ogt double %19, 0.000000e+00
  br i1 %20, label %21, label %34

; <label>:21                                      ; preds = %17
  %22 = load i32, i32* %i0, align 4
  %23 = icmp sge i32 %22, 0
  br i1 %23, label %24, label %25

; <label>:24                                      ; preds = %21
  store i32 0, i32* %i1, align 4
  store i32 0, i32* %i0, align 4
  br label %33

; <label>:25                                      ; preds = %21
  %26 = load i32, i32* %i0, align 4
  %27 = and i32 %26, 2147483647
  %28 = load i32, i32* %i1, align 4
  %29 = or i32 %27, %28
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %31, label %32

; <label>:31                                      ; preds = %25
  store i32 -1074790400, i32* %i0, align 4
  store i32 0, i32* %i1, align 4
  br label %32

; <label>:32                                      ; preds = %31, %25
  br label %33

; <label>:33                                      ; preds = %32, %24
  br label %34

; <label>:34                                      ; preds = %33, %17
  br label %64

; <label>:35                                      ; preds = %14
  %36 = load i32, i32* %j0, align 4
  %37 = ashr i32 1048575, %36
  store i32 %37, i32* %i, align 4
  %38 = load i32, i32* %i0, align 4
  %39 = load i32, i32* %i, align 4
  %40 = and i32 %38, %39
  %41 = load i32, i32* %i1, align 4
  %42 = or i32 %40, %41
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %46

; <label>:44                                      ; preds = %35
  %45 = load double, double* %2, align 8
  store double %45, double* %1
  br label %129

; <label>:46                                      ; preds = %35
  %47 = load double, double* %2, align 8
  %48 = fadd double 1.000000e+300, %47
  %49 = fcmp ogt double %48, 0.000000e+00
  br i1 %49, label %50, label %63

; <label>:50                                      ; preds = %46
  %51 = load i32, i32* %i0, align 4
  %52 = icmp slt i32 %51, 0
  br i1 %52, label %53, label %58

; <label>:53                                      ; preds = %50
  %54 = load i32, i32* %j0, align 4
  %55 = ashr i32 1048576, %54
  %56 = load i32, i32* %i0, align 4
  %57 = add nsw i32 %56, %55
  store i32 %57, i32* %i0, align 4
  br label %58

; <label>:58                                      ; preds = %53, %50
  %59 = load i32, i32* %i, align 4
  %60 = xor i32 %59, -1
  %61 = load i32, i32* %i0, align 4
  %62 = and i32 %61, %60
  store i32 %62, i32* %i0, align 4
  store i32 0, i32* %i1, align 4
  br label %63

; <label>:63                                      ; preds = %58, %46
  br label %64

; <label>:64                                      ; preds = %63, %34
  br label %122

; <label>:65                                      ; preds = %0
  %66 = load i32, i32* %j0, align 4
  %67 = icmp sgt i32 %66, 51
  br i1 %67, label %68, label %77

; <label>:68                                      ; preds = %65
  %69 = load i32, i32* %j0, align 4
  %70 = icmp eq i32 %69, 1024
  br i1 %70, label %71, label %75

; <label>:71                                      ; preds = %68
  %72 = load double, double* %2, align 8
  %73 = load double, double* %2, align 8
  %74 = fadd double %72, %73
  store double %74, double* %1
  br label %129

; <label>:75                                      ; preds = %68
  %76 = load double, double* %2, align 8
  store double %76, double* %1
  br label %129

; <label>:77                                      ; preds = %65
  %78 = load i32, i32* %j0, align 4
  %79 = sub nsw i32 %78, 20
  %80 = lshr i32 -1, %79
  store i32 %80, i32* %i, align 4
  %81 = load i32, i32* %i1, align 4
  %82 = load i32, i32* %i, align 4
  %83 = and i32 %81, %82
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %87

; <label>:85                                      ; preds = %77
  %86 = load double, double* %2, align 8
  store double %86, double* %1
  br label %129

; <label>:87                                      ; preds = %77
  %88 = load double, double* %2, align 8
  %89 = fadd double 1.000000e+300, %88
  %90 = fcmp ogt double %89, 0.000000e+00
  br i1 %90, label %91, label %120

; <label>:91                                      ; preds = %87
  %92 = load i32, i32* %i0, align 4
  %93 = icmp slt i32 %92, 0
  br i1 %93, label %94, label %115

; <label>:94                                      ; preds = %91
  %95 = load i32, i32* %j0, align 4
  %96 = icmp eq i32 %95, 20
  br i1 %96, label %97, label %100

; <label>:97                                      ; preds = %94
  %98 = load i32, i32* %i0, align 4
  %99 = add nsw i32 %98, 1
  store i32 %99, i32* %i0, align 4
  br label %114

; <label>:100                                     ; preds = %94
  %101 = load i32, i32* %i1, align 4
  %102 = load i32, i32* %j0, align 4
  %103 = sub nsw i32 52, %102
  %104 = shl i32 1, %103
  %105 = add nsw i32 %101, %104
  store i32 %105, i32* %j, align 4
  %106 = load i32, i32* %j, align 4
  %107 = load i32, i32* %i1, align 4
  %108 = icmp ult i32 %106, %107
  br i1 %108, label %109, label %112

; <label>:109                                     ; preds = %100
  %110 = load i32, i32* %i0, align 4
  %111 = add nsw i32 %110, 1
  store i32 %111, i32* %i0, align 4
  br label %112

; <label>:112                                     ; preds = %109, %100
  %113 = load i32, i32* %j, align 4
  store i32 %113, i32* %i1, align 4
  br label %114

; <label>:114                                     ; preds = %112, %97
  br label %115

; <label>:115                                     ; preds = %114, %91
  %116 = load i32, i32* %i, align 4
  %117 = xor i32 %116, -1
  %118 = load i32, i32* %i1, align 4
  %119 = and i32 %118, %117
  store i32 %119, i32* %i1, align 4
  br label %120

; <label>:120                                     ; preds = %115, %87
  br label %121

; <label>:121                                     ; preds = %120
  br label %122

; <label>:122                                     ; preds = %121, %64
  %123 = load i32, i32* %i0, align 4
  %124 = bitcast double* %2 to i32*
  %125 = getelementptr inbounds i32, i32* %124, i64 1
  store i32 %123, i32* %125, align 4
  %126 = load i32, i32* %i1, align 4
  %127 = bitcast double* %2 to i32*
  store i32 %126, i32* %127, align 4
  %128 = load double, double* %2, align 8
  store double %128, double* %1
  br label %129

; <label>:129                                     ; preds = %122, %85, %75, %71, %44
  %130 = load double, double* %1
  ret double %130
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"Ubuntu clang version 3.7.0-2ubuntu1 (tags/RELEASE_370/final) (based on LLVM 3.7.0)"}
