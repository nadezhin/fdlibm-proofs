; ModuleID = '../netlib/e_j0.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@zero = internal global double 0.000000e+00, align 8
@pR8 = internal constant [6 x double] [double 0.000000e+00, double 0xBFB1FFFFFFFFFD32, double 0xC02029D0B44FA779, double 0xC07011027B19E863, double 0xC0A36A6ECD4DCAFC, double 0xC0B4850B36CC643D], align 16
@pS8 = internal constant [5 x double] [double 0x405D223307A96751, double 0x40ADF37D50596938, double 0x40E3D2BB6EB6B05F, double 0x40FC810F8F9FA9BD, double 0x40E741774F2C49DC], align 16
@pR5 = internal constant [6 x double] [double 0xBDA918B147E495CC, double 0xBFB1FFFFE69AFBC6, double 0xC010A370F90C6BBF, double 0xC050EB2F5A7D1783, double 0xC074B3B36742CC63, double 0xC075A6EF28A38BD7], align 16
@pS5 = internal constant [5 x double] [double 0x404E60810C98C5DE, double 0x40906D025C7E2864, double 0x40B75AF88FBE1D60, double 0x40C2CCB8FA76FA38, double 0x40A2CC1DC70BE864], align 16
@pR3 = internal constant [6 x double] [double 0xBE25E1036FE1AA86, double 0xBFB1FFF6F7C0E24B, double 0xC00345B2AEA48074, double 0xC035F74A4CB94E14, double 0xC04D0A22420A1A45, double 0xC03F72ACA892D80F], align 16
@pS3 = internal constant [5 x double] [double 0x4041ED9284077DD3, double 0x40769839464A7C0E, double 0x4092A66E6D1061D6, double 0x40919FFCB8C39B7E, double 0x4065B296FC379081], align 16
@pR2 = internal constant [6 x double] [double 0xBE77D316E927026D, double 0xBFB1FF62495E1E42, double 0xBFF736398A24A843, double 0xC01E8AF3EDAFA7F3, double 0xC02662E6C5246303, double 0xC009DE81AF8FE70F], align 16
@pS2 = internal constant [5 x double] [double 0x40363865908B5959, double 0x4061069E0EE8878F, double 0x4070E78642EA079B, double 0x40633C033AB6FAFF, double 0x402D50B344391809], align 16
@qR8 = internal constant [6 x double] [double 0.000000e+00, double 0x3FB2BFFFFFFFFE2C, double 0x402789525BB334D6, double 0x40816D6315301825, double 0x40C14D993E18F46D, double 0x40E212D40E901566], align 16
@qS8 = internal constant [6 x double] [double 0x406478D5365B39BC, double 0x40BFA2584E6B0563, double 0x4101665254D38C3F, double 0x412883DA83A52B43, double 0x4129A66B28DE0B3D, double 0xC114FD6D2C9530C5], align 16
@qR5 = internal constant [6 x double] [double 0x3DB43D8F29CC8CD9, double 0x3FB2BFFFD172B04C, double 0x401757B0B9953DD3, double 0x4060E3920A8788E9, double 0x40900CF99DC8C481, double 0x409F17E953C6E3A6], align 16
@qS5 = internal constant [6 x double] [double 0x4054B1B3FB5E1543, double 0x40A03BA0DA21C0CE, double 0x40D267D27B591E6D, double 0x40EBB5E397E02372, double 0x40E191181F7A54A0, double 0xC0B4EA57BEDBC609], align 16
@qR3 = internal constant [6 x double] [double 0x3E32CD036ADECB82, double 0x3FB2BFEE0E8D0842, double 0x400AC0FC61149CF5, double 0x40454F98962DAEDD, double 0x406559DBE25EFD1F, double 0x4064D77C81FA21E0], align 16
@qS3 = internal constant [6 x double] [double 0x40486122BFE343A6, double 0x40862D8386544EB3, double 0x40ACF04BE44DFC63, double 0x40B93C6CD7C76A28, double 0x40A3A8AAD94FB1C0, double 0xC062A7EB201CF40F], align 16
@qR2 = internal constant [6 x double] [double 0x3E84313B54F76BDB, double 0x3FB2BEC53E883E34, double 0x3FFFF897E727779C, double 0x402CFDBFAAF96FE5, double 0x403FAA8E29FBDC4A, double 0x403040B171814BB4], align 16
@qS2 = internal constant [6 x double] [double 0x403E5D96F7C07AED, double 0x4070D591E4D14B40, double 0x408A664522B3BF22, double 0x408B977C9C5CC214, double 0x406A95530E001365, double 0xC0153E6AF8B32931], align 16

; Function Attrs: nounwind uwtable
define double @__ieee754_j0(double %x) #0 {
  %1 = alloca double, align 8
  %2 = alloca double, align 8
  %z = alloca double, align 8
  %s = alloca double, align 8
  %c = alloca double, align 8
  %ss = alloca double, align 8
  %cc = alloca double, align 8
  %r = alloca double, align 8
  %u = alloca double, align 8
  %v = alloca double, align 8
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  store double %x, double* %2, align 8
  %3 = bitcast double* %2 to i32*
  %4 = getelementptr inbounds i32, i32* %3, i64 1
  %5 = load i32, i32* %4, align 4
  store i32 %5, i32* %hx, align 4
  %6 = load i32, i32* %hx, align 4
  %7 = and i32 %6, 2147483647
  store i32 %7, i32* %ix, align 4
  %8 = load i32, i32* %ix, align 4
  %9 = icmp sge i32 %8, 2146435072
  br i1 %9, label %10, label %15

; <label>:10                                      ; preds = %0
  %11 = load double, double* %2, align 8
  %12 = load double, double* %2, align 8
  %13 = fmul double %11, %12
  %14 = fdiv double 1.000000e+00, %13
  store double %14, double* %1
  br label %149

; <label>:15                                      ; preds = %0
  %16 = load double, double* %2, align 8
  %17 = call double @fabs(double %16) #4
  store double %17, double* %2, align 8
  %18 = load i32, i32* %ix, align 4
  %19 = icmp sge i32 %18, 1073741824
  br i1 %19, label %20, label %80

; <label>:20                                      ; preds = %15
  %21 = load double, double* %2, align 8
  %22 = call double @sin(double %21) #5
  store double %22, double* %s, align 8
  %23 = load double, double* %2, align 8
  %24 = call double @cos(double %23) #5
  store double %24, double* %c, align 8
  %25 = load double, double* %s, align 8
  %26 = load double, double* %c, align 8
  %27 = fsub double %25, %26
  store double %27, double* %ss, align 8
  %28 = load double, double* %s, align 8
  %29 = load double, double* %c, align 8
  %30 = fadd double %28, %29
  store double %30, double* %cc, align 8
  %31 = load i32, i32* %ix, align 4
  %32 = icmp slt i32 %31, 2145386496
  br i1 %32, label %33, label %53

; <label>:33                                      ; preds = %20
  %34 = load double, double* %2, align 8
  %35 = load double, double* %2, align 8
  %36 = fadd double %34, %35
  %37 = call double @cos(double %36) #5
  %38 = fsub double -0.000000e+00, %37
  store double %38, double* %z, align 8
  %39 = load double, double* %s, align 8
  %40 = load double, double* %c, align 8
  %41 = fmul double %39, %40
  %42 = load double, double* @zero, align 8
  %43 = fcmp olt double %41, %42
  br i1 %43, label %44, label %48

; <label>:44                                      ; preds = %33
  %45 = load double, double* %z, align 8
  %46 = load double, double* %ss, align 8
  %47 = fdiv double %45, %46
  store double %47, double* %cc, align 8
  br label %52

; <label>:48                                      ; preds = %33
  %49 = load double, double* %z, align 8
  %50 = load double, double* %cc, align 8
  %51 = fdiv double %49, %50
  store double %51, double* %ss, align 8
  br label %52

; <label>:52                                      ; preds = %48, %44
  br label %53

; <label>:53                                      ; preds = %52, %20
  %54 = load i32, i32* %ix, align 4
  %55 = icmp sgt i32 %54, 1207959552
  br i1 %55, label %56, label %62

; <label>:56                                      ; preds = %53
  %57 = load double, double* %cc, align 8
  %58 = fmul double 0x3FE20DD750429B6D, %57
  %59 = load double, double* %2, align 8
  %60 = call double @sqrt(double %59) #5
  %61 = fdiv double %58, %60
  store double %61, double* %z, align 8
  br label %78

; <label>:62                                      ; preds = %53
  %63 = load double, double* %2, align 8
  %64 = call double @pzero(double %63)
  store double %64, double* %u, align 8
  %65 = load double, double* %2, align 8
  %66 = call double @qzero(double %65)
  store double %66, double* %v, align 8
  %67 = load double, double* %u, align 8
  %68 = load double, double* %cc, align 8
  %69 = fmul double %67, %68
  %70 = load double, double* %v, align 8
  %71 = load double, double* %ss, align 8
  %72 = fmul double %70, %71
  %73 = fsub double %69, %72
  %74 = fmul double 0x3FE20DD750429B6D, %73
  %75 = load double, double* %2, align 8
  %76 = call double @sqrt(double %75) #5
  %77 = fdiv double %74, %76
  store double %77, double* %z, align 8
  br label %78

; <label>:78                                      ; preds = %62, %56
  %79 = load double, double* %z, align 8
  store double %79, double* %1
  br label %149

; <label>:80                                      ; preds = %15
  %81 = load i32, i32* %ix, align 4
  %82 = icmp slt i32 %81, 1059061760
  br i1 %82, label %83, label %98

; <label>:83                                      ; preds = %80
  %84 = load double, double* %2, align 8
  %85 = fadd double 1.000000e+300, %84
  %86 = fcmp ogt double %85, 1.000000e+00
  br i1 %86, label %87, label %97

; <label>:87                                      ; preds = %83
  %88 = load i32, i32* %ix, align 4
  %89 = icmp slt i32 %88, 1044381696
  br i1 %89, label %90, label %91

; <label>:90                                      ; preds = %87
  store double 1.000000e+00, double* %1
  br label %149

; <label>:91                                      ; preds = %87
  %92 = load double, double* %2, align 8
  %93 = fmul double 2.500000e-01, %92
  %94 = load double, double* %2, align 8
  %95 = fmul double %93, %94
  %96 = fsub double 1.000000e+00, %95
  store double %96, double* %1
  br label %149

; <label>:97                                      ; preds = %83
  br label %98

; <label>:98                                      ; preds = %97, %80
  %99 = load double, double* %2, align 8
  %100 = load double, double* %2, align 8
  %101 = fmul double %99, %100
  store double %101, double* %z, align 8
  %102 = load double, double* %z, align 8
  %103 = load double, double* %z, align 8
  %104 = load double, double* %z, align 8
  %105 = load double, double* %z, align 8
  %106 = fmul double %105, 0xBE33D5E773D63FCE
  %107 = fadd double 0x3EBEB1D10C503919, %106
  %108 = fmul double %104, %107
  %109 = fadd double 0xBF28E6A5B61AC6E9, %108
  %110 = fmul double %103, %109
  %111 = fadd double 0x3F8FFFFFFFFFFFFD, %110
  %112 = fmul double %102, %111
  store double %112, double* %r, align 8
  %113 = load double, double* %z, align 8
  %114 = load double, double* %z, align 8
  %115 = load double, double* %z, align 8
  %116 = load double, double* %z, align 8
  %117 = fmul double %116, 0x3E1408BCF4745D8F
  %118 = fadd double 0x3EA13B54CE84D5A9, %117
  %119 = fmul double %115, %118
  %120 = fadd double 0x3F1EA6D2DD57DBF4, %119
  %121 = fmul double %114, %120
  %122 = fadd double 0x3F8FFCE882C8C2A4, %121
  %123 = fmul double %113, %122
  %124 = fadd double 1.000000e+00, %123
  store double %124, double* %s, align 8
  %125 = load i32, i32* %ix, align 4
  %126 = icmp slt i32 %125, 1072693248
  br i1 %126, label %127, label %135

; <label>:127                                     ; preds = %98
  %128 = load double, double* %z, align 8
  %129 = load double, double* %r, align 8
  %130 = load double, double* %s, align 8
  %131 = fdiv double %129, %130
  %132 = fadd double -2.500000e-01, %131
  %133 = fmul double %128, %132
  %134 = fadd double 1.000000e+00, %133
  store double %134, double* %1
  br label %149

; <label>:135                                     ; preds = %98
  %136 = load double, double* %2, align 8
  %137 = fmul double 5.000000e-01, %136
  store double %137, double* %u, align 8
  %138 = load double, double* %u, align 8
  %139 = fadd double 1.000000e+00, %138
  %140 = load double, double* %u, align 8
  %141 = fsub double 1.000000e+00, %140
  %142 = fmul double %139, %141
  %143 = load double, double* %z, align 8
  %144 = load double, double* %r, align 8
  %145 = load double, double* %s, align 8
  %146 = fdiv double %144, %145
  %147 = fmul double %143, %146
  %148 = fadd double %142, %147
  store double %148, double* %1
  br label %149

; <label>:149                                     ; preds = %135, %127, %91, %90, %78, %10
  %150 = load double, double* %1
  ret double %150
}

; Function Attrs: nounwind readnone
declare double @fabs(double) #1

; Function Attrs: nounwind
declare double @sin(double) #2

; Function Attrs: nounwind
declare double @cos(double) #2

; Function Attrs: nounwind
declare double @sqrt(double) #2

; Function Attrs: nounwind uwtable
define internal double @pzero(double %x) #0 {
  %1 = alloca double, align 8
  %p = alloca double*, align 8
  %q = alloca double*, align 8
  %z = alloca double, align 8
  %r = alloca double, align 8
  %s = alloca double, align 8
  %ix = alloca i32, align 4
  store double %x, double* %1, align 8
  %2 = bitcast double* %1 to i32*
  %3 = getelementptr inbounds i32, i32* %2, i64 1
  %4 = load i32, i32* %3, align 4
  %5 = and i32 2147483647, %4
  store i32 %5, i32* %ix, align 4
  %6 = load i32, i32* %ix, align 4
  %7 = icmp sge i32 %6, 1075838976
  br i1 %7, label %8, label %9

; <label>:8                                       ; preds = %0
  store double* getelementptr inbounds ([6 x double], [6 x double]* @pR8, i32 0, i32 0), double** %p, align 8
  store double* getelementptr inbounds ([5 x double], [5 x double]* @pS8, i32 0, i32 0), double** %q, align 8
  br label %24

; <label>:9                                       ; preds = %0
  %10 = load i32, i32* %ix, align 4
  %11 = icmp sge i32 %10, 1074933387
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %9
  store double* getelementptr inbounds ([6 x double], [6 x double]* @pR5, i32 0, i32 0), double** %p, align 8
  store double* getelementptr inbounds ([5 x double], [5 x double]* @pS5, i32 0, i32 0), double** %q, align 8
  br label %23

; <label>:13                                      ; preds = %9
  %14 = load i32, i32* %ix, align 4
  %15 = icmp sge i32 %14, 1074191213
  br i1 %15, label %16, label %17

; <label>:16                                      ; preds = %13
  store double* getelementptr inbounds ([6 x double], [6 x double]* @pR3, i32 0, i32 0), double** %p, align 8
  store double* getelementptr inbounds ([5 x double], [5 x double]* @pS3, i32 0, i32 0), double** %q, align 8
  br label %22

; <label>:17                                      ; preds = %13
  %18 = load i32, i32* %ix, align 4
  %19 = icmp sge i32 %18, 1073741824
  br i1 %19, label %20, label %21

; <label>:20                                      ; preds = %17
  store double* getelementptr inbounds ([6 x double], [6 x double]* @pR2, i32 0, i32 0), double** %p, align 8
  store double* getelementptr inbounds ([5 x double], [5 x double]* @pS2, i32 0, i32 0), double** %q, align 8
  br label %21

; <label>:21                                      ; preds = %20, %17
  br label %22

; <label>:22                                      ; preds = %21, %16
  br label %23

; <label>:23                                      ; preds = %22, %12
  br label %24

; <label>:24                                      ; preds = %23, %8
  %25 = load double, double* %1, align 8
  %26 = load double, double* %1, align 8
  %27 = fmul double %25, %26
  %28 = fdiv double 1.000000e+00, %27
  store double %28, double* %z, align 8
  %29 = load double*, double** %p, align 8
  %30 = getelementptr inbounds double, double* %29, i64 0
  %31 = load double, double* %30, align 8
  %32 = load double, double* %z, align 8
  %33 = load double*, double** %p, align 8
  %34 = getelementptr inbounds double, double* %33, i64 1
  %35 = load double, double* %34, align 8
  %36 = load double, double* %z, align 8
  %37 = load double*, double** %p, align 8
  %38 = getelementptr inbounds double, double* %37, i64 2
  %39 = load double, double* %38, align 8
  %40 = load double, double* %z, align 8
  %41 = load double*, double** %p, align 8
  %42 = getelementptr inbounds double, double* %41, i64 3
  %43 = load double, double* %42, align 8
  %44 = load double, double* %z, align 8
  %45 = load double*, double** %p, align 8
  %46 = getelementptr inbounds double, double* %45, i64 4
  %47 = load double, double* %46, align 8
  %48 = load double, double* %z, align 8
  %49 = load double*, double** %p, align 8
  %50 = getelementptr inbounds double, double* %49, i64 5
  %51 = load double, double* %50, align 8
  %52 = fmul double %48, %51
  %53 = fadd double %47, %52
  %54 = fmul double %44, %53
  %55 = fadd double %43, %54
  %56 = fmul double %40, %55
  %57 = fadd double %39, %56
  %58 = fmul double %36, %57
  %59 = fadd double %35, %58
  %60 = fmul double %32, %59
  %61 = fadd double %31, %60
  store double %61, double* %r, align 8
  %62 = load double, double* %z, align 8
  %63 = load double*, double** %q, align 8
  %64 = getelementptr inbounds double, double* %63, i64 0
  %65 = load double, double* %64, align 8
  %66 = load double, double* %z, align 8
  %67 = load double*, double** %q, align 8
  %68 = getelementptr inbounds double, double* %67, i64 1
  %69 = load double, double* %68, align 8
  %70 = load double, double* %z, align 8
  %71 = load double*, double** %q, align 8
  %72 = getelementptr inbounds double, double* %71, i64 2
  %73 = load double, double* %72, align 8
  %74 = load double, double* %z, align 8
  %75 = load double*, double** %q, align 8
  %76 = getelementptr inbounds double, double* %75, i64 3
  %77 = load double, double* %76, align 8
  %78 = load double, double* %z, align 8
  %79 = load double*, double** %q, align 8
  %80 = getelementptr inbounds double, double* %79, i64 4
  %81 = load double, double* %80, align 8
  %82 = fmul double %78, %81
  %83 = fadd double %77, %82
  %84 = fmul double %74, %83
  %85 = fadd double %73, %84
  %86 = fmul double %70, %85
  %87 = fadd double %69, %86
  %88 = fmul double %66, %87
  %89 = fadd double %65, %88
  %90 = fmul double %62, %89
  %91 = fadd double 1.000000e+00, %90
  store double %91, double* %s, align 8
  %92 = load double, double* %r, align 8
  %93 = load double, double* %s, align 8
  %94 = fdiv double %92, %93
  %95 = fadd double 1.000000e+00, %94
  ret double %95
}

; Function Attrs: nounwind uwtable
define internal double @qzero(double %x) #0 {
  %1 = alloca double, align 8
  %p = alloca double*, align 8
  %q = alloca double*, align 8
  %s = alloca double, align 8
  %r = alloca double, align 8
  %z = alloca double, align 8
  %ix = alloca i32, align 4
  store double %x, double* %1, align 8
  %2 = bitcast double* %1 to i32*
  %3 = getelementptr inbounds i32, i32* %2, i64 1
  %4 = load i32, i32* %3, align 4
  %5 = and i32 2147483647, %4
  store i32 %5, i32* %ix, align 4
  %6 = load i32, i32* %ix, align 4
  %7 = icmp sge i32 %6, 1075838976
  br i1 %7, label %8, label %9

; <label>:8                                       ; preds = %0
  store double* getelementptr inbounds ([6 x double], [6 x double]* @qR8, i32 0, i32 0), double** %p, align 8
  store double* getelementptr inbounds ([6 x double], [6 x double]* @qS8, i32 0, i32 0), double** %q, align 8
  br label %24

; <label>:9                                       ; preds = %0
  %10 = load i32, i32* %ix, align 4
  %11 = icmp sge i32 %10, 1074933387
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %9
  store double* getelementptr inbounds ([6 x double], [6 x double]* @qR5, i32 0, i32 0), double** %p, align 8
  store double* getelementptr inbounds ([6 x double], [6 x double]* @qS5, i32 0, i32 0), double** %q, align 8
  br label %23

; <label>:13                                      ; preds = %9
  %14 = load i32, i32* %ix, align 4
  %15 = icmp sge i32 %14, 1074191213
  br i1 %15, label %16, label %17

; <label>:16                                      ; preds = %13
  store double* getelementptr inbounds ([6 x double], [6 x double]* @qR3, i32 0, i32 0), double** %p, align 8
  store double* getelementptr inbounds ([6 x double], [6 x double]* @qS3, i32 0, i32 0), double** %q, align 8
  br label %22

; <label>:17                                      ; preds = %13
  %18 = load i32, i32* %ix, align 4
  %19 = icmp sge i32 %18, 1073741824
  br i1 %19, label %20, label %21

; <label>:20                                      ; preds = %17
  store double* getelementptr inbounds ([6 x double], [6 x double]* @qR2, i32 0, i32 0), double** %p, align 8
  store double* getelementptr inbounds ([6 x double], [6 x double]* @qS2, i32 0, i32 0), double** %q, align 8
  br label %21

; <label>:21                                      ; preds = %20, %17
  br label %22

; <label>:22                                      ; preds = %21, %16
  br label %23

; <label>:23                                      ; preds = %22, %12
  br label %24

; <label>:24                                      ; preds = %23, %8
  %25 = load double, double* %1, align 8
  %26 = load double, double* %1, align 8
  %27 = fmul double %25, %26
  %28 = fdiv double 1.000000e+00, %27
  store double %28, double* %z, align 8
  %29 = load double*, double** %p, align 8
  %30 = getelementptr inbounds double, double* %29, i64 0
  %31 = load double, double* %30, align 8
  %32 = load double, double* %z, align 8
  %33 = load double*, double** %p, align 8
  %34 = getelementptr inbounds double, double* %33, i64 1
  %35 = load double, double* %34, align 8
  %36 = load double, double* %z, align 8
  %37 = load double*, double** %p, align 8
  %38 = getelementptr inbounds double, double* %37, i64 2
  %39 = load double, double* %38, align 8
  %40 = load double, double* %z, align 8
  %41 = load double*, double** %p, align 8
  %42 = getelementptr inbounds double, double* %41, i64 3
  %43 = load double, double* %42, align 8
  %44 = load double, double* %z, align 8
  %45 = load double*, double** %p, align 8
  %46 = getelementptr inbounds double, double* %45, i64 4
  %47 = load double, double* %46, align 8
  %48 = load double, double* %z, align 8
  %49 = load double*, double** %p, align 8
  %50 = getelementptr inbounds double, double* %49, i64 5
  %51 = load double, double* %50, align 8
  %52 = fmul double %48, %51
  %53 = fadd double %47, %52
  %54 = fmul double %44, %53
  %55 = fadd double %43, %54
  %56 = fmul double %40, %55
  %57 = fadd double %39, %56
  %58 = fmul double %36, %57
  %59 = fadd double %35, %58
  %60 = fmul double %32, %59
  %61 = fadd double %31, %60
  store double %61, double* %r, align 8
  %62 = load double, double* %z, align 8
  %63 = load double*, double** %q, align 8
  %64 = getelementptr inbounds double, double* %63, i64 0
  %65 = load double, double* %64, align 8
  %66 = load double, double* %z, align 8
  %67 = load double*, double** %q, align 8
  %68 = getelementptr inbounds double, double* %67, i64 1
  %69 = load double, double* %68, align 8
  %70 = load double, double* %z, align 8
  %71 = load double*, double** %q, align 8
  %72 = getelementptr inbounds double, double* %71, i64 2
  %73 = load double, double* %72, align 8
  %74 = load double, double* %z, align 8
  %75 = load double*, double** %q, align 8
  %76 = getelementptr inbounds double, double* %75, i64 3
  %77 = load double, double* %76, align 8
  %78 = load double, double* %z, align 8
  %79 = load double*, double** %q, align 8
  %80 = getelementptr inbounds double, double* %79, i64 4
  %81 = load double, double* %80, align 8
  %82 = load double, double* %z, align 8
  %83 = load double*, double** %q, align 8
  %84 = getelementptr inbounds double, double* %83, i64 5
  %85 = load double, double* %84, align 8
  %86 = fmul double %82, %85
  %87 = fadd double %81, %86
  %88 = fmul double %78, %87
  %89 = fadd double %77, %88
  %90 = fmul double %74, %89
  %91 = fadd double %73, %90
  %92 = fmul double %70, %91
  %93 = fadd double %69, %92
  %94 = fmul double %66, %93
  %95 = fadd double %65, %94
  %96 = fmul double %62, %95
  %97 = fadd double 1.000000e+00, %96
  store double %97, double* %s, align 8
  %98 = load double, double* %r, align 8
  %99 = load double, double* %s, align 8
  %100 = fdiv double %98, %99
  %101 = fadd double -1.250000e-01, %100
  %102 = load double, double* %1, align 8
  %103 = fdiv double %101, %102
  ret double %103
}

; Function Attrs: nounwind uwtable
define double @__ieee754_y0(double %x) #0 {
  %1 = alloca double, align 8
  %2 = alloca double, align 8
  %z = alloca double, align 8
  %s = alloca double, align 8
  %c = alloca double, align 8
  %ss = alloca double, align 8
  %cc = alloca double, align 8
  %u = alloca double, align 8
  %v = alloca double, align 8
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  %lx = alloca i32, align 4
  store double %x, double* %2, align 8
  %3 = bitcast double* %2 to i32*
  %4 = getelementptr inbounds i32, i32* %3, i64 1
  %5 = load i32, i32* %4, align 4
  store i32 %5, i32* %hx, align 4
  %6 = load i32, i32* %hx, align 4
  %7 = and i32 2147483647, %6
  store i32 %7, i32* %ix, align 4
  %8 = bitcast double* %2 to i32*
  %9 = load i32, i32* %8, align 4
  store i32 %9, i32* %lx, align 4
  %10 = load i32, i32* %ix, align 4
  %11 = icmp sge i32 %10, 2146435072
  br i1 %11, label %12, label %19

; <label>:12                                      ; preds = %0
  %13 = load double, double* %2, align 8
  %14 = load double, double* %2, align 8
  %15 = load double, double* %2, align 8
  %16 = fmul double %14, %15
  %17 = fadd double %13, %16
  %18 = fdiv double 1.000000e+00, %17
  store double %18, double* %1
  br label %149

; <label>:19                                      ; preds = %0
  %20 = load i32, i32* %ix, align 4
  %21 = load i32, i32* %lx, align 4
  %22 = or i32 %20, %21
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %27

; <label>:24                                      ; preds = %19
  %25 = load double, double* @zero, align 8
  %26 = fdiv double -1.000000e+00, %25
  store double %26, double* %1
  br label %149

; <label>:27                                      ; preds = %19
  %28 = load i32, i32* %hx, align 4
  %29 = icmp slt i32 %28, 0
  br i1 %29, label %30, label %34

; <label>:30                                      ; preds = %27
  %31 = load double, double* @zero, align 8
  %32 = load double, double* @zero, align 8
  %33 = fdiv double %31, %32
  store double %33, double* %1
  br label %149

; <label>:34                                      ; preds = %27
  %35 = load i32, i32* %ix, align 4
  %36 = icmp sge i32 %35, 1073741824
  br i1 %36, label %37, label %97

; <label>:37                                      ; preds = %34
  %38 = load double, double* %2, align 8
  %39 = call double @sin(double %38) #5
  store double %39, double* %s, align 8
  %40 = load double, double* %2, align 8
  %41 = call double @cos(double %40) #5
  store double %41, double* %c, align 8
  %42 = load double, double* %s, align 8
  %43 = load double, double* %c, align 8
  %44 = fsub double %42, %43
  store double %44, double* %ss, align 8
  %45 = load double, double* %s, align 8
  %46 = load double, double* %c, align 8
  %47 = fadd double %45, %46
  store double %47, double* %cc, align 8
  %48 = load i32, i32* %ix, align 4
  %49 = icmp slt i32 %48, 2145386496
  br i1 %49, label %50, label %70

; <label>:50                                      ; preds = %37
  %51 = load double, double* %2, align 8
  %52 = load double, double* %2, align 8
  %53 = fadd double %51, %52
  %54 = call double @cos(double %53) #5
  %55 = fsub double -0.000000e+00, %54
  store double %55, double* %z, align 8
  %56 = load double, double* %s, align 8
  %57 = load double, double* %c, align 8
  %58 = fmul double %56, %57
  %59 = load double, double* @zero, align 8
  %60 = fcmp olt double %58, %59
  br i1 %60, label %61, label %65

; <label>:61                                      ; preds = %50
  %62 = load double, double* %z, align 8
  %63 = load double, double* %ss, align 8
  %64 = fdiv double %62, %63
  store double %64, double* %cc, align 8
  br label %69

; <label>:65                                      ; preds = %50
  %66 = load double, double* %z, align 8
  %67 = load double, double* %cc, align 8
  %68 = fdiv double %66, %67
  store double %68, double* %ss, align 8
  br label %69

; <label>:69                                      ; preds = %65, %61
  br label %70

; <label>:70                                      ; preds = %69, %37
  %71 = load i32, i32* %ix, align 4
  %72 = icmp sgt i32 %71, 1207959552
  br i1 %72, label %73, label %79

; <label>:73                                      ; preds = %70
  %74 = load double, double* %ss, align 8
  %75 = fmul double 0x3FE20DD750429B6D, %74
  %76 = load double, double* %2, align 8
  %77 = call double @sqrt(double %76) #5
  %78 = fdiv double %75, %77
  store double %78, double* %z, align 8
  br label %95

; <label>:79                                      ; preds = %70
  %80 = load double, double* %2, align 8
  %81 = call double @pzero(double %80)
  store double %81, double* %u, align 8
  %82 = load double, double* %2, align 8
  %83 = call double @qzero(double %82)
  store double %83, double* %v, align 8
  %84 = load double, double* %u, align 8
  %85 = load double, double* %ss, align 8
  %86 = fmul double %84, %85
  %87 = load double, double* %v, align 8
  %88 = load double, double* %cc, align 8
  %89 = fmul double %87, %88
  %90 = fadd double %86, %89
  %91 = fmul double 0x3FE20DD750429B6D, %90
  %92 = load double, double* %2, align 8
  %93 = call double @sqrt(double %92) #5
  %94 = fdiv double %91, %93
  store double %94, double* %z, align 8
  br label %95

; <label>:95                                      ; preds = %79, %73
  %96 = load double, double* %z, align 8
  store double %96, double* %1
  br label %149

; <label>:97                                      ; preds = %34
  %98 = load i32, i32* %ix, align 4
  %99 = icmp sle i32 %98, 1044381696
  br i1 %99, label %100, label %105

; <label>:100                                     ; preds = %97
  %101 = load double, double* %2, align 8
  %102 = call double @__ieee754_log(double %101)
  %103 = fmul double 0x3FE45F306DC9C883, %102
  %104 = fadd double 0xBFB2E4D699CBD01F, %103
  store double %104, double* %1
  br label %149

; <label>:105                                     ; preds = %97
  %106 = load double, double* %2, align 8
  %107 = load double, double* %2, align 8
  %108 = fmul double %106, %107
  store double %108, double* %z, align 8
  %109 = load double, double* %z, align 8
  %110 = load double, double* %z, align 8
  %111 = load double, double* %z, align 8
  %112 = load double, double* %z, align 8
  %113 = load double, double* %z, align 8
  %114 = load double, double* %z, align 8
  %115 = fmul double %114, 0xBDC5E43D693FB3C8
  %116 = fadd double 0x3E5500573B4EABD4, %115
  %117 = fmul double %113, %116
  %118 = fadd double 0xBECFFEA773D25CAD, %117
  %119 = fmul double %112, %118
  %120 = fadd double 0x3F36C54D20B29B6B, %119
  %121 = fmul double %111, %120
  %122 = fadd double 0xBF8C4CE8B16CFA97, %121
  %123 = fmul double %110, %122
  %124 = fadd double 0x3FC69D019DE9E3FC, %123
  %125 = fmul double %109, %124
  %126 = fadd double 0xBFB2E4D699CBD01F, %125
  store double %126, double* %u, align 8
  %127 = load double, double* %z, align 8
  %128 = load double, double* %z, align 8
  %129 = load double, double* %z, align 8
  %130 = load double, double* %z, align 8
  %131 = fmul double %130, 0x3DFE50183BD6D9EF
  %132 = fadd double 0x3E91642D7FF202FD, %131
  %133 = fmul double %129, %132
  %134 = fadd double 0x3F13ECBBF578C6C1, %133
  %135 = fmul double %128, %134
  %136 = fadd double 0x3F8A127091C9C71A, %135
  %137 = fmul double %127, %136
  %138 = fadd double 1.000000e+00, %137
  store double %138, double* %v, align 8
  %139 = load double, double* %u, align 8
  %140 = load double, double* %v, align 8
  %141 = fdiv double %139, %140
  %142 = load double, double* %2, align 8
  %143 = call double @__ieee754_j0(double %142)
  %144 = load double, double* %2, align 8
  %145 = call double @__ieee754_log(double %144)
  %146 = fmul double %143, %145
  %147 = fmul double 0x3FE45F306DC9C883, %146
  %148 = fadd double %141, %147
  store double %148, double* %1
  br label %149

; <label>:149                                     ; preds = %105, %100, %95, %30, %24, %12
  %150 = load double, double* %1
  ret double %150
}

declare double @__ieee754_log(double) #3

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Ubuntu clang version 3.7.0-2ubuntu1 (tags/RELEASE_370/final) (based on LLVM 3.7.0)"}
