; ModuleID = '../netlib/s_asinh.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: nounwind uwtable
define double @asinh(double %x) #0 {
  %1 = alloca double, align 8
  %2 = alloca double, align 8
  %t = alloca double, align 8
  %w = alloca double, align 8
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  store double %x, double* %2, align 8
  %3 = bitcast double* %2 to i32*
  %4 = getelementptr inbounds i32, i32* %3, i64 1
  %5 = load i32, i32* %4, align 4
  store i32 %5, i32* %hx, align 4
  %6 = load i32, i32* %hx, align 4
  %7 = and i32 %6, 2147483647
  store i32 %7, i32* %ix, align 4
  %8 = load i32, i32* %ix, align 4
  %9 = icmp sge i32 %8, 2146435072
  br i1 %9, label %10, label %14

; <label>:10                                      ; preds = %0
  %11 = load double, double* %2, align 8
  %12 = load double, double* %2, align 8
  %13 = fadd double %11, %12
  store double %13, double* %1
  br label %73

; <label>:14                                      ; preds = %0
  %15 = load i32, i32* %ix, align 4
  %16 = icmp slt i32 %15, 1043333120
  br i1 %16, label %17, label %24

; <label>:17                                      ; preds = %14
  %18 = load double, double* %2, align 8
  %19 = fadd double 1.000000e+300, %18
  %20 = fcmp ogt double %19, 1.000000e+00
  br i1 %20, label %21, label %23

; <label>:21                                      ; preds = %17
  %22 = load double, double* %2, align 8
  store double %22, double* %1
  br label %73

; <label>:23                                      ; preds = %17
  br label %24

; <label>:24                                      ; preds = %23, %14
  %25 = load i32, i32* %ix, align 4
  %26 = icmp sgt i32 %25, 1102053376
  br i1 %26, label %27, label %32

; <label>:27                                      ; preds = %24
  %28 = load double, double* %2, align 8
  %29 = call double @fabs(double %28) #4
  %30 = call double @__ieee754_log(double %29)
  %31 = fadd double %30, 0x3FE62E42FEFA39EF
  store double %31, double* %w, align 8
  br label %65

; <label>:32                                      ; preds = %24
  %33 = load i32, i32* %ix, align 4
  %34 = icmp sgt i32 %33, 1073741824
  br i1 %34, label %35, label %50

; <label>:35                                      ; preds = %32
  %36 = load double, double* %2, align 8
  %37 = call double @fabs(double %36) #4
  store double %37, double* %t, align 8
  %38 = load double, double* %t, align 8
  %39 = fmul double 2.000000e+00, %38
  %40 = load double, double* %2, align 8
  %41 = load double, double* %2, align 8
  %42 = fmul double %40, %41
  %43 = fadd double %42, 1.000000e+00
  %44 = call double @sqrt(double %43) #5
  %45 = load double, double* %t, align 8
  %46 = fadd double %44, %45
  %47 = fdiv double 1.000000e+00, %46
  %48 = fadd double %39, %47
  %49 = call double @__ieee754_log(double %48)
  store double %49, double* %w, align 8
  br label %64

; <label>:50                                      ; preds = %32
  %51 = load double, double* %2, align 8
  %52 = load double, double* %2, align 8
  %53 = fmul double %51, %52
  store double %53, double* %t, align 8
  %54 = load double, double* %2, align 8
  %55 = call double @fabs(double %54) #4
  %56 = load double, double* %t, align 8
  %57 = load double, double* %t, align 8
  %58 = fadd double 1.000000e+00, %57
  %59 = call double @sqrt(double %58) #5
  %60 = fadd double 1.000000e+00, %59
  %61 = fdiv double %56, %60
  %62 = fadd double %55, %61
  %63 = call double @log1p(double %62) #5
  store double %63, double* %w, align 8
  br label %64

; <label>:64                                      ; preds = %50, %35
  br label %65

; <label>:65                                      ; preds = %64, %27
  %66 = load i32, i32* %hx, align 4
  %67 = icmp sgt i32 %66, 0
  br i1 %67, label %68, label %70

; <label>:68                                      ; preds = %65
  %69 = load double, double* %w, align 8
  store double %69, double* %1
  br label %73

; <label>:70                                      ; preds = %65
  %71 = load double, double* %w, align 8
  %72 = fsub double -0.000000e+00, %71
  store double %72, double* %1
  br label %73

; <label>:73                                      ; preds = %70, %68, %21, %10
  %74 = load double, double* %1
  ret double %74
}

declare double @__ieee754_log(double) #1

; Function Attrs: nounwind readnone
declare double @fabs(double) #2

; Function Attrs: nounwind
declare double @sqrt(double) #3

; Function Attrs: nounwind
declare double @log1p(double) #3

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Ubuntu clang version 3.7.0-2ubuntu1 (tags/RELEASE_370/final) (based on LLVM 3.7.0)"}
