; ModuleID = '../netlib/e_j1.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@zero = internal global double 0.000000e+00, align 8
@U0 = internal constant [5 x double] [double 0xBFC91866143CBC8A, double 0x3FA9D3C776292CD1, double 0xBF5F55E54844F50F, double 0x3EF8AB038FA6B88E, double 0xBE78AC00569105B8], align 16
@V0 = internal constant [5 x double] [double 0x3F94650D3F4DA9F0, double 0x3F2A8C896C257764, double 0x3EB6C05A894E8CA6, double 0x3E3ABF1D5BA69A86, double 0x3DB25039DACA772A], align 16
@pr8 = internal constant [6 x double] [double 0.000000e+00, double 0x3FBDFFFFFFFFFCCE, double 0x402A7A9D357F7FCE, double 0x4079C0D4652EA590, double 0x40AE457DA3A532CC, double 0x40BEEA7AC32782DD], align 16
@ps8 = internal constant [5 x double] [double 0x405C8D458E656CAC, double 0x40AC85DC964D274F, double 0x40E20B8697C5BB7F, double 0x40F7D42CB28F17BB, double 0x40DE1511697A0B2D], align 16
@pr5 = internal constant [6 x double] [double 0x3DAD0667DAE1CA7D, double 0x3FBDFFFFE2C10043, double 0x401B36046E6315E3, double 0x405B13B9452602ED, double 0x40802D16D052D649, double 0x408085B8BB7E0CB7], align 16
@ps5 = internal constant [5 x double] [double 0x404DA3EAA8AF633D, double 0x408EFB361B066701, double 0x40B4E9445706B6FB, double 0x40BEA4B0B8A5BB15, double 0x40978030036F5E51], align 16
@pr3 = internal constant [6 x double] [double 0x3E29FC21A7AD9EDD, double 0x3FBDFFF55B21D17B, double 0x400F76BCE85EAD8A, double 0x40418F489DA6D129, double 0x4056C3854D2C1837, double 0x4048478F8EA83EE5], align 16
@ps3 = internal constant [5 x double] [double 0x40416549A134069C, double 0x40750C3307F1A75F, double 0x40905B7C5037D523, double 0x408BD67DA32E31E9, double 0x4059F26D7C2EED53], align 16
@pr2 = internal constant [6 x double] [double 0x3E7CE9D4F65544F4, double 0x3FBDFF42BE760D83, double 0x4002F2B7F98FAEC0, double 0x40287C377F71A964, double 0x4031B1A8177F8EE2, double 0x40144B49A574C1FE], align 16
@ps2 = internal constant [5 x double] [double 0x40356FBD8AD5ECDC, double 0x405F529314F92CD5, double 0x406D08D8D5A2DBD9, double 0x405D6B7ADA1884A9, double 0x4020BAB1F44E5192], align 16
@qr8 = internal constant [6 x double] [double 0.000000e+00, double 0xBFBA3FFFFFFFFDF3, double 0xC0304591A26779F7, double 0xC087BCD053E4B576, double 0xC0C724E740F87415, double 0xC0E7A6D065D09C6A], align 16
@qs8 = internal constant [6 x double] [double 0x40642CA6DE5BCDE5, double 0x40BE9162D0D88419, double 0x4100579AB0B75E98, double 0x4125F65372869C19, double 0x412457D27719AD5C, double 0xC111F9690EA5AA18], align 16
@qr5 = internal constant [6 x double] [double 0xBDB6FA431AA1A098, double 0xBFBA3FFFCB597FEF, double 0xC0201CE6CA03AD4B, double 0xC066F56D6CA7B9B0, double 0xC09574C66931734F, double 0xC0A468E388FDA79D], align 16
@qs5 = internal constant [6 x double] [double 0x405451B2FF5A11B2, double 0x409F1F31E77BF839, double 0x40D10F1F0D64CE29, double 0x40E8576DAABAD197, double 0x40DB4B04CF7C364B, double 0xC0B26F2EFCFFA004], align 16
@qr3 = internal constant [6 x double] [double 0xBE35CFA9D38FC84F, double 0xBFBA3FEB51AEED54, double 0xC01270C23302D9FF, double 0xC04CEC71C25D16DA, double 0xC06C87D34718D55F, double 0xC06B66B95F5C1BF6], align 16
@qs3 = internal constant [6 x double] [double 0x4047D523CCD367E4, double 0x40850EEBC031EE3E, double 0x40AA684E448E7C9A, double 0x40B5ABBAA61D54A6, double 0x409DBC7A0DD4DF4B, double 0xC060E670290A311F], align 16
@qr2 = internal constant [6 x double] [double 0xBE87F12644C626D2, double 0xBFBA3E8E9148B010, double 0xC006048469BB4EDA, double 0xC033A9E2C168907F, double 0xC04529A3DE104AAA, double 0xC0355F3639CF6E52], align 16
@qs2 = internal constant [6 x double] [double 0x403D888A78AE64FF, double 0x406F9F68DB821CBA, double 0x4087AC05CE49A0F7, double 0x40871B2548D4C029, double 0x40637E5E3C3ED8D4, double 0xC013D686E71BE86B], align 16

; Function Attrs: nounwind uwtable
define double @__ieee754_j1(double %x) #0 {
  %1 = alloca double, align 8
  %2 = alloca double, align 8
  %z = alloca double, align 8
  %s = alloca double, align 8
  %c = alloca double, align 8
  %ss = alloca double, align 8
  %cc = alloca double, align 8
  %r = alloca double, align 8
  %u = alloca double, align 8
  %v = alloca double, align 8
  %y = alloca double, align 8
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  store double %x, double* %2, align 8
  %3 = bitcast double* %2 to i32*
  %4 = getelementptr inbounds i32, i32* %3, i64 1
  %5 = load i32, i32* %4, align 4
  store i32 %5, i32* %hx, align 4
  %6 = load i32, i32* %hx, align 4
  %7 = and i32 %6, 2147483647
  store i32 %7, i32* %ix, align 4
  %8 = load i32, i32* %ix, align 4
  %9 = icmp sge i32 %8, 2146435072
  br i1 %9, label %10, label %13

; <label>:10                                      ; preds = %0
  %11 = load double, double* %2, align 8
  %12 = fdiv double 1.000000e+00, %11
  store double %12, double* %1
  br label %134

; <label>:13                                      ; preds = %0
  %14 = load double, double* %2, align 8
  %15 = call double @fabs(double %14) #4
  store double %15, double* %y, align 8
  %16 = load i32, i32* %ix, align 4
  %17 = icmp sge i32 %16, 1073741824
  br i1 %17, label %18, label %84

; <label>:18                                      ; preds = %13
  %19 = load double, double* %y, align 8
  %20 = call double @sin(double %19) #5
  store double %20, double* %s, align 8
  %21 = load double, double* %y, align 8
  %22 = call double @cos(double %21) #5
  store double %22, double* %c, align 8
  %23 = load double, double* %s, align 8
  %24 = fsub double -0.000000e+00, %23
  %25 = load double, double* %c, align 8
  %26 = fsub double %24, %25
  store double %26, double* %ss, align 8
  %27 = load double, double* %s, align 8
  %28 = load double, double* %c, align 8
  %29 = fsub double %27, %28
  store double %29, double* %cc, align 8
  %30 = load i32, i32* %ix, align 4
  %31 = icmp slt i32 %30, 2145386496
  br i1 %31, label %32, label %51

; <label>:32                                      ; preds = %18
  %33 = load double, double* %y, align 8
  %34 = load double, double* %y, align 8
  %35 = fadd double %33, %34
  %36 = call double @cos(double %35) #5
  store double %36, double* %z, align 8
  %37 = load double, double* %s, align 8
  %38 = load double, double* %c, align 8
  %39 = fmul double %37, %38
  %40 = load double, double* @zero, align 8
  %41 = fcmp ogt double %39, %40
  br i1 %41, label %42, label %46

; <label>:42                                      ; preds = %32
  %43 = load double, double* %z, align 8
  %44 = load double, double* %ss, align 8
  %45 = fdiv double %43, %44
  store double %45, double* %cc, align 8
  br label %50

; <label>:46                                      ; preds = %32
  %47 = load double, double* %z, align 8
  %48 = load double, double* %cc, align 8
  %49 = fdiv double %47, %48
  store double %49, double* %ss, align 8
  br label %50

; <label>:50                                      ; preds = %46, %42
  br label %51

; <label>:51                                      ; preds = %50, %18
  %52 = load i32, i32* %ix, align 4
  %53 = icmp sgt i32 %52, 1207959552
  br i1 %53, label %54, label %60

; <label>:54                                      ; preds = %51
  %55 = load double, double* %cc, align 8
  %56 = fmul double 0x3FE20DD750429B6D, %55
  %57 = load double, double* %y, align 8
  %58 = call double @sqrt(double %57) #5
  %59 = fdiv double %56, %58
  store double %59, double* %z, align 8
  br label %76

; <label>:60                                      ; preds = %51
  %61 = load double, double* %y, align 8
  %62 = call double @pone(double %61)
  store double %62, double* %u, align 8
  %63 = load double, double* %y, align 8
  %64 = call double @qone(double %63)
  store double %64, double* %v, align 8
  %65 = load double, double* %u, align 8
  %66 = load double, double* %cc, align 8
  %67 = fmul double %65, %66
  %68 = load double, double* %v, align 8
  %69 = load double, double* %ss, align 8
  %70 = fmul double %68, %69
  %71 = fsub double %67, %70
  %72 = fmul double 0x3FE20DD750429B6D, %71
  %73 = load double, double* %y, align 8
  %74 = call double @sqrt(double %73) #5
  %75 = fdiv double %72, %74
  store double %75, double* %z, align 8
  br label %76

; <label>:76                                      ; preds = %60, %54
  %77 = load i32, i32* %hx, align 4
  %78 = icmp slt i32 %77, 0
  br i1 %78, label %79, label %82

; <label>:79                                      ; preds = %76
  %80 = load double, double* %z, align 8
  %81 = fsub double -0.000000e+00, %80
  store double %81, double* %1
  br label %134

; <label>:82                                      ; preds = %76
  %83 = load double, double* %z, align 8
  store double %83, double* %1
  br label %134

; <label>:84                                      ; preds = %13
  %85 = load i32, i32* %ix, align 4
  %86 = icmp slt i32 %85, 1044381696
  br i1 %86, label %87, label %95

; <label>:87                                      ; preds = %84
  %88 = load double, double* %2, align 8
  %89 = fadd double 1.000000e+300, %88
  %90 = fcmp ogt double %89, 1.000000e+00
  br i1 %90, label %91, label %94

; <label>:91                                      ; preds = %87
  %92 = load double, double* %2, align 8
  %93 = fmul double 5.000000e-01, %92
  store double %93, double* %1
  br label %134

; <label>:94                                      ; preds = %87
  br label %95

; <label>:95                                      ; preds = %94, %84
  %96 = load double, double* %2, align 8
  %97 = load double, double* %2, align 8
  %98 = fmul double %96, %97
  store double %98, double* %z, align 8
  %99 = load double, double* %z, align 8
  %100 = load double, double* %z, align 8
  %101 = load double, double* %z, align 8
  %102 = load double, double* %z, align 8
  %103 = fmul double %102, 0x3E6AAAFA46CA0BD9
  %104 = fadd double 0xBEF0C5C6BA169668, %103
  %105 = fmul double %101, %104
  %106 = fadd double 0x3F570D9F98472C61, %105
  %107 = fmul double %100, %106
  %108 = fadd double -6.250000e-02, %107
  %109 = fmul double %99, %108
  store double %109, double* %r, align 8
  %110 = load double, double* %z, align 8
  %111 = load double, double* %z, align 8
  %112 = load double, double* %z, align 8
  %113 = load double, double* %z, align 8
  %114 = load double, double* %z, align 8
  %115 = fmul double %114, 0x3DAB2ACFCFB97ED8
  %116 = fadd double 0x3E35AC88C97DFF2C, %115
  %117 = fmul double %113, %116
  %118 = fadd double 0x3EB3BFF8333F8498, %117
  %119 = fmul double %112, %118
  %120 = fadd double 0x3F285F56B9CDF664, %119
  %121 = fmul double %111, %120
  %122 = fadd double 0x3F939D0B12637E53, %121
  %123 = fmul double %110, %122
  %124 = fadd double 1.000000e+00, %123
  store double %124, double* %s, align 8
  %125 = load double, double* %2, align 8
  %126 = load double, double* %r, align 8
  %127 = fmul double %126, %125
  store double %127, double* %r, align 8
  %128 = load double, double* %2, align 8
  %129 = fmul double %128, 5.000000e-01
  %130 = load double, double* %r, align 8
  %131 = load double, double* %s, align 8
  %132 = fdiv double %130, %131
  %133 = fadd double %129, %132
  store double %133, double* %1
  br label %134

; <label>:134                                     ; preds = %95, %91, %82, %79, %10
  %135 = load double, double* %1
  ret double %135
}

; Function Attrs: nounwind readnone
declare double @fabs(double) #1

; Function Attrs: nounwind
declare double @sin(double) #2

; Function Attrs: nounwind
declare double @cos(double) #2

; Function Attrs: nounwind
declare double @sqrt(double) #2

; Function Attrs: nounwind uwtable
define internal double @pone(double %x) #0 {
  %1 = alloca double, align 8
  %p = alloca double*, align 8
  %q = alloca double*, align 8
  %z = alloca double, align 8
  %r = alloca double, align 8
  %s = alloca double, align 8
  %ix = alloca i32, align 4
  store double %x, double* %1, align 8
  %2 = bitcast double* %1 to i32*
  %3 = getelementptr inbounds i32, i32* %2, i64 1
  %4 = load i32, i32* %3, align 4
  %5 = and i32 2147483647, %4
  store i32 %5, i32* %ix, align 4
  %6 = load i32, i32* %ix, align 4
  %7 = icmp sge i32 %6, 1075838976
  br i1 %7, label %8, label %9

; <label>:8                                       ; preds = %0
  store double* getelementptr inbounds ([6 x double], [6 x double]* @pr8, i32 0, i32 0), double** %p, align 8
  store double* getelementptr inbounds ([5 x double], [5 x double]* @ps8, i32 0, i32 0), double** %q, align 8
  br label %24

; <label>:9                                       ; preds = %0
  %10 = load i32, i32* %ix, align 4
  %11 = icmp sge i32 %10, 1074933387
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %9
  store double* getelementptr inbounds ([6 x double], [6 x double]* @pr5, i32 0, i32 0), double** %p, align 8
  store double* getelementptr inbounds ([5 x double], [5 x double]* @ps5, i32 0, i32 0), double** %q, align 8
  br label %23

; <label>:13                                      ; preds = %9
  %14 = load i32, i32* %ix, align 4
  %15 = icmp sge i32 %14, 1074191213
  br i1 %15, label %16, label %17

; <label>:16                                      ; preds = %13
  store double* getelementptr inbounds ([6 x double], [6 x double]* @pr3, i32 0, i32 0), double** %p, align 8
  store double* getelementptr inbounds ([5 x double], [5 x double]* @ps3, i32 0, i32 0), double** %q, align 8
  br label %22

; <label>:17                                      ; preds = %13
  %18 = load i32, i32* %ix, align 4
  %19 = icmp sge i32 %18, 1073741824
  br i1 %19, label %20, label %21

; <label>:20                                      ; preds = %17
  store double* getelementptr inbounds ([6 x double], [6 x double]* @pr2, i32 0, i32 0), double** %p, align 8
  store double* getelementptr inbounds ([5 x double], [5 x double]* @ps2, i32 0, i32 0), double** %q, align 8
  br label %21

; <label>:21                                      ; preds = %20, %17
  br label %22

; <label>:22                                      ; preds = %21, %16
  br label %23

; <label>:23                                      ; preds = %22, %12
  br label %24

; <label>:24                                      ; preds = %23, %8
  %25 = load double, double* %1, align 8
  %26 = load double, double* %1, align 8
  %27 = fmul double %25, %26
  %28 = fdiv double 1.000000e+00, %27
  store double %28, double* %z, align 8
  %29 = load double*, double** %p, align 8
  %30 = getelementptr inbounds double, double* %29, i64 0
  %31 = load double, double* %30, align 8
  %32 = load double, double* %z, align 8
  %33 = load double*, double** %p, align 8
  %34 = getelementptr inbounds double, double* %33, i64 1
  %35 = load double, double* %34, align 8
  %36 = load double, double* %z, align 8
  %37 = load double*, double** %p, align 8
  %38 = getelementptr inbounds double, double* %37, i64 2
  %39 = load double, double* %38, align 8
  %40 = load double, double* %z, align 8
  %41 = load double*, double** %p, align 8
  %42 = getelementptr inbounds double, double* %41, i64 3
  %43 = load double, double* %42, align 8
  %44 = load double, double* %z, align 8
  %45 = load double*, double** %p, align 8
  %46 = getelementptr inbounds double, double* %45, i64 4
  %47 = load double, double* %46, align 8
  %48 = load double, double* %z, align 8
  %49 = load double*, double** %p, align 8
  %50 = getelementptr inbounds double, double* %49, i64 5
  %51 = load double, double* %50, align 8
  %52 = fmul double %48, %51
  %53 = fadd double %47, %52
  %54 = fmul double %44, %53
  %55 = fadd double %43, %54
  %56 = fmul double %40, %55
  %57 = fadd double %39, %56
  %58 = fmul double %36, %57
  %59 = fadd double %35, %58
  %60 = fmul double %32, %59
  %61 = fadd double %31, %60
  store double %61, double* %r, align 8
  %62 = load double, double* %z, align 8
  %63 = load double*, double** %q, align 8
  %64 = getelementptr inbounds double, double* %63, i64 0
  %65 = load double, double* %64, align 8
  %66 = load double, double* %z, align 8
  %67 = load double*, double** %q, align 8
  %68 = getelementptr inbounds double, double* %67, i64 1
  %69 = load double, double* %68, align 8
  %70 = load double, double* %z, align 8
  %71 = load double*, double** %q, align 8
  %72 = getelementptr inbounds double, double* %71, i64 2
  %73 = load double, double* %72, align 8
  %74 = load double, double* %z, align 8
  %75 = load double*, double** %q, align 8
  %76 = getelementptr inbounds double, double* %75, i64 3
  %77 = load double, double* %76, align 8
  %78 = load double, double* %z, align 8
  %79 = load double*, double** %q, align 8
  %80 = getelementptr inbounds double, double* %79, i64 4
  %81 = load double, double* %80, align 8
  %82 = fmul double %78, %81
  %83 = fadd double %77, %82
  %84 = fmul double %74, %83
  %85 = fadd double %73, %84
  %86 = fmul double %70, %85
  %87 = fadd double %69, %86
  %88 = fmul double %66, %87
  %89 = fadd double %65, %88
  %90 = fmul double %62, %89
  %91 = fadd double 1.000000e+00, %90
  store double %91, double* %s, align 8
  %92 = load double, double* %r, align 8
  %93 = load double, double* %s, align 8
  %94 = fdiv double %92, %93
  %95 = fadd double 1.000000e+00, %94
  ret double %95
}

; Function Attrs: nounwind uwtable
define internal double @qone(double %x) #0 {
  %1 = alloca double, align 8
  %p = alloca double*, align 8
  %q = alloca double*, align 8
  %s = alloca double, align 8
  %r = alloca double, align 8
  %z = alloca double, align 8
  %ix = alloca i32, align 4
  store double %x, double* %1, align 8
  %2 = bitcast double* %1 to i32*
  %3 = getelementptr inbounds i32, i32* %2, i64 1
  %4 = load i32, i32* %3, align 4
  %5 = and i32 2147483647, %4
  store i32 %5, i32* %ix, align 4
  %6 = load i32, i32* %ix, align 4
  %7 = icmp sge i32 %6, 1075838976
  br i1 %7, label %8, label %9

; <label>:8                                       ; preds = %0
  store double* getelementptr inbounds ([6 x double], [6 x double]* @qr8, i32 0, i32 0), double** %p, align 8
  store double* getelementptr inbounds ([6 x double], [6 x double]* @qs8, i32 0, i32 0), double** %q, align 8
  br label %24

; <label>:9                                       ; preds = %0
  %10 = load i32, i32* %ix, align 4
  %11 = icmp sge i32 %10, 1074933387
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %9
  store double* getelementptr inbounds ([6 x double], [6 x double]* @qr5, i32 0, i32 0), double** %p, align 8
  store double* getelementptr inbounds ([6 x double], [6 x double]* @qs5, i32 0, i32 0), double** %q, align 8
  br label %23

; <label>:13                                      ; preds = %9
  %14 = load i32, i32* %ix, align 4
  %15 = icmp sge i32 %14, 1074191213
  br i1 %15, label %16, label %17

; <label>:16                                      ; preds = %13
  store double* getelementptr inbounds ([6 x double], [6 x double]* @qr3, i32 0, i32 0), double** %p, align 8
  store double* getelementptr inbounds ([6 x double], [6 x double]* @qs3, i32 0, i32 0), double** %q, align 8
  br label %22

; <label>:17                                      ; preds = %13
  %18 = load i32, i32* %ix, align 4
  %19 = icmp sge i32 %18, 1073741824
  br i1 %19, label %20, label %21

; <label>:20                                      ; preds = %17
  store double* getelementptr inbounds ([6 x double], [6 x double]* @qr2, i32 0, i32 0), double** %p, align 8
  store double* getelementptr inbounds ([6 x double], [6 x double]* @qs2, i32 0, i32 0), double** %q, align 8
  br label %21

; <label>:21                                      ; preds = %20, %17
  br label %22

; <label>:22                                      ; preds = %21, %16
  br label %23

; <label>:23                                      ; preds = %22, %12
  br label %24

; <label>:24                                      ; preds = %23, %8
  %25 = load double, double* %1, align 8
  %26 = load double, double* %1, align 8
  %27 = fmul double %25, %26
  %28 = fdiv double 1.000000e+00, %27
  store double %28, double* %z, align 8
  %29 = load double*, double** %p, align 8
  %30 = getelementptr inbounds double, double* %29, i64 0
  %31 = load double, double* %30, align 8
  %32 = load double, double* %z, align 8
  %33 = load double*, double** %p, align 8
  %34 = getelementptr inbounds double, double* %33, i64 1
  %35 = load double, double* %34, align 8
  %36 = load double, double* %z, align 8
  %37 = load double*, double** %p, align 8
  %38 = getelementptr inbounds double, double* %37, i64 2
  %39 = load double, double* %38, align 8
  %40 = load double, double* %z, align 8
  %41 = load double*, double** %p, align 8
  %42 = getelementptr inbounds double, double* %41, i64 3
  %43 = load double, double* %42, align 8
  %44 = load double, double* %z, align 8
  %45 = load double*, double** %p, align 8
  %46 = getelementptr inbounds double, double* %45, i64 4
  %47 = load double, double* %46, align 8
  %48 = load double, double* %z, align 8
  %49 = load double*, double** %p, align 8
  %50 = getelementptr inbounds double, double* %49, i64 5
  %51 = load double, double* %50, align 8
  %52 = fmul double %48, %51
  %53 = fadd double %47, %52
  %54 = fmul double %44, %53
  %55 = fadd double %43, %54
  %56 = fmul double %40, %55
  %57 = fadd double %39, %56
  %58 = fmul double %36, %57
  %59 = fadd double %35, %58
  %60 = fmul double %32, %59
  %61 = fadd double %31, %60
  store double %61, double* %r, align 8
  %62 = load double, double* %z, align 8
  %63 = load double*, double** %q, align 8
  %64 = getelementptr inbounds double, double* %63, i64 0
  %65 = load double, double* %64, align 8
  %66 = load double, double* %z, align 8
  %67 = load double*, double** %q, align 8
  %68 = getelementptr inbounds double, double* %67, i64 1
  %69 = load double, double* %68, align 8
  %70 = load double, double* %z, align 8
  %71 = load double*, double** %q, align 8
  %72 = getelementptr inbounds double, double* %71, i64 2
  %73 = load double, double* %72, align 8
  %74 = load double, double* %z, align 8
  %75 = load double*, double** %q, align 8
  %76 = getelementptr inbounds double, double* %75, i64 3
  %77 = load double, double* %76, align 8
  %78 = load double, double* %z, align 8
  %79 = load double*, double** %q, align 8
  %80 = getelementptr inbounds double, double* %79, i64 4
  %81 = load double, double* %80, align 8
  %82 = load double, double* %z, align 8
  %83 = load double*, double** %q, align 8
  %84 = getelementptr inbounds double, double* %83, i64 5
  %85 = load double, double* %84, align 8
  %86 = fmul double %82, %85
  %87 = fadd double %81, %86
  %88 = fmul double %78, %87
  %89 = fadd double %77, %88
  %90 = fmul double %74, %89
  %91 = fadd double %73, %90
  %92 = fmul double %70, %91
  %93 = fadd double %69, %92
  %94 = fmul double %66, %93
  %95 = fadd double %65, %94
  %96 = fmul double %62, %95
  %97 = fadd double 1.000000e+00, %96
  store double %97, double* %s, align 8
  %98 = load double, double* %r, align 8
  %99 = load double, double* %s, align 8
  %100 = fdiv double %98, %99
  %101 = fadd double 3.750000e-01, %100
  %102 = load double, double* %1, align 8
  %103 = fdiv double %101, %102
  ret double %103
}

; Function Attrs: nounwind uwtable
define double @__ieee754_y1(double %x) #0 {
  %1 = alloca double, align 8
  %2 = alloca double, align 8
  %z = alloca double, align 8
  %s = alloca double, align 8
  %c = alloca double, align 8
  %ss = alloca double, align 8
  %cc = alloca double, align 8
  %u = alloca double, align 8
  %v = alloca double, align 8
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  %lx = alloca i32, align 4
  store double %x, double* %2, align 8
  %3 = bitcast double* %2 to i32*
  %4 = getelementptr inbounds i32, i32* %3, i64 1
  %5 = load i32, i32* %4, align 4
  store i32 %5, i32* %hx, align 4
  %6 = load i32, i32* %hx, align 4
  %7 = and i32 2147483647, %6
  store i32 %7, i32* %ix, align 4
  %8 = bitcast double* %2 to i32*
  %9 = load i32, i32* %8, align 4
  store i32 %9, i32* %lx, align 4
  %10 = load i32, i32* %ix, align 4
  %11 = icmp sge i32 %10, 2146435072
  br i1 %11, label %12, label %19

; <label>:12                                      ; preds = %0
  %13 = load double, double* %2, align 8
  %14 = load double, double* %2, align 8
  %15 = load double, double* %2, align 8
  %16 = fmul double %14, %15
  %17 = fadd double %13, %16
  %18 = fdiv double 1.000000e+00, %17
  store double %18, double* %1
  br label %159

; <label>:19                                      ; preds = %0
  %20 = load i32, i32* %ix, align 4
  %21 = load i32, i32* %lx, align 4
  %22 = or i32 %20, %21
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %27

; <label>:24                                      ; preds = %19
  %25 = load double, double* @zero, align 8
  %26 = fdiv double -1.000000e+00, %25
  store double %26, double* %1
  br label %159

; <label>:27                                      ; preds = %19
  %28 = load i32, i32* %hx, align 4
  %29 = icmp slt i32 %28, 0
  br i1 %29, label %30, label %34

; <label>:30                                      ; preds = %27
  %31 = load double, double* @zero, align 8
  %32 = load double, double* @zero, align 8
  %33 = fdiv double %31, %32
  store double %33, double* %1
  br label %159

; <label>:34                                      ; preds = %27
  %35 = load i32, i32* %ix, align 4
  %36 = icmp sge i32 %35, 1073741824
  br i1 %36, label %37, label %97

; <label>:37                                      ; preds = %34
  %38 = load double, double* %2, align 8
  %39 = call double @sin(double %38) #5
  store double %39, double* %s, align 8
  %40 = load double, double* %2, align 8
  %41 = call double @cos(double %40) #5
  store double %41, double* %c, align 8
  %42 = load double, double* %s, align 8
  %43 = fsub double -0.000000e+00, %42
  %44 = load double, double* %c, align 8
  %45 = fsub double %43, %44
  store double %45, double* %ss, align 8
  %46 = load double, double* %s, align 8
  %47 = load double, double* %c, align 8
  %48 = fsub double %46, %47
  store double %48, double* %cc, align 8
  %49 = load i32, i32* %ix, align 4
  %50 = icmp slt i32 %49, 2145386496
  br i1 %50, label %51, label %70

; <label>:51                                      ; preds = %37
  %52 = load double, double* %2, align 8
  %53 = load double, double* %2, align 8
  %54 = fadd double %52, %53
  %55 = call double @cos(double %54) #5
  store double %55, double* %z, align 8
  %56 = load double, double* %s, align 8
  %57 = load double, double* %c, align 8
  %58 = fmul double %56, %57
  %59 = load double, double* @zero, align 8
  %60 = fcmp ogt double %58, %59
  br i1 %60, label %61, label %65

; <label>:61                                      ; preds = %51
  %62 = load double, double* %z, align 8
  %63 = load double, double* %ss, align 8
  %64 = fdiv double %62, %63
  store double %64, double* %cc, align 8
  br label %69

; <label>:65                                      ; preds = %51
  %66 = load double, double* %z, align 8
  %67 = load double, double* %cc, align 8
  %68 = fdiv double %66, %67
  store double %68, double* %ss, align 8
  br label %69

; <label>:69                                      ; preds = %65, %61
  br label %70

; <label>:70                                      ; preds = %69, %37
  %71 = load i32, i32* %ix, align 4
  %72 = icmp sgt i32 %71, 1207959552
  br i1 %72, label %73, label %79

; <label>:73                                      ; preds = %70
  %74 = load double, double* %ss, align 8
  %75 = fmul double 0x3FE20DD750429B6D, %74
  %76 = load double, double* %2, align 8
  %77 = call double @sqrt(double %76) #5
  %78 = fdiv double %75, %77
  store double %78, double* %z, align 8
  br label %95

; <label>:79                                      ; preds = %70
  %80 = load double, double* %2, align 8
  %81 = call double @pone(double %80)
  store double %81, double* %u, align 8
  %82 = load double, double* %2, align 8
  %83 = call double @qone(double %82)
  store double %83, double* %v, align 8
  %84 = load double, double* %u, align 8
  %85 = load double, double* %ss, align 8
  %86 = fmul double %84, %85
  %87 = load double, double* %v, align 8
  %88 = load double, double* %cc, align 8
  %89 = fmul double %87, %88
  %90 = fadd double %86, %89
  %91 = fmul double 0x3FE20DD750429B6D, %90
  %92 = load double, double* %2, align 8
  %93 = call double @sqrt(double %92) #5
  %94 = fdiv double %91, %93
  store double %94, double* %z, align 8
  br label %95

; <label>:95                                      ; preds = %79, %73
  %96 = load double, double* %z, align 8
  store double %96, double* %1
  br label %159

; <label>:97                                      ; preds = %34
  %98 = load i32, i32* %ix, align 4
  %99 = icmp sle i32 %98, 1016070144
  br i1 %99, label %100, label %103

; <label>:100                                     ; preds = %97
  %101 = load double, double* %2, align 8
  %102 = fdiv double 0xBFE45F306DC9C883, %101
  store double %102, double* %1
  br label %159

; <label>:103                                     ; preds = %97
  %104 = load double, double* %2, align 8
  %105 = load double, double* %2, align 8
  %106 = fmul double %104, %105
  store double %106, double* %z, align 8
  %107 = load double, double* getelementptr inbounds ([5 x double], [5 x double]* @U0, i32 0, i64 0), align 8
  %108 = load double, double* %z, align 8
  %109 = load double, double* getelementptr inbounds ([5 x double], [5 x double]* @U0, i32 0, i64 1), align 8
  %110 = load double, double* %z, align 8
  %111 = load double, double* getelementptr inbounds ([5 x double], [5 x double]* @U0, i32 0, i64 2), align 8
  %112 = load double, double* %z, align 8
  %113 = load double, double* getelementptr inbounds ([5 x double], [5 x double]* @U0, i32 0, i64 3), align 8
  %114 = load double, double* %z, align 8
  %115 = load double, double* getelementptr inbounds ([5 x double], [5 x double]* @U0, i32 0, i64 4), align 8
  %116 = fmul double %114, %115
  %117 = fadd double %113, %116
  %118 = fmul double %112, %117
  %119 = fadd double %111, %118
  %120 = fmul double %110, %119
  %121 = fadd double %109, %120
  %122 = fmul double %108, %121
  %123 = fadd double %107, %122
  store double %123, double* %u, align 8
  %124 = load double, double* %z, align 8
  %125 = load double, double* getelementptr inbounds ([5 x double], [5 x double]* @V0, i32 0, i64 0), align 8
  %126 = load double, double* %z, align 8
  %127 = load double, double* getelementptr inbounds ([5 x double], [5 x double]* @V0, i32 0, i64 1), align 8
  %128 = load double, double* %z, align 8
  %129 = load double, double* getelementptr inbounds ([5 x double], [5 x double]* @V0, i32 0, i64 2), align 8
  %130 = load double, double* %z, align 8
  %131 = load double, double* getelementptr inbounds ([5 x double], [5 x double]* @V0, i32 0, i64 3), align 8
  %132 = load double, double* %z, align 8
  %133 = load double, double* getelementptr inbounds ([5 x double], [5 x double]* @V0, i32 0, i64 4), align 8
  %134 = fmul double %132, %133
  %135 = fadd double %131, %134
  %136 = fmul double %130, %135
  %137 = fadd double %129, %136
  %138 = fmul double %128, %137
  %139 = fadd double %127, %138
  %140 = fmul double %126, %139
  %141 = fadd double %125, %140
  %142 = fmul double %124, %141
  %143 = fadd double 1.000000e+00, %142
  store double %143, double* %v, align 8
  %144 = load double, double* %2, align 8
  %145 = load double, double* %u, align 8
  %146 = load double, double* %v, align 8
  %147 = fdiv double %145, %146
  %148 = fmul double %144, %147
  %149 = load double, double* %2, align 8
  %150 = call double @__ieee754_j1(double %149)
  %151 = load double, double* %2, align 8
  %152 = call double @__ieee754_log(double %151)
  %153 = fmul double %150, %152
  %154 = load double, double* %2, align 8
  %155 = fdiv double 1.000000e+00, %154
  %156 = fsub double %153, %155
  %157 = fmul double 0x3FE45F306DC9C883, %156
  %158 = fadd double %148, %157
  store double %158, double* %1
  br label %159

; <label>:159                                     ; preds = %103, %100, %95, %30, %24, %12
  %160 = load double, double* %1
  ret double %160
}

declare double @__ieee754_log(double) #3

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Ubuntu clang version 3.7.0-2ubuntu1 (tags/RELEASE_370/final) (based on LLVM 3.7.0)"}
