; ModuleID = '../netlib/s_nextafter.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: nounwind uwtable
define double @nextafter(double %x, double %y) #0 {
  %1 = alloca double, align 8
  %2 = alloca double, align 8
  %3 = alloca double, align 8
  %hx = alloca i32, align 4
  %hy = alloca i32, align 4
  %ix = alloca i32, align 4
  %iy = alloca i32, align 4
  %lx = alloca i32, align 4
  %ly = alloca i32, align 4
  store double %x, double* %2, align 8
  store double %y, double* %3, align 8
  %4 = bitcast double* %2 to i32*
  %5 = getelementptr inbounds i32, i32* %4, i64 1
  %6 = load i32, i32* %5, align 4
  store i32 %6, i32* %hx, align 4
  %7 = bitcast double* %2 to i32*
  %8 = load i32, i32* %7, align 4
  store i32 %8, i32* %lx, align 4
  %9 = bitcast double* %3 to i32*
  %10 = getelementptr inbounds i32, i32* %9, i64 1
  %11 = load i32, i32* %10, align 4
  store i32 %11, i32* %hy, align 4
  %12 = bitcast double* %3 to i32*
  %13 = load i32, i32* %12, align 4
  store i32 %13, i32* %ly, align 4
  %14 = load i32, i32* %hx, align 4
  %15 = and i32 %14, 2147483647
  store i32 %15, i32* %ix, align 4
  %16 = load i32, i32* %hy, align 4
  %17 = and i32 %16, 2147483647
  store i32 %17, i32* %iy, align 4
  %18 = load i32, i32* %ix, align 4
  %19 = icmp sge i32 %18, 2146435072
  br i1 %19, label %20, label %26

; <label>:20                                      ; preds = %0
  %21 = load i32, i32* %ix, align 4
  %22 = sub nsw i32 %21, 2146435072
  %23 = load i32, i32* %lx, align 4
  %24 = or i32 %22, %23
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %35, label %26

; <label>:26                                      ; preds = %20, %0
  %27 = load i32, i32* %iy, align 4
  %28 = icmp sge i32 %27, 2146435072
  br i1 %28, label %29, label %39

; <label>:29                                      ; preds = %26
  %30 = load i32, i32* %iy, align 4
  %31 = sub nsw i32 %30, 2146435072
  %32 = load i32, i32* %ly, align 4
  %33 = or i32 %31, %32
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %35, label %39

; <label>:35                                      ; preds = %29, %20
  %36 = load double, double* %2, align 8
  %37 = load double, double* %3, align 8
  %38 = fadd double %36, %37
  store double %38, double* %1
  br label %168

; <label>:39                                      ; preds = %29, %26
  %40 = load double, double* %2, align 8
  %41 = load double, double* %3, align 8
  %42 = fcmp oeq double %40, %41
  br i1 %42, label %43, label %45

; <label>:43                                      ; preds = %39
  %44 = load double, double* %2, align 8
  store double %44, double* %1
  br label %168

; <label>:45                                      ; preds = %39
  %46 = load i32, i32* %ix, align 4
  %47 = load i32, i32* %lx, align 4
  %48 = or i32 %46, %47
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %66

; <label>:50                                      ; preds = %45
  %51 = load i32, i32* %hy, align 4
  %52 = and i32 %51, -2147483648
  %53 = bitcast double* %2 to i32*
  %54 = getelementptr inbounds i32, i32* %53, i64 1
  store i32 %52, i32* %54, align 4
  %55 = bitcast double* %2 to i32*
  store i32 1, i32* %55, align 4
  %56 = load double, double* %2, align 8
  %57 = load double, double* %2, align 8
  %58 = fmul double %56, %57
  store double %58, double* %3, align 8
  %59 = load double, double* %3, align 8
  %60 = load double, double* %2, align 8
  %61 = fcmp oeq double %59, %60
  br i1 %61, label %62, label %64

; <label>:62                                      ; preds = %50
  %63 = load double, double* %3, align 8
  store double %63, double* %1
  br label %168

; <label>:64                                      ; preds = %50
  %65 = load double, double* %2, align 8
  store double %65, double* %1
  br label %168

; <label>:66                                      ; preds = %45
  %67 = load i32, i32* %hx, align 4
  %68 = icmp sge i32 %67, 0
  br i1 %68, label %69, label %100

; <label>:69                                      ; preds = %66
  %70 = load i32, i32* %hx, align 4
  %71 = load i32, i32* %hy, align 4
  %72 = icmp sgt i32 %70, %71
  br i1 %72, label %81, label %73

; <label>:73                                      ; preds = %69
  %74 = load i32, i32* %hx, align 4
  %75 = load i32, i32* %hy, align 4
  %76 = icmp eq i32 %74, %75
  br i1 %76, label %77, label %90

; <label>:77                                      ; preds = %73
  %78 = load i32, i32* %lx, align 4
  %79 = load i32, i32* %ly, align 4
  %80 = icmp ugt i32 %78, %79
  br i1 %80, label %81, label %90

; <label>:81                                      ; preds = %77, %69
  %82 = load i32, i32* %lx, align 4
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %87

; <label>:84                                      ; preds = %81
  %85 = load i32, i32* %hx, align 4
  %86 = sub nsw i32 %85, 1
  store i32 %86, i32* %hx, align 4
  br label %87

; <label>:87                                      ; preds = %84, %81
  %88 = load i32, i32* %lx, align 4
  %89 = sub i32 %88, 1
  store i32 %89, i32* %lx, align 4
  br label %99

; <label>:90                                      ; preds = %77, %73
  %91 = load i32, i32* %lx, align 4
  %92 = add i32 %91, 1
  store i32 %92, i32* %lx, align 4
  %93 = load i32, i32* %lx, align 4
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %98

; <label>:95                                      ; preds = %90
  %96 = load i32, i32* %hx, align 4
  %97 = add nsw i32 %96, 1
  store i32 %97, i32* %hx, align 4
  br label %98

; <label>:98                                      ; preds = %95, %90
  br label %99

; <label>:99                                      ; preds = %98, %87
  br label %134

; <label>:100                                     ; preds = %66
  %101 = load i32, i32* %hy, align 4
  %102 = icmp sge i32 %101, 0
  br i1 %102, label %115, label %103

; <label>:103                                     ; preds = %100
  %104 = load i32, i32* %hx, align 4
  %105 = load i32, i32* %hy, align 4
  %106 = icmp sgt i32 %104, %105
  br i1 %106, label %115, label %107

; <label>:107                                     ; preds = %103
  %108 = load i32, i32* %hx, align 4
  %109 = load i32, i32* %hy, align 4
  %110 = icmp eq i32 %108, %109
  br i1 %110, label %111, label %124

; <label>:111                                     ; preds = %107
  %112 = load i32, i32* %lx, align 4
  %113 = load i32, i32* %ly, align 4
  %114 = icmp ugt i32 %112, %113
  br i1 %114, label %115, label %124

; <label>:115                                     ; preds = %111, %103, %100
  %116 = load i32, i32* %lx, align 4
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %118, label %121

; <label>:118                                     ; preds = %115
  %119 = load i32, i32* %hx, align 4
  %120 = sub nsw i32 %119, 1
  store i32 %120, i32* %hx, align 4
  br label %121

; <label>:121                                     ; preds = %118, %115
  %122 = load i32, i32* %lx, align 4
  %123 = sub i32 %122, 1
  store i32 %123, i32* %lx, align 4
  br label %133

; <label>:124                                     ; preds = %111, %107
  %125 = load i32, i32* %lx, align 4
  %126 = add i32 %125, 1
  store i32 %126, i32* %lx, align 4
  %127 = load i32, i32* %lx, align 4
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %129, label %132

; <label>:129                                     ; preds = %124
  %130 = load i32, i32* %hx, align 4
  %131 = add nsw i32 %130, 1
  store i32 %131, i32* %hx, align 4
  br label %132

; <label>:132                                     ; preds = %129, %124
  br label %133

; <label>:133                                     ; preds = %132, %121
  br label %134

; <label>:134                                     ; preds = %133, %99
  %135 = load i32, i32* %hx, align 4
  %136 = and i32 %135, 2146435072
  store i32 %136, i32* %hy, align 4
  %137 = load i32, i32* %hy, align 4
  %138 = icmp sge i32 %137, 2146435072
  br i1 %138, label %139, label %143

; <label>:139                                     ; preds = %134
  %140 = load double, double* %2, align 8
  %141 = load double, double* %2, align 8
  %142 = fadd double %140, %141
  store double %142, double* %1
  br label %168

; <label>:143                                     ; preds = %134
  %144 = load i32, i32* %hy, align 4
  %145 = icmp slt i32 %144, 1048576
  br i1 %145, label %146, label %161

; <label>:146                                     ; preds = %143
  %147 = load double, double* %2, align 8
  %148 = load double, double* %2, align 8
  %149 = fmul double %147, %148
  store double %149, double* %3, align 8
  %150 = load double, double* %3, align 8
  %151 = load double, double* %2, align 8
  %152 = fcmp une double %150, %151
  br i1 %152, label %153, label %160

; <label>:153                                     ; preds = %146
  %154 = load i32, i32* %hx, align 4
  %155 = bitcast double* %3 to i32*
  %156 = getelementptr inbounds i32, i32* %155, i64 1
  store i32 %154, i32* %156, align 4
  %157 = load i32, i32* %lx, align 4
  %158 = bitcast double* %3 to i32*
  store i32 %157, i32* %158, align 4
  %159 = load double, double* %3, align 8
  store double %159, double* %1
  br label %168

; <label>:160                                     ; preds = %146
  br label %161

; <label>:161                                     ; preds = %160, %143
  %162 = load i32, i32* %hx, align 4
  %163 = bitcast double* %2 to i32*
  %164 = getelementptr inbounds i32, i32* %163, i64 1
  store i32 %162, i32* %164, align 4
  %165 = load i32, i32* %lx, align 4
  %166 = bitcast double* %2 to i32*
  store i32 %165, i32* %166, align 4
  %167 = load double, double* %2, align 8
  store double %167, double* %1
  br label %168

; <label>:168                                     ; preds = %161, %153, %139, %64, %62, %43, %35
  %169 = load double, double* %1
  ret double %169
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"Ubuntu clang version 3.7.0-2ubuntu1 (tags/RELEASE_370/final) (based on LLVM 3.7.0)"}
