; ModuleID = '../netlib/k_tan.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@xxx = internal constant [16 x double] [double 0x3FD5555555555563, double 0x3FC111111110FE7A, double 0x3FABA1BA1BB341FE, double 0x3F9664F48406D637, double 0x3F8226E3E96E8493, double 0x3F6D6D22C9560328, double 0x3F57DBC8FEE08315, double 0x3F4344D8F2F26501, double 0x3F3026F71A8D1068, double 0x3F147E88A03792A6, double 0x3F12B80F32F0A7E9, double 0xBEF375CBDB605373, double 0x3EFB2A7074BF7AD4, double 1.000000e+00, double 0x3FE921FB54442D18, double 0x3C81A62633145C07], align 16

; Function Attrs: nounwind uwtable
define double @__kernel_tan(double %x, double %y, i32 %iy) #0 {
  %1 = alloca double, align 8
  %2 = alloca double, align 8
  %3 = alloca double, align 8
  %4 = alloca i32, align 4
  %z = alloca double, align 8
  %r = alloca double, align 8
  %v = alloca double, align 8
  %w = alloca double, align 8
  %s = alloca double, align 8
  %ix = alloca i32, align 4
  %hx = alloca i32, align 4
  %a = alloca double, align 8
  %t = alloca double, align 8
  %a1 = alloca double, align 8
  %t2 = alloca double, align 8
  store double %x, double* %2, align 8
  store double %y, double* %3, align 8
  store i32 %iy, i32* %4, align 4
  %5 = bitcast double* %2 to i32*
  %6 = getelementptr inbounds i32, i32* %5, i64 1
  %7 = load i32, i32* %6, align 4
  store i32 %7, i32* %hx, align 4
  %8 = load i32, i32* %hx, align 4
  %9 = and i32 %8, 2147483647
  store i32 %9, i32* %ix, align 4
  %10 = load i32, i32* %ix, align 4
  %11 = icmp slt i32 %10, 1043333120
  br i1 %11, label %12, label %65

; <label>:12                                      ; preds = %0
  %13 = load double, double* %2, align 8
  %14 = fptosi double %13 to i32
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %64

; <label>:16                                      ; preds = %12
  %17 = load i32, i32* %ix, align 4
  %18 = bitcast double* %2 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = or i32 %17, %19
  %21 = load i32, i32* %4, align 4
  %22 = add nsw i32 %21, 1
  %23 = or i32 %20, %22
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %30

; <label>:25                                      ; preds = %16
  %26 = load double, double* getelementptr inbounds ([16 x double], [16 x double]* @xxx, i32 0, i64 13), align 8
  %27 = load double, double* %2, align 8
  %28 = call double @fabs(double %27) #2
  %29 = fdiv double %26, %28
  store double %29, double* %1
  br label %213

; <label>:30                                      ; preds = %16
  %31 = load i32, i32* %4, align 4
  %32 = icmp eq i32 %31, 1
  br i1 %32, label %33, label %35

; <label>:33                                      ; preds = %30
  %34 = load double, double* %2, align 8
  store double %34, double* %1
  br label %213

; <label>:35                                      ; preds = %30
  %36 = load double, double* %2, align 8
  %37 = load double, double* %3, align 8
  %38 = fadd double %36, %37
  store double %38, double* %w, align 8
  store double %38, double* %z, align 8
  %39 = bitcast double* %z to i32*
  store i32 0, i32* %39, align 4
  %40 = load double, double* %3, align 8
  %41 = load double, double* %z, align 8
  %42 = load double, double* %2, align 8
  %43 = fsub double %41, %42
  %44 = fsub double %40, %43
  store double %44, double* %v, align 8
  %45 = load double, double* getelementptr inbounds ([16 x double], [16 x double]* @xxx, i32 0, i64 13), align 8
  %46 = fsub double -0.000000e+00, %45
  %47 = load double, double* %w, align 8
  %48 = fdiv double %46, %47
  store double %48, double* %a, align 8
  store double %48, double* %t, align 8
  %49 = bitcast double* %t to i32*
  store i32 0, i32* %49, align 4
  %50 = load double, double* getelementptr inbounds ([16 x double], [16 x double]* @xxx, i32 0, i64 13), align 8
  %51 = load double, double* %t, align 8
  %52 = load double, double* %z, align 8
  %53 = fmul double %51, %52
  %54 = fadd double %50, %53
  store double %54, double* %s, align 8
  %55 = load double, double* %t, align 8
  %56 = load double, double* %a, align 8
  %57 = load double, double* %s, align 8
  %58 = load double, double* %t, align 8
  %59 = load double, double* %v, align 8
  %60 = fmul double %58, %59
  %61 = fadd double %57, %60
  %62 = fmul double %56, %61
  %63 = fadd double %55, %62
  store double %63, double* %1
  br label %213

; <label>:64                                      ; preds = %12
  br label %65

; <label>:65                                      ; preds = %64, %0
  %66 = load i32, i32* %ix, align 4
  %67 = icmp sge i32 %66, 1072010280
  br i1 %67, label %68, label %86

; <label>:68                                      ; preds = %65
  %69 = load i32, i32* %hx, align 4
  %70 = icmp slt i32 %69, 0
  br i1 %70, label %71, label %76

; <label>:71                                      ; preds = %68
  %72 = load double, double* %2, align 8
  %73 = fsub double -0.000000e+00, %72
  store double %73, double* %2, align 8
  %74 = load double, double* %3, align 8
  %75 = fsub double -0.000000e+00, %74
  store double %75, double* %3, align 8
  br label %76

; <label>:76                                      ; preds = %71, %68
  %77 = load double, double* getelementptr inbounds ([16 x double], [16 x double]* @xxx, i32 0, i64 14), align 8
  %78 = load double, double* %2, align 8
  %79 = fsub double %77, %78
  store double %79, double* %z, align 8
  %80 = load double, double* getelementptr inbounds ([16 x double], [16 x double]* @xxx, i32 0, i64 15), align 8
  %81 = load double, double* %3, align 8
  %82 = fsub double %80, %81
  store double %82, double* %w, align 8
  %83 = load double, double* %z, align 8
  %84 = load double, double* %w, align 8
  %85 = fadd double %83, %84
  store double %85, double* %2, align 8
  store double 0.000000e+00, double* %3, align 8
  br label %86

; <label>:86                                      ; preds = %76, %65
  %87 = load double, double* %2, align 8
  %88 = load double, double* %2, align 8
  %89 = fmul double %87, %88
  store double %89, double* %z, align 8
  %90 = load double, double* %z, align 8
  %91 = load double, double* %z, align 8
  %92 = fmul double %90, %91
  store double %92, double* %w, align 8
  %93 = load double, double* getelementptr inbounds ([16 x double], [16 x double]* @xxx, i32 0, i64 1), align 8
  %94 = load double, double* %w, align 8
  %95 = load double, double* getelementptr inbounds ([16 x double], [16 x double]* @xxx, i32 0, i64 3), align 8
  %96 = load double, double* %w, align 8
  %97 = load double, double* getelementptr inbounds ([16 x double], [16 x double]* @xxx, i32 0, i64 5), align 8
  %98 = load double, double* %w, align 8
  %99 = load double, double* getelementptr inbounds ([16 x double], [16 x double]* @xxx, i32 0, i64 7), align 8
  %100 = load double, double* %w, align 8
  %101 = load double, double* getelementptr inbounds ([16 x double], [16 x double]* @xxx, i32 0, i64 9), align 8
  %102 = load double, double* %w, align 8
  %103 = load double, double* getelementptr inbounds ([16 x double], [16 x double]* @xxx, i32 0, i64 11), align 8
  %104 = fmul double %102, %103
  %105 = fadd double %101, %104
  %106 = fmul double %100, %105
  %107 = fadd double %99, %106
  %108 = fmul double %98, %107
  %109 = fadd double %97, %108
  %110 = fmul double %96, %109
  %111 = fadd double %95, %110
  %112 = fmul double %94, %111
  %113 = fadd double %93, %112
  store double %113, double* %r, align 8
  %114 = load double, double* %z, align 8
  %115 = load double, double* getelementptr inbounds ([16 x double], [16 x double]* @xxx, i32 0, i64 2), align 8
  %116 = load double, double* %w, align 8
  %117 = load double, double* getelementptr inbounds ([16 x double], [16 x double]* @xxx, i32 0, i64 4), align 8
  %118 = load double, double* %w, align 8
  %119 = load double, double* getelementptr inbounds ([16 x double], [16 x double]* @xxx, i32 0, i64 6), align 8
  %120 = load double, double* %w, align 8
  %121 = load double, double* getelementptr inbounds ([16 x double], [16 x double]* @xxx, i32 0, i64 8), align 8
  %122 = load double, double* %w, align 8
  %123 = load double, double* getelementptr inbounds ([16 x double], [16 x double]* @xxx, i32 0, i64 10), align 8
  %124 = load double, double* %w, align 8
  %125 = load double, double* getelementptr inbounds ([16 x double], [16 x double]* @xxx, i32 0, i64 12), align 8
  %126 = fmul double %124, %125
  %127 = fadd double %123, %126
  %128 = fmul double %122, %127
  %129 = fadd double %121, %128
  %130 = fmul double %120, %129
  %131 = fadd double %119, %130
  %132 = fmul double %118, %131
  %133 = fadd double %117, %132
  %134 = fmul double %116, %133
  %135 = fadd double %115, %134
  %136 = fmul double %114, %135
  store double %136, double* %v, align 8
  %137 = load double, double* %z, align 8
  %138 = load double, double* %2, align 8
  %139 = fmul double %137, %138
  store double %139, double* %s, align 8
  %140 = load double, double* %3, align 8
  %141 = load double, double* %z, align 8
  %142 = load double, double* %s, align 8
  %143 = load double, double* %r, align 8
  %144 = load double, double* %v, align 8
  %145 = fadd double %143, %144
  %146 = fmul double %142, %145
  %147 = load double, double* %3, align 8
  %148 = fadd double %146, %147
  %149 = fmul double %141, %148
  %150 = fadd double %140, %149
  store double %150, double* %r, align 8
  %151 = load double, double* getelementptr inbounds ([16 x double], [16 x double]* @xxx, i32 0, i64 0), align 8
  %152 = load double, double* %s, align 8
  %153 = fmul double %151, %152
  %154 = load double, double* %r, align 8
  %155 = fadd double %154, %153
  store double %155, double* %r, align 8
  %156 = load double, double* %2, align 8
  %157 = load double, double* %r, align 8
  %158 = fadd double %156, %157
  store double %158, double* %w, align 8
  %159 = load i32, i32* %ix, align 4
  %160 = icmp sge i32 %159, 1072010280
  br i1 %160, label %161, label %184

; <label>:161                                     ; preds = %86
  %162 = load i32, i32* %4, align 4
  %163 = sitofp i32 %162 to double
  store double %163, double* %v, align 8
  %164 = load i32, i32* %hx, align 4
  %165 = ashr i32 %164, 30
  %166 = and i32 %165, 2
  %167 = sub nsw i32 1, %166
  %168 = sitofp i32 %167 to double
  %169 = load double, double* %v, align 8
  %170 = load double, double* %2, align 8
  %171 = load double, double* %w, align 8
  %172 = load double, double* %w, align 8
  %173 = fmul double %171, %172
  %174 = load double, double* %w, align 8
  %175 = load double, double* %v, align 8
  %176 = fadd double %174, %175
  %177 = fdiv double %173, %176
  %178 = load double, double* %r, align 8
  %179 = fsub double %177, %178
  %180 = fsub double %170, %179
  %181 = fmul double 2.000000e+00, %180
  %182 = fsub double %169, %181
  %183 = fmul double %168, %182
  store double %183, double* %1
  br label %213

; <label>:184                                     ; preds = %86
  %185 = load i32, i32* %4, align 4
  %186 = icmp eq i32 %185, 1
  br i1 %186, label %187, label %189

; <label>:187                                     ; preds = %184
  %188 = load double, double* %w, align 8
  store double %188, double* %1
  br label %213

; <label>:189                                     ; preds = %184
  %190 = load double, double* %w, align 8
  store double %190, double* %z, align 8
  %191 = bitcast double* %z to i32*
  store i32 0, i32* %191, align 4
  %192 = load double, double* %r, align 8
  %193 = load double, double* %z, align 8
  %194 = load double, double* %2, align 8
  %195 = fsub double %193, %194
  %196 = fsub double %192, %195
  store double %196, double* %v, align 8
  %197 = load double, double* %w, align 8
  %198 = fdiv double -1.000000e+00, %197
  store double %198, double* %a1, align 8
  store double %198, double* %t2, align 8
  %199 = bitcast double* %t2 to i32*
  store i32 0, i32* %199, align 4
  %200 = load double, double* %t2, align 8
  %201 = load double, double* %z, align 8
  %202 = fmul double %200, %201
  %203 = fadd double 1.000000e+00, %202
  store double %203, double* %s, align 8
  %204 = load double, double* %t2, align 8
  %205 = load double, double* %a1, align 8
  %206 = load double, double* %s, align 8
  %207 = load double, double* %t2, align 8
  %208 = load double, double* %v, align 8
  %209 = fmul double %207, %208
  %210 = fadd double %206, %209
  %211 = fmul double %205, %210
  %212 = fadd double %204, %211
  store double %212, double* %1
  br label %213

; <label>:213                                     ; preds = %189, %187, %161, %35, %33, %25
  %214 = load double, double* %1
  ret double %214
}

; Function Attrs: nounwind readnone
declare double @fabs(double) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone }

!llvm.ident = !{!0}

!0 = !{!"Ubuntu clang version 3.7.0-2ubuntu1 (tags/RELEASE_370/final) (based on LLVM 3.7.0)"}
