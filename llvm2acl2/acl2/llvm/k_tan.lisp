(in-package "ACL2")
(include-book "../llvm")
(include-book "s_fabs")

(defconst *__kernel_tan-globals* '(
  (xxx #x55555563 #x3fd55555 #x1110fe7a #x3fc11111 #x1bb341fe #x3faba1ba #x8406d637 #x3f9664f4 #xe96e8493 #x3f8226e3 #xc9560328 #x3f6d6d22 #xfee08315 #x3f57dbc8 #xf2f26501 #x3f4344d8 #x1a8d1068 #x3f3026f7 #xa03792a6 #x3f147e88 #x32f0a7e9 #x3f12b80f #xdb605373 #xbef375cb #x74bf7ad4 #x3efb2a70 #x00000000 #x3ff00000 #x54442d18 #x3fe921fb #x33145c07 #x3c81a626)))

(defund @__kernel_tan-%213 (mem)
  (b* (
    (%214 (load-double '(ret . 0) mem)))
  %214))

(defund @__kernel_tan-%189 (mem)
  (b* (
    (%190 (load-double '(w . 0) mem))
    (mem (store-double %190 '(z . 0) mem))
    (%191 (bitcast-double*-to-i32* '(z . 0)))
    (mem (store-i32 0 %191 mem))
    (%192 (load-double '(r . 0) mem))
    (%193 (load-double '(z . 0) mem))
    (%194 (load-double '(x . 0) mem))
    (%195 (fsub-double %193 %194))
    (%196 (fsub-double %192 %195))
    (mem (store-double %196 '(v . 0) mem))
    (%197 (load-double '(w . 0) mem))
    (%198 (fdiv-double #xbff0000000000000 %197))
    (mem (store-double %198 '(a1 . 0) mem))
    (mem (store-double %198 '(t2 . 0) mem))
    (%199 (bitcast-double*-to-i32* '(t2 . 0)))
    (mem (store-i32 0 %199 mem))
    (%200 (load-double '(t2 . 0) mem))
    (%201 (load-double '(z . 0) mem))
    (%202 (fmul-double %200 %201))
    (%203 (fadd-double #x3ff0000000000000 %202))
    (mem (store-double %203 '(s . 0) mem))
    (%204 (load-double '(t2 . 0) mem))
    (%205 (load-double '(a1 . 0) mem))
    (%206 (load-double '(s . 0) mem))
    (%207 (load-double '(t2 . 0) mem))
    (%208 (load-double '(v . 0) mem))
    (%209 (fmul-double %207 %208))
    (%210 (fadd-double %206 %209))
    (%211 (fmul-double %205 %210))
    (%212 (fadd-double %204 %211))
    (mem (store-double %212 '(ret . 0) mem)))
  (@__kernel_tan-%213 mem)))

(defund @__kernel_tan-%187 (mem)
  (b* (
    (%188 (load-double '(w . 0) mem))
    (mem (store-double %188 '(ret . 0) mem)))
  (@__kernel_tan-%213 mem)))

(defund @__kernel_tan-%184 (mem)
  (b* (
    (%185 (load-i32 '(iy . 0) mem))
    (%186 (icmp-eq-i32 %185 1)))
  (case %186
    (-1 (@__kernel_tan-%187 mem))
    (0 (@__kernel_tan-%189 mem)))))

(defund @__kernel_tan-%161 (mem)
  (b* (
    (%162 (load-i32 '(iy . 0) mem))
    (%163 (sitofp-i32-to-double %162))
    (mem (store-double %163 '(v . 0) mem))
    (%164 (load-i32 '(hx . 0) mem))
    (%165 (ashr-i32 %164 30))
    (%166 (and-i32 %165 2))
    (%167 (sub-i32 1 %166))
    (%168 (sitofp-i32-to-double %167))
    (%169 (load-double '(v . 0) mem))
    (%170 (load-double '(x . 0) mem))
    (%171 (load-double '(w . 0) mem))
    (%172 (load-double '(w . 0) mem))
    (%173 (fmul-double %171 %172))
    (%174 (load-double '(w . 0) mem))
    (%175 (load-double '(v . 0) mem))
    (%176 (fadd-double %174 %175))
    (%177 (fdiv-double %173 %176))
    (%178 (load-double '(r . 0) mem))
    (%179 (fsub-double %177 %178))
    (%180 (fsub-double %170 %179))
    (%181 (fmul-double #x4000000000000000 %180))
    (%182 (fsub-double %169 %181))
    (%183 (fmul-double %168 %182))
    (mem (store-double %183 '(ret . 0) mem)))
  (@__kernel_tan-%213 mem)))

(defund @__kernel_tan-%86 (mem)
  (b* (
    (%87 (load-double '(x . 0) mem))
    (%88 (load-double '(x . 0) mem))
    (%89 (fmul-double %87 %88))
    (mem (store-double %89 '(z . 0) mem))
    (%90 (load-double '(z . 0) mem))
    (%91 (load-double '(z . 0) mem))
    (%92 (fmul-double %90 %91))
    (mem (store-double %92 '(w . 0) mem))
    (%93 (load-double (getelementptr-double '(xxx . 0) 1) mem))
    (%94 (load-double '(w . 0) mem))
    (%95 (load-double (getelementptr-double '(xxx . 0) 3) mem))
    (%96 (load-double '(w . 0) mem))
    (%97 (load-double (getelementptr-double '(xxx . 0) 5) mem))
    (%98 (load-double '(w . 0) mem))
    (%99 (load-double (getelementptr-double '(xxx . 0) 7) mem))
    (%100 (load-double '(w . 0) mem))
    (%101 (load-double (getelementptr-double '(xxx . 0) 9) mem))
    (%102 (load-double '(w . 0) mem))
    (%103 (load-double (getelementptr-double '(xxx . 0) 11) mem))
    (%104 (fmul-double %102 %103))
    (%105 (fadd-double %101 %104))
    (%106 (fmul-double %100 %105))
    (%107 (fadd-double %99 %106))
    (%108 (fmul-double %98 %107))
    (%109 (fadd-double %97 %108))
    (%110 (fmul-double %96 %109))
    (%111 (fadd-double %95 %110))
    (%112 (fmul-double %94 %111))
    (%113 (fadd-double %93 %112))
    (mem (store-double %113 '(r . 0) mem))
    (%114 (load-double '(z . 0) mem))
    (%115 (load-double (getelementptr-double '(xxx . 0) 2) mem))
    (%116 (load-double '(w . 0) mem))
    (%117 (load-double (getelementptr-double '(xxx . 0) 4) mem))
    (%118 (load-double '(w . 0) mem))
    (%119 (load-double (getelementptr-double '(xxx . 0) 6) mem))
    (%120 (load-double '(w . 0) mem))
    (%121 (load-double (getelementptr-double '(xxx . 0) 8) mem))
    (%122 (load-double '(w . 0) mem))
    (%123 (load-double (getelementptr-double '(xxx . 0) 10) mem))
    (%124 (load-double '(w . 0) mem))
    (%125 (load-double (getelementptr-double '(xxx . 0) 12) mem))
    (%126 (fmul-double %124 %125))
    (%127 (fadd-double %123 %126))
    (%128 (fmul-double %122 %127))
    (%129 (fadd-double %121 %128))
    (%130 (fmul-double %120 %129))
    (%131 (fadd-double %119 %130))
    (%132 (fmul-double %118 %131))
    (%133 (fadd-double %117 %132))
    (%134 (fmul-double %116 %133))
    (%135 (fadd-double %115 %134))
    (%136 (fmul-double %114 %135))
    (mem (store-double %136 '(v . 0) mem))
    (%137 (load-double '(z . 0) mem))
    (%138 (load-double '(x . 0) mem))
    (%139 (fmul-double %137 %138))
    (mem (store-double %139 '(s . 0) mem))
    (%140 (load-double '(y . 0) mem))
    (%141 (load-double '(z . 0) mem))
    (%142 (load-double '(s . 0) mem))
    (%143 (load-double '(r . 0) mem))
    (%144 (load-double '(v . 0) mem))
    (%145 (fadd-double %143 %144))
    (%146 (fmul-double %142 %145))
    (%147 (load-double '(y . 0) mem))
    (%148 (fadd-double %146 %147))
    (%149 (fmul-double %141 %148))
    (%150 (fadd-double %140 %149))
    (mem (store-double %150 '(r . 0) mem))
    (%151 (load-double (getelementptr-double '(xxx . 0) 0) mem))
    (%152 (load-double '(s . 0) mem))
    (%153 (fmul-double %151 %152))
    (%154 (load-double '(r . 0) mem))
    (%155 (fadd-double %154 %153))
    (mem (store-double %155 '(r . 0) mem))
    (%156 (load-double '(x . 0) mem))
    (%157 (load-double '(r . 0) mem))
    (%158 (fadd-double %156 %157))
    (mem (store-double %158 '(w . 0) mem))
    (%159 (load-i32 '(ix . 0) mem))
    (%160 (icmp-sge-i32 %159 1072010280)))
  (case %160
    (-1 (@__kernel_tan-%161 mem))
    (0 (@__kernel_tan-%184 mem)))))

(defund @__kernel_tan-%76 (mem)
  (b* (
    (%77 (load-double (getelementptr-double '(xxx . 0) 14) mem))
    (%78 (load-double '(x . 0) mem))
    (%79 (fsub-double %77 %78))
    (mem (store-double %79 '(z . 0) mem))
    (%80 (load-double (getelementptr-double '(xxx . 0) 15) mem))
    (%81 (load-double '(y . 0) mem))
    (%82 (fsub-double %80 %81))
    (mem (store-double %82 '(w . 0) mem))
    (%83 (load-double '(z . 0) mem))
    (%84 (load-double '(w . 0) mem))
    (%85 (fadd-double %83 %84))
    (mem (store-double %85 '(x . 0) mem))
    (mem (store-double #x0000000000000000 '(y . 0) mem)))
  (@__kernel_tan-%86 mem)))

(defund @__kernel_tan-%71 (mem)
  (b* (
    (%72 (load-double '(x . 0) mem))
    (%73 (fsub-double #x8000000000000000 %72))
    (mem (store-double %73 '(x . 0) mem))
    (%74 (load-double '(y . 0) mem))
    (%75 (fsub-double #x8000000000000000 %74))
    (mem (store-double %75 '(y . 0) mem)))
  (@__kernel_tan-%76 mem)))

(defund @__kernel_tan-%68 (mem)
  (b* (
    (%69 (load-i32 '(hx . 0) mem))
    (%70 (icmp-slt-i32 %69 0)))
  (case %70
    (-1 (@__kernel_tan-%71 mem))
    (0 (@__kernel_tan-%76 mem)))))

(defund @__kernel_tan-%65 (mem)
  (b* (
    (%66 (load-i32 '(ix . 0) mem))
    (%67 (icmp-sge-i32 %66 1072010280)))
  (case %67
    (-1 (@__kernel_tan-%68 mem))
    (0 (@__kernel_tan-%86 mem)))))

(defund @__kernel_tan-%64 (mem)
  (b* ()
  (@__kernel_tan-%65 mem)))

(defund @__kernel_tan-%35 (mem)
  (b* (
    (%36 (load-double '(x . 0) mem))
    (%37 (load-double '(y . 0) mem))
    (%38 (fadd-double %36 %37))
    (mem (store-double %38 '(w . 0) mem))
    (mem (store-double %38 '(z . 0) mem))
    (%39 (bitcast-double*-to-i32* '(z . 0)))
    (mem (store-i32 0 %39 mem))
    (%40 (load-double '(y . 0) mem))
    (%41 (load-double '(z . 0) mem))
    (%42 (load-double '(x . 0) mem))
    (%43 (fsub-double %41 %42))
    (%44 (fsub-double %40 %43))
    (mem (store-double %44 '(v . 0) mem))
    (%45 (load-double (getelementptr-double '(xxx . 0) 13) mem))
    (%46 (fsub-double #x8000000000000000 %45))
    (%47 (load-double '(w . 0) mem))
    (%48 (fdiv-double %46 %47))
    (mem (store-double %48 '(a . 0) mem))
    (mem (store-double %48 '(t . 0) mem))
    (%49 (bitcast-double*-to-i32* '(t . 0)))
    (mem (store-i32 0 %49 mem))
    (%50 (load-double (getelementptr-double '(xxx . 0) 13) mem))
    (%51 (load-double '(t . 0) mem))
    (%52 (load-double '(z . 0) mem))
    (%53 (fmul-double %51 %52))
    (%54 (fadd-double %50 %53))
    (mem (store-double %54 '(s . 0) mem))
    (%55 (load-double '(t . 0) mem))
    (%56 (load-double '(a . 0) mem))
    (%57 (load-double '(s . 0) mem))
    (%58 (load-double '(t . 0) mem))
    (%59 (load-double '(v . 0) mem))
    (%60 (fmul-double %58 %59))
    (%61 (fadd-double %57 %60))
    (%62 (fmul-double %56 %61))
    (%63 (fadd-double %55 %62))
    (mem (store-double %63 '(ret . 0) mem)))
  (@__kernel_tan-%213 mem)))

(defund @__kernel_tan-%33 (mem)
  (b* (
    (%34 (load-double '(x . 0) mem))
    (mem (store-double %34 '(ret . 0) mem)))
  (@__kernel_tan-%213 mem)))

(defund @__kernel_tan-%30 (mem)
  (b* (
    (%31 (load-i32 '(iy . 0) mem))
    (%32 (icmp-eq-i32 %31 1)))
  (case %32
    (-1 (@__kernel_tan-%33 mem))
    (0 (@__kernel_tan-%35 mem)))))

(defund @__kernel_tan-%25 (mem)
  (b* (
    (%26 (load-double (getelementptr-double '(xxx . 0) 13) mem))
    (%27 (load-double '(x . 0) mem))
    (%28 (@fabs %27))
    (%29 (fdiv-double %26 %28))
    (mem (store-double %29 '(ret . 0) mem)))
  (@__kernel_tan-%213 mem)))

(defund @__kernel_tan-%16 (mem)
  (b* (
    (%17 (load-i32 '(ix . 0) mem))
    (%18 (bitcast-double*-to-i32* '(x . 0)))
    (%19 (load-i32 %18 mem))
    (%20 (or-i32 %17 %19))
    (%21 (load-i32 '(iy . 0) mem))
    (%22 (add-i32 %21 1))
    (%23 (or-i32 %20 %22))
    (%24 (icmp-eq-i32 %23 0)))
  (case %24
    (-1 (@__kernel_tan-%25 mem))
    (0 (@__kernel_tan-%30 mem)))))

(defund @__kernel_tan-%12 (mem)
  (b* (
    (%13 (load-double '(x . 0) mem))
    (%14 (fptosi-double-to-i32 %13))
    (%15 (icmp-eq-i32 %14 0)))
  (case %15
    (-1 (@__kernel_tan-%16 mem))
    (0 (@__kernel_tan-%64 mem)))))

(defund @__kernel_tan-%0 (mem %x %y %iy)
  (b* (
    (mem (alloca-double 'ret 1 mem))
    (mem (alloca-double 'x 1 mem))
    (mem (alloca-double 'y 1 mem))
    (mem (alloca-i32 'iy 1 mem))
    (mem (alloca-double 'z 1 mem))
    (mem (alloca-double 'r 1 mem))
    (mem (alloca-double 'v 1 mem))
    (mem (alloca-double 'w 1 mem))
    (mem (alloca-double 's 1 mem))
    (mem (alloca-i32 'ix 1 mem))
    (mem (alloca-i32 'hx 1 mem))
    (mem (alloca-double 'a 1 mem))
    (mem (alloca-double 't 1 mem))
    (mem (alloca-double 'a1 1 mem))
    (mem (alloca-double 't2 1 mem))
    (mem (store-double %x '(x . 0) mem))
    (mem (store-double %y '(y . 0) mem))
    (mem (store-i32 %iy '(iy . 0) mem))
    (%5 (bitcast-double*-to-i32* '(x . 0)))
    (%6 (getelementptr-i32 %5 1))
    (%7 (load-i32 %6 mem))
    (mem (store-i32 %7 '(hx . 0) mem))
    (%8 (load-i32 '(hx . 0) mem))
    (%9 (and-i32 %8 2147483647))
    (mem (store-i32 %9 '(ix . 0) mem))
    (%10 (load-i32 '(ix . 0) mem))
    (%11 (icmp-slt-i32 %10 1043333120)))
  (case %11
    (-1 (@__kernel_tan-%12 mem))
    (0 (@__kernel_tan-%65 mem)))))

(defund @__kernel_tan (%x %y %iy)
  (@__kernel_tan-%0 *__kernel_tan-globals*  %x %y %iy))
