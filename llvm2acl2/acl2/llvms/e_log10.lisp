(in-package "ACL2")
(include-book "../llvm")
(include-book "e_log")

(defconst *__ieee754_log10-globals* '(
  (zero #x00000000 #x00000000)))

(defund @__ieee754_log10-%0-bb (mem loc)
  (b* (
    (mem (alloca-double 'ret 1 mem))
    (mem (alloca-double 'x 1 mem))
    (mem (alloca-double 'y 1 mem))
    (mem (alloca-double 'z 1 mem))
    (mem (alloca-i32 'i 1 mem))
    (mem (alloca-i32 'k 1 mem))
    (mem (alloca-i32 'hx 1 mem))
    (mem (alloca-i32 'lx 1 mem))
    (mem (store-double (g '%x loc) '(x . 0) mem))
    (loc (s '%3 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%4 (getelementptr-i32 (g '%3 loc) 1) loc))
    (loc (s '%5 (load-i32 (g '%4 loc) mem) loc))
    (mem (store-i32 (g '%5 loc) '(hx . 0) mem))
    (loc (s '%6 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%7 (load-i32 (g '%6 loc) mem) loc))
    (mem (store-i32 (g '%7 loc) '(lx . 0) mem))
    (mem (store-i32 0 '(k . 0) mem))
    (loc (s '%8 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%9 (icmp-slt-i32 (g '%8 loc) 1048576) loc)))
  (case (g '%9 loc)
    (-1 (mv '@__ieee754_log10-%10-bb mem loc))
    ( 0 (mv '@__ieee754_log10-%36-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_log10-%10-bb (mem loc)
  (b* (
    (loc (s '%11 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%12 (and-i32 (g '%11 loc) 2147483647) loc))
    (loc (s '%13 (load-i32 '(lx . 0) mem) loc))
    (loc (s '%14 (or-i32 (g '%12 loc) (g '%13 loc)) loc))
    (loc (s '%15 (icmp-eq-i32 (g '%14 loc) 0) loc)))
  (case (g '%15 loc)
    (-1 (mv '@__ieee754_log10-%16-bb mem loc))
    ( 0 (mv '@__ieee754_log10-%19-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_log10-%16-bb (mem loc)
  (b* (
    (loc (s '%17 (load-double '(zero . 0) mem) loc))
    (loc (s '%18 (fdiv-double #xC350000000000000 (g '%17 loc)) loc))
    (mem (store-double (g '%18 loc) '(ret . 0) mem)))
  (mv '@__ieee754_log10-%75-bb mem loc)))

(defund @__ieee754_log10-%19-bb (mem loc)
  (b* (
    (loc (s '%20 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%21 (icmp-slt-i32 (g '%20 loc) 0) loc)))
  (case (g '%21 loc)
    (-1 (mv '@__ieee754_log10-%22-bb mem loc))
    ( 0 (mv '@__ieee754_log10-%28-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_log10-%22-bb (mem loc)
  (b* (
    (loc (s '%23 (load-double '(x . 0) mem) loc))
    (loc (s '%24 (load-double '(x . 0) mem) loc))
    (loc (s '%25 (fsub-double (g '%23 loc) (g '%24 loc)) loc))
    (loc (s '%26 (load-double '(zero . 0) mem) loc))
    (loc (s '%27 (fdiv-double (g '%25 loc) (g '%26 loc)) loc))
    (mem (store-double (g '%27 loc) '(ret . 0) mem)))
  (mv '@__ieee754_log10-%75-bb mem loc)))

(defund @__ieee754_log10-%28-bb (mem loc)
  (b* (
    (loc (s '%29 (load-i32 '(k . 0) mem) loc))
    (loc (s '%30 (sub-i32 (g '%29 loc) 54) loc))
    (mem (store-i32 (g '%30 loc) '(k . 0) mem))
    (loc (s '%31 (load-double '(x . 0) mem) loc))
    (loc (s '%32 (fmul-double (g '%31 loc) #x4350000000000000) loc))
    (mem (store-double (g '%32 loc) '(x . 0) mem))
    (loc (s '%33 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%34 (getelementptr-i32 (g '%33 loc) 1) loc))
    (loc (s '%35 (load-i32 (g '%34 loc) mem) loc))
    (mem (store-i32 (g '%35 loc) '(hx . 0) mem)))
  (mv '@__ieee754_log10-%36-bb mem loc)))

(defund @__ieee754_log10-%36-bb (mem loc)
  (b* (
    (loc (s '%37 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%38 (icmp-sge-i32 (g '%37 loc) 2146435072) loc)))
  (case (g '%38 loc)
    (-1 (mv '@__ieee754_log10-%39-bb mem loc))
    ( 0 (mv '@__ieee754_log10-%43-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_log10-%39-bb (mem loc)
  (b* (
    (loc (s '%40 (load-double '(x . 0) mem) loc))
    (loc (s '%41 (load-double '(x . 0) mem) loc))
    (loc (s '%42 (fadd-double (g '%40 loc) (g '%41 loc)) loc))
    (mem (store-double (g '%42 loc) '(ret . 0) mem)))
  (mv '@__ieee754_log10-%75-bb mem loc)))

(defund @__ieee754_log10-%43-bb (mem loc)
  (b* (
    (loc (s '%44 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%45 (ashr-i32 (g '%44 loc) 20) loc))
    (loc (s '%46 (sub-i32 (g '%45 loc) 1023) loc))
    (loc (s '%47 (load-i32 '(k . 0) mem) loc))
    (loc (s '%48 (add-i32 (g '%47 loc) (g '%46 loc)) loc))
    (mem (store-i32 (g '%48 loc) '(k . 0) mem))
    (loc (s '%49 (load-i32 '(k . 0) mem) loc))
    (loc (s '%50 (and-i32 (g '%49 loc) -2147483648) loc))
    (loc (s '%51 (lshr-i32 (g '%50 loc) 31) loc))
    (mem (store-i32 (g '%51 loc) '(i . 0) mem))
    (loc (s '%52 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%53 (and-i32 (g '%52 loc) 1048575) loc))
    (loc (s '%54 (load-i32 '(i . 0) mem) loc))
    (loc (s '%55 (sub-i32 1023 (g '%54 loc)) loc))
    (loc (s '%56 (shl-i32 (g '%55 loc) 20) loc))
    (loc (s '%57 (or-i32 (g '%53 loc) (g '%56 loc)) loc))
    (mem (store-i32 (g '%57 loc) '(hx . 0) mem))
    (loc (s '%58 (load-i32 '(k . 0) mem) loc))
    (loc (s '%59 (load-i32 '(i . 0) mem) loc))
    (loc (s '%60 (add-i32 (g '%58 loc) (g '%59 loc)) loc))
    (loc (s '%61 (sitofp-i32-to-double (g '%60 loc)) loc))
    (mem (store-double (g '%61 loc) '(y . 0) mem))
    (loc (s '%62 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%63 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%64 (getelementptr-i32 (g '%63 loc) 1) loc))
    (mem (store-i32 (g '%62 loc) (g '%64 loc) mem))
    (loc (s '%65 (load-double '(y . 0) mem) loc))
    (loc (s '%66 (fmul-double (g '%65 loc) #x3D59FEF311F12B36) loc))
    (loc (s '%67 (load-double '(x . 0) mem) loc))
    (loc (s '%68 (@__ieee754_log (g '%67 loc)) loc))
    (loc (s '%69 (fmul-double #x3FDBCB7B1526E50E (g '%68 loc)) loc))
    (loc (s '%70 (fadd-double (g '%66 loc) (g '%69 loc)) loc))
    (mem (store-double (g '%70 loc) '(z . 0) mem))
    (loc (s '%71 (load-double '(z . 0) mem) loc))
    (loc (s '%72 (load-double '(y . 0) mem) loc))
    (loc (s '%73 (fmul-double (g '%72 loc) #x3FD34413509F6000) loc))
    (loc (s '%74 (fadd-double (g '%71 loc) (g '%73 loc)) loc))
    (mem (store-double (g '%74 loc) '(ret . 0) mem)))
  (mv '@__ieee754_log10-%75-bb mem loc)))

(defund @__ieee754_log10-%75-bb (mem loc)
  (b* (
    (loc (s '%76 (load-double '(ret . 0) mem) loc)))
  (mv 'ret mem loc)))

(defund @__ieee754_log10-step (label mem loc)
  (case label
    (%-0 (@__ieee754_log10-%0-bb mem loc))
    (%-10 (@__ieee754_log10-%10-bb mem loc))
    (%-16 (@__ieee754_log10-%16-bb mem loc))
    (%-19 (@__ieee754_log10-%19-bb mem loc))
    (%-22 (@__ieee754_log10-%22-bb mem loc))
    (%-28 (@__ieee754_log10-%28-bb mem loc))
    (%-36 (@__ieee754_log10-%36-bb mem loc))
    (%-39 (@__ieee754_log10-%39-bb mem loc))
    (%-43 (@__ieee754_log10-%43-bb mem loc))
    (%-75 (@__ieee754_log10-%75-bb mem loc))
    (otherwise (mv nil mem loc))))

(defund @__ieee754_log10-steps (label mem loc n)
  (declare (xargs :measure (nfix n)))
  (if (equal label 'ret)
      (g '%76 loc)
    (if (zp n) nil
      (mv-let
        (label mem loc)
        (@__ieee754_log10-step label mem loc)
        (@__ieee754_log10-steps label mem loc (1- n))))))

(defund @__ieee754_log10 (%x)
  (declare (ignore %x))
   nil)
