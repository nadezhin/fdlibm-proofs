(in-package "ACL2")
(include-book "../llvm")
(include-book "s_copysign")

(defconst *scalbn-globals* '())

(defund @scalbn-%0-bb (mem loc)
  (b* (
    (mem (alloca-double 'ret 1 mem))
    (mem (alloca-double 'x 1 mem))
    (mem (alloca-i32 'n 1 mem))
    (mem (alloca-i32 'k 1 mem))
    (mem (alloca-i32 'hx 1 mem))
    (mem (alloca-i32 'lx 1 mem))
    (mem (store-double (g '%x loc) '(x . 0) mem))
    (mem (store-i32 (g '%n loc) '(n . 0) mem))
    (loc (s '%4 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%5 (getelementptr-i32 (g '%4 loc) 1) loc))
    (loc (s '%6 (load-i32 (g '%5 loc) mem) loc))
    (mem (store-i32 (g '%6 loc) '(hx . 0) mem))
    (loc (s '%7 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%8 (load-i32 (g '%7 loc) mem) loc))
    (mem (store-i32 (g '%8 loc) '(lx . 0) mem))
    (loc (s '%9 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%10 (and-i32 (g '%9 loc) 2146435072) loc))
    (loc (s '%11 (ashr-i32 (g '%10 loc) 20) loc))
    (mem (store-i32 (g '%11 loc) '(k . 0) mem))
    (loc (s '%12 (load-i32 '(k . 0) mem) loc))
    (loc (s '%13 (icmp-eq-i32 (g '%12 loc) 0) loc)))
  (case (g '%13 loc)
    (-1 (mv '@scalbn-%14-bb mem loc))
    ( 0 (mv '@scalbn-%38-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @scalbn-%14-bb (mem loc)
  (b* (
    (loc (s '%15 (load-i32 '(lx . 0) mem) loc))
    (loc (s '%16 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%17 (and-i32 (g '%16 loc) 2147483647) loc))
    (loc (s '%18 (or-i32 (g '%15 loc) (g '%17 loc)) loc))
    (loc (s '%19 (icmp-eq-i32 (g '%18 loc) 0) loc)))
  (case (g '%19 loc)
    (-1 (mv '@scalbn-%20-bb mem loc))
    ( 0 (mv '@scalbn-%22-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @scalbn-%20-bb (mem loc)
  (b* (
    (loc (s '%21 (load-double '(x . 0) mem) loc))
    (mem (store-double (g '%21 loc) '(ret . 0) mem)))
  (mv '@scalbn-%93-bb mem loc)))

(defund @scalbn-%22-bb (mem loc)
  (b* (
    (loc (s '%23 (load-double '(x . 0) mem) loc))
    (loc (s '%24 (fmul-double (g '%23 loc) #x4350000000000000) loc))
    (mem (store-double (g '%24 loc) '(x . 0) mem))
    (loc (s '%25 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%26 (getelementptr-i32 (g '%25 loc) 1) loc))
    (loc (s '%27 (load-i32 (g '%26 loc) mem) loc))
    (mem (store-i32 (g '%27 loc) '(hx . 0) mem))
    (loc (s '%28 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%29 (and-i32 (g '%28 loc) 2146435072) loc))
    (loc (s '%30 (ashr-i32 (g '%29 loc) 20) loc))
    (loc (s '%31 (sub-i32 (g '%30 loc) 54) loc))
    (mem (store-i32 (g '%31 loc) '(k . 0) mem))
    (loc (s '%32 (load-i32 '(n . 0) mem) loc))
    (loc (s '%33 (icmp-slt-i32 (g '%32 loc) -50000) loc)))
  (case (g '%33 loc)
    (-1 (mv '@scalbn-%34-bb mem loc))
    ( 0 (mv '@scalbn-%37-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @scalbn-%34-bb (mem loc)
  (b* (
    (loc (s '%35 (load-double '(x . 0) mem) loc))
    (loc (s '%36 (fmul-double #x01a56e1fc2f8f359 (g '%35 loc)) loc))
    (mem (store-double (g '%36 loc) '(ret . 0) mem)))
  (mv '@scalbn-%93-bb mem loc)))

(defund @scalbn-%37-bb (mem loc)
  (b* ()
  (mv '@scalbn-%38-bb mem loc)))

(defund @scalbn-%38-bb (mem loc)
  (b* (
    (loc (s '%39 (load-i32 '(k . 0) mem) loc))
    (loc (s '%40 (icmp-eq-i32 (g '%39 loc) 2047) loc)))
  (case (g '%40 loc)
    (-1 (mv '@scalbn-%41-bb mem loc))
    ( 0 (mv '@scalbn-%45-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @scalbn-%41-bb (mem loc)
  (b* (
    (loc (s '%42 (load-double '(x . 0) mem) loc))
    (loc (s '%43 (load-double '(x . 0) mem) loc))
    (loc (s '%44 (fadd-double (g '%42 loc) (g '%43 loc)) loc))
    (mem (store-double (g '%44 loc) '(ret . 0) mem)))
  (mv '@scalbn-%93-bb mem loc)))

(defund @scalbn-%45-bb (mem loc)
  (b* (
    (loc (s '%46 (load-i32 '(k . 0) mem) loc))
    (loc (s '%47 (load-i32 '(n . 0) mem) loc))
    (loc (s '%48 (add-i32 (g '%46 loc) (g '%47 loc)) loc))
    (mem (store-i32 (g '%48 loc) '(k . 0) mem))
    (loc (s '%49 (load-i32 '(k . 0) mem) loc))
    (loc (s '%50 (icmp-sgt-i32 (g '%49 loc) 2046) loc)))
  (case (g '%50 loc)
    (-1 (mv '@scalbn-%51-bb mem loc))
    ( 0 (mv '@scalbn-%55-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @scalbn-%51-bb (mem loc)
  (b* (
    (loc (s '%52 (load-double '(x . 0) mem) loc))
    (loc (s '%53 (@copysign #x7e37e43c8800759c (g '%52 loc)) loc))
    (loc (s '%54 (fmul-double #x7e37e43c8800759c (g '%53 loc)) loc))
    (mem (store-double (g '%54 loc) '(ret . 0) mem)))
  (mv '@scalbn-%93-bb mem loc)))

(defund @scalbn-%55-bb (mem loc)
  (b* (
    (loc (s '%56 (load-i32 '(k . 0) mem) loc))
    (loc (s '%57 (icmp-sgt-i32 (g '%56 loc) 0) loc)))
  (case (g '%57 loc)
    (-1 (mv '@scalbn-%58-bb mem loc))
    ( 0 (mv '@scalbn-%67-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @scalbn-%58-bb (mem loc)
  (b* (
    (loc (s '%59 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%60 (and-i32 (g '%59 loc) -2146435073) loc))
    (loc (s '%61 (load-i32 '(k . 0) mem) loc))
    (loc (s '%62 (shl-i32 (g '%61 loc) 20) loc))
    (loc (s '%63 (or-i32 (g '%60 loc) (g '%62 loc)) loc))
    (loc (s '%64 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%65 (getelementptr-i32 (g '%64 loc) 1) loc))
    (mem (store-i32 (g '%63 loc) (g '%65 loc) mem))
    (loc (s '%66 (load-double '(x . 0) mem) loc))
    (mem (store-double (g '%66 loc) '(ret . 0) mem)))
  (mv '@scalbn-%93-bb mem loc)))

(defund @scalbn-%67-bb (mem loc)
  (b* (
    (loc (s '%68 (load-i32 '(k . 0) mem) loc))
    (loc (s '%69 (icmp-sle-i32 (g '%68 loc) -54) loc)))
  (case (g '%69 loc)
    (-1 (mv '@scalbn-%70-bb mem loc))
    ( 0 (mv '@scalbn-%81-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @scalbn-%70-bb (mem loc)
  (b* (
    (loc (s '%71 (load-i32 '(n . 0) mem) loc))
    (loc (s '%72 (icmp-sgt-i32 (g '%71 loc) 50000) loc)))
  (case (g '%72 loc)
    (-1 (mv '@scalbn-%73-bb mem loc))
    ( 0 (mv '@scalbn-%77-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @scalbn-%73-bb (mem loc)
  (b* (
    (loc (s '%74 (load-double '(x . 0) mem) loc))
    (loc (s '%75 (@copysign #x7e37e43c8800759c (g '%74 loc)) loc))
    (loc (s '%76 (fmul-double #x7e37e43c8800759c (g '%75 loc)) loc))
    (mem (store-double (g '%76 loc) '(ret . 0) mem)))
  (mv '@scalbn-%93-bb mem loc)))

(defund @scalbn-%77-bb (mem loc)
  (b* (
    (loc (s '%78 (load-double '(x . 0) mem) loc))
    (loc (s '%79 (@copysign #x01a56e1fc2f8f359 (g '%78 loc)) loc))
    (loc (s '%80 (fmul-double #x01a56e1fc2f8f359 (g '%79 loc)) loc))
    (mem (store-double (g '%80 loc) '(ret . 0) mem)))
  (mv '@scalbn-%93-bb mem loc)))

(defund @scalbn-%81-bb (mem loc)
  (b* (
    (loc (s '%82 (load-i32 '(k . 0) mem) loc))
    (loc (s '%83 (add-i32 (g '%82 loc) 54) loc))
    (mem (store-i32 (g '%83 loc) '(k . 0) mem))
    (loc (s '%84 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%85 (and-i32 (g '%84 loc) -2146435073) loc))
    (loc (s '%86 (load-i32 '(k . 0) mem) loc))
    (loc (s '%87 (shl-i32 (g '%86 loc) 20) loc))
    (loc (s '%88 (or-i32 (g '%85 loc) (g '%87 loc)) loc))
    (loc (s '%89 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%90 (getelementptr-i32 (g '%89 loc) 1) loc))
    (mem (store-i32 (g '%88 loc) (g '%90 loc) mem))
    (loc (s '%91 (load-double '(x . 0) mem) loc))
    (loc (s '%92 (fmul-double (g '%91 loc) #x3C90000000000000) loc))
    (mem (store-double (g '%92 loc) '(ret . 0) mem)))
  (mv '@scalbn-%93-bb mem loc)))

(defund @scalbn-%93-bb (mem loc)
  (b* (
    (loc (s '%94 (load-double '(ret . 0) mem) loc)))
  (mv 'ret mem loc)))

(defund @scalbn-step (label mem loc)
  (case label
    (%-0 (@scalbn-%0-bb mem loc))
    (%-14 (@scalbn-%14-bb mem loc))
    (%-20 (@scalbn-%20-bb mem loc))
    (%-22 (@scalbn-%22-bb mem loc))
    (%-34 (@scalbn-%34-bb mem loc))
    (%-37 (@scalbn-%37-bb mem loc))
    (%-38 (@scalbn-%38-bb mem loc))
    (%-41 (@scalbn-%41-bb mem loc))
    (%-45 (@scalbn-%45-bb mem loc))
    (%-51 (@scalbn-%51-bb mem loc))
    (%-55 (@scalbn-%55-bb mem loc))
    (%-58 (@scalbn-%58-bb mem loc))
    (%-67 (@scalbn-%67-bb mem loc))
    (%-70 (@scalbn-%70-bb mem loc))
    (%-73 (@scalbn-%73-bb mem loc))
    (%-77 (@scalbn-%77-bb mem loc))
    (%-81 (@scalbn-%81-bb mem loc))
    (%-93 (@scalbn-%93-bb mem loc))
    (otherwise (mv nil mem loc))))

(defund @scalbn-steps (label mem loc n)
  (declare (xargs :measure (nfix n)))
  (if (equal label 'ret)
      (g '%94 loc)
    (if (zp n) nil
      (mv-let
        (label mem loc)
        (@scalbn-step label mem loc)
        (@scalbn-steps label mem loc (1- n))))))

(defund @scalbn (%x %n)
  (declare (ignore %x %n))
   nil)
