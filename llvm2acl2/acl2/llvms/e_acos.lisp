(in-package "ACL2")
(include-book "../llvm")
(include-book "w_sqrt")

(defconst *__ieee754_acos-globals* '())

(defund @__ieee754_acos-%0-bb (mem loc)
  (b* (
    (mem (alloca-double 'ret 1 mem))
    (mem (alloca-double 'x 1 mem))
    (mem (alloca-double 'z 1 mem))
    (mem (alloca-double 'p 1 mem))
    (mem (alloca-double 'q 1 mem))
    (mem (alloca-double 'r 1 mem))
    (mem (alloca-double 'w 1 mem))
    (mem (alloca-double 's 1 mem))
    (mem (alloca-double 'c 1 mem))
    (mem (alloca-double 'df 1 mem))
    (mem (alloca-i32 'hx 1 mem))
    (mem (alloca-i32 'ix 1 mem))
    (mem (store-double (g '%x loc) '(x . 0) mem))
    (loc (s '%3 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%4 (getelementptr-i32 (g '%3 loc) 1) loc))
    (loc (s '%5 (load-i32 (g '%4 loc) mem) loc))
    (mem (store-i32 (g '%5 loc) '(hx . 0) mem))
    (loc (s '%6 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%7 (and-i32 (g '%6 loc) 2147483647) loc))
    (mem (store-i32 (g '%7 loc) '(ix . 0) mem))
    (loc (s '%8 (load-i32 '(ix . 0) mem) loc))
    (loc (s '%9 (icmp-sge-i32 (g '%8 loc) 1072693248) loc)))
  (case (g '%9 loc)
    (-1 (mv '@__ieee754_acos-%10-bb mem loc))
    ( 0 (mv '@__ieee754_acos-%30-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_acos-%10-bb (mem loc)
  (b* (
    (loc (s '%11 (load-i32 '(ix . 0) mem) loc))
    (loc (s '%12 (sub-i32 (g '%11 loc) 1072693248) loc))
    (loc (s '%13 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%14 (load-i32 (g '%13 loc) mem) loc))
    (loc (s '%15 (or-i32 (g '%12 loc) (g '%14 loc)) loc))
    (loc (s '%16 (icmp-eq-i32 (g '%15 loc) 0) loc)))
  (case (g '%16 loc)
    (-1 (mv '@__ieee754_acos-%17-bb mem loc))
    ( 0 (mv '@__ieee754_acos-%22-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_acos-%17-bb (mem loc)
  (b* (
    (loc (s '%18 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%19 (icmp-sgt-i32 (g '%18 loc) 0) loc)))
  (case (g '%19 loc)
    (-1 (mv '@__ieee754_acos-%20-bb mem loc))
    ( 0 (mv '@__ieee754_acos-%21-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_acos-%20-bb (mem loc)
  (b* (
    (mem (store-double #x0000000000000000 '(ret . 0) mem)))
  (mv '@__ieee754_acos-%188-bb mem loc)))

(defund @__ieee754_acos-%21-bb (mem loc)
  (b* (
    (mem (store-double #x400921FB54442D18 '(ret . 0) mem)))
  (mv '@__ieee754_acos-%188-bb mem loc)))

(defund @__ieee754_acos-%22-bb (mem loc)
  (b* (
    (loc (s '%23 (load-double '(x . 0) mem) loc))
    (loc (s '%24 (load-double '(x . 0) mem) loc))
    (loc (s '%25 (fsub-double (g '%23 loc) (g '%24 loc)) loc))
    (loc (s '%26 (load-double '(x . 0) mem) loc))
    (loc (s '%27 (load-double '(x . 0) mem) loc))
    (loc (s '%28 (fsub-double (g '%26 loc) (g '%27 loc)) loc))
    (loc (s '%29 (fdiv-double (g '%25 loc) (g '%28 loc)) loc))
    (mem (store-double (g '%29 loc) '(ret . 0) mem)))
  (mv '@__ieee754_acos-%188-bb mem loc)))

(defund @__ieee754_acos-%30-bb (mem loc)
  (b* (
    (loc (s '%31 (load-i32 '(ix . 0) mem) loc))
    (loc (s '%32 (icmp-slt-i32 (g '%31 loc) 1071644672) loc)))
  (case (g '%32 loc)
    (-1 (mv '@__ieee754_acos-%33-bb mem loc))
    ( 0 (mv '@__ieee754_acos-%80-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_acos-%33-bb (mem loc)
  (b* (
    (loc (s '%34 (load-i32 '(ix . 0) mem) loc))
    (loc (s '%35 (icmp-sle-i32 (g '%34 loc) 1012924416) loc)))
  (case (g '%35 loc)
    (-1 (mv '@__ieee754_acos-%36-bb mem loc))
    ( 0 (mv '@__ieee754_acos-%37-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_acos-%36-bb (mem loc)
  (b* (
    (mem (store-double #x3FF921FB54442D18 '(ret . 0) mem)))
  (mv '@__ieee754_acos-%188-bb mem loc)))

(defund @__ieee754_acos-%37-bb (mem loc)
  (b* (
    (loc (s '%38 (load-double '(x . 0) mem) loc))
    (loc (s '%39 (load-double '(x . 0) mem) loc))
    (loc (s '%40 (fmul-double (g '%38 loc) (g '%39 loc)) loc))
    (mem (store-double (g '%40 loc) '(z . 0) mem))
    (loc (s '%41 (load-double '(z . 0) mem) loc))
    (loc (s '%42 (load-double '(z . 0) mem) loc))
    (loc (s '%43 (load-double '(z . 0) mem) loc))
    (loc (s '%44 (load-double '(z . 0) mem) loc))
    (loc (s '%45 (load-double '(z . 0) mem) loc))
    (loc (s '%46 (load-double '(z . 0) mem) loc))
    (loc (s '%47 (fmul-double (g '%46 loc) #x3F023DE10DFDF709) loc))
    (loc (s '%48 (fadd-double #x3F49EFE07501B288 (g '%47 loc)) loc))
    (loc (s '%49 (fmul-double (g '%45 loc) (g '%48 loc)) loc))
    (loc (s '%50 (fadd-double #xBFA48228B5688F3B (g '%49 loc)) loc))
    (loc (s '%51 (fmul-double (g '%44 loc) (g '%50 loc)) loc))
    (loc (s '%52 (fadd-double #x3FC9C1550E884455 (g '%51 loc)) loc))
    (loc (s '%53 (fmul-double (g '%43 loc) (g '%52 loc)) loc))
    (loc (s '%54 (fadd-double #xBFD4D61203EB6F7D (g '%53 loc)) loc))
    (loc (s '%55 (fmul-double (g '%42 loc) (g '%54 loc)) loc))
    (loc (s '%56 (fadd-double #x3FC5555555555555 (g '%55 loc)) loc))
    (loc (s '%57 (fmul-double (g '%41 loc) (g '%56 loc)) loc))
    (mem (store-double (g '%57 loc) '(p . 0) mem))
    (loc (s '%58 (load-double '(z . 0) mem) loc))
    (loc (s '%59 (load-double '(z . 0) mem) loc))
    (loc (s '%60 (load-double '(z . 0) mem) loc))
    (loc (s '%61 (load-double '(z . 0) mem) loc))
    (loc (s '%62 (fmul-double (g '%61 loc) #x3FB3B8C5B12E9282) loc))
    (loc (s '%63 (fadd-double #xBFE6066C1B8D0159 (g '%62 loc)) loc))
    (loc (s '%64 (fmul-double (g '%60 loc) (g '%63 loc)) loc))
    (loc (s '%65 (fadd-double #x40002AE59C598AC8 (g '%64 loc)) loc))
    (loc (s '%66 (fmul-double (g '%59 loc) (g '%65 loc)) loc))
    (loc (s '%67 (fadd-double #xC0033A271C8A2D4B (g '%66 loc)) loc))
    (loc (s '%68 (fmul-double (g '%58 loc) (g '%67 loc)) loc))
    (loc (s '%69 (fadd-double #x3ff0000000000000 (g '%68 loc)) loc))
    (mem (store-double (g '%69 loc) '(q . 0) mem))
    (loc (s '%70 (load-double '(p . 0) mem) loc))
    (loc (s '%71 (load-double '(q . 0) mem) loc))
    (loc (s '%72 (fdiv-double (g '%70 loc) (g '%71 loc)) loc))
    (mem (store-double (g '%72 loc) '(r . 0) mem))
    (loc (s '%73 (load-double '(x . 0) mem) loc))
    (loc (s '%74 (load-double '(x . 0) mem) loc))
    (loc (s '%75 (load-double '(r . 0) mem) loc))
    (loc (s '%76 (fmul-double (g '%74 loc) (g '%75 loc)) loc))
    (loc (s '%77 (fsub-double #x3C91A62633145C07 (g '%76 loc)) loc))
    (loc (s '%78 (fsub-double (g '%73 loc) (g '%77 loc)) loc))
    (loc (s '%79 (fsub-double #x3FF921FB54442D18 (g '%78 loc)) loc))
    (mem (store-double (g '%79 loc) '(ret . 0) mem)))
  (mv '@__ieee754_acos-%188-bb mem loc)))

(defund @__ieee754_acos-%80-bb (mem loc)
  (b* (
    (loc (s '%81 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%82 (icmp-slt-i32 (g '%81 loc) 0) loc)))
  (case (g '%82 loc)
    (-1 (mv '@__ieee754_acos-%83-bb mem loc))
    ( 0 (mv '@__ieee754_acos-%130-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_acos-%83-bb (mem loc)
  (b* (
    (loc (s '%84 (load-double '(x . 0) mem) loc))
    (loc (s '%85 (fadd-double #x3ff0000000000000 (g '%84 loc)) loc))
    (loc (s '%86 (fmul-double (g '%85 loc) #x3fe0000000000000) loc))
    (mem (store-double (g '%86 loc) '(z . 0) mem))
    (loc (s '%87 (load-double '(z . 0) mem) loc))
    (loc (s '%88 (load-double '(z . 0) mem) loc))
    (loc (s '%89 (load-double '(z . 0) mem) loc))
    (loc (s '%90 (load-double '(z . 0) mem) loc))
    (loc (s '%91 (load-double '(z . 0) mem) loc))
    (loc (s '%92 (load-double '(z . 0) mem) loc))
    (loc (s '%93 (fmul-double (g '%92 loc) #x3F023DE10DFDF709) loc))
    (loc (s '%94 (fadd-double #x3F49EFE07501B288 (g '%93 loc)) loc))
    (loc (s '%95 (fmul-double (g '%91 loc) (g '%94 loc)) loc))
    (loc (s '%96 (fadd-double #xBFA48228B5688F3B (g '%95 loc)) loc))
    (loc (s '%97 (fmul-double (g '%90 loc) (g '%96 loc)) loc))
    (loc (s '%98 (fadd-double #x3FC9C1550E884455 (g '%97 loc)) loc))
    (loc (s '%99 (fmul-double (g '%89 loc) (g '%98 loc)) loc))
    (loc (s '%100 (fadd-double #xBFD4D61203EB6F7D (g '%99 loc)) loc))
    (loc (s '%101 (fmul-double (g '%88 loc) (g '%100 loc)) loc))
    (loc (s '%102 (fadd-double #x3FC5555555555555 (g '%101 loc)) loc))
    (loc (s '%103 (fmul-double (g '%87 loc) (g '%102 loc)) loc))
    (mem (store-double (g '%103 loc) '(p . 0) mem))
    (loc (s '%104 (load-double '(z . 0) mem) loc))
    (loc (s '%105 (load-double '(z . 0) mem) loc))
    (loc (s '%106 (load-double '(z . 0) mem) loc))
    (loc (s '%107 (load-double '(z . 0) mem) loc))
    (loc (s '%108 (fmul-double (g '%107 loc) #x3FB3B8C5B12E9282) loc))
    (loc (s '%109 (fadd-double #xBFE6066C1B8D0159 (g '%108 loc)) loc))
    (loc (s '%110 (fmul-double (g '%106 loc) (g '%109 loc)) loc))
    (loc (s '%111 (fadd-double #x40002AE59C598AC8 (g '%110 loc)) loc))
    (loc (s '%112 (fmul-double (g '%105 loc) (g '%111 loc)) loc))
    (loc (s '%113 (fadd-double #xC0033A271C8A2D4B (g '%112 loc)) loc))
    (loc (s '%114 (fmul-double (g '%104 loc) (g '%113 loc)) loc))
    (loc (s '%115 (fadd-double #x3ff0000000000000 (g '%114 loc)) loc))
    (mem (store-double (g '%115 loc) '(q . 0) mem))
    (loc (s '%116 (load-double '(z . 0) mem) loc))
    (loc (s '%117 (@sqrt (g '%116 loc)) loc))
    (mem (store-double (g '%117 loc) '(s . 0) mem))
    (loc (s '%118 (load-double '(p . 0) mem) loc))
    (loc (s '%119 (load-double '(q . 0) mem) loc))
    (loc (s '%120 (fdiv-double (g '%118 loc) (g '%119 loc)) loc))
    (mem (store-double (g '%120 loc) '(r . 0) mem))
    (loc (s '%121 (load-double '(r . 0) mem) loc))
    (loc (s '%122 (load-double '(s . 0) mem) loc))
    (loc (s '%123 (fmul-double (g '%121 loc) (g '%122 loc)) loc))
    (loc (s '%124 (fsub-double (g '%123 loc) #x3C91A62633145C07) loc))
    (mem (store-double (g '%124 loc) '(w . 0) mem))
    (loc (s '%125 (load-double '(s . 0) mem) loc))
    (loc (s '%126 (load-double '(w . 0) mem) loc))
    (loc (s '%127 (fadd-double (g '%125 loc) (g '%126 loc)) loc))
    (loc (s '%128 (fmul-double #x4000000000000000 (g '%127 loc)) loc))
    (loc (s '%129 (fsub-double #x400921FB54442D18 (g '%128 loc)) loc))
    (mem (store-double (g '%129 loc) '(ret . 0) mem)))
  (mv '@__ieee754_acos-%188-bb mem loc)))

(defund @__ieee754_acos-%130-bb (mem loc)
  (b* (
    (loc (s '%131 (load-double '(x . 0) mem) loc))
    (loc (s '%132 (fsub-double #x3ff0000000000000 (g '%131 loc)) loc))
    (loc (s '%133 (fmul-double (g '%132 loc) #x3fe0000000000000) loc))
    (mem (store-double (g '%133 loc) '(z . 0) mem))
    (loc (s '%134 (load-double '(z . 0) mem) loc))
    (loc (s '%135 (@sqrt (g '%134 loc)) loc))
    (mem (store-double (g '%135 loc) '(s . 0) mem))
    (loc (s '%136 (load-double '(s . 0) mem) loc))
    (mem (store-double (g '%136 loc) '(df . 0) mem))
    (loc (s '%137 (bitcast-double*-to-i32* '(df . 0)) loc))
    (mem (store-i32 0 (g '%137 loc) mem))
    (loc (s '%138 (load-double '(z . 0) mem) loc))
    (loc (s '%139 (load-double '(df . 0) mem) loc))
    (loc (s '%140 (load-double '(df . 0) mem) loc))
    (loc (s '%141 (fmul-double (g '%139 loc) (g '%140 loc)) loc))
    (loc (s '%142 (fsub-double (g '%138 loc) (g '%141 loc)) loc))
    (loc (s '%143 (load-double '(s . 0) mem) loc))
    (loc (s '%144 (load-double '(df . 0) mem) loc))
    (loc (s '%145 (fadd-double (g '%143 loc) (g '%144 loc)) loc))
    (loc (s '%146 (fdiv-double (g '%142 loc) (g '%145 loc)) loc))
    (mem (store-double (g '%146 loc) '(c . 0) mem))
    (loc (s '%147 (load-double '(z . 0) mem) loc))
    (loc (s '%148 (load-double '(z . 0) mem) loc))
    (loc (s '%149 (load-double '(z . 0) mem) loc))
    (loc (s '%150 (load-double '(z . 0) mem) loc))
    (loc (s '%151 (load-double '(z . 0) mem) loc))
    (loc (s '%152 (load-double '(z . 0) mem) loc))
    (loc (s '%153 (fmul-double (g '%152 loc) #x3F023DE10DFDF709) loc))
    (loc (s '%154 (fadd-double #x3F49EFE07501B288 (g '%153 loc)) loc))
    (loc (s '%155 (fmul-double (g '%151 loc) (g '%154 loc)) loc))
    (loc (s '%156 (fadd-double #xBFA48228B5688F3B (g '%155 loc)) loc))
    (loc (s '%157 (fmul-double (g '%150 loc) (g '%156 loc)) loc))
    (loc (s '%158 (fadd-double #x3FC9C1550E884455 (g '%157 loc)) loc))
    (loc (s '%159 (fmul-double (g '%149 loc) (g '%158 loc)) loc))
    (loc (s '%160 (fadd-double #xBFD4D61203EB6F7D (g '%159 loc)) loc))
    (loc (s '%161 (fmul-double (g '%148 loc) (g '%160 loc)) loc))
    (loc (s '%162 (fadd-double #x3FC5555555555555 (g '%161 loc)) loc))
    (loc (s '%163 (fmul-double (g '%147 loc) (g '%162 loc)) loc))
    (mem (store-double (g '%163 loc) '(p . 0) mem))
    (loc (s '%164 (load-double '(z . 0) mem) loc))
    (loc (s '%165 (load-double '(z . 0) mem) loc))
    (loc (s '%166 (load-double '(z . 0) mem) loc))
    (loc (s '%167 (load-double '(z . 0) mem) loc))
    (loc (s '%168 (fmul-double (g '%167 loc) #x3FB3B8C5B12E9282) loc))
    (loc (s '%169 (fadd-double #xBFE6066C1B8D0159 (g '%168 loc)) loc))
    (loc (s '%170 (fmul-double (g '%166 loc) (g '%169 loc)) loc))
    (loc (s '%171 (fadd-double #x40002AE59C598AC8 (g '%170 loc)) loc))
    (loc (s '%172 (fmul-double (g '%165 loc) (g '%171 loc)) loc))
    (loc (s '%173 (fadd-double #xC0033A271C8A2D4B (g '%172 loc)) loc))
    (loc (s '%174 (fmul-double (g '%164 loc) (g '%173 loc)) loc))
    (loc (s '%175 (fadd-double #x3ff0000000000000 (g '%174 loc)) loc))
    (mem (store-double (g '%175 loc) '(q . 0) mem))
    (loc (s '%176 (load-double '(p . 0) mem) loc))
    (loc (s '%177 (load-double '(q . 0) mem) loc))
    (loc (s '%178 (fdiv-double (g '%176 loc) (g '%177 loc)) loc))
    (mem (store-double (g '%178 loc) '(r . 0) mem))
    (loc (s '%179 (load-double '(r . 0) mem) loc))
    (loc (s '%180 (load-double '(s . 0) mem) loc))
    (loc (s '%181 (fmul-double (g '%179 loc) (g '%180 loc)) loc))
    (loc (s '%182 (load-double '(c . 0) mem) loc))
    (loc (s '%183 (fadd-double (g '%181 loc) (g '%182 loc)) loc))
    (mem (store-double (g '%183 loc) '(w . 0) mem))
    (loc (s '%184 (load-double '(df . 0) mem) loc))
    (loc (s '%185 (load-double '(w . 0) mem) loc))
    (loc (s '%186 (fadd-double (g '%184 loc) (g '%185 loc)) loc))
    (loc (s '%187 (fmul-double #x4000000000000000 (g '%186 loc)) loc))
    (mem (store-double (g '%187 loc) '(ret . 0) mem)))
  (mv '@__ieee754_acos-%188-bb mem loc)))

(defund @__ieee754_acos-%188-bb (mem loc)
  (b* (
    (loc (s '%189 (load-double '(ret . 0) mem) loc)))
  (mv 'ret mem loc)))

(defund @__ieee754_acos-step (label mem loc)
  (case label
    (%-0 (@__ieee754_acos-%0-bb mem loc))
    (%-10 (@__ieee754_acos-%10-bb mem loc))
    (%-17 (@__ieee754_acos-%17-bb mem loc))
    (%-20 (@__ieee754_acos-%20-bb mem loc))
    (%-21 (@__ieee754_acos-%21-bb mem loc))
    (%-22 (@__ieee754_acos-%22-bb mem loc))
    (%-30 (@__ieee754_acos-%30-bb mem loc))
    (%-33 (@__ieee754_acos-%33-bb mem loc))
    (%-36 (@__ieee754_acos-%36-bb mem loc))
    (%-37 (@__ieee754_acos-%37-bb mem loc))
    (%-80 (@__ieee754_acos-%80-bb mem loc))
    (%-83 (@__ieee754_acos-%83-bb mem loc))
    (%-130 (@__ieee754_acos-%130-bb mem loc))
    (%-188 (@__ieee754_acos-%188-bb mem loc))
    (otherwise (mv nil mem loc))))

(defund @__ieee754_acos-steps (label mem loc n)
  (declare (xargs :measure (nfix n)))
  (if (equal label 'ret)
      (g '%189 loc)
    (if (zp n) nil
      (mv-let
        (label mem loc)
        (@__ieee754_acos-step label mem loc)
        (@__ieee754_acos-steps label mem loc (1- n))))))

(defund @__ieee754_acos (%x)
  (declare (ignore %x))
   nil)
