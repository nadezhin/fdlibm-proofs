(in-package "ACL2")
(include-book "../llvm")

(defconst *__ieee754_exp-globals* '(
  (ln2HI #xfee00000 #x3fe62e42 #xfee00000 #xbfe62e42)
  (ln2LO #x35793c76 #x3dea39ef #x35793c76 #xbdea39ef)
  (halF #x00000000 #x3fe00000 #x00000000 #xbfe00000)))

(defund @__ieee754_exp-%0-bb (mem loc)
  (b* (
    (mem (alloca-double 'ret 1 mem))
    (mem (alloca-double 'x 1 mem))
    (mem (alloca-double 'y 1 mem))
    (mem (alloca-double 'hi 1 mem))
    (mem (alloca-double 'lo 1 mem))
    (mem (alloca-double 'c 1 mem))
    (mem (alloca-double 't 1 mem))
    (mem (alloca-i32 'k 1 mem))
    (mem (alloca-i32 'xsb 1 mem))
    (mem (alloca-i32 'hx 1 mem))
    (mem (store-double (g '%x loc) '(x . 0) mem))
    (loc (s '%3 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%4 (getelementptr-i32 (g '%3 loc) 1) loc))
    (loc (s '%5 (load-i32 (g '%4 loc) mem) loc))
    (mem (store-i32 (g '%5 loc) '(hx . 0) mem))
    (loc (s '%6 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%7 (lshr-i32 (g '%6 loc) 31) loc))
    (loc (s '%8 (and-i32 (g '%7 loc) 1) loc))
    (mem (store-i32 (g '%8 loc) '(xsb . 0) mem))
    (loc (s '%9 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%10 (and-i32 (g '%9 loc) 2147483647) loc))
    (mem (store-i32 (g '%10 loc) '(hx . 0) mem))
    (loc (s '%11 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%12 (icmp-uge-i32 (g '%11 loc) 1082535490) loc)))
  (case (g '%12 loc)
    (-1 (mv '@__ieee754_exp-%13-bb mem loc))
    ( 0 (mv '@__ieee754_exp-%44-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_exp-%13-bb (mem loc)
  (b* (
    (loc (s '%14 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%15 (icmp-uge-i32 (g '%14 loc) 2146435072) loc)))
  (case (g '%15 loc)
    (-1 (mv '@__ieee754_exp-%16-bb mem loc))
    ( 0 (mv '@__ieee754_exp-%35-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_exp-%16-bb (mem loc)
  (b* (
    (loc (s '%17 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%18 (and-i32 (g '%17 loc) 1048575) loc))
    (loc (s '%19 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%20 (load-i32 (g '%19 loc) mem) loc))
    (loc (s '%21 (or-i32 (g '%18 loc) (g '%20 loc)) loc))
    (loc (s '%22 (icmp-ne-i32 (g '%21 loc) 0) loc)))
  (case (g '%22 loc)
    (-1 (mv '@__ieee754_exp-%23-bb mem loc))
    ( 0 (mv '@__ieee754_exp-%27-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_exp-%23-bb (mem loc)
  (b* (
    (loc (s '%24 (load-double '(x . 0) mem) loc))
    (loc (s '%25 (load-double '(x . 0) mem) loc))
    (loc (s '%26 (fadd-double (g '%24 loc) (g '%25 loc)) loc))
    (mem (store-double (g '%26 loc) '(ret . 0) mem)))
  (mv '@__ieee754_exp-%166-bb mem loc)))

(defund @__ieee754_exp-%27-bb (mem loc)
  (b* (
    (loc (s '%28 (load-i32 '(xsb . 0) mem) loc))
    (loc (s '%29 (icmp-eq-i32 (g '%28 loc) 0) loc)))
  (case (g '%29 loc)
    (-1 (mv '@__ieee754_exp-%30-bb mem loc))
    ( 0 (mv '@__ieee754_exp-%32-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_exp-%30-bb (mem loc)
  (b* (
    (loc (s '%31 (load-double '(x . 0) mem) loc)))
  (let* ((loc (s '%34 (g '%31 loc) loc))) (mv '@__ieee754_exp-%33-bb mem loc))))

(defund @__ieee754_exp-%32-bb (mem loc)
  (b* ()
  (let* ((loc (s '%34 #x0000000000000000 loc))) (mv '@__ieee754_exp-%33-bb mem loc))))

(defund @__ieee754_exp-%33-bb (mem loc)
  ; %34 = phi double [ (g '%31 loc), %30 ], [ #x0000000000000000, %32 ]
  (b* (
    (mem (store-double (g '%34 loc) '(ret . 0) mem)))
  (mv '@__ieee754_exp-%166-bb mem loc)))

(defund @__ieee754_exp-%35-bb (mem loc)
  (b* (
    (loc (s '%36 (load-double '(x . 0) mem) loc))
    (loc (s '%37 (fcmp-ogt-double (g '%36 loc) #x40862E42FEFA39EF) loc)))
  (case (g '%37 loc)
    (-1 (mv '@__ieee754_exp-%38-bb mem loc))
    ( 0 (mv '@__ieee754_exp-%39-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_exp-%38-bb (mem loc)
  (b* (
    (mem (store-double #x7FF0000000000000 '(ret . 0) mem)))
  (mv '@__ieee754_exp-%166-bb mem loc)))

(defund @__ieee754_exp-%39-bb (mem loc)
  (b* (
    (loc (s '%40 (load-double '(x . 0) mem) loc))
    (loc (s '%41 (fcmp-olt-double (g '%40 loc) #xC0874910D52D3051) loc)))
  (case (g '%41 loc)
    (-1 (mv '@__ieee754_exp-%42-bb mem loc))
    ( 0 (mv '@__ieee754_exp-%43-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_exp-%42-bb (mem loc)
  (b* (
    (mem (store-double #x0000000000000000 '(ret . 0) mem)))
  (mv '@__ieee754_exp-%166-bb mem loc)))

(defund @__ieee754_exp-%43-bb (mem loc)
  (b* ()
  (mv '@__ieee754_exp-%44-bb mem loc)))

(defund @__ieee754_exp-%44-bb (mem loc)
  (b* (
    (loc (s '%45 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%46 (icmp-ugt-i32 (g '%45 loc) 1071001154) loc)))
  (case (g '%46 loc)
    (-1 (mv '@__ieee754_exp-%47-bb mem loc))
    ( 0 (mv '@__ieee754_exp-%88-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_exp-%47-bb (mem loc)
  (b* (
    (loc (s '%48 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%49 (icmp-ult-i32 (g '%48 loc) 1072734898) loc)))
  (case (g '%49 loc)
    (-1 (mv '@__ieee754_exp-%50-bb mem loc))
    ( 0 (mv '@__ieee754_exp-%65-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_exp-%50-bb (mem loc)
  (b* (
    (loc (s '%51 (load-double '(x . 0) mem) loc))
    (loc (s '%52 (load-i32 '(xsb . 0) mem) loc))
    (loc (s '%53 (sext-i32-to-i64 (g '%52 loc)) loc))
    (loc (s '%54 (getelementptr-double '(ln2HI . 0) (g '%53 loc)) loc))
    (loc (s '%55 (load-double (g '%54 loc) mem) loc))
    (loc (s '%56 (fsub-double (g '%51 loc) (g '%55 loc)) loc))
    (mem (store-double (g '%56 loc) '(hi . 0) mem))
    (loc (s '%57 (load-i32 '(xsb . 0) mem) loc))
    (loc (s '%58 (sext-i32-to-i64 (g '%57 loc)) loc))
    (loc (s '%59 (getelementptr-double '(ln2LO . 0) (g '%58 loc)) loc))
    (loc (s '%60 (load-double (g '%59 loc) mem) loc))
    (mem (store-double (g '%60 loc) '(lo . 0) mem))
    (loc (s '%61 (load-i32 '(xsb . 0) mem) loc))
    (loc (s '%62 (sub-i32 1 (g '%61 loc)) loc))
    (loc (s '%63 (load-i32 '(xsb . 0) mem) loc))
    (loc (s '%64 (sub-i32 (g '%62 loc) (g '%63 loc)) loc))
    (mem (store-i32 (g '%64 loc) '(k . 0) mem)))
  (mv '@__ieee754_exp-%84-bb mem loc)))

(defund @__ieee754_exp-%65-bb (mem loc)
  (b* (
    (loc (s '%66 (load-double '(x . 0) mem) loc))
    (loc (s '%67 (fmul-double #x3FF71547652B82FE (g '%66 loc)) loc))
    (loc (s '%68 (load-i32 '(xsb . 0) mem) loc))
    (loc (s '%69 (sext-i32-to-i64 (g '%68 loc)) loc))
    (loc (s '%70 (getelementptr-double '(halF . 0) (g '%69 loc)) loc))
    (loc (s '%71 (load-double (g '%70 loc) mem) loc))
    (loc (s '%72 (fadd-double (g '%67 loc) (g '%71 loc)) loc))
    (loc (s '%73 (fptosi-double-to-i32 (g '%72 loc)) loc))
    (mem (store-i32 (g '%73 loc) '(k . 0) mem))
    (loc (s '%74 (load-i32 '(k . 0) mem) loc))
    (loc (s '%75 (sitofp-i32-to-double (g '%74 loc)) loc))
    (mem (store-double (g '%75 loc) '(t . 0) mem))
    (loc (s '%76 (load-double '(x . 0) mem) loc))
    (loc (s '%77 (load-double '(t . 0) mem) loc))
    (loc (s '%78 (load-double (getelementptr-double '(ln2HI . 0) 0) mem) loc))
    (loc (s '%79 (fmul-double (g '%77 loc) (g '%78 loc)) loc))
    (loc (s '%80 (fsub-double (g '%76 loc) (g '%79 loc)) loc))
    (mem (store-double (g '%80 loc) '(hi . 0) mem))
    (loc (s '%81 (load-double '(t . 0) mem) loc))
    (loc (s '%82 (load-double (getelementptr-double '(ln2LO . 0) 0) mem) loc))
    (loc (s '%83 (fmul-double (g '%81 loc) (g '%82 loc)) loc))
    (mem (store-double (g '%83 loc) '(lo . 0) mem)))
  (mv '@__ieee754_exp-%84-bb mem loc)))

(defund @__ieee754_exp-%84-bb (mem loc)
  (b* (
    (loc (s '%85 (load-double '(hi . 0) mem) loc))
    (loc (s '%86 (load-double '(lo . 0) mem) loc))
    (loc (s '%87 (fsub-double (g '%85 loc) (g '%86 loc)) loc))
    (mem (store-double (g '%87 loc) '(x . 0) mem)))
  (mv '@__ieee754_exp-%101-bb mem loc)))

(defund @__ieee754_exp-%88-bb (mem loc)
  (b* (
    (loc (s '%89 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%90 (icmp-ult-i32 (g '%89 loc) 1043333120) loc)))
  (case (g '%90 loc)
    (-1 (mv '@__ieee754_exp-%91-bb mem loc))
    ( 0 (mv '@__ieee754_exp-%99-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_exp-%91-bb (mem loc)
  (b* (
    (loc (s '%92 (load-double '(x . 0) mem) loc))
    (loc (s '%93 (fadd-double #x7e37e43c8800759c (g '%92 loc)) loc))
    (loc (s '%94 (fcmp-ogt-double (g '%93 loc) #x3ff0000000000000) loc)))
  (case (g '%94 loc)
    (-1 (mv '@__ieee754_exp-%95-bb mem loc))
    ( 0 (mv '@__ieee754_exp-%98-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_exp-%95-bb (mem loc)
  (b* (
    (loc (s '%96 (load-double '(x . 0) mem) loc))
    (loc (s '%97 (fadd-double #x3ff0000000000000 (g '%96 loc)) loc))
    (mem (store-double (g '%97 loc) '(ret . 0) mem)))
  (mv '@__ieee754_exp-%166-bb mem loc)))

(defund @__ieee754_exp-%98-bb (mem loc)
  (b* ()
  (mv '@__ieee754_exp-%100-bb mem loc)))

(defund @__ieee754_exp-%99-bb (mem loc)
  (b* (
    (mem (store-i32 0 '(k . 0) mem)))
  (mv '@__ieee754_exp-%100-bb mem loc)))

(defund @__ieee754_exp-%100-bb (mem loc)
  (b* ()
  (mv '@__ieee754_exp-%101-bb mem loc)))

(defund @__ieee754_exp-%101-bb (mem loc)
  (b* (
    (loc (s '%102 (load-double '(x . 0) mem) loc))
    (loc (s '%103 (load-double '(x . 0) mem) loc))
    (loc (s '%104 (fmul-double (g '%102 loc) (g '%103 loc)) loc))
    (mem (store-double (g '%104 loc) '(t . 0) mem))
    (loc (s '%105 (load-double '(x . 0) mem) loc))
    (loc (s '%106 (load-double '(t . 0) mem) loc))
    (loc (s '%107 (load-double '(t . 0) mem) loc))
    (loc (s '%108 (load-double '(t . 0) mem) loc))
    (loc (s '%109 (load-double '(t . 0) mem) loc))
    (loc (s '%110 (load-double '(t . 0) mem) loc))
    (loc (s '%111 (fmul-double (g '%110 loc) #x3E66376972BEA4D0) loc))
    (loc (s '%112 (fadd-double #xBEBBBD41C5D26BF1 (g '%111 loc)) loc))
    (loc (s '%113 (fmul-double (g '%109 loc) (g '%112 loc)) loc))
    (loc (s '%114 (fadd-double #x3F11566AAF25DE2C (g '%113 loc)) loc))
    (loc (s '%115 (fmul-double (g '%108 loc) (g '%114 loc)) loc))
    (loc (s '%116 (fadd-double #xBF66C16C16BEBD93 (g '%115 loc)) loc))
    (loc (s '%117 (fmul-double (g '%107 loc) (g '%116 loc)) loc))
    (loc (s '%118 (fadd-double #x3FC555555555553E (g '%117 loc)) loc))
    (loc (s '%119 (fmul-double (g '%106 loc) (g '%118 loc)) loc))
    (loc (s '%120 (fsub-double (g '%105 loc) (g '%119 loc)) loc))
    (mem (store-double (g '%120 loc) '(c . 0) mem))
    (loc (s '%121 (load-i32 '(k . 0) mem) loc))
    (loc (s '%122 (icmp-eq-i32 (g '%121 loc) 0) loc)))
  (case (g '%122 loc)
    (-1 (mv '@__ieee754_exp-%123-bb mem loc))
    ( 0 (mv '@__ieee754_exp-%133-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_exp-%123-bb (mem loc)
  (b* (
    (loc (s '%124 (load-double '(x . 0) mem) loc))
    (loc (s '%125 (load-double '(c . 0) mem) loc))
    (loc (s '%126 (fmul-double (g '%124 loc) (g '%125 loc)) loc))
    (loc (s '%127 (load-double '(c . 0) mem) loc))
    (loc (s '%128 (fsub-double (g '%127 loc) #x4000000000000000) loc))
    (loc (s '%129 (fdiv-double (g '%126 loc) (g '%128 loc)) loc))
    (loc (s '%130 (load-double '(x . 0) mem) loc))
    (loc (s '%131 (fsub-double (g '%129 loc) (g '%130 loc)) loc))
    (loc (s '%132 (fsub-double #x3ff0000000000000 (g '%131 loc)) loc))
    (mem (store-double (g '%132 loc) '(ret . 0) mem)))
  (mv '@__ieee754_exp-%166-bb mem loc)))

(defund @__ieee754_exp-%133-bb (mem loc)
  (b* (
    (loc (s '%134 (load-double '(lo . 0) mem) loc))
    (loc (s '%135 (load-double '(x . 0) mem) loc))
    (loc (s '%136 (load-double '(c . 0) mem) loc))
    (loc (s '%137 (fmul-double (g '%135 loc) (g '%136 loc)) loc))
    (loc (s '%138 (load-double '(c . 0) mem) loc))
    (loc (s '%139 (fsub-double #x4000000000000000 (g '%138 loc)) loc))
    (loc (s '%140 (fdiv-double (g '%137 loc) (g '%139 loc)) loc))
    (loc (s '%141 (fsub-double (g '%134 loc) (g '%140 loc)) loc))
    (loc (s '%142 (load-double '(hi . 0) mem) loc))
    (loc (s '%143 (fsub-double (g '%141 loc) (g '%142 loc)) loc))
    (loc (s '%144 (fsub-double #x3ff0000000000000 (g '%143 loc)) loc))
    (mem (store-double (g '%144 loc) '(y . 0) mem)))
  (mv '@__ieee754_exp-%145-bb mem loc)))

(defund @__ieee754_exp-%145-bb (mem loc)
  (b* (
    (loc (s '%146 (load-i32 '(k . 0) mem) loc))
    (loc (s '%147 (icmp-sge-i32 (g '%146 loc) -1021) loc)))
  (case (g '%147 loc)
    (-1 (mv '@__ieee754_exp-%148-bb mem loc))
    ( 0 (mv '@__ieee754_exp-%156-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_exp-%148-bb (mem loc)
  (b* (
    (loc (s '%149 (load-i32 '(k . 0) mem) loc))
    (loc (s '%150 (shl-i32 (g '%149 loc) 20) loc))
    (loc (s '%151 (bitcast-double*-to-i32* '(y . 0)) loc))
    (loc (s '%152 (getelementptr-i32 (g '%151 loc) 1) loc))
    (loc (s '%153 (load-i32 (g '%152 loc) mem) loc))
    (loc (s '%154 (add-i32 (g '%153 loc) (g '%150 loc)) loc))
    (mem (store-i32 (g '%154 loc) (g '%152 loc) mem))
    (loc (s '%155 (load-double '(y . 0) mem) loc))
    (mem (store-double (g '%155 loc) '(ret . 0) mem)))
  (mv '@__ieee754_exp-%166-bb mem loc)))

(defund @__ieee754_exp-%156-bb (mem loc)
  (b* (
    (loc (s '%157 (load-i32 '(k . 0) mem) loc))
    (loc (s '%158 (add-i32 (g '%157 loc) 1000) loc))
    (loc (s '%159 (shl-i32 (g '%158 loc) 20) loc))
    (loc (s '%160 (bitcast-double*-to-i32* '(y . 0)) loc))
    (loc (s '%161 (getelementptr-i32 (g '%160 loc) 1) loc))
    (loc (s '%162 (load-i32 (g '%161 loc) mem) loc))
    (loc (s '%163 (add-i32 (g '%162 loc) (g '%159 loc)) loc))
    (mem (store-i32 (g '%163 loc) (g '%161 loc) mem))
    (loc (s '%164 (load-double '(y . 0) mem) loc))
    (loc (s '%165 (fmul-double (g '%164 loc) #x170000000000000) loc))
    (mem (store-double (g '%165 loc) '(ret . 0) mem)))
  (mv '@__ieee754_exp-%166-bb mem loc)))

(defund @__ieee754_exp-%166-bb (mem loc)
  (b* (
    (loc (s '%167 (load-double '(ret . 0) mem) loc)))
  (mv 'ret mem loc)))

(defund @__ieee754_exp-step (label mem loc)
  (case label
    (%-0 (@__ieee754_exp-%0-bb mem loc))
    (%-13 (@__ieee754_exp-%13-bb mem loc))
    (%-16 (@__ieee754_exp-%16-bb mem loc))
    (%-23 (@__ieee754_exp-%23-bb mem loc))
    (%-27 (@__ieee754_exp-%27-bb mem loc))
    (%-30 (@__ieee754_exp-%30-bb mem loc))
    (%-32 (@__ieee754_exp-%32-bb mem loc))
    (%-33 (@__ieee754_exp-%33-bb mem loc))
    (%-35 (@__ieee754_exp-%35-bb mem loc))
    (%-38 (@__ieee754_exp-%38-bb mem loc))
    (%-39 (@__ieee754_exp-%39-bb mem loc))
    (%-42 (@__ieee754_exp-%42-bb mem loc))
    (%-43 (@__ieee754_exp-%43-bb mem loc))
    (%-44 (@__ieee754_exp-%44-bb mem loc))
    (%-47 (@__ieee754_exp-%47-bb mem loc))
    (%-50 (@__ieee754_exp-%50-bb mem loc))
    (%-65 (@__ieee754_exp-%65-bb mem loc))
    (%-84 (@__ieee754_exp-%84-bb mem loc))
    (%-88 (@__ieee754_exp-%88-bb mem loc))
    (%-91 (@__ieee754_exp-%91-bb mem loc))
    (%-95 (@__ieee754_exp-%95-bb mem loc))
    (%-98 (@__ieee754_exp-%98-bb mem loc))
    (%-99 (@__ieee754_exp-%99-bb mem loc))
    (%-100 (@__ieee754_exp-%100-bb mem loc))
    (%-101 (@__ieee754_exp-%101-bb mem loc))
    (%-123 (@__ieee754_exp-%123-bb mem loc))
    (%-133 (@__ieee754_exp-%133-bb mem loc))
    (%-145 (@__ieee754_exp-%145-bb mem loc))
    (%-148 (@__ieee754_exp-%148-bb mem loc))
    (%-156 (@__ieee754_exp-%156-bb mem loc))
    (%-166 (@__ieee754_exp-%166-bb mem loc))
    (otherwise (mv nil mem loc))))

(defund @__ieee754_exp-steps (label mem loc n)
  (declare (xargs :measure (nfix n)))
  (if (equal label 'ret)
      (g '%167 loc)
    (if (zp n) nil
      (mv-let
        (label mem loc)
        (@__ieee754_exp-step label mem loc)
        (@__ieee754_exp-steps label mem loc (1- n))))))

(defund @__ieee754_exp (%x)
  (declare (ignore %x))
   nil)
