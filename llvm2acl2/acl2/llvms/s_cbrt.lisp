(in-package "ACL2")
(include-book "../llvm")

(defconst *cbrt-globals* '())

(defund @cbrt-%0-bb (mem loc)
  (b* (
    (mem (alloca-double 'ret 1 mem))
    (mem (alloca-double 'x 1 mem))
    (mem (alloca-i32 'hx 1 mem))
    (mem (alloca-double 'r 1 mem))
    (mem (alloca-double 's 1 mem))
    (mem (alloca-double 't 1 mem))
    (mem (alloca-double 'w 1 mem))
    (mem (alloca-i32 'sign 1 mem))
    (mem (store-double (g '%x loc) '(x . 0) mem))
    (mem (store-double #x0000000000000000 '(t . 0) mem))
    (loc (s '%3 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%4 (getelementptr-i32 (g '%3 loc) 1) loc))
    (loc (s '%5 (load-i32 (g '%4 loc) mem) loc))
    (mem (store-i32 (g '%5 loc) '(hx . 0) mem))
    (loc (s '%6 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%7 (and-i32 (g '%6 loc) -2147483648) loc))
    (mem (store-i32 (g '%7 loc) '(sign . 0) mem))
    (loc (s '%8 (load-i32 '(sign . 0) mem) loc))
    (loc (s '%9 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%10 (xor-i32 (g '%9 loc) (g '%8 loc)) loc))
    (mem (store-i32 (g '%10 loc) '(hx . 0) mem))
    (loc (s '%11 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%12 (icmp-sge-i32 (g '%11 loc) 2146435072) loc)))
  (case (g '%12 loc)
    (-1 (mv '@cbrt-%13-bb mem loc))
    ( 0 (mv '@cbrt-%17-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @cbrt-%13-bb (mem loc)
  (b* (
    (loc (s '%14 (load-double '(x . 0) mem) loc))
    (loc (s '%15 (load-double '(x . 0) mem) loc))
    (loc (s '%16 (fadd-double (g '%14 loc) (g '%15 loc)) loc))
    (mem (store-double (g '%16 loc) '(ret . 0) mem)))
  (mv '@cbrt-%101-bb mem loc)))

(defund @cbrt-%17-bb (mem loc)
  (b* (
    (loc (s '%18 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%19 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%20 (load-i32 (g '%19 loc) mem) loc))
    (loc (s '%21 (or-i32 (g '%18 loc) (g '%20 loc)) loc))
    (loc (s '%22 (icmp-eq-i32 (g '%21 loc) 0) loc)))
  (case (g '%22 loc)
    (-1 (mv '@cbrt-%23-bb mem loc))
    ( 0 (mv '@cbrt-%25-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @cbrt-%23-bb (mem loc)
  (b* (
    (loc (s '%24 (load-double '(x . 0) mem) loc))
    (mem (store-double (g '%24 loc) '(ret . 0) mem)))
  (mv '@cbrt-%101-bb mem loc)))

(defund @cbrt-%25-bb (mem loc)
  (b* (
    (loc (s '%26 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%27 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%28 (getelementptr-i32 (g '%27 loc) 1) loc))
    (mem (store-i32 (g '%26 loc) (g '%28 loc) mem))
    (loc (s '%29 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%30 (icmp-slt-i32 (g '%29 loc) 1048576) loc)))
  (case (g '%30 loc)
    (-1 (mv '@cbrt-%31-bb mem loc))
    ( 0 (mv '@cbrt-%44-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @cbrt-%31-bb (mem loc)
  (b* (
    (loc (s '%32 (bitcast-double*-to-i32* '(t . 0)) loc))
    (loc (s '%33 (getelementptr-i32 (g '%32 loc) 1) loc))
    (mem (store-i32 1129316352 (g '%33 loc) mem))
    (loc (s '%34 (load-double '(x . 0) mem) loc))
    (loc (s '%35 (load-double '(t . 0) mem) loc))
    (loc (s '%36 (fmul-double (g '%35 loc) (g '%34 loc)) loc))
    (mem (store-double (g '%36 loc) '(t . 0) mem))
    (loc (s '%37 (bitcast-double*-to-i32* '(t . 0)) loc))
    (loc (s '%38 (getelementptr-i32 (g '%37 loc) 1) loc))
    (loc (s '%39 (load-i32 (g '%38 loc) mem) loc))
    (loc (s '%40 (sdiv-i32 (g '%39 loc) 3) loc))
    (loc (s '%41 (add-i32 (g '%40 loc) 696219795) loc))
    (loc (s '%42 (bitcast-double*-to-i32* '(t . 0)) loc))
    (loc (s '%43 (getelementptr-i32 (g '%42 loc) 1) loc))
    (mem (store-i32 (g '%41 loc) (g '%43 loc) mem)))
  (mv '@cbrt-%50-bb mem loc)))

(defund @cbrt-%44-bb (mem loc)
  (b* (
    (loc (s '%45 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%46 (sdiv-i32 (g '%45 loc) 3) loc))
    (loc (s '%47 (add-i32 (g '%46 loc) 715094163) loc))
    (loc (s '%48 (bitcast-double*-to-i32* '(t . 0)) loc))
    (loc (s '%49 (getelementptr-i32 (g '%48 loc) 1) loc))
    (mem (store-i32 (g '%47 loc) (g '%49 loc) mem)))
  (mv '@cbrt-%50-bb mem loc)))

(defund @cbrt-%50-bb (mem loc)
  (b* (
    (loc (s '%51 (load-double '(t . 0) mem) loc))
    (loc (s '%52 (load-double '(t . 0) mem) loc))
    (loc (s '%53 (fmul-double (g '%51 loc) (g '%52 loc)) loc))
    (loc (s '%54 (load-double '(x . 0) mem) loc))
    (loc (s '%55 (fdiv-double (g '%53 loc) (g '%54 loc)) loc))
    (mem (store-double (g '%55 loc) '(r . 0) mem))
    (loc (s '%56 (load-double '(r . 0) mem) loc))
    (loc (s '%57 (load-double '(t . 0) mem) loc))
    (loc (s '%58 (fmul-double (g '%56 loc) (g '%57 loc)) loc))
    (loc (s '%59 (fadd-double #x3FE15F15F15F15F1 (g '%58 loc)) loc))
    (mem (store-double (g '%59 loc) '(s . 0) mem))
    (loc (s '%60 (load-double '(s . 0) mem) loc))
    (loc (s '%61 (fadd-double (g '%60 loc) #x3FF6A0EA0EA0EA0F) loc))
    (loc (s '%62 (load-double '(s . 0) mem) loc))
    (loc (s '%63 (fdiv-double #xBFE691DE2532C834 (g '%62 loc)) loc))
    (loc (s '%64 (fadd-double (g '%61 loc) (g '%63 loc)) loc))
    (loc (s '%65 (fdiv-double #x3FF9B6DB6DB6DB6E (g '%64 loc)) loc))
    (loc (s '%66 (fadd-double #x3FD6DB6DB6DB6DB7 (g '%65 loc)) loc))
    (loc (s '%67 (load-double '(t . 0) mem) loc))
    (loc (s '%68 (fmul-double (g '%67 loc) (g '%66 loc)) loc))
    (mem (store-double (g '%68 loc) '(t . 0) mem))
    (loc (s '%69 (bitcast-double*-to-i32* '(t . 0)) loc))
    (mem (store-i32 0 (g '%69 loc) mem))
    (loc (s '%70 (bitcast-double*-to-i32* '(t . 0)) loc))
    (loc (s '%71 (getelementptr-i32 (g '%70 loc) 1) loc))
    (loc (s '%72 (load-i32 (g '%71 loc) mem) loc))
    (loc (s '%73 (add-i32 (g '%72 loc) 1) loc))
    (mem (store-i32 (g '%73 loc) (g '%71 loc) mem))
    (loc (s '%74 (load-double '(t . 0) mem) loc))
    (loc (s '%75 (load-double '(t . 0) mem) loc))
    (loc (s '%76 (fmul-double (g '%74 loc) (g '%75 loc)) loc))
    (mem (store-double (g '%76 loc) '(s . 0) mem))
    (loc (s '%77 (load-double '(x . 0) mem) loc))
    (loc (s '%78 (load-double '(s . 0) mem) loc))
    (loc (s '%79 (fdiv-double (g '%77 loc) (g '%78 loc)) loc))
    (mem (store-double (g '%79 loc) '(r . 0) mem))
    (loc (s '%80 (load-double '(t . 0) mem) loc))
    (loc (s '%81 (load-double '(t . 0) mem) loc))
    (loc (s '%82 (fadd-double (g '%80 loc) (g '%81 loc)) loc))
    (mem (store-double (g '%82 loc) '(w . 0) mem))
    (loc (s '%83 (load-double '(r . 0) mem) loc))
    (loc (s '%84 (load-double '(t . 0) mem) loc))
    (loc (s '%85 (fsub-double (g '%83 loc) (g '%84 loc)) loc))
    (loc (s '%86 (load-double '(w . 0) mem) loc))
    (loc (s '%87 (load-double '(r . 0) mem) loc))
    (loc (s '%88 (fadd-double (g '%86 loc) (g '%87 loc)) loc))
    (loc (s '%89 (fdiv-double (g '%85 loc) (g '%88 loc)) loc))
    (mem (store-double (g '%89 loc) '(r . 0) mem))
    (loc (s '%90 (load-double '(t . 0) mem) loc))
    (loc (s '%91 (load-double '(t . 0) mem) loc))
    (loc (s '%92 (load-double '(r . 0) mem) loc))
    (loc (s '%93 (fmul-double (g '%91 loc) (g '%92 loc)) loc))
    (loc (s '%94 (fadd-double (g '%90 loc) (g '%93 loc)) loc))
    (mem (store-double (g '%94 loc) '(t . 0) mem))
    (loc (s '%95 (load-i32 '(sign . 0) mem) loc))
    (loc (s '%96 (bitcast-double*-to-i32* '(t . 0)) loc))
    (loc (s '%97 (getelementptr-i32 (g '%96 loc) 1) loc))
    (loc (s '%98 (load-i32 (g '%97 loc) mem) loc))
    (loc (s '%99 (or-i32 (g '%98 loc) (g '%95 loc)) loc))
    (mem (store-i32 (g '%99 loc) (g '%97 loc) mem))
    (loc (s '%100 (load-double '(t . 0) mem) loc))
    (mem (store-double (g '%100 loc) '(ret . 0) mem)))
  (mv '@cbrt-%101-bb mem loc)))

(defund @cbrt-%101-bb (mem loc)
  (b* (
    (loc (s '%102 (load-double '(ret . 0) mem) loc)))
  (mv 'ret mem loc)))

(defund @cbrt-step (label mem loc)
  (case label
    (%-0 (@cbrt-%0-bb mem loc))
    (%-13 (@cbrt-%13-bb mem loc))
    (%-17 (@cbrt-%17-bb mem loc))
    (%-23 (@cbrt-%23-bb mem loc))
    (%-25 (@cbrt-%25-bb mem loc))
    (%-31 (@cbrt-%31-bb mem loc))
    (%-44 (@cbrt-%44-bb mem loc))
    (%-50 (@cbrt-%50-bb mem loc))
    (%-101 (@cbrt-%101-bb mem loc))
    (otherwise (mv nil mem loc))))

(defund @cbrt-steps (label mem loc n)
  (declare (xargs :measure (nfix n)))
  (if (equal label 'ret)
      (g '%102 loc)
    (if (zp n) nil
      (mv-let
        (label mem loc)
        (@cbrt-step label mem loc)
        (@cbrt-steps label mem loc (1- n))))))

(defund @cbrt (%x)
  (declare (ignore %x))
   nil)
