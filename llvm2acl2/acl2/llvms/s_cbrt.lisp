(in-package "ACL2")
(include-book "std/util/defrule" :dir :system)
(include-book "../llvm")

(defconst *cbrt-globals* '())

(defconst *cbrt-labels* '(%0 %13 %17 %23 %25 %31 %44 %50 %101))

(defund @cbrt-%0-mem (s0)
  (car s0))
(defund @cbrt-%0-loc (s0)
  (cadr s0))
(defund @cbrt-%0-pred (s0)
  (caddr s0))
(defund @cbrt-%1-mem (s0)
  (alloca-double 'ret 1 (@cbrt-%0-mem s0)))
(defund @cbrt-%1-loc (s0)
  (s '%1 '(ret . 0) (@cbrt-%0-loc s0)))
(defund @cbrt-%2-mem (s0)
  (alloca-double 'x 1 (@cbrt-%1-mem s0)))
(defund @cbrt-%2-loc (s0)
  (s '%2 '(x . 0) (@cbrt-%1-loc s0)))
(defund @cbrt-%hx-mem (s0)
  (alloca-i32 'hx 1 (@cbrt-%2-mem s0)))
(defund @cbrt-%hx-loc (s0)
  (s '%hx '(hx . 0) (@cbrt-%2-loc s0)))
(defund @cbrt-%r-mem (s0)
  (alloca-double 'r 1 (@cbrt-%hx-mem s0)))
(defund @cbrt-%r-loc (s0)
  (s '%r '(r . 0) (@cbrt-%hx-loc s0)))
(defund @cbrt-%s-mem (s0)
  (alloca-double 's 1 (@cbrt-%r-mem s0)))
(defund @cbrt-%s-loc (s0)
  (s '%s '(s . 0) (@cbrt-%r-loc s0)))
(defund @cbrt-%t-mem (s0)
  (alloca-double 't 1 (@cbrt-%s-mem s0)))
(defund @cbrt-%t-loc (s0)
  (s '%t '(t . 0) (@cbrt-%s-loc s0)))
(defund @cbrt-%w-mem (s0)
  (alloca-double 'w 1 (@cbrt-%t-mem s0)))
(defund @cbrt-%w-loc (s0)
  (s '%w '(w . 0) (@cbrt-%t-loc s0)))
(defund @cbrt-%sign-mem (s0)
  (alloca-i32 'sign 1 (@cbrt-%w-mem s0)))
(defund @cbrt-%sign-loc (s0)
  (s '%sign '(sign . 0) (@cbrt-%w-loc s0)))
(defund @cbrt-m0.1-mem (s0)
  (store-double (g '%x (@cbrt-%sign-loc s0)) (g '%2 (@cbrt-%sign-loc s0)) (@cbrt-%sign-mem s0)))
(defund @cbrt-m0.2-mem (s0)
  (store-double #x0000000000000000 (g '%t (@cbrt-%sign-loc s0)) (@cbrt-m0.1-mem s0)))
(defund @cbrt-%3-val (s0)
  (bitcast-double*-to-i32* (g '%2 (@cbrt-%sign-loc s0))))
(defund @cbrt-%3-loc (s0)
  (s '%3 (@cbrt-%3-val s0) (@cbrt-%sign-loc s0)))
(defund @cbrt-%4-val (s0)
  (getelementptr-i32 (g '%3 (@cbrt-%3-loc s0)) 1))
(defund @cbrt-%4-loc (s0)
  (s '%4 (@cbrt-%4-val s0) (@cbrt-%3-loc s0)))
(defund @cbrt-%5-val (s0)
  (load-i32 (g '%4 (@cbrt-%4-loc s0)) (@cbrt-m0.2-mem s0)))
(defund @cbrt-%5-loc (s0)
  (s '%5 (@cbrt-%5-val s0) (@cbrt-%4-loc s0)))
(defund @cbrt-m0.3-mem (s0)
  (store-i32 (g '%5 (@cbrt-%5-loc s0)) (g '%hx (@cbrt-%5-loc s0)) (@cbrt-m0.2-mem s0)))
(defund @cbrt-%6-val (s0)
  (load-i32 (g '%hx (@cbrt-%5-loc s0)) (@cbrt-m0.3-mem s0)))
(defund @cbrt-%6-loc (s0)
  (s '%6 (@cbrt-%6-val s0) (@cbrt-%5-loc s0)))
(defund @cbrt-%7-val (s0)
  (and-i32 (g '%6 (@cbrt-%6-loc s0)) -2147483648))
(defund @cbrt-%7-loc (s0)
  (s '%7 (@cbrt-%7-val s0) (@cbrt-%6-loc s0)))
(defund @cbrt-m0.4-mem (s0)
  (store-i32 (g '%7 (@cbrt-%7-loc s0)) (g '%sign (@cbrt-%7-loc s0)) (@cbrt-m0.3-mem s0)))
(defund @cbrt-%8-val (s0)
  (load-i32 (g '%sign (@cbrt-%7-loc s0)) (@cbrt-m0.4-mem s0)))
(defund @cbrt-%8-loc (s0)
  (s '%8 (@cbrt-%8-val s0) (@cbrt-%7-loc s0)))
(defund @cbrt-%9-val (s0)
  (load-i32 (g '%hx (@cbrt-%8-loc s0)) (@cbrt-m0.4-mem s0)))
(defund @cbrt-%9-loc (s0)
  (s '%9 (@cbrt-%9-val s0) (@cbrt-%8-loc s0)))
(defund @cbrt-%10-val (s0)
  (xor-i32 (g '%9 (@cbrt-%9-loc s0)) (g '%8 (@cbrt-%9-loc s0))))
(defund @cbrt-%10-loc (s0)
  (s '%10 (@cbrt-%10-val s0) (@cbrt-%9-loc s0)))
(defund @cbrt-m0.5-mem (s0)
  (store-i32 (g '%10 (@cbrt-%10-loc s0)) (g '%hx (@cbrt-%10-loc s0)) (@cbrt-m0.4-mem s0)))
(defund @cbrt-%11-val (s0)
  (load-i32 (g '%hx (@cbrt-%10-loc s0)) (@cbrt-m0.5-mem s0)))
(defund @cbrt-%11-loc (s0)
  (s '%11 (@cbrt-%11-val s0) (@cbrt-%10-loc s0)))
(defund @cbrt-%12-val (s0)
  (icmp-sge-i32 (g '%11 (@cbrt-%11-loc s0)) 2146435072))
(defund @cbrt-%12-loc (s0)
  (s '%12 (@cbrt-%12-val s0) (@cbrt-%11-loc s0)))
(defund @cbrt-succ0-lab (s0)
  (case (g '%12 (@cbrt-%12-loc s0)) (-1 '%13) (0 '%17)))

(defund @cbrt-%0-fwd (mem loc pred)
  (let ((s0 (list mem loc pred)))
    (mv (@cbrt-succ0-lab s0) (@cbrt-m0.5-mem s0) (@cbrt-%12-loc s0))))

(defund @cbrt-succ0-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%12 loc) (-1 '%13) (0 '%17)) mem loc))
(defund @cbrt-%12-rev (mem loc pred)
  (@cbrt-succ0-rev mem (s '%12 (icmp-sge-i32 (g '%11 loc) 2146435072) loc) pred))
(defund @cbrt-%11-rev (mem loc pred)
  (@cbrt-%12-rev mem (s '%11 (load-i32 (g '%hx loc) mem) loc) pred))
(defund @cbrt-m0.5-rev (mem loc pred)
  (@cbrt-%11-rev (store-i32 (g '%10 loc) (g '%hx loc) mem) loc pred))
(defund @cbrt-%10-rev (mem loc pred)
  (@cbrt-m0.5-rev mem (s '%10 (xor-i32 (g '%9 loc) (g '%8 loc)) loc) pred))
(defund @cbrt-%9-rev (mem loc pred)
  (@cbrt-%10-rev mem (s '%9 (load-i32 (g '%hx loc) mem) loc) pred))
(defund @cbrt-%8-rev (mem loc pred)
  (@cbrt-%9-rev mem (s '%8 (load-i32 (g '%sign loc) mem) loc) pred))
(defund @cbrt-m0.4-rev (mem loc pred)
  (@cbrt-%8-rev (store-i32 (g '%7 loc) (g '%sign loc) mem) loc pred))
(defund @cbrt-%7-rev (mem loc pred)
  (@cbrt-m0.4-rev mem (s '%7 (and-i32 (g '%6 loc) -2147483648) loc) pred))
(defund @cbrt-%6-rev (mem loc pred)
  (@cbrt-%7-rev mem (s '%6 (load-i32 (g '%hx loc) mem) loc) pred))
(defund @cbrt-m0.3-rev (mem loc pred)
  (@cbrt-%6-rev (store-i32 (g '%5 loc) (g '%hx loc) mem) loc pred))
(defund @cbrt-%5-rev (mem loc pred)
  (@cbrt-m0.3-rev mem (s '%5 (load-i32 (g '%4 loc) mem) loc) pred))
(defund @cbrt-%4-rev (mem loc pred)
  (@cbrt-%5-rev mem (s '%4 (getelementptr-i32 (g '%3 loc) 1) loc) pred))
(defund @cbrt-%3-rev (mem loc pred)
  (@cbrt-%4-rev mem (s '%3 (bitcast-double*-to-i32* (g '%2 loc)) loc) pred))
(defund @cbrt-m0.2-rev (mem loc pred)
  (@cbrt-%3-rev (store-double #x0000000000000000 (g '%t loc) mem) loc pred))
(defund @cbrt-m0.1-rev (mem loc pred)
  (@cbrt-m0.2-rev (store-double (g '%x loc) (g '%2 loc) mem) loc pred))
(defund @cbrt-%sign-rev (mem loc pred)
  (@cbrt-m0.1-rev (alloca-i32 'sign 1 mem) (s '%sign '(sign . 0) loc) pred))
(defund @cbrt-%w-rev (mem loc pred)
  (@cbrt-%sign-rev (alloca-double 'w 1 mem) (s '%w '(w . 0) loc) pred))
(defund @cbrt-%t-rev (mem loc pred)
  (@cbrt-%w-rev (alloca-double 't 1 mem) (s '%t '(t . 0) loc) pred))
(defund @cbrt-%s-rev (mem loc pred)
  (@cbrt-%t-rev (alloca-double 's 1 mem) (s '%s '(s . 0) loc) pred))
(defund @cbrt-%r-rev (mem loc pred)
  (@cbrt-%s-rev (alloca-double 'r 1 mem) (s '%r '(r . 0) loc) pred))
(defund @cbrt-%hx-rev (mem loc pred)
  (@cbrt-%r-rev (alloca-i32 'hx 1 mem) (s '%hx '(hx . 0) loc) pred))
(defund @cbrt-%2-rev (mem loc pred)
  (@cbrt-%hx-rev (alloca-double 'x 1 mem) (s '%2 '(x . 0) loc) pred))
(defund @cbrt-%1-rev (mem loc pred)
  (@cbrt-%2-rev (alloca-double 'ret 1 mem) (s '%1 '(ret . 0) loc) pred))

(defund @cbrt-%0-rev (mem loc pred)
  (@cbrt-%1-rev mem loc pred))

(defruled @cbrt-%0-expand-rev-as-@cbrt-%1-rev
  (equal (@cbrt-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@cbrt-%1-rev
            (@cbrt-%0-mem s0)
            (@cbrt-%0-loc s0)
            (@cbrt-%0-pred s0))))
  :enable (@cbrt-%0-rev @cbrt-%0-mem @cbrt-%0-loc @cbrt-%0-pred))
(defruled @cbrt-%0-expand-rev-as-@cbrt-%2-rev
  (equal (@cbrt-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@cbrt-%2-rev
            (@cbrt-%1-mem s0)
            (@cbrt-%1-loc s0)
            (@cbrt-%0-pred s0))))
  :enable (@cbrt-%0-expand-rev-as-@cbrt-%1-rev @cbrt-%1-rev @cbrt-%1-mem @cbrt-%1-loc))
(defruled @cbrt-%0-expand-rev-as-@cbrt-%hx-rev
  (equal (@cbrt-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@cbrt-%hx-rev
            (@cbrt-%2-mem s0)
            (@cbrt-%2-loc s0)
            (@cbrt-%0-pred s0))))
  :enable (@cbrt-%0-expand-rev-as-@cbrt-%2-rev @cbrt-%2-rev @cbrt-%2-mem @cbrt-%2-loc))
(defruled @cbrt-%0-expand-rev-as-@cbrt-%r-rev
  (equal (@cbrt-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@cbrt-%r-rev
            (@cbrt-%hx-mem s0)
            (@cbrt-%hx-loc s0)
            (@cbrt-%0-pred s0))))
  :enable (@cbrt-%0-expand-rev-as-@cbrt-%hx-rev @cbrt-%hx-rev @cbrt-%hx-mem @cbrt-%hx-loc))
(defruled @cbrt-%0-expand-rev-as-@cbrt-%s-rev
  (equal (@cbrt-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@cbrt-%s-rev
            (@cbrt-%r-mem s0)
            (@cbrt-%r-loc s0)
            (@cbrt-%0-pred s0))))
  :enable (@cbrt-%0-expand-rev-as-@cbrt-%r-rev @cbrt-%r-rev @cbrt-%r-mem @cbrt-%r-loc))
(defruled @cbrt-%0-expand-rev-as-@cbrt-%t-rev
  (equal (@cbrt-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@cbrt-%t-rev
            (@cbrt-%s-mem s0)
            (@cbrt-%s-loc s0)
            (@cbrt-%0-pred s0))))
  :enable (@cbrt-%0-expand-rev-as-@cbrt-%s-rev @cbrt-%s-rev @cbrt-%s-mem @cbrt-%s-loc))
(defruled @cbrt-%0-expand-rev-as-@cbrt-%w-rev
  (equal (@cbrt-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@cbrt-%w-rev
            (@cbrt-%t-mem s0)
            (@cbrt-%t-loc s0)
            (@cbrt-%0-pred s0))))
  :enable (@cbrt-%0-expand-rev-as-@cbrt-%t-rev @cbrt-%t-rev @cbrt-%t-mem @cbrt-%t-loc))
(defruled @cbrt-%0-expand-rev-as-@cbrt-%sign-rev
  (equal (@cbrt-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@cbrt-%sign-rev
            (@cbrt-%w-mem s0)
            (@cbrt-%w-loc s0)
            (@cbrt-%0-pred s0))))
  :enable (@cbrt-%0-expand-rev-as-@cbrt-%w-rev @cbrt-%w-rev @cbrt-%w-mem @cbrt-%w-loc))
(defruled @cbrt-%0-expand-rev-as-@cbrt-m0.1-rev
  (equal (@cbrt-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@cbrt-m0.1-rev
            (@cbrt-%sign-mem s0)
            (@cbrt-%sign-loc s0)
            (@cbrt-%0-pred s0))))
  :enable (@cbrt-%0-expand-rev-as-@cbrt-%sign-rev @cbrt-%sign-rev @cbrt-%sign-mem @cbrt-%sign-loc))
(defruled @cbrt-%0-expand-rev-as-@cbrt-m0.2-rev
  (equal (@cbrt-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@cbrt-m0.2-rev
            (@cbrt-m0.1-mem s0)
            (@cbrt-%sign-loc s0)
            (@cbrt-%0-pred s0))))
  :enable (@cbrt-%0-expand-rev-as-@cbrt-m0.1-rev @cbrt-m0.1-rev @cbrt-m0.1-mem))
(defruled @cbrt-%0-expand-rev-as-@cbrt-%3-rev
  (equal (@cbrt-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@cbrt-%3-rev
            (@cbrt-m0.2-mem s0)
            (@cbrt-%sign-loc s0)
            (@cbrt-%0-pred s0))))
  :enable (@cbrt-%0-expand-rev-as-@cbrt-m0.2-rev @cbrt-m0.2-rev @cbrt-m0.2-mem))
(defruled @cbrt-%0-expand-rev-as-@cbrt-%4-rev
  (equal (@cbrt-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@cbrt-%4-rev
            (@cbrt-m0.2-mem s0)
            (@cbrt-%3-loc s0)
            (@cbrt-%0-pred s0))))
  :enable (@cbrt-%0-expand-rev-as-@cbrt-%3-rev @cbrt-%3-rev @cbrt-%3-loc @cbrt-%3-val))
(defruled @cbrt-%0-expand-rev-as-@cbrt-%5-rev
  (equal (@cbrt-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@cbrt-%5-rev
            (@cbrt-m0.2-mem s0)
            (@cbrt-%4-loc s0)
            (@cbrt-%0-pred s0))))
  :enable (@cbrt-%0-expand-rev-as-@cbrt-%4-rev @cbrt-%4-rev @cbrt-%4-loc @cbrt-%4-val))
(defruled @cbrt-%0-expand-rev-as-@cbrt-m0.3-rev
  (equal (@cbrt-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@cbrt-m0.3-rev
            (@cbrt-m0.2-mem s0)
            (@cbrt-%5-loc s0)
            (@cbrt-%0-pred s0))))
  :enable (@cbrt-%0-expand-rev-as-@cbrt-%5-rev @cbrt-%5-rev @cbrt-%5-loc @cbrt-%5-val))
(defruled @cbrt-%0-expand-rev-as-@cbrt-%6-rev
  (equal (@cbrt-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@cbrt-%6-rev
            (@cbrt-m0.3-mem s0)
            (@cbrt-%5-loc s0)
            (@cbrt-%0-pred s0))))
  :enable (@cbrt-%0-expand-rev-as-@cbrt-m0.3-rev @cbrt-m0.3-rev @cbrt-m0.3-mem))
(defruled @cbrt-%0-expand-rev-as-@cbrt-%7-rev
  (equal (@cbrt-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@cbrt-%7-rev
            (@cbrt-m0.3-mem s0)
            (@cbrt-%6-loc s0)
            (@cbrt-%0-pred s0))))
  :enable (@cbrt-%0-expand-rev-as-@cbrt-%6-rev @cbrt-%6-rev @cbrt-%6-loc @cbrt-%6-val))
(defruled @cbrt-%0-expand-rev-as-@cbrt-m0.4-rev
  (equal (@cbrt-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@cbrt-m0.4-rev
            (@cbrt-m0.3-mem s0)
            (@cbrt-%7-loc s0)
            (@cbrt-%0-pred s0))))
  :enable (@cbrt-%0-expand-rev-as-@cbrt-%7-rev @cbrt-%7-rev @cbrt-%7-loc @cbrt-%7-val))
(defruled @cbrt-%0-expand-rev-as-@cbrt-%8-rev
  (equal (@cbrt-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@cbrt-%8-rev
            (@cbrt-m0.4-mem s0)
            (@cbrt-%7-loc s0)
            (@cbrt-%0-pred s0))))
  :enable (@cbrt-%0-expand-rev-as-@cbrt-m0.4-rev @cbrt-m0.4-rev @cbrt-m0.4-mem))
(defruled @cbrt-%0-expand-rev-as-@cbrt-%9-rev
  (equal (@cbrt-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@cbrt-%9-rev
            (@cbrt-m0.4-mem s0)
            (@cbrt-%8-loc s0)
            (@cbrt-%0-pred s0))))
  :enable (@cbrt-%0-expand-rev-as-@cbrt-%8-rev @cbrt-%8-rev @cbrt-%8-loc @cbrt-%8-val))
(defruled @cbrt-%0-expand-rev-as-@cbrt-%10-rev
  (equal (@cbrt-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@cbrt-%10-rev
            (@cbrt-m0.4-mem s0)
            (@cbrt-%9-loc s0)
            (@cbrt-%0-pred s0))))
  :enable (@cbrt-%0-expand-rev-as-@cbrt-%9-rev @cbrt-%9-rev @cbrt-%9-loc @cbrt-%9-val))
(defruled @cbrt-%0-expand-rev-as-@cbrt-m0.5-rev
  (equal (@cbrt-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@cbrt-m0.5-rev
            (@cbrt-m0.4-mem s0)
            (@cbrt-%10-loc s0)
            (@cbrt-%0-pred s0))))
  :enable (@cbrt-%0-expand-rev-as-@cbrt-%10-rev @cbrt-%10-rev @cbrt-%10-loc @cbrt-%10-val))
(defruled @cbrt-%0-expand-rev-as-@cbrt-%11-rev
  (equal (@cbrt-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@cbrt-%11-rev
            (@cbrt-m0.5-mem s0)
            (@cbrt-%10-loc s0)
            (@cbrt-%0-pred s0))))
  :enable (@cbrt-%0-expand-rev-as-@cbrt-m0.5-rev @cbrt-m0.5-rev @cbrt-m0.5-mem))
(defruled @cbrt-%0-expand-rev-as-@cbrt-%12-rev
  (equal (@cbrt-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@cbrt-%12-rev
            (@cbrt-m0.5-mem s0)
            (@cbrt-%11-loc s0)
            (@cbrt-%0-pred s0))))
  :enable (@cbrt-%0-expand-rev-as-@cbrt-%11-rev @cbrt-%11-rev @cbrt-%11-loc @cbrt-%11-val))
(defruled @cbrt-%0-expand-rev-as-@cbrt-succ0-rev
  (equal (@cbrt-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@cbrt-succ0-rev
            (@cbrt-m0.5-mem s0)
            (@cbrt-%12-loc s0)
            (@cbrt-%0-pred s0))))
  :enable (@cbrt-%0-expand-rev-as-@cbrt-%12-rev @cbrt-%12-rev @cbrt-%12-loc @cbrt-%12-val))
(defruled @cbrt-%0-expand-rev-as-fwd
  (equal (@cbrt-%0-rev mem loc pred)
         (@cbrt-%0-fwd mem loc pred))
  :enable (@cbrt-%0-expand-rev-as-@cbrt-succ0-rev @cbrt-succ0-rev @cbrt-succ0-lab @cbrt-%0-fwd))

(defund @cbrt-%0-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (mem (alloca-double 'ret 1 mem))
    (loc (s '%1 '(ret . 0) loc))
    (mem (alloca-double 'x 1 mem))
    (loc (s '%2 '(x . 0) loc))
    (mem (alloca-i32 'hx 1 mem))
    (loc (s '%hx '(hx . 0) loc))
    (mem (alloca-double 'r 1 mem))
    (loc (s '%r '(r . 0) loc))
    (mem (alloca-double 's 1 mem))
    (loc (s '%s '(s . 0) loc))
    (mem (alloca-double 't 1 mem))
    (loc (s '%t '(t . 0) loc))
    (mem (alloca-double 'w 1 mem))
    (loc (s '%w '(w . 0) loc))
    (mem (alloca-i32 'sign 1 mem))
    (loc (s '%sign '(sign . 0) loc))
    (mem (store-double (g '%x loc) (g '%2 loc) mem))
    (mem (store-double #x0000000000000000 (g '%t loc) mem))
    (loc (s '%3 (bitcast-double*-to-i32* (g '%2 loc)) loc))
    (loc (s '%4 (getelementptr-i32 (g '%3 loc) 1) loc))
    (loc (s '%5 (load-i32 (g '%4 loc) mem) loc))
    (mem (store-i32 (g '%5 loc) (g '%hx loc) mem))
    (loc (s '%6 (load-i32 (g '%hx loc) mem) loc))
    (loc (s '%7 (and-i32 (g '%6 loc) -2147483648) loc))
    (mem (store-i32 (g '%7 loc) (g '%sign loc) mem))
    (loc (s '%8 (load-i32 (g '%sign loc) mem) loc))
    (loc (s '%9 (load-i32 (g '%hx loc) mem) loc))
    (loc (s '%10 (xor-i32 (g '%9 loc) (g '%8 loc)) loc))
    (mem (store-i32 (g '%10 loc) (g '%hx loc) mem))
    (loc (s '%11 (load-i32 (g '%hx loc) mem) loc))
    (loc (s '%12 (icmp-sge-i32 (g '%11 loc) 2146435072) loc))
    (succ (case (g '%12 loc) (-1 '%13) (0 '%17))))
  (mv succ mem loc)))

(defund @cbrt-%13-mem (s13)
  (car s13))
(defund @cbrt-%13-loc (s13)
  (cadr s13))
(defund @cbrt-%13-pred (s13)
  (caddr s13))
(defund @cbrt-%14-val (s13)
  (load-double (g '%2 (@cbrt-%13-loc s13)) (@cbrt-%13-mem s13)))
(defund @cbrt-%14-loc (s13)
  (s '%14 (@cbrt-%14-val s13) (@cbrt-%13-loc s13)))
(defund @cbrt-%15-val (s13)
  (load-double (g '%2 (@cbrt-%14-loc s13)) (@cbrt-%13-mem s13)))
(defund @cbrt-%15-loc (s13)
  (s '%15 (@cbrt-%15-val s13) (@cbrt-%14-loc s13)))
(defund @cbrt-%16-val (s13)
  (fadd-double (g '%14 (@cbrt-%15-loc s13)) (g '%15 (@cbrt-%15-loc s13))))
(defund @cbrt-%16-loc (s13)
  (s '%16 (@cbrt-%16-val s13) (@cbrt-%15-loc s13)))
(defund @cbrt-m13.1-mem (s13)
  (store-double (g '%16 (@cbrt-%16-loc s13)) (g '%1 (@cbrt-%16-loc s13)) (@cbrt-%13-mem s13)))
(defund @cbrt-succ13-lab (s13)
  (declare (ignore s13))
  '%101)

(defund @cbrt-%13-fwd (mem loc pred)
  (let ((s13 (list mem loc pred)))
    (mv (@cbrt-succ13-lab s13) (@cbrt-m13.1-mem s13) (@cbrt-%16-loc s13))))

(defund @cbrt-succ13-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%101 mem loc))
(defund @cbrt-m13.1-rev (mem loc pred)
  (@cbrt-succ13-rev (store-double (g '%16 loc) (g '%1 loc) mem) loc pred))
(defund @cbrt-%16-rev (mem loc pred)
  (@cbrt-m13.1-rev mem (s '%16 (fadd-double (g '%14 loc) (g '%15 loc)) loc) pred))
(defund @cbrt-%15-rev (mem loc pred)
  (@cbrt-%16-rev mem (s '%15 (load-double (g '%2 loc) mem) loc) pred))
(defund @cbrt-%14-rev (mem loc pred)
  (@cbrt-%15-rev mem (s '%14 (load-double (g '%2 loc) mem) loc) pred))

(defund @cbrt-%13-rev (mem loc pred)
  (@cbrt-%14-rev mem loc pred))

(defruled @cbrt-%13-expand-rev-as-@cbrt-%14-rev
  (equal (@cbrt-%13-rev mem loc pred)
         (let ((s13 (list mem loc pred)))
           (@cbrt-%14-rev
            (@cbrt-%13-mem s13)
            (@cbrt-%13-loc s13)
            (@cbrt-%13-pred s13))))
  :enable (@cbrt-%13-rev @cbrt-%13-mem @cbrt-%13-loc @cbrt-%13-pred))
(defruled @cbrt-%13-expand-rev-as-@cbrt-%15-rev
  (equal (@cbrt-%13-rev mem loc pred)
         (let ((s13 (list mem loc pred)))
           (@cbrt-%15-rev
            (@cbrt-%13-mem s13)
            (@cbrt-%14-loc s13)
            (@cbrt-%13-pred s13))))
  :enable (@cbrt-%13-expand-rev-as-@cbrt-%14-rev @cbrt-%14-rev @cbrt-%14-loc @cbrt-%14-val))
(defruled @cbrt-%13-expand-rev-as-@cbrt-%16-rev
  (equal (@cbrt-%13-rev mem loc pred)
         (let ((s13 (list mem loc pred)))
           (@cbrt-%16-rev
            (@cbrt-%13-mem s13)
            (@cbrt-%15-loc s13)
            (@cbrt-%13-pred s13))))
  :enable (@cbrt-%13-expand-rev-as-@cbrt-%15-rev @cbrt-%15-rev @cbrt-%15-loc @cbrt-%15-val))
(defruled @cbrt-%13-expand-rev-as-@cbrt-m13.1-rev
  (equal (@cbrt-%13-rev mem loc pred)
         (let ((s13 (list mem loc pred)))
           (@cbrt-m13.1-rev
            (@cbrt-%13-mem s13)
            (@cbrt-%16-loc s13)
            (@cbrt-%13-pred s13))))
  :enable (@cbrt-%13-expand-rev-as-@cbrt-%16-rev @cbrt-%16-rev @cbrt-%16-loc @cbrt-%16-val))
(defruled @cbrt-%13-expand-rev-as-@cbrt-succ13-rev
  (equal (@cbrt-%13-rev mem loc pred)
         (let ((s13 (list mem loc pred)))
           (@cbrt-succ13-rev
            (@cbrt-m13.1-mem s13)
            (@cbrt-%16-loc s13)
            (@cbrt-%13-pred s13))))
  :enable (@cbrt-%13-expand-rev-as-@cbrt-m13.1-rev @cbrt-m13.1-rev @cbrt-m13.1-mem))
(defruled @cbrt-%13-expand-rev-as-fwd
  (equal (@cbrt-%13-rev mem loc pred)
         (@cbrt-%13-fwd mem loc pred))
  :enable (@cbrt-%13-expand-rev-as-@cbrt-succ13-rev @cbrt-succ13-rev @cbrt-succ13-lab @cbrt-%13-fwd))

(defund @cbrt-%13-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%14 (load-double (g '%2 loc) mem) loc))
    (loc (s '%15 (load-double (g '%2 loc) mem) loc))
    (loc (s '%16 (fadd-double (g '%14 loc) (g '%15 loc)) loc))
    (mem (store-double (g '%16 loc) (g '%1 loc) mem))
    (succ '%101))
  (mv succ mem loc)))

(defund @cbrt-%17-mem (s17)
  (car s17))
(defund @cbrt-%17-loc (s17)
  (cadr s17))
(defund @cbrt-%17-pred (s17)
  (caddr s17))
(defund @cbrt-%18-val (s17)
  (load-i32 (g '%hx (@cbrt-%17-loc s17)) (@cbrt-%17-mem s17)))
(defund @cbrt-%18-loc (s17)
  (s '%18 (@cbrt-%18-val s17) (@cbrt-%17-loc s17)))
(defund @cbrt-%19-val (s17)
  (bitcast-double*-to-i32* (g '%2 (@cbrt-%18-loc s17))))
(defund @cbrt-%19-loc (s17)
  (s '%19 (@cbrt-%19-val s17) (@cbrt-%18-loc s17)))
(defund @cbrt-%20-val (s17)
  (load-i32 (g '%19 (@cbrt-%19-loc s17)) (@cbrt-%17-mem s17)))
(defund @cbrt-%20-loc (s17)
  (s '%20 (@cbrt-%20-val s17) (@cbrt-%19-loc s17)))
(defund @cbrt-%21-val (s17)
  (or-i32 (g '%18 (@cbrt-%20-loc s17)) (g '%20 (@cbrt-%20-loc s17))))
(defund @cbrt-%21-loc (s17)
  (s '%21 (@cbrt-%21-val s17) (@cbrt-%20-loc s17)))
(defund @cbrt-%22-val (s17)
  (icmp-eq-i32 (g '%21 (@cbrt-%21-loc s17)) 0))
(defund @cbrt-%22-loc (s17)
  (s '%22 (@cbrt-%22-val s17) (@cbrt-%21-loc s17)))
(defund @cbrt-succ17-lab (s17)
  (case (g '%22 (@cbrt-%22-loc s17)) (-1 '%23) (0 '%25)))

(defund @cbrt-%17-fwd (mem loc pred)
  (let ((s17 (list mem loc pred)))
    (mv (@cbrt-succ17-lab s17) (@cbrt-%17-mem s17) (@cbrt-%22-loc s17))))

(defund @cbrt-succ17-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%22 loc) (-1 '%23) (0 '%25)) mem loc))
(defund @cbrt-%22-rev (mem loc pred)
  (@cbrt-succ17-rev mem (s '%22 (icmp-eq-i32 (g '%21 loc) 0) loc) pred))
(defund @cbrt-%21-rev (mem loc pred)
  (@cbrt-%22-rev mem (s '%21 (or-i32 (g '%18 loc) (g '%20 loc)) loc) pred))
(defund @cbrt-%20-rev (mem loc pred)
  (@cbrt-%21-rev mem (s '%20 (load-i32 (g '%19 loc) mem) loc) pred))
(defund @cbrt-%19-rev (mem loc pred)
  (@cbrt-%20-rev mem (s '%19 (bitcast-double*-to-i32* (g '%2 loc)) loc) pred))
(defund @cbrt-%18-rev (mem loc pred)
  (@cbrt-%19-rev mem (s '%18 (load-i32 (g '%hx loc) mem) loc) pred))

(defund @cbrt-%17-rev (mem loc pred)
  (@cbrt-%18-rev mem loc pred))

(defruled @cbrt-%17-expand-rev-as-@cbrt-%18-rev
  (equal (@cbrt-%17-rev mem loc pred)
         (let ((s17 (list mem loc pred)))
           (@cbrt-%18-rev
            (@cbrt-%17-mem s17)
            (@cbrt-%17-loc s17)
            (@cbrt-%17-pred s17))))
  :enable (@cbrt-%17-rev @cbrt-%17-mem @cbrt-%17-loc @cbrt-%17-pred))
(defruled @cbrt-%17-expand-rev-as-@cbrt-%19-rev
  (equal (@cbrt-%17-rev mem loc pred)
         (let ((s17 (list mem loc pred)))
           (@cbrt-%19-rev
            (@cbrt-%17-mem s17)
            (@cbrt-%18-loc s17)
            (@cbrt-%17-pred s17))))
  :enable (@cbrt-%17-expand-rev-as-@cbrt-%18-rev @cbrt-%18-rev @cbrt-%18-loc @cbrt-%18-val))
(defruled @cbrt-%17-expand-rev-as-@cbrt-%20-rev
  (equal (@cbrt-%17-rev mem loc pred)
         (let ((s17 (list mem loc pred)))
           (@cbrt-%20-rev
            (@cbrt-%17-mem s17)
            (@cbrt-%19-loc s17)
            (@cbrt-%17-pred s17))))
  :enable (@cbrt-%17-expand-rev-as-@cbrt-%19-rev @cbrt-%19-rev @cbrt-%19-loc @cbrt-%19-val))
(defruled @cbrt-%17-expand-rev-as-@cbrt-%21-rev
  (equal (@cbrt-%17-rev mem loc pred)
         (let ((s17 (list mem loc pred)))
           (@cbrt-%21-rev
            (@cbrt-%17-mem s17)
            (@cbrt-%20-loc s17)
            (@cbrt-%17-pred s17))))
  :enable (@cbrt-%17-expand-rev-as-@cbrt-%20-rev @cbrt-%20-rev @cbrt-%20-loc @cbrt-%20-val))
(defruled @cbrt-%17-expand-rev-as-@cbrt-%22-rev
  (equal (@cbrt-%17-rev mem loc pred)
         (let ((s17 (list mem loc pred)))
           (@cbrt-%22-rev
            (@cbrt-%17-mem s17)
            (@cbrt-%21-loc s17)
            (@cbrt-%17-pred s17))))
  :enable (@cbrt-%17-expand-rev-as-@cbrt-%21-rev @cbrt-%21-rev @cbrt-%21-loc @cbrt-%21-val))
(defruled @cbrt-%17-expand-rev-as-@cbrt-succ17-rev
  (equal (@cbrt-%17-rev mem loc pred)
         (let ((s17 (list mem loc pred)))
           (@cbrt-succ17-rev
            (@cbrt-%17-mem s17)
            (@cbrt-%22-loc s17)
            (@cbrt-%17-pred s17))))
  :enable (@cbrt-%17-expand-rev-as-@cbrt-%22-rev @cbrt-%22-rev @cbrt-%22-loc @cbrt-%22-val))
(defruled @cbrt-%17-expand-rev-as-fwd
  (equal (@cbrt-%17-rev mem loc pred)
         (@cbrt-%17-fwd mem loc pred))
  :enable (@cbrt-%17-expand-rev-as-@cbrt-succ17-rev @cbrt-succ17-rev @cbrt-succ17-lab @cbrt-%17-fwd))

(defund @cbrt-%17-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%18 (load-i32 (g '%hx loc) mem) loc))
    (loc (s '%19 (bitcast-double*-to-i32* (g '%2 loc)) loc))
    (loc (s '%20 (load-i32 (g '%19 loc) mem) loc))
    (loc (s '%21 (or-i32 (g '%18 loc) (g '%20 loc)) loc))
    (loc (s '%22 (icmp-eq-i32 (g '%21 loc) 0) loc))
    (succ (case (g '%22 loc) (-1 '%23) (0 '%25))))
  (mv succ mem loc)))

(defund @cbrt-%23-mem (s23)
  (car s23))
(defund @cbrt-%23-loc (s23)
  (cadr s23))
(defund @cbrt-%23-pred (s23)
  (caddr s23))
(defund @cbrt-%24-val (s23)
  (load-double (g '%2 (@cbrt-%23-loc s23)) (@cbrt-%23-mem s23)))
(defund @cbrt-%24-loc (s23)
  (s '%24 (@cbrt-%24-val s23) (@cbrt-%23-loc s23)))
(defund @cbrt-m23.1-mem (s23)
  (store-double (g '%24 (@cbrt-%24-loc s23)) (g '%1 (@cbrt-%24-loc s23)) (@cbrt-%23-mem s23)))
(defund @cbrt-succ23-lab (s23)
  (declare (ignore s23))
  '%101)

(defund @cbrt-%23-fwd (mem loc pred)
  (let ((s23 (list mem loc pred)))
    (mv (@cbrt-succ23-lab s23) (@cbrt-m23.1-mem s23) (@cbrt-%24-loc s23))))

(defund @cbrt-succ23-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%101 mem loc))
(defund @cbrt-m23.1-rev (mem loc pred)
  (@cbrt-succ23-rev (store-double (g '%24 loc) (g '%1 loc) mem) loc pred))
(defund @cbrt-%24-rev (mem loc pred)
  (@cbrt-m23.1-rev mem (s '%24 (load-double (g '%2 loc) mem) loc) pred))

(defund @cbrt-%23-rev (mem loc pred)
  (@cbrt-%24-rev mem loc pred))

(defruled @cbrt-%23-expand-rev-as-@cbrt-%24-rev
  (equal (@cbrt-%23-rev mem loc pred)
         (let ((s23 (list mem loc pred)))
           (@cbrt-%24-rev
            (@cbrt-%23-mem s23)
            (@cbrt-%23-loc s23)
            (@cbrt-%23-pred s23))))
  :enable (@cbrt-%23-rev @cbrt-%23-mem @cbrt-%23-loc @cbrt-%23-pred))
(defruled @cbrt-%23-expand-rev-as-@cbrt-m23.1-rev
  (equal (@cbrt-%23-rev mem loc pred)
         (let ((s23 (list mem loc pred)))
           (@cbrt-m23.1-rev
            (@cbrt-%23-mem s23)
            (@cbrt-%24-loc s23)
            (@cbrt-%23-pred s23))))
  :enable (@cbrt-%23-expand-rev-as-@cbrt-%24-rev @cbrt-%24-rev @cbrt-%24-loc @cbrt-%24-val))
(defruled @cbrt-%23-expand-rev-as-@cbrt-succ23-rev
  (equal (@cbrt-%23-rev mem loc pred)
         (let ((s23 (list mem loc pred)))
           (@cbrt-succ23-rev
            (@cbrt-m23.1-mem s23)
            (@cbrt-%24-loc s23)
            (@cbrt-%23-pred s23))))
  :enable (@cbrt-%23-expand-rev-as-@cbrt-m23.1-rev @cbrt-m23.1-rev @cbrt-m23.1-mem))
(defruled @cbrt-%23-expand-rev-as-fwd
  (equal (@cbrt-%23-rev mem loc pred)
         (@cbrt-%23-fwd mem loc pred))
  :enable (@cbrt-%23-expand-rev-as-@cbrt-succ23-rev @cbrt-succ23-rev @cbrt-succ23-lab @cbrt-%23-fwd))

(defund @cbrt-%23-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%24 (load-double (g '%2 loc) mem) loc))
    (mem (store-double (g '%24 loc) (g '%1 loc) mem))
    (succ '%101))
  (mv succ mem loc)))

(defund @cbrt-%25-mem (s25)
  (car s25))
(defund @cbrt-%25-loc (s25)
  (cadr s25))
(defund @cbrt-%25-pred (s25)
  (caddr s25))
(defund @cbrt-%26-val (s25)
  (load-i32 (g '%hx (@cbrt-%25-loc s25)) (@cbrt-%25-mem s25)))
(defund @cbrt-%26-loc (s25)
  (s '%26 (@cbrt-%26-val s25) (@cbrt-%25-loc s25)))
(defund @cbrt-%27-val (s25)
  (bitcast-double*-to-i32* (g '%2 (@cbrt-%26-loc s25))))
(defund @cbrt-%27-loc (s25)
  (s '%27 (@cbrt-%27-val s25) (@cbrt-%26-loc s25)))
(defund @cbrt-%28-val (s25)
  (getelementptr-i32 (g '%27 (@cbrt-%27-loc s25)) 1))
(defund @cbrt-%28-loc (s25)
  (s '%28 (@cbrt-%28-val s25) (@cbrt-%27-loc s25)))
(defund @cbrt-m25.1-mem (s25)
  (store-i32 (g '%26 (@cbrt-%28-loc s25)) (g '%28 (@cbrt-%28-loc s25)) (@cbrt-%25-mem s25)))
(defund @cbrt-%29-val (s25)
  (load-i32 (g '%hx (@cbrt-%28-loc s25)) (@cbrt-m25.1-mem s25)))
(defund @cbrt-%29-loc (s25)
  (s '%29 (@cbrt-%29-val s25) (@cbrt-%28-loc s25)))
(defund @cbrt-%30-val (s25)
  (icmp-slt-i32 (g '%29 (@cbrt-%29-loc s25)) 1048576))
(defund @cbrt-%30-loc (s25)
  (s '%30 (@cbrt-%30-val s25) (@cbrt-%29-loc s25)))
(defund @cbrt-succ25-lab (s25)
  (case (g '%30 (@cbrt-%30-loc s25)) (-1 '%31) (0 '%44)))

(defund @cbrt-%25-fwd (mem loc pred)
  (let ((s25 (list mem loc pred)))
    (mv (@cbrt-succ25-lab s25) (@cbrt-m25.1-mem s25) (@cbrt-%30-loc s25))))

(defund @cbrt-succ25-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%30 loc) (-1 '%31) (0 '%44)) mem loc))
(defund @cbrt-%30-rev (mem loc pred)
  (@cbrt-succ25-rev mem (s '%30 (icmp-slt-i32 (g '%29 loc) 1048576) loc) pred))
(defund @cbrt-%29-rev (mem loc pred)
  (@cbrt-%30-rev mem (s '%29 (load-i32 (g '%hx loc) mem) loc) pred))
(defund @cbrt-m25.1-rev (mem loc pred)
  (@cbrt-%29-rev (store-i32 (g '%26 loc) (g '%28 loc) mem) loc pred))
(defund @cbrt-%28-rev (mem loc pred)
  (@cbrt-m25.1-rev mem (s '%28 (getelementptr-i32 (g '%27 loc) 1) loc) pred))
(defund @cbrt-%27-rev (mem loc pred)
  (@cbrt-%28-rev mem (s '%27 (bitcast-double*-to-i32* (g '%2 loc)) loc) pred))
(defund @cbrt-%26-rev (mem loc pred)
  (@cbrt-%27-rev mem (s '%26 (load-i32 (g '%hx loc) mem) loc) pred))

(defund @cbrt-%25-rev (mem loc pred)
  (@cbrt-%26-rev mem loc pred))

(defruled @cbrt-%25-expand-rev-as-@cbrt-%26-rev
  (equal (@cbrt-%25-rev mem loc pred)
         (let ((s25 (list mem loc pred)))
           (@cbrt-%26-rev
            (@cbrt-%25-mem s25)
            (@cbrt-%25-loc s25)
            (@cbrt-%25-pred s25))))
  :enable (@cbrt-%25-rev @cbrt-%25-mem @cbrt-%25-loc @cbrt-%25-pred))
(defruled @cbrt-%25-expand-rev-as-@cbrt-%27-rev
  (equal (@cbrt-%25-rev mem loc pred)
         (let ((s25 (list mem loc pred)))
           (@cbrt-%27-rev
            (@cbrt-%25-mem s25)
            (@cbrt-%26-loc s25)
            (@cbrt-%25-pred s25))))
  :enable (@cbrt-%25-expand-rev-as-@cbrt-%26-rev @cbrt-%26-rev @cbrt-%26-loc @cbrt-%26-val))
(defruled @cbrt-%25-expand-rev-as-@cbrt-%28-rev
  (equal (@cbrt-%25-rev mem loc pred)
         (let ((s25 (list mem loc pred)))
           (@cbrt-%28-rev
            (@cbrt-%25-mem s25)
            (@cbrt-%27-loc s25)
            (@cbrt-%25-pred s25))))
  :enable (@cbrt-%25-expand-rev-as-@cbrt-%27-rev @cbrt-%27-rev @cbrt-%27-loc @cbrt-%27-val))
(defruled @cbrt-%25-expand-rev-as-@cbrt-m25.1-rev
  (equal (@cbrt-%25-rev mem loc pred)
         (let ((s25 (list mem loc pred)))
           (@cbrt-m25.1-rev
            (@cbrt-%25-mem s25)
            (@cbrt-%28-loc s25)
            (@cbrt-%25-pred s25))))
  :enable (@cbrt-%25-expand-rev-as-@cbrt-%28-rev @cbrt-%28-rev @cbrt-%28-loc @cbrt-%28-val))
(defruled @cbrt-%25-expand-rev-as-@cbrt-%29-rev
  (equal (@cbrt-%25-rev mem loc pred)
         (let ((s25 (list mem loc pred)))
           (@cbrt-%29-rev
            (@cbrt-m25.1-mem s25)
            (@cbrt-%28-loc s25)
            (@cbrt-%25-pred s25))))
  :enable (@cbrt-%25-expand-rev-as-@cbrt-m25.1-rev @cbrt-m25.1-rev @cbrt-m25.1-mem))
(defruled @cbrt-%25-expand-rev-as-@cbrt-%30-rev
  (equal (@cbrt-%25-rev mem loc pred)
         (let ((s25 (list mem loc pred)))
           (@cbrt-%30-rev
            (@cbrt-m25.1-mem s25)
            (@cbrt-%29-loc s25)
            (@cbrt-%25-pred s25))))
  :enable (@cbrt-%25-expand-rev-as-@cbrt-%29-rev @cbrt-%29-rev @cbrt-%29-loc @cbrt-%29-val))
(defruled @cbrt-%25-expand-rev-as-@cbrt-succ25-rev
  (equal (@cbrt-%25-rev mem loc pred)
         (let ((s25 (list mem loc pred)))
           (@cbrt-succ25-rev
            (@cbrt-m25.1-mem s25)
            (@cbrt-%30-loc s25)
            (@cbrt-%25-pred s25))))
  :enable (@cbrt-%25-expand-rev-as-@cbrt-%30-rev @cbrt-%30-rev @cbrt-%30-loc @cbrt-%30-val))
(defruled @cbrt-%25-expand-rev-as-fwd
  (equal (@cbrt-%25-rev mem loc pred)
         (@cbrt-%25-fwd mem loc pred))
  :enable (@cbrt-%25-expand-rev-as-@cbrt-succ25-rev @cbrt-succ25-rev @cbrt-succ25-lab @cbrt-%25-fwd))

(defund @cbrt-%25-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%26 (load-i32 (g '%hx loc) mem) loc))
    (loc (s '%27 (bitcast-double*-to-i32* (g '%2 loc)) loc))
    (loc (s '%28 (getelementptr-i32 (g '%27 loc) 1) loc))
    (mem (store-i32 (g '%26 loc) (g '%28 loc) mem))
    (loc (s '%29 (load-i32 (g '%hx loc) mem) loc))
    (loc (s '%30 (icmp-slt-i32 (g '%29 loc) 1048576) loc))
    (succ (case (g '%30 loc) (-1 '%31) (0 '%44))))
  (mv succ mem loc)))

(defund @cbrt-%31-mem (s31)
  (car s31))
(defund @cbrt-%31-loc (s31)
  (cadr s31))
(defund @cbrt-%31-pred (s31)
  (caddr s31))
(defund @cbrt-%32-val (s31)
  (bitcast-double*-to-i32* (g '%t (@cbrt-%31-loc s31))))
(defund @cbrt-%32-loc (s31)
  (s '%32 (@cbrt-%32-val s31) (@cbrt-%31-loc s31)))
(defund @cbrt-%33-val (s31)
  (getelementptr-i32 (g '%32 (@cbrt-%32-loc s31)) 1))
(defund @cbrt-%33-loc (s31)
  (s '%33 (@cbrt-%33-val s31) (@cbrt-%32-loc s31)))
(defund @cbrt-m31.1-mem (s31)
  (store-i32 1129316352 (g '%33 (@cbrt-%33-loc s31)) (@cbrt-%31-mem s31)))
(defund @cbrt-%34-val (s31)
  (load-double (g '%2 (@cbrt-%33-loc s31)) (@cbrt-m31.1-mem s31)))
(defund @cbrt-%34-loc (s31)
  (s '%34 (@cbrt-%34-val s31) (@cbrt-%33-loc s31)))
(defund @cbrt-%35-val (s31)
  (load-double (g '%t (@cbrt-%34-loc s31)) (@cbrt-m31.1-mem s31)))
(defund @cbrt-%35-loc (s31)
  (s '%35 (@cbrt-%35-val s31) (@cbrt-%34-loc s31)))
(defund @cbrt-%36-val (s31)
  (fmul-double (g '%35 (@cbrt-%35-loc s31)) (g '%34 (@cbrt-%35-loc s31))))
(defund @cbrt-%36-loc (s31)
  (s '%36 (@cbrt-%36-val s31) (@cbrt-%35-loc s31)))
(defund @cbrt-m31.2-mem (s31)
  (store-double (g '%36 (@cbrt-%36-loc s31)) (g '%t (@cbrt-%36-loc s31)) (@cbrt-m31.1-mem s31)))
(defund @cbrt-%37-val (s31)
  (bitcast-double*-to-i32* (g '%t (@cbrt-%36-loc s31))))
(defund @cbrt-%37-loc (s31)
  (s '%37 (@cbrt-%37-val s31) (@cbrt-%36-loc s31)))
(defund @cbrt-%38-val (s31)
  (getelementptr-i32 (g '%37 (@cbrt-%37-loc s31)) 1))
(defund @cbrt-%38-loc (s31)
  (s '%38 (@cbrt-%38-val s31) (@cbrt-%37-loc s31)))
(defund @cbrt-%39-val (s31)
  (load-i32 (g '%38 (@cbrt-%38-loc s31)) (@cbrt-m31.2-mem s31)))
(defund @cbrt-%39-loc (s31)
  (s '%39 (@cbrt-%39-val s31) (@cbrt-%38-loc s31)))
(defund @cbrt-%40-val (s31)
  (sdiv-i32 (g '%39 (@cbrt-%39-loc s31)) 3))
(defund @cbrt-%40-loc (s31)
  (s '%40 (@cbrt-%40-val s31) (@cbrt-%39-loc s31)))
(defund @cbrt-%41-val (s31)
  (add-i32 (g '%40 (@cbrt-%40-loc s31)) 696219795))
(defund @cbrt-%41-loc (s31)
  (s '%41 (@cbrt-%41-val s31) (@cbrt-%40-loc s31)))
(defund @cbrt-%42-val (s31)
  (bitcast-double*-to-i32* (g '%t (@cbrt-%41-loc s31))))
(defund @cbrt-%42-loc (s31)
  (s '%42 (@cbrt-%42-val s31) (@cbrt-%41-loc s31)))
(defund @cbrt-%43-val (s31)
  (getelementptr-i32 (g '%42 (@cbrt-%42-loc s31)) 1))
(defund @cbrt-%43-loc (s31)
  (s '%43 (@cbrt-%43-val s31) (@cbrt-%42-loc s31)))
(defund @cbrt-m31.3-mem (s31)
  (store-i32 (g '%41 (@cbrt-%43-loc s31)) (g '%43 (@cbrt-%43-loc s31)) (@cbrt-m31.2-mem s31)))
(defund @cbrt-succ31-lab (s31)
  (declare (ignore s31))
  '%50)

(defund @cbrt-%31-fwd (mem loc pred)
  (let ((s31 (list mem loc pred)))
    (mv (@cbrt-succ31-lab s31) (@cbrt-m31.3-mem s31) (@cbrt-%43-loc s31))))

(defund @cbrt-succ31-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%50 mem loc))
(defund @cbrt-m31.3-rev (mem loc pred)
  (@cbrt-succ31-rev (store-i32 (g '%41 loc) (g '%43 loc) mem) loc pred))
(defund @cbrt-%43-rev (mem loc pred)
  (@cbrt-m31.3-rev mem (s '%43 (getelementptr-i32 (g '%42 loc) 1) loc) pred))
(defund @cbrt-%42-rev (mem loc pred)
  (@cbrt-%43-rev mem (s '%42 (bitcast-double*-to-i32* (g '%t loc)) loc) pred))
(defund @cbrt-%41-rev (mem loc pred)
  (@cbrt-%42-rev mem (s '%41 (add-i32 (g '%40 loc) 696219795) loc) pred))
(defund @cbrt-%40-rev (mem loc pred)
  (@cbrt-%41-rev mem (s '%40 (sdiv-i32 (g '%39 loc) 3) loc) pred))
(defund @cbrt-%39-rev (mem loc pred)
  (@cbrt-%40-rev mem (s '%39 (load-i32 (g '%38 loc) mem) loc) pred))
(defund @cbrt-%38-rev (mem loc pred)
  (@cbrt-%39-rev mem (s '%38 (getelementptr-i32 (g '%37 loc) 1) loc) pred))
(defund @cbrt-%37-rev (mem loc pred)
  (@cbrt-%38-rev mem (s '%37 (bitcast-double*-to-i32* (g '%t loc)) loc) pred))
(defund @cbrt-m31.2-rev (mem loc pred)
  (@cbrt-%37-rev (store-double (g '%36 loc) (g '%t loc) mem) loc pred))
(defund @cbrt-%36-rev (mem loc pred)
  (@cbrt-m31.2-rev mem (s '%36 (fmul-double (g '%35 loc) (g '%34 loc)) loc) pred))
(defund @cbrt-%35-rev (mem loc pred)
  (@cbrt-%36-rev mem (s '%35 (load-double (g '%t loc) mem) loc) pred))
(defund @cbrt-%34-rev (mem loc pred)
  (@cbrt-%35-rev mem (s '%34 (load-double (g '%2 loc) mem) loc) pred))
(defund @cbrt-m31.1-rev (mem loc pred)
  (@cbrt-%34-rev (store-i32 1129316352 (g '%33 loc) mem) loc pred))
(defund @cbrt-%33-rev (mem loc pred)
  (@cbrt-m31.1-rev mem (s '%33 (getelementptr-i32 (g '%32 loc) 1) loc) pred))
(defund @cbrt-%32-rev (mem loc pred)
  (@cbrt-%33-rev mem (s '%32 (bitcast-double*-to-i32* (g '%t loc)) loc) pred))

(defund @cbrt-%31-rev (mem loc pred)
  (@cbrt-%32-rev mem loc pred))

(defruled @cbrt-%31-expand-rev-as-@cbrt-%32-rev
  (equal (@cbrt-%31-rev mem loc pred)
         (let ((s31 (list mem loc pred)))
           (@cbrt-%32-rev
            (@cbrt-%31-mem s31)
            (@cbrt-%31-loc s31)
            (@cbrt-%31-pred s31))))
  :enable (@cbrt-%31-rev @cbrt-%31-mem @cbrt-%31-loc @cbrt-%31-pred))
(defruled @cbrt-%31-expand-rev-as-@cbrt-%33-rev
  (equal (@cbrt-%31-rev mem loc pred)
         (let ((s31 (list mem loc pred)))
           (@cbrt-%33-rev
            (@cbrt-%31-mem s31)
            (@cbrt-%32-loc s31)
            (@cbrt-%31-pred s31))))
  :enable (@cbrt-%31-expand-rev-as-@cbrt-%32-rev @cbrt-%32-rev @cbrt-%32-loc @cbrt-%32-val))
(defruled @cbrt-%31-expand-rev-as-@cbrt-m31.1-rev
  (equal (@cbrt-%31-rev mem loc pred)
         (let ((s31 (list mem loc pred)))
           (@cbrt-m31.1-rev
            (@cbrt-%31-mem s31)
            (@cbrt-%33-loc s31)
            (@cbrt-%31-pred s31))))
  :enable (@cbrt-%31-expand-rev-as-@cbrt-%33-rev @cbrt-%33-rev @cbrt-%33-loc @cbrt-%33-val))
(defruled @cbrt-%31-expand-rev-as-@cbrt-%34-rev
  (equal (@cbrt-%31-rev mem loc pred)
         (let ((s31 (list mem loc pred)))
           (@cbrt-%34-rev
            (@cbrt-m31.1-mem s31)
            (@cbrt-%33-loc s31)
            (@cbrt-%31-pred s31))))
  :enable (@cbrt-%31-expand-rev-as-@cbrt-m31.1-rev @cbrt-m31.1-rev @cbrt-m31.1-mem))
(defruled @cbrt-%31-expand-rev-as-@cbrt-%35-rev
  (equal (@cbrt-%31-rev mem loc pred)
         (let ((s31 (list mem loc pred)))
           (@cbrt-%35-rev
            (@cbrt-m31.1-mem s31)
            (@cbrt-%34-loc s31)
            (@cbrt-%31-pred s31))))
  :enable (@cbrt-%31-expand-rev-as-@cbrt-%34-rev @cbrt-%34-rev @cbrt-%34-loc @cbrt-%34-val))
(defruled @cbrt-%31-expand-rev-as-@cbrt-%36-rev
  (equal (@cbrt-%31-rev mem loc pred)
         (let ((s31 (list mem loc pred)))
           (@cbrt-%36-rev
            (@cbrt-m31.1-mem s31)
            (@cbrt-%35-loc s31)
            (@cbrt-%31-pred s31))))
  :enable (@cbrt-%31-expand-rev-as-@cbrt-%35-rev @cbrt-%35-rev @cbrt-%35-loc @cbrt-%35-val))
(defruled @cbrt-%31-expand-rev-as-@cbrt-m31.2-rev
  (equal (@cbrt-%31-rev mem loc pred)
         (let ((s31 (list mem loc pred)))
           (@cbrt-m31.2-rev
            (@cbrt-m31.1-mem s31)
            (@cbrt-%36-loc s31)
            (@cbrt-%31-pred s31))))
  :enable (@cbrt-%31-expand-rev-as-@cbrt-%36-rev @cbrt-%36-rev @cbrt-%36-loc @cbrt-%36-val))
(defruled @cbrt-%31-expand-rev-as-@cbrt-%37-rev
  (equal (@cbrt-%31-rev mem loc pred)
         (let ((s31 (list mem loc pred)))
           (@cbrt-%37-rev
            (@cbrt-m31.2-mem s31)
            (@cbrt-%36-loc s31)
            (@cbrt-%31-pred s31))))
  :enable (@cbrt-%31-expand-rev-as-@cbrt-m31.2-rev @cbrt-m31.2-rev @cbrt-m31.2-mem))
(defruled @cbrt-%31-expand-rev-as-@cbrt-%38-rev
  (equal (@cbrt-%31-rev mem loc pred)
         (let ((s31 (list mem loc pred)))
           (@cbrt-%38-rev
            (@cbrt-m31.2-mem s31)
            (@cbrt-%37-loc s31)
            (@cbrt-%31-pred s31))))
  :enable (@cbrt-%31-expand-rev-as-@cbrt-%37-rev @cbrt-%37-rev @cbrt-%37-loc @cbrt-%37-val))
(defruled @cbrt-%31-expand-rev-as-@cbrt-%39-rev
  (equal (@cbrt-%31-rev mem loc pred)
         (let ((s31 (list mem loc pred)))
           (@cbrt-%39-rev
            (@cbrt-m31.2-mem s31)
            (@cbrt-%38-loc s31)
            (@cbrt-%31-pred s31))))
  :enable (@cbrt-%31-expand-rev-as-@cbrt-%38-rev @cbrt-%38-rev @cbrt-%38-loc @cbrt-%38-val))
(defruled @cbrt-%31-expand-rev-as-@cbrt-%40-rev
  (equal (@cbrt-%31-rev mem loc pred)
         (let ((s31 (list mem loc pred)))
           (@cbrt-%40-rev
            (@cbrt-m31.2-mem s31)
            (@cbrt-%39-loc s31)
            (@cbrt-%31-pred s31))))
  :enable (@cbrt-%31-expand-rev-as-@cbrt-%39-rev @cbrt-%39-rev @cbrt-%39-loc @cbrt-%39-val))
(defruled @cbrt-%31-expand-rev-as-@cbrt-%41-rev
  (equal (@cbrt-%31-rev mem loc pred)
         (let ((s31 (list mem loc pred)))
           (@cbrt-%41-rev
            (@cbrt-m31.2-mem s31)
            (@cbrt-%40-loc s31)
            (@cbrt-%31-pred s31))))
  :enable (@cbrt-%31-expand-rev-as-@cbrt-%40-rev @cbrt-%40-rev @cbrt-%40-loc @cbrt-%40-val))
(defruled @cbrt-%31-expand-rev-as-@cbrt-%42-rev
  (equal (@cbrt-%31-rev mem loc pred)
         (let ((s31 (list mem loc pred)))
           (@cbrt-%42-rev
            (@cbrt-m31.2-mem s31)
            (@cbrt-%41-loc s31)
            (@cbrt-%31-pred s31))))
  :enable (@cbrt-%31-expand-rev-as-@cbrt-%41-rev @cbrt-%41-rev @cbrt-%41-loc @cbrt-%41-val))
(defruled @cbrt-%31-expand-rev-as-@cbrt-%43-rev
  (equal (@cbrt-%31-rev mem loc pred)
         (let ((s31 (list mem loc pred)))
           (@cbrt-%43-rev
            (@cbrt-m31.2-mem s31)
            (@cbrt-%42-loc s31)
            (@cbrt-%31-pred s31))))
  :enable (@cbrt-%31-expand-rev-as-@cbrt-%42-rev @cbrt-%42-rev @cbrt-%42-loc @cbrt-%42-val))
(defruled @cbrt-%31-expand-rev-as-@cbrt-m31.3-rev
  (equal (@cbrt-%31-rev mem loc pred)
         (let ((s31 (list mem loc pred)))
           (@cbrt-m31.3-rev
            (@cbrt-m31.2-mem s31)
            (@cbrt-%43-loc s31)
            (@cbrt-%31-pred s31))))
  :enable (@cbrt-%31-expand-rev-as-@cbrt-%43-rev @cbrt-%43-rev @cbrt-%43-loc @cbrt-%43-val))
(defruled @cbrt-%31-expand-rev-as-@cbrt-succ31-rev
  (equal (@cbrt-%31-rev mem loc pred)
         (let ((s31 (list mem loc pred)))
           (@cbrt-succ31-rev
            (@cbrt-m31.3-mem s31)
            (@cbrt-%43-loc s31)
            (@cbrt-%31-pred s31))))
  :enable (@cbrt-%31-expand-rev-as-@cbrt-m31.3-rev @cbrt-m31.3-rev @cbrt-m31.3-mem))
(defruled @cbrt-%31-expand-rev-as-fwd
  (equal (@cbrt-%31-rev mem loc pred)
         (@cbrt-%31-fwd mem loc pred))
  :enable (@cbrt-%31-expand-rev-as-@cbrt-succ31-rev @cbrt-succ31-rev @cbrt-succ31-lab @cbrt-%31-fwd))

(defund @cbrt-%31-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%32 (bitcast-double*-to-i32* (g '%t loc)) loc))
    (loc (s '%33 (getelementptr-i32 (g '%32 loc) 1) loc))
    (mem (store-i32 1129316352 (g '%33 loc) mem))
    (loc (s '%34 (load-double (g '%2 loc) mem) loc))
    (loc (s '%35 (load-double (g '%t loc) mem) loc))
    (loc (s '%36 (fmul-double (g '%35 loc) (g '%34 loc)) loc))
    (mem (store-double (g '%36 loc) (g '%t loc) mem))
    (loc (s '%37 (bitcast-double*-to-i32* (g '%t loc)) loc))
    (loc (s '%38 (getelementptr-i32 (g '%37 loc) 1) loc))
    (loc (s '%39 (load-i32 (g '%38 loc) mem) loc))
    (loc (s '%40 (sdiv-i32 (g '%39 loc) 3) loc))
    (loc (s '%41 (add-i32 (g '%40 loc) 696219795) loc))
    (loc (s '%42 (bitcast-double*-to-i32* (g '%t loc)) loc))
    (loc (s '%43 (getelementptr-i32 (g '%42 loc) 1) loc))
    (mem (store-i32 (g '%41 loc) (g '%43 loc) mem))
    (succ '%50))
  (mv succ mem loc)))

(defund @cbrt-%44-mem (s44)
  (car s44))
(defund @cbrt-%44-loc (s44)
  (cadr s44))
(defund @cbrt-%44-pred (s44)
  (caddr s44))
(defund @cbrt-%45-val (s44)
  (load-i32 (g '%hx (@cbrt-%44-loc s44)) (@cbrt-%44-mem s44)))
(defund @cbrt-%45-loc (s44)
  (s '%45 (@cbrt-%45-val s44) (@cbrt-%44-loc s44)))
(defund @cbrt-%46-val (s44)
  (sdiv-i32 (g '%45 (@cbrt-%45-loc s44)) 3))
(defund @cbrt-%46-loc (s44)
  (s '%46 (@cbrt-%46-val s44) (@cbrt-%45-loc s44)))
(defund @cbrt-%47-val (s44)
  (add-i32 (g '%46 (@cbrt-%46-loc s44)) 715094163))
(defund @cbrt-%47-loc (s44)
  (s '%47 (@cbrt-%47-val s44) (@cbrt-%46-loc s44)))
(defund @cbrt-%48-val (s44)
  (bitcast-double*-to-i32* (g '%t (@cbrt-%47-loc s44))))
(defund @cbrt-%48-loc (s44)
  (s '%48 (@cbrt-%48-val s44) (@cbrt-%47-loc s44)))
(defund @cbrt-%49-val (s44)
  (getelementptr-i32 (g '%48 (@cbrt-%48-loc s44)) 1))
(defund @cbrt-%49-loc (s44)
  (s '%49 (@cbrt-%49-val s44) (@cbrt-%48-loc s44)))
(defund @cbrt-m44.1-mem (s44)
  (store-i32 (g '%47 (@cbrt-%49-loc s44)) (g '%49 (@cbrt-%49-loc s44)) (@cbrt-%44-mem s44)))
(defund @cbrt-succ44-lab (s44)
  (declare (ignore s44))
  '%50)

(defund @cbrt-%44-fwd (mem loc pred)
  (let ((s44 (list mem loc pred)))
    (mv (@cbrt-succ44-lab s44) (@cbrt-m44.1-mem s44) (@cbrt-%49-loc s44))))

(defund @cbrt-succ44-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%50 mem loc))
(defund @cbrt-m44.1-rev (mem loc pred)
  (@cbrt-succ44-rev (store-i32 (g '%47 loc) (g '%49 loc) mem) loc pred))
(defund @cbrt-%49-rev (mem loc pred)
  (@cbrt-m44.1-rev mem (s '%49 (getelementptr-i32 (g '%48 loc) 1) loc) pred))
(defund @cbrt-%48-rev (mem loc pred)
  (@cbrt-%49-rev mem (s '%48 (bitcast-double*-to-i32* (g '%t loc)) loc) pred))
(defund @cbrt-%47-rev (mem loc pred)
  (@cbrt-%48-rev mem (s '%47 (add-i32 (g '%46 loc) 715094163) loc) pred))
(defund @cbrt-%46-rev (mem loc pred)
  (@cbrt-%47-rev mem (s '%46 (sdiv-i32 (g '%45 loc) 3) loc) pred))
(defund @cbrt-%45-rev (mem loc pred)
  (@cbrt-%46-rev mem (s '%45 (load-i32 (g '%hx loc) mem) loc) pred))

(defund @cbrt-%44-rev (mem loc pred)
  (@cbrt-%45-rev mem loc pred))

(defruled @cbrt-%44-expand-rev-as-@cbrt-%45-rev
  (equal (@cbrt-%44-rev mem loc pred)
         (let ((s44 (list mem loc pred)))
           (@cbrt-%45-rev
            (@cbrt-%44-mem s44)
            (@cbrt-%44-loc s44)
            (@cbrt-%44-pred s44))))
  :enable (@cbrt-%44-rev @cbrt-%44-mem @cbrt-%44-loc @cbrt-%44-pred))
(defruled @cbrt-%44-expand-rev-as-@cbrt-%46-rev
  (equal (@cbrt-%44-rev mem loc pred)
         (let ((s44 (list mem loc pred)))
           (@cbrt-%46-rev
            (@cbrt-%44-mem s44)
            (@cbrt-%45-loc s44)
            (@cbrt-%44-pred s44))))
  :enable (@cbrt-%44-expand-rev-as-@cbrt-%45-rev @cbrt-%45-rev @cbrt-%45-loc @cbrt-%45-val))
(defruled @cbrt-%44-expand-rev-as-@cbrt-%47-rev
  (equal (@cbrt-%44-rev mem loc pred)
         (let ((s44 (list mem loc pred)))
           (@cbrt-%47-rev
            (@cbrt-%44-mem s44)
            (@cbrt-%46-loc s44)
            (@cbrt-%44-pred s44))))
  :enable (@cbrt-%44-expand-rev-as-@cbrt-%46-rev @cbrt-%46-rev @cbrt-%46-loc @cbrt-%46-val))
(defruled @cbrt-%44-expand-rev-as-@cbrt-%48-rev
  (equal (@cbrt-%44-rev mem loc pred)
         (let ((s44 (list mem loc pred)))
           (@cbrt-%48-rev
            (@cbrt-%44-mem s44)
            (@cbrt-%47-loc s44)
            (@cbrt-%44-pred s44))))
  :enable (@cbrt-%44-expand-rev-as-@cbrt-%47-rev @cbrt-%47-rev @cbrt-%47-loc @cbrt-%47-val))
(defruled @cbrt-%44-expand-rev-as-@cbrt-%49-rev
  (equal (@cbrt-%44-rev mem loc pred)
         (let ((s44 (list mem loc pred)))
           (@cbrt-%49-rev
            (@cbrt-%44-mem s44)
            (@cbrt-%48-loc s44)
            (@cbrt-%44-pred s44))))
  :enable (@cbrt-%44-expand-rev-as-@cbrt-%48-rev @cbrt-%48-rev @cbrt-%48-loc @cbrt-%48-val))
(defruled @cbrt-%44-expand-rev-as-@cbrt-m44.1-rev
  (equal (@cbrt-%44-rev mem loc pred)
         (let ((s44 (list mem loc pred)))
           (@cbrt-m44.1-rev
            (@cbrt-%44-mem s44)
            (@cbrt-%49-loc s44)
            (@cbrt-%44-pred s44))))
  :enable (@cbrt-%44-expand-rev-as-@cbrt-%49-rev @cbrt-%49-rev @cbrt-%49-loc @cbrt-%49-val))
(defruled @cbrt-%44-expand-rev-as-@cbrt-succ44-rev
  (equal (@cbrt-%44-rev mem loc pred)
         (let ((s44 (list mem loc pred)))
           (@cbrt-succ44-rev
            (@cbrt-m44.1-mem s44)
            (@cbrt-%49-loc s44)
            (@cbrt-%44-pred s44))))
  :enable (@cbrt-%44-expand-rev-as-@cbrt-m44.1-rev @cbrt-m44.1-rev @cbrt-m44.1-mem))
(defruled @cbrt-%44-expand-rev-as-fwd
  (equal (@cbrt-%44-rev mem loc pred)
         (@cbrt-%44-fwd mem loc pred))
  :enable (@cbrt-%44-expand-rev-as-@cbrt-succ44-rev @cbrt-succ44-rev @cbrt-succ44-lab @cbrt-%44-fwd))

(defund @cbrt-%44-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%45 (load-i32 (g '%hx loc) mem) loc))
    (loc (s '%46 (sdiv-i32 (g '%45 loc) 3) loc))
    (loc (s '%47 (add-i32 (g '%46 loc) 715094163) loc))
    (loc (s '%48 (bitcast-double*-to-i32* (g '%t loc)) loc))
    (loc (s '%49 (getelementptr-i32 (g '%48 loc) 1) loc))
    (mem (store-i32 (g '%47 loc) (g '%49 loc) mem))
    (succ '%50))
  (mv succ mem loc)))

(defund @cbrt-%50-mem (s50)
  (car s50))
(defund @cbrt-%50-loc (s50)
  (cadr s50))
(defund @cbrt-%50-pred (s50)
  (caddr s50))
(defund @cbrt-%51-val (s50)
  (load-double (g '%t (@cbrt-%50-loc s50)) (@cbrt-%50-mem s50)))
(defund @cbrt-%51-loc (s50)
  (s '%51 (@cbrt-%51-val s50) (@cbrt-%50-loc s50)))
(defund @cbrt-%52-val (s50)
  (load-double (g '%t (@cbrt-%51-loc s50)) (@cbrt-%50-mem s50)))
(defund @cbrt-%52-loc (s50)
  (s '%52 (@cbrt-%52-val s50) (@cbrt-%51-loc s50)))
(defund @cbrt-%53-val (s50)
  (fmul-double (g '%51 (@cbrt-%52-loc s50)) (g '%52 (@cbrt-%52-loc s50))))
(defund @cbrt-%53-loc (s50)
  (s '%53 (@cbrt-%53-val s50) (@cbrt-%52-loc s50)))
(defund @cbrt-%54-val (s50)
  (load-double (g '%2 (@cbrt-%53-loc s50)) (@cbrt-%50-mem s50)))
(defund @cbrt-%54-loc (s50)
  (s '%54 (@cbrt-%54-val s50) (@cbrt-%53-loc s50)))
(defund @cbrt-%55-val (s50)
  (fdiv-double (g '%53 (@cbrt-%54-loc s50)) (g '%54 (@cbrt-%54-loc s50))))
(defund @cbrt-%55-loc (s50)
  (s '%55 (@cbrt-%55-val s50) (@cbrt-%54-loc s50)))
(defund @cbrt-m50.1-mem (s50)
  (store-double (g '%55 (@cbrt-%55-loc s50)) (g '%r (@cbrt-%55-loc s50)) (@cbrt-%50-mem s50)))
(defund @cbrt-%56-val (s50)
  (load-double (g '%r (@cbrt-%55-loc s50)) (@cbrt-m50.1-mem s50)))
(defund @cbrt-%56-loc (s50)
  (s '%56 (@cbrt-%56-val s50) (@cbrt-%55-loc s50)))
(defund @cbrt-%57-val (s50)
  (load-double (g '%t (@cbrt-%56-loc s50)) (@cbrt-m50.1-mem s50)))
(defund @cbrt-%57-loc (s50)
  (s '%57 (@cbrt-%57-val s50) (@cbrt-%56-loc s50)))
(defund @cbrt-%58-val (s50)
  (fmul-double (g '%56 (@cbrt-%57-loc s50)) (g '%57 (@cbrt-%57-loc s50))))
(defund @cbrt-%58-loc (s50)
  (s '%58 (@cbrt-%58-val s50) (@cbrt-%57-loc s50)))
(defund @cbrt-%59-val (s50)
  (fadd-double #x3FE15F15F15F15F1 (g '%58 (@cbrt-%58-loc s50))))
(defund @cbrt-%59-loc (s50)
  (s '%59 (@cbrt-%59-val s50) (@cbrt-%58-loc s50)))
(defund @cbrt-m50.2-mem (s50)
  (store-double (g '%59 (@cbrt-%59-loc s50)) (g '%s (@cbrt-%59-loc s50)) (@cbrt-m50.1-mem s50)))
(defund @cbrt-%60-val (s50)
  (load-double (g '%s (@cbrt-%59-loc s50)) (@cbrt-m50.2-mem s50)))
(defund @cbrt-%60-loc (s50)
  (s '%60 (@cbrt-%60-val s50) (@cbrt-%59-loc s50)))
(defund @cbrt-%61-val (s50)
  (fadd-double (g '%60 (@cbrt-%60-loc s50)) #x3FF6A0EA0EA0EA0F))
(defund @cbrt-%61-loc (s50)
  (s '%61 (@cbrt-%61-val s50) (@cbrt-%60-loc s50)))
(defund @cbrt-%62-val (s50)
  (load-double (g '%s (@cbrt-%61-loc s50)) (@cbrt-m50.2-mem s50)))
(defund @cbrt-%62-loc (s50)
  (s '%62 (@cbrt-%62-val s50) (@cbrt-%61-loc s50)))
(defund @cbrt-%63-val (s50)
  (fdiv-double #xBFE691DE2532C834 (g '%62 (@cbrt-%62-loc s50))))
(defund @cbrt-%63-loc (s50)
  (s '%63 (@cbrt-%63-val s50) (@cbrt-%62-loc s50)))
(defund @cbrt-%64-val (s50)
  (fadd-double (g '%61 (@cbrt-%63-loc s50)) (g '%63 (@cbrt-%63-loc s50))))
(defund @cbrt-%64-loc (s50)
  (s '%64 (@cbrt-%64-val s50) (@cbrt-%63-loc s50)))
(defund @cbrt-%65-val (s50)
  (fdiv-double #x3FF9B6DB6DB6DB6E (g '%64 (@cbrt-%64-loc s50))))
(defund @cbrt-%65-loc (s50)
  (s '%65 (@cbrt-%65-val s50) (@cbrt-%64-loc s50)))
(defund @cbrt-%66-val (s50)
  (fadd-double #x3FD6DB6DB6DB6DB7 (g '%65 (@cbrt-%65-loc s50))))
(defund @cbrt-%66-loc (s50)
  (s '%66 (@cbrt-%66-val s50) (@cbrt-%65-loc s50)))
(defund @cbrt-%67-val (s50)
  (load-double (g '%t (@cbrt-%66-loc s50)) (@cbrt-m50.2-mem s50)))
(defund @cbrt-%67-loc (s50)
  (s '%67 (@cbrt-%67-val s50) (@cbrt-%66-loc s50)))
(defund @cbrt-%68-val (s50)
  (fmul-double (g '%67 (@cbrt-%67-loc s50)) (g '%66 (@cbrt-%67-loc s50))))
(defund @cbrt-%68-loc (s50)
  (s '%68 (@cbrt-%68-val s50) (@cbrt-%67-loc s50)))
(defund @cbrt-m50.3-mem (s50)
  (store-double (g '%68 (@cbrt-%68-loc s50)) (g '%t (@cbrt-%68-loc s50)) (@cbrt-m50.2-mem s50)))
(defund @cbrt-%69-val (s50)
  (bitcast-double*-to-i32* (g '%t (@cbrt-%68-loc s50))))
(defund @cbrt-%69-loc (s50)
  (s '%69 (@cbrt-%69-val s50) (@cbrt-%68-loc s50)))
(defund @cbrt-m50.4-mem (s50)
  (store-i32 0 (g '%69 (@cbrt-%69-loc s50)) (@cbrt-m50.3-mem s50)))
(defund @cbrt-%70-val (s50)
  (bitcast-double*-to-i32* (g '%t (@cbrt-%69-loc s50))))
(defund @cbrt-%70-loc (s50)
  (s '%70 (@cbrt-%70-val s50) (@cbrt-%69-loc s50)))
(defund @cbrt-%71-val (s50)
  (getelementptr-i32 (g '%70 (@cbrt-%70-loc s50)) 1))
(defund @cbrt-%71-loc (s50)
  (s '%71 (@cbrt-%71-val s50) (@cbrt-%70-loc s50)))
(defund @cbrt-%72-val (s50)
  (load-i32 (g '%71 (@cbrt-%71-loc s50)) (@cbrt-m50.4-mem s50)))
(defund @cbrt-%72-loc (s50)
  (s '%72 (@cbrt-%72-val s50) (@cbrt-%71-loc s50)))
(defund @cbrt-%73-val (s50)
  (add-i32 (g '%72 (@cbrt-%72-loc s50)) 1))
(defund @cbrt-%73-loc (s50)
  (s '%73 (@cbrt-%73-val s50) (@cbrt-%72-loc s50)))
(defund @cbrt-m50.5-mem (s50)
  (store-i32 (g '%73 (@cbrt-%73-loc s50)) (g '%71 (@cbrt-%73-loc s50)) (@cbrt-m50.4-mem s50)))
(defund @cbrt-%74-val (s50)
  (load-double (g '%t (@cbrt-%73-loc s50)) (@cbrt-m50.5-mem s50)))
(defund @cbrt-%74-loc (s50)
  (s '%74 (@cbrt-%74-val s50) (@cbrt-%73-loc s50)))
(defund @cbrt-%75-val (s50)
  (load-double (g '%t (@cbrt-%74-loc s50)) (@cbrt-m50.5-mem s50)))
(defund @cbrt-%75-loc (s50)
  (s '%75 (@cbrt-%75-val s50) (@cbrt-%74-loc s50)))
(defund @cbrt-%76-val (s50)
  (fmul-double (g '%74 (@cbrt-%75-loc s50)) (g '%75 (@cbrt-%75-loc s50))))
(defund @cbrt-%76-loc (s50)
  (s '%76 (@cbrt-%76-val s50) (@cbrt-%75-loc s50)))
(defund @cbrt-m50.6-mem (s50)
  (store-double (g '%76 (@cbrt-%76-loc s50)) (g '%s (@cbrt-%76-loc s50)) (@cbrt-m50.5-mem s50)))
(defund @cbrt-%77-val (s50)
  (load-double (g '%2 (@cbrt-%76-loc s50)) (@cbrt-m50.6-mem s50)))
(defund @cbrt-%77-loc (s50)
  (s '%77 (@cbrt-%77-val s50) (@cbrt-%76-loc s50)))
(defund @cbrt-%78-val (s50)
  (load-double (g '%s (@cbrt-%77-loc s50)) (@cbrt-m50.6-mem s50)))
(defund @cbrt-%78-loc (s50)
  (s '%78 (@cbrt-%78-val s50) (@cbrt-%77-loc s50)))
(defund @cbrt-%79-val (s50)
  (fdiv-double (g '%77 (@cbrt-%78-loc s50)) (g '%78 (@cbrt-%78-loc s50))))
(defund @cbrt-%79-loc (s50)
  (s '%79 (@cbrt-%79-val s50) (@cbrt-%78-loc s50)))
(defund @cbrt-m50.7-mem (s50)
  (store-double (g '%79 (@cbrt-%79-loc s50)) (g '%r (@cbrt-%79-loc s50)) (@cbrt-m50.6-mem s50)))
(defund @cbrt-%80-val (s50)
  (load-double (g '%t (@cbrt-%79-loc s50)) (@cbrt-m50.7-mem s50)))
(defund @cbrt-%80-loc (s50)
  (s '%80 (@cbrt-%80-val s50) (@cbrt-%79-loc s50)))
(defund @cbrt-%81-val (s50)
  (load-double (g '%t (@cbrt-%80-loc s50)) (@cbrt-m50.7-mem s50)))
(defund @cbrt-%81-loc (s50)
  (s '%81 (@cbrt-%81-val s50) (@cbrt-%80-loc s50)))
(defund @cbrt-%82-val (s50)
  (fadd-double (g '%80 (@cbrt-%81-loc s50)) (g '%81 (@cbrt-%81-loc s50))))
(defund @cbrt-%82-loc (s50)
  (s '%82 (@cbrt-%82-val s50) (@cbrt-%81-loc s50)))
(defund @cbrt-m50.8-mem (s50)
  (store-double (g '%82 (@cbrt-%82-loc s50)) (g '%w (@cbrt-%82-loc s50)) (@cbrt-m50.7-mem s50)))
(defund @cbrt-%83-val (s50)
  (load-double (g '%r (@cbrt-%82-loc s50)) (@cbrt-m50.8-mem s50)))
(defund @cbrt-%83-loc (s50)
  (s '%83 (@cbrt-%83-val s50) (@cbrt-%82-loc s50)))
(defund @cbrt-%84-val (s50)
  (load-double (g '%t (@cbrt-%83-loc s50)) (@cbrt-m50.8-mem s50)))
(defund @cbrt-%84-loc (s50)
  (s '%84 (@cbrt-%84-val s50) (@cbrt-%83-loc s50)))
(defund @cbrt-%85-val (s50)
  (fsub-double (g '%83 (@cbrt-%84-loc s50)) (g '%84 (@cbrt-%84-loc s50))))
(defund @cbrt-%85-loc (s50)
  (s '%85 (@cbrt-%85-val s50) (@cbrt-%84-loc s50)))
(defund @cbrt-%86-val (s50)
  (load-double (g '%w (@cbrt-%85-loc s50)) (@cbrt-m50.8-mem s50)))
(defund @cbrt-%86-loc (s50)
  (s '%86 (@cbrt-%86-val s50) (@cbrt-%85-loc s50)))
(defund @cbrt-%87-val (s50)
  (load-double (g '%r (@cbrt-%86-loc s50)) (@cbrt-m50.8-mem s50)))
(defund @cbrt-%87-loc (s50)
  (s '%87 (@cbrt-%87-val s50) (@cbrt-%86-loc s50)))
(defund @cbrt-%88-val (s50)
  (fadd-double (g '%86 (@cbrt-%87-loc s50)) (g '%87 (@cbrt-%87-loc s50))))
(defund @cbrt-%88-loc (s50)
  (s '%88 (@cbrt-%88-val s50) (@cbrt-%87-loc s50)))
(defund @cbrt-%89-val (s50)
  (fdiv-double (g '%85 (@cbrt-%88-loc s50)) (g '%88 (@cbrt-%88-loc s50))))
(defund @cbrt-%89-loc (s50)
  (s '%89 (@cbrt-%89-val s50) (@cbrt-%88-loc s50)))
(defund @cbrt-m50.9-mem (s50)
  (store-double (g '%89 (@cbrt-%89-loc s50)) (g '%r (@cbrt-%89-loc s50)) (@cbrt-m50.8-mem s50)))
(defund @cbrt-%90-val (s50)
  (load-double (g '%t (@cbrt-%89-loc s50)) (@cbrt-m50.9-mem s50)))
(defund @cbrt-%90-loc (s50)
  (s '%90 (@cbrt-%90-val s50) (@cbrt-%89-loc s50)))
(defund @cbrt-%91-val (s50)
  (load-double (g '%t (@cbrt-%90-loc s50)) (@cbrt-m50.9-mem s50)))
(defund @cbrt-%91-loc (s50)
  (s '%91 (@cbrt-%91-val s50) (@cbrt-%90-loc s50)))
(defund @cbrt-%92-val (s50)
  (load-double (g '%r (@cbrt-%91-loc s50)) (@cbrt-m50.9-mem s50)))
(defund @cbrt-%92-loc (s50)
  (s '%92 (@cbrt-%92-val s50) (@cbrt-%91-loc s50)))
(defund @cbrt-%93-val (s50)
  (fmul-double (g '%91 (@cbrt-%92-loc s50)) (g '%92 (@cbrt-%92-loc s50))))
(defund @cbrt-%93-loc (s50)
  (s '%93 (@cbrt-%93-val s50) (@cbrt-%92-loc s50)))
(defund @cbrt-%94-val (s50)
  (fadd-double (g '%90 (@cbrt-%93-loc s50)) (g '%93 (@cbrt-%93-loc s50))))
(defund @cbrt-%94-loc (s50)
  (s '%94 (@cbrt-%94-val s50) (@cbrt-%93-loc s50)))
(defund @cbrt-m50.10-mem (s50)
  (store-double (g '%94 (@cbrt-%94-loc s50)) (g '%t (@cbrt-%94-loc s50)) (@cbrt-m50.9-mem s50)))
(defund @cbrt-%95-val (s50)
  (load-i32 (g '%sign (@cbrt-%94-loc s50)) (@cbrt-m50.10-mem s50)))
(defund @cbrt-%95-loc (s50)
  (s '%95 (@cbrt-%95-val s50) (@cbrt-%94-loc s50)))
(defund @cbrt-%96-val (s50)
  (bitcast-double*-to-i32* (g '%t (@cbrt-%95-loc s50))))
(defund @cbrt-%96-loc (s50)
  (s '%96 (@cbrt-%96-val s50) (@cbrt-%95-loc s50)))
(defund @cbrt-%97-val (s50)
  (getelementptr-i32 (g '%96 (@cbrt-%96-loc s50)) 1))
(defund @cbrt-%97-loc (s50)
  (s '%97 (@cbrt-%97-val s50) (@cbrt-%96-loc s50)))
(defund @cbrt-%98-val (s50)
  (load-i32 (g '%97 (@cbrt-%97-loc s50)) (@cbrt-m50.10-mem s50)))
(defund @cbrt-%98-loc (s50)
  (s '%98 (@cbrt-%98-val s50) (@cbrt-%97-loc s50)))
(defund @cbrt-%99-val (s50)
  (or-i32 (g '%98 (@cbrt-%98-loc s50)) (g '%95 (@cbrt-%98-loc s50))))
(defund @cbrt-%99-loc (s50)
  (s '%99 (@cbrt-%99-val s50) (@cbrt-%98-loc s50)))
(defund @cbrt-m50.11-mem (s50)
  (store-i32 (g '%99 (@cbrt-%99-loc s50)) (g '%97 (@cbrt-%99-loc s50)) (@cbrt-m50.10-mem s50)))
(defund @cbrt-%100-val (s50)
  (load-double (g '%t (@cbrt-%99-loc s50)) (@cbrt-m50.11-mem s50)))
(defund @cbrt-%100-loc (s50)
  (s '%100 (@cbrt-%100-val s50) (@cbrt-%99-loc s50)))
(defund @cbrt-m50.12-mem (s50)
  (store-double (g '%100 (@cbrt-%100-loc s50)) (g '%1 (@cbrt-%100-loc s50)) (@cbrt-m50.11-mem s50)))
(defund @cbrt-succ50-lab (s50)
  (declare (ignore s50))
  '%101)

(defund @cbrt-%50-fwd (mem loc pred)
  (let ((s50 (list mem loc pred)))
    (mv (@cbrt-succ50-lab s50) (@cbrt-m50.12-mem s50) (@cbrt-%100-loc s50))))

(defund @cbrt-succ50-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%101 mem loc))
(defund @cbrt-m50.12-rev (mem loc pred)
  (@cbrt-succ50-rev (store-double (g '%100 loc) (g '%1 loc) mem) loc pred))
(defund @cbrt-%100-rev (mem loc pred)
  (@cbrt-m50.12-rev mem (s '%100 (load-double (g '%t loc) mem) loc) pred))
(defund @cbrt-m50.11-rev (mem loc pred)
  (@cbrt-%100-rev (store-i32 (g '%99 loc) (g '%97 loc) mem) loc pred))
(defund @cbrt-%99-rev (mem loc pred)
  (@cbrt-m50.11-rev mem (s '%99 (or-i32 (g '%98 loc) (g '%95 loc)) loc) pred))
(defund @cbrt-%98-rev (mem loc pred)
  (@cbrt-%99-rev mem (s '%98 (load-i32 (g '%97 loc) mem) loc) pred))
(defund @cbrt-%97-rev (mem loc pred)
  (@cbrt-%98-rev mem (s '%97 (getelementptr-i32 (g '%96 loc) 1) loc) pred))
(defund @cbrt-%96-rev (mem loc pred)
  (@cbrt-%97-rev mem (s '%96 (bitcast-double*-to-i32* (g '%t loc)) loc) pred))
(defund @cbrt-%95-rev (mem loc pred)
  (@cbrt-%96-rev mem (s '%95 (load-i32 (g '%sign loc) mem) loc) pred))
(defund @cbrt-m50.10-rev (mem loc pred)
  (@cbrt-%95-rev (store-double (g '%94 loc) (g '%t loc) mem) loc pred))
(defund @cbrt-%94-rev (mem loc pred)
  (@cbrt-m50.10-rev mem (s '%94 (fadd-double (g '%90 loc) (g '%93 loc)) loc) pred))
(defund @cbrt-%93-rev (mem loc pred)
  (@cbrt-%94-rev mem (s '%93 (fmul-double (g '%91 loc) (g '%92 loc)) loc) pred))
(defund @cbrt-%92-rev (mem loc pred)
  (@cbrt-%93-rev mem (s '%92 (load-double (g '%r loc) mem) loc) pred))
(defund @cbrt-%91-rev (mem loc pred)
  (@cbrt-%92-rev mem (s '%91 (load-double (g '%t loc) mem) loc) pred))
(defund @cbrt-%90-rev (mem loc pred)
  (@cbrt-%91-rev mem (s '%90 (load-double (g '%t loc) mem) loc) pred))
(defund @cbrt-m50.9-rev (mem loc pred)
  (@cbrt-%90-rev (store-double (g '%89 loc) (g '%r loc) mem) loc pred))
(defund @cbrt-%89-rev (mem loc pred)
  (@cbrt-m50.9-rev mem (s '%89 (fdiv-double (g '%85 loc) (g '%88 loc)) loc) pred))
(defund @cbrt-%88-rev (mem loc pred)
  (@cbrt-%89-rev mem (s '%88 (fadd-double (g '%86 loc) (g '%87 loc)) loc) pred))
(defund @cbrt-%87-rev (mem loc pred)
  (@cbrt-%88-rev mem (s '%87 (load-double (g '%r loc) mem) loc) pred))
(defund @cbrt-%86-rev (mem loc pred)
  (@cbrt-%87-rev mem (s '%86 (load-double (g '%w loc) mem) loc) pred))
(defund @cbrt-%85-rev (mem loc pred)
  (@cbrt-%86-rev mem (s '%85 (fsub-double (g '%83 loc) (g '%84 loc)) loc) pred))
(defund @cbrt-%84-rev (mem loc pred)
  (@cbrt-%85-rev mem (s '%84 (load-double (g '%t loc) mem) loc) pred))
(defund @cbrt-%83-rev (mem loc pred)
  (@cbrt-%84-rev mem (s '%83 (load-double (g '%r loc) mem) loc) pred))
(defund @cbrt-m50.8-rev (mem loc pred)
  (@cbrt-%83-rev (store-double (g '%82 loc) (g '%w loc) mem) loc pred))
(defund @cbrt-%82-rev (mem loc pred)
  (@cbrt-m50.8-rev mem (s '%82 (fadd-double (g '%80 loc) (g '%81 loc)) loc) pred))
(defund @cbrt-%81-rev (mem loc pred)
  (@cbrt-%82-rev mem (s '%81 (load-double (g '%t loc) mem) loc) pred))
(defund @cbrt-%80-rev (mem loc pred)
  (@cbrt-%81-rev mem (s '%80 (load-double (g '%t loc) mem) loc) pred))
(defund @cbrt-m50.7-rev (mem loc pred)
  (@cbrt-%80-rev (store-double (g '%79 loc) (g '%r loc) mem) loc pred))
(defund @cbrt-%79-rev (mem loc pred)
  (@cbrt-m50.7-rev mem (s '%79 (fdiv-double (g '%77 loc) (g '%78 loc)) loc) pred))
(defund @cbrt-%78-rev (mem loc pred)
  (@cbrt-%79-rev mem (s '%78 (load-double (g '%s loc) mem) loc) pred))
(defund @cbrt-%77-rev (mem loc pred)
  (@cbrt-%78-rev mem (s '%77 (load-double (g '%2 loc) mem) loc) pred))
(defund @cbrt-m50.6-rev (mem loc pred)
  (@cbrt-%77-rev (store-double (g '%76 loc) (g '%s loc) mem) loc pred))
(defund @cbrt-%76-rev (mem loc pred)
  (@cbrt-m50.6-rev mem (s '%76 (fmul-double (g '%74 loc) (g '%75 loc)) loc) pred))
(defund @cbrt-%75-rev (mem loc pred)
  (@cbrt-%76-rev mem (s '%75 (load-double (g '%t loc) mem) loc) pred))
(defund @cbrt-%74-rev (mem loc pred)
  (@cbrt-%75-rev mem (s '%74 (load-double (g '%t loc) mem) loc) pred))
(defund @cbrt-m50.5-rev (mem loc pred)
  (@cbrt-%74-rev (store-i32 (g '%73 loc) (g '%71 loc) mem) loc pred))
(defund @cbrt-%73-rev (mem loc pred)
  (@cbrt-m50.5-rev mem (s '%73 (add-i32 (g '%72 loc) 1) loc) pred))
(defund @cbrt-%72-rev (mem loc pred)
  (@cbrt-%73-rev mem (s '%72 (load-i32 (g '%71 loc) mem) loc) pred))
(defund @cbrt-%71-rev (mem loc pred)
  (@cbrt-%72-rev mem (s '%71 (getelementptr-i32 (g '%70 loc) 1) loc) pred))
(defund @cbrt-%70-rev (mem loc pred)
  (@cbrt-%71-rev mem (s '%70 (bitcast-double*-to-i32* (g '%t loc)) loc) pred))
(defund @cbrt-m50.4-rev (mem loc pred)
  (@cbrt-%70-rev (store-i32 0 (g '%69 loc) mem) loc pred))
(defund @cbrt-%69-rev (mem loc pred)
  (@cbrt-m50.4-rev mem (s '%69 (bitcast-double*-to-i32* (g '%t loc)) loc) pred))
(defund @cbrt-m50.3-rev (mem loc pred)
  (@cbrt-%69-rev (store-double (g '%68 loc) (g '%t loc) mem) loc pred))
(defund @cbrt-%68-rev (mem loc pred)
  (@cbrt-m50.3-rev mem (s '%68 (fmul-double (g '%67 loc) (g '%66 loc)) loc) pred))
(defund @cbrt-%67-rev (mem loc pred)
  (@cbrt-%68-rev mem (s '%67 (load-double (g '%t loc) mem) loc) pred))
(defund @cbrt-%66-rev (mem loc pred)
  (@cbrt-%67-rev mem (s '%66 (fadd-double #x3FD6DB6DB6DB6DB7 (g '%65 loc)) loc) pred))
(defund @cbrt-%65-rev (mem loc pred)
  (@cbrt-%66-rev mem (s '%65 (fdiv-double #x3FF9B6DB6DB6DB6E (g '%64 loc)) loc) pred))
(defund @cbrt-%64-rev (mem loc pred)
  (@cbrt-%65-rev mem (s '%64 (fadd-double (g '%61 loc) (g '%63 loc)) loc) pred))
(defund @cbrt-%63-rev (mem loc pred)
  (@cbrt-%64-rev mem (s '%63 (fdiv-double #xBFE691DE2532C834 (g '%62 loc)) loc) pred))
(defund @cbrt-%62-rev (mem loc pred)
  (@cbrt-%63-rev mem (s '%62 (load-double (g '%s loc) mem) loc) pred))
(defund @cbrt-%61-rev (mem loc pred)
  (@cbrt-%62-rev mem (s '%61 (fadd-double (g '%60 loc) #x3FF6A0EA0EA0EA0F) loc) pred))
(defund @cbrt-%60-rev (mem loc pred)
  (@cbrt-%61-rev mem (s '%60 (load-double (g '%s loc) mem) loc) pred))
(defund @cbrt-m50.2-rev (mem loc pred)
  (@cbrt-%60-rev (store-double (g '%59 loc) (g '%s loc) mem) loc pred))
(defund @cbrt-%59-rev (mem loc pred)
  (@cbrt-m50.2-rev mem (s '%59 (fadd-double #x3FE15F15F15F15F1 (g '%58 loc)) loc) pred))
(defund @cbrt-%58-rev (mem loc pred)
  (@cbrt-%59-rev mem (s '%58 (fmul-double (g '%56 loc) (g '%57 loc)) loc) pred))
(defund @cbrt-%57-rev (mem loc pred)
  (@cbrt-%58-rev mem (s '%57 (load-double (g '%t loc) mem) loc) pred))
(defund @cbrt-%56-rev (mem loc pred)
  (@cbrt-%57-rev mem (s '%56 (load-double (g '%r loc) mem) loc) pred))
(defund @cbrt-m50.1-rev (mem loc pred)
  (@cbrt-%56-rev (store-double (g '%55 loc) (g '%r loc) mem) loc pred))
(defund @cbrt-%55-rev (mem loc pred)
  (@cbrt-m50.1-rev mem (s '%55 (fdiv-double (g '%53 loc) (g '%54 loc)) loc) pred))
(defund @cbrt-%54-rev (mem loc pred)
  (@cbrt-%55-rev mem (s '%54 (load-double (g '%2 loc) mem) loc) pred))
(defund @cbrt-%53-rev (mem loc pred)
  (@cbrt-%54-rev mem (s '%53 (fmul-double (g '%51 loc) (g '%52 loc)) loc) pred))
(defund @cbrt-%52-rev (mem loc pred)
  (@cbrt-%53-rev mem (s '%52 (load-double (g '%t loc) mem) loc) pred))
(defund @cbrt-%51-rev (mem loc pred)
  (@cbrt-%52-rev mem (s '%51 (load-double (g '%t loc) mem) loc) pred))

(defund @cbrt-%50-rev (mem loc pred)
  (@cbrt-%51-rev mem loc pred))

(defruled @cbrt-%50-expand-rev-as-@cbrt-%51-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%51-rev
            (@cbrt-%50-mem s50)
            (@cbrt-%50-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-rev @cbrt-%50-mem @cbrt-%50-loc @cbrt-%50-pred))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%52-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%52-rev
            (@cbrt-%50-mem s50)
            (@cbrt-%51-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%51-rev @cbrt-%51-rev @cbrt-%51-loc @cbrt-%51-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%53-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%53-rev
            (@cbrt-%50-mem s50)
            (@cbrt-%52-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%52-rev @cbrt-%52-rev @cbrt-%52-loc @cbrt-%52-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%54-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%54-rev
            (@cbrt-%50-mem s50)
            (@cbrt-%53-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%53-rev @cbrt-%53-rev @cbrt-%53-loc @cbrt-%53-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%55-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%55-rev
            (@cbrt-%50-mem s50)
            (@cbrt-%54-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%54-rev @cbrt-%54-rev @cbrt-%54-loc @cbrt-%54-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-m50.1-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-m50.1-rev
            (@cbrt-%50-mem s50)
            (@cbrt-%55-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%55-rev @cbrt-%55-rev @cbrt-%55-loc @cbrt-%55-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%56-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%56-rev
            (@cbrt-m50.1-mem s50)
            (@cbrt-%55-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-m50.1-rev @cbrt-m50.1-rev @cbrt-m50.1-mem))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%57-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%57-rev
            (@cbrt-m50.1-mem s50)
            (@cbrt-%56-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%56-rev @cbrt-%56-rev @cbrt-%56-loc @cbrt-%56-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%58-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%58-rev
            (@cbrt-m50.1-mem s50)
            (@cbrt-%57-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%57-rev @cbrt-%57-rev @cbrt-%57-loc @cbrt-%57-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%59-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%59-rev
            (@cbrt-m50.1-mem s50)
            (@cbrt-%58-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%58-rev @cbrt-%58-rev @cbrt-%58-loc @cbrt-%58-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-m50.2-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-m50.2-rev
            (@cbrt-m50.1-mem s50)
            (@cbrt-%59-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%59-rev @cbrt-%59-rev @cbrt-%59-loc @cbrt-%59-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%60-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%60-rev
            (@cbrt-m50.2-mem s50)
            (@cbrt-%59-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-m50.2-rev @cbrt-m50.2-rev @cbrt-m50.2-mem))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%61-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%61-rev
            (@cbrt-m50.2-mem s50)
            (@cbrt-%60-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%60-rev @cbrt-%60-rev @cbrt-%60-loc @cbrt-%60-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%62-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%62-rev
            (@cbrt-m50.2-mem s50)
            (@cbrt-%61-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%61-rev @cbrt-%61-rev @cbrt-%61-loc @cbrt-%61-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%63-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%63-rev
            (@cbrt-m50.2-mem s50)
            (@cbrt-%62-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%62-rev @cbrt-%62-rev @cbrt-%62-loc @cbrt-%62-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%64-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%64-rev
            (@cbrt-m50.2-mem s50)
            (@cbrt-%63-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%63-rev @cbrt-%63-rev @cbrt-%63-loc @cbrt-%63-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%65-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%65-rev
            (@cbrt-m50.2-mem s50)
            (@cbrt-%64-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%64-rev @cbrt-%64-rev @cbrt-%64-loc @cbrt-%64-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%66-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%66-rev
            (@cbrt-m50.2-mem s50)
            (@cbrt-%65-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%65-rev @cbrt-%65-rev @cbrt-%65-loc @cbrt-%65-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%67-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%67-rev
            (@cbrt-m50.2-mem s50)
            (@cbrt-%66-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%66-rev @cbrt-%66-rev @cbrt-%66-loc @cbrt-%66-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%68-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%68-rev
            (@cbrt-m50.2-mem s50)
            (@cbrt-%67-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%67-rev @cbrt-%67-rev @cbrt-%67-loc @cbrt-%67-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-m50.3-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-m50.3-rev
            (@cbrt-m50.2-mem s50)
            (@cbrt-%68-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%68-rev @cbrt-%68-rev @cbrt-%68-loc @cbrt-%68-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%69-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%69-rev
            (@cbrt-m50.3-mem s50)
            (@cbrt-%68-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-m50.3-rev @cbrt-m50.3-rev @cbrt-m50.3-mem))
(defruled @cbrt-%50-expand-rev-as-@cbrt-m50.4-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-m50.4-rev
            (@cbrt-m50.3-mem s50)
            (@cbrt-%69-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%69-rev @cbrt-%69-rev @cbrt-%69-loc @cbrt-%69-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%70-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%70-rev
            (@cbrt-m50.4-mem s50)
            (@cbrt-%69-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-m50.4-rev @cbrt-m50.4-rev @cbrt-m50.4-mem))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%71-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%71-rev
            (@cbrt-m50.4-mem s50)
            (@cbrt-%70-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%70-rev @cbrt-%70-rev @cbrt-%70-loc @cbrt-%70-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%72-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%72-rev
            (@cbrt-m50.4-mem s50)
            (@cbrt-%71-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%71-rev @cbrt-%71-rev @cbrt-%71-loc @cbrt-%71-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%73-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%73-rev
            (@cbrt-m50.4-mem s50)
            (@cbrt-%72-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%72-rev @cbrt-%72-rev @cbrt-%72-loc @cbrt-%72-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-m50.5-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-m50.5-rev
            (@cbrt-m50.4-mem s50)
            (@cbrt-%73-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%73-rev @cbrt-%73-rev @cbrt-%73-loc @cbrt-%73-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%74-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%74-rev
            (@cbrt-m50.5-mem s50)
            (@cbrt-%73-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-m50.5-rev @cbrt-m50.5-rev @cbrt-m50.5-mem))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%75-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%75-rev
            (@cbrt-m50.5-mem s50)
            (@cbrt-%74-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%74-rev @cbrt-%74-rev @cbrt-%74-loc @cbrt-%74-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%76-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%76-rev
            (@cbrt-m50.5-mem s50)
            (@cbrt-%75-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%75-rev @cbrt-%75-rev @cbrt-%75-loc @cbrt-%75-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-m50.6-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-m50.6-rev
            (@cbrt-m50.5-mem s50)
            (@cbrt-%76-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%76-rev @cbrt-%76-rev @cbrt-%76-loc @cbrt-%76-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%77-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%77-rev
            (@cbrt-m50.6-mem s50)
            (@cbrt-%76-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-m50.6-rev @cbrt-m50.6-rev @cbrt-m50.6-mem))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%78-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%78-rev
            (@cbrt-m50.6-mem s50)
            (@cbrt-%77-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%77-rev @cbrt-%77-rev @cbrt-%77-loc @cbrt-%77-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%79-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%79-rev
            (@cbrt-m50.6-mem s50)
            (@cbrt-%78-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%78-rev @cbrt-%78-rev @cbrt-%78-loc @cbrt-%78-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-m50.7-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-m50.7-rev
            (@cbrt-m50.6-mem s50)
            (@cbrt-%79-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%79-rev @cbrt-%79-rev @cbrt-%79-loc @cbrt-%79-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%80-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%80-rev
            (@cbrt-m50.7-mem s50)
            (@cbrt-%79-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-m50.7-rev @cbrt-m50.7-rev @cbrt-m50.7-mem))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%81-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%81-rev
            (@cbrt-m50.7-mem s50)
            (@cbrt-%80-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%80-rev @cbrt-%80-rev @cbrt-%80-loc @cbrt-%80-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%82-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%82-rev
            (@cbrt-m50.7-mem s50)
            (@cbrt-%81-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%81-rev @cbrt-%81-rev @cbrt-%81-loc @cbrt-%81-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-m50.8-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-m50.8-rev
            (@cbrt-m50.7-mem s50)
            (@cbrt-%82-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%82-rev @cbrt-%82-rev @cbrt-%82-loc @cbrt-%82-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%83-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%83-rev
            (@cbrt-m50.8-mem s50)
            (@cbrt-%82-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-m50.8-rev @cbrt-m50.8-rev @cbrt-m50.8-mem))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%84-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%84-rev
            (@cbrt-m50.8-mem s50)
            (@cbrt-%83-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%83-rev @cbrt-%83-rev @cbrt-%83-loc @cbrt-%83-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%85-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%85-rev
            (@cbrt-m50.8-mem s50)
            (@cbrt-%84-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%84-rev @cbrt-%84-rev @cbrt-%84-loc @cbrt-%84-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%86-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%86-rev
            (@cbrt-m50.8-mem s50)
            (@cbrt-%85-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%85-rev @cbrt-%85-rev @cbrt-%85-loc @cbrt-%85-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%87-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%87-rev
            (@cbrt-m50.8-mem s50)
            (@cbrt-%86-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%86-rev @cbrt-%86-rev @cbrt-%86-loc @cbrt-%86-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%88-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%88-rev
            (@cbrt-m50.8-mem s50)
            (@cbrt-%87-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%87-rev @cbrt-%87-rev @cbrt-%87-loc @cbrt-%87-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%89-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%89-rev
            (@cbrt-m50.8-mem s50)
            (@cbrt-%88-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%88-rev @cbrt-%88-rev @cbrt-%88-loc @cbrt-%88-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-m50.9-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-m50.9-rev
            (@cbrt-m50.8-mem s50)
            (@cbrt-%89-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%89-rev @cbrt-%89-rev @cbrt-%89-loc @cbrt-%89-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%90-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%90-rev
            (@cbrt-m50.9-mem s50)
            (@cbrt-%89-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-m50.9-rev @cbrt-m50.9-rev @cbrt-m50.9-mem))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%91-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%91-rev
            (@cbrt-m50.9-mem s50)
            (@cbrt-%90-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%90-rev @cbrt-%90-rev @cbrt-%90-loc @cbrt-%90-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%92-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%92-rev
            (@cbrt-m50.9-mem s50)
            (@cbrt-%91-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%91-rev @cbrt-%91-rev @cbrt-%91-loc @cbrt-%91-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%93-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%93-rev
            (@cbrt-m50.9-mem s50)
            (@cbrt-%92-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%92-rev @cbrt-%92-rev @cbrt-%92-loc @cbrt-%92-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%94-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%94-rev
            (@cbrt-m50.9-mem s50)
            (@cbrt-%93-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%93-rev @cbrt-%93-rev @cbrt-%93-loc @cbrt-%93-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-m50.10-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-m50.10-rev
            (@cbrt-m50.9-mem s50)
            (@cbrt-%94-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%94-rev @cbrt-%94-rev @cbrt-%94-loc @cbrt-%94-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%95-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%95-rev
            (@cbrt-m50.10-mem s50)
            (@cbrt-%94-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-m50.10-rev @cbrt-m50.10-rev @cbrt-m50.10-mem))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%96-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%96-rev
            (@cbrt-m50.10-mem s50)
            (@cbrt-%95-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%95-rev @cbrt-%95-rev @cbrt-%95-loc @cbrt-%95-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%97-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%97-rev
            (@cbrt-m50.10-mem s50)
            (@cbrt-%96-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%96-rev @cbrt-%96-rev @cbrt-%96-loc @cbrt-%96-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%98-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%98-rev
            (@cbrt-m50.10-mem s50)
            (@cbrt-%97-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%97-rev @cbrt-%97-rev @cbrt-%97-loc @cbrt-%97-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%99-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%99-rev
            (@cbrt-m50.10-mem s50)
            (@cbrt-%98-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%98-rev @cbrt-%98-rev @cbrt-%98-loc @cbrt-%98-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-m50.11-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-m50.11-rev
            (@cbrt-m50.10-mem s50)
            (@cbrt-%99-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%99-rev @cbrt-%99-rev @cbrt-%99-loc @cbrt-%99-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-%100-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-%100-rev
            (@cbrt-m50.11-mem s50)
            (@cbrt-%99-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-m50.11-rev @cbrt-m50.11-rev @cbrt-m50.11-mem))
(defruled @cbrt-%50-expand-rev-as-@cbrt-m50.12-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-m50.12-rev
            (@cbrt-m50.11-mem s50)
            (@cbrt-%100-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-%100-rev @cbrt-%100-rev @cbrt-%100-loc @cbrt-%100-val))
(defruled @cbrt-%50-expand-rev-as-@cbrt-succ50-rev
  (equal (@cbrt-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@cbrt-succ50-rev
            (@cbrt-m50.12-mem s50)
            (@cbrt-%100-loc s50)
            (@cbrt-%50-pred s50))))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-m50.12-rev @cbrt-m50.12-rev @cbrt-m50.12-mem))
(defruled @cbrt-%50-expand-rev-as-fwd
  (equal (@cbrt-%50-rev mem loc pred)
         (@cbrt-%50-fwd mem loc pred))
  :enable (@cbrt-%50-expand-rev-as-@cbrt-succ50-rev @cbrt-succ50-rev @cbrt-succ50-lab @cbrt-%50-fwd))

(defund @cbrt-%50-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%51 (load-double (g '%t loc) mem) loc))
    (loc (s '%52 (load-double (g '%t loc) mem) loc))
    (loc (s '%53 (fmul-double (g '%51 loc) (g '%52 loc)) loc))
    (loc (s '%54 (load-double (g '%2 loc) mem) loc))
    (loc (s '%55 (fdiv-double (g '%53 loc) (g '%54 loc)) loc))
    (mem (store-double (g '%55 loc) (g '%r loc) mem))
    (loc (s '%56 (load-double (g '%r loc) mem) loc))
    (loc (s '%57 (load-double (g '%t loc) mem) loc))
    (loc (s '%58 (fmul-double (g '%56 loc) (g '%57 loc)) loc))
    (loc (s '%59 (fadd-double #x3FE15F15F15F15F1 (g '%58 loc)) loc))
    (mem (store-double (g '%59 loc) (g '%s loc) mem))
    (loc (s '%60 (load-double (g '%s loc) mem) loc))
    (loc (s '%61 (fadd-double (g '%60 loc) #x3FF6A0EA0EA0EA0F) loc))
    (loc (s '%62 (load-double (g '%s loc) mem) loc))
    (loc (s '%63 (fdiv-double #xBFE691DE2532C834 (g '%62 loc)) loc))
    (loc (s '%64 (fadd-double (g '%61 loc) (g '%63 loc)) loc))
    (loc (s '%65 (fdiv-double #x3FF9B6DB6DB6DB6E (g '%64 loc)) loc))
    (loc (s '%66 (fadd-double #x3FD6DB6DB6DB6DB7 (g '%65 loc)) loc))
    (loc (s '%67 (load-double (g '%t loc) mem) loc))
    (loc (s '%68 (fmul-double (g '%67 loc) (g '%66 loc)) loc))
    (mem (store-double (g '%68 loc) (g '%t loc) mem))
    (loc (s '%69 (bitcast-double*-to-i32* (g '%t loc)) loc))
    (mem (store-i32 0 (g '%69 loc) mem))
    (loc (s '%70 (bitcast-double*-to-i32* (g '%t loc)) loc))
    (loc (s '%71 (getelementptr-i32 (g '%70 loc) 1) loc))
    (loc (s '%72 (load-i32 (g '%71 loc) mem) loc))
    (loc (s '%73 (add-i32 (g '%72 loc) 1) loc))
    (mem (store-i32 (g '%73 loc) (g '%71 loc) mem))
    (loc (s '%74 (load-double (g '%t loc) mem) loc))
    (loc (s '%75 (load-double (g '%t loc) mem) loc))
    (loc (s '%76 (fmul-double (g '%74 loc) (g '%75 loc)) loc))
    (mem (store-double (g '%76 loc) (g '%s loc) mem))
    (loc (s '%77 (load-double (g '%2 loc) mem) loc))
    (loc (s '%78 (load-double (g '%s loc) mem) loc))
    (loc (s '%79 (fdiv-double (g '%77 loc) (g '%78 loc)) loc))
    (mem (store-double (g '%79 loc) (g '%r loc) mem))
    (loc (s '%80 (load-double (g '%t loc) mem) loc))
    (loc (s '%81 (load-double (g '%t loc) mem) loc))
    (loc (s '%82 (fadd-double (g '%80 loc) (g '%81 loc)) loc))
    (mem (store-double (g '%82 loc) (g '%w loc) mem))
    (loc (s '%83 (load-double (g '%r loc) mem) loc))
    (loc (s '%84 (load-double (g '%t loc) mem) loc))
    (loc (s '%85 (fsub-double (g '%83 loc) (g '%84 loc)) loc))
    (loc (s '%86 (load-double (g '%w loc) mem) loc))
    (loc (s '%87 (load-double (g '%r loc) mem) loc))
    (loc (s '%88 (fadd-double (g '%86 loc) (g '%87 loc)) loc))
    (loc (s '%89 (fdiv-double (g '%85 loc) (g '%88 loc)) loc))
    (mem (store-double (g '%89 loc) (g '%r loc) mem))
    (loc (s '%90 (load-double (g '%t loc) mem) loc))
    (loc (s '%91 (load-double (g '%t loc) mem) loc))
    (loc (s '%92 (load-double (g '%r loc) mem) loc))
    (loc (s '%93 (fmul-double (g '%91 loc) (g '%92 loc)) loc))
    (loc (s '%94 (fadd-double (g '%90 loc) (g '%93 loc)) loc))
    (mem (store-double (g '%94 loc) (g '%t loc) mem))
    (loc (s '%95 (load-i32 (g '%sign loc) mem) loc))
    (loc (s '%96 (bitcast-double*-to-i32* (g '%t loc)) loc))
    (loc (s '%97 (getelementptr-i32 (g '%96 loc) 1) loc))
    (loc (s '%98 (load-i32 (g '%97 loc) mem) loc))
    (loc (s '%99 (or-i32 (g '%98 loc) (g '%95 loc)) loc))
    (mem (store-i32 (g '%99 loc) (g '%97 loc) mem))
    (loc (s '%100 (load-double (g '%t loc) mem) loc))
    (mem (store-double (g '%100 loc) (g '%1 loc) mem))
    (succ '%101))
  (mv succ mem loc)))

(defund @cbrt-%101-mem (s101)
  (car s101))
(defund @cbrt-%101-loc (s101)
  (cadr s101))
(defund @cbrt-%101-pred (s101)
  (caddr s101))
(defund @cbrt-%102-val (s101)
  (load-double (g '%1 (@cbrt-%101-loc s101)) (@cbrt-%101-mem s101)))
(defund @cbrt-%102-loc (s101)
  (s '%102 (@cbrt-%102-val s101) (@cbrt-%101-loc s101)))
(defund @cbrt-succ101-lab (s101)
  (declare (ignore s101))
  'ret)

(defund @cbrt-%101-fwd (mem loc pred)
  (let ((s101 (list mem loc pred)))
    (mv (@cbrt-succ101-lab s101) (@cbrt-%101-mem s101) (@cbrt-%102-loc s101))))

(defund @cbrt-succ101-rev (mem loc pred)
  (declare (ignore pred))
  (mv 'ret mem loc))
(defund @cbrt-%102-rev (mem loc pred)
  (@cbrt-succ101-rev mem (s '%102 (load-double (g '%1 loc) mem) loc) pred))

(defund @cbrt-%101-rev (mem loc pred)
  (@cbrt-%102-rev mem loc pred))

(defruled @cbrt-%101-expand-rev-as-@cbrt-%102-rev
  (equal (@cbrt-%101-rev mem loc pred)
         (let ((s101 (list mem loc pred)))
           (@cbrt-%102-rev
            (@cbrt-%101-mem s101)
            (@cbrt-%101-loc s101)
            (@cbrt-%101-pred s101))))
  :enable (@cbrt-%101-rev @cbrt-%101-mem @cbrt-%101-loc @cbrt-%101-pred))
(defruled @cbrt-%101-expand-rev-as-@cbrt-succ101-rev
  (equal (@cbrt-%101-rev mem loc pred)
         (let ((s101 (list mem loc pred)))
           (@cbrt-succ101-rev
            (@cbrt-%101-mem s101)
            (@cbrt-%102-loc s101)
            (@cbrt-%101-pred s101))))
  :enable (@cbrt-%101-expand-rev-as-@cbrt-%102-rev @cbrt-%102-rev @cbrt-%102-loc @cbrt-%102-val))
(defruled @cbrt-%101-expand-rev-as-fwd
  (equal (@cbrt-%101-rev mem loc pred)
         (@cbrt-%101-fwd mem loc pred))
  :enable (@cbrt-%101-expand-rev-as-@cbrt-succ101-rev @cbrt-succ101-rev @cbrt-succ101-lab @cbrt-%101-fwd))

(defund @cbrt-%101-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%102 (load-double (g '%1 loc) mem) loc))
    (succ 'ret))
  (mv succ mem loc)))

(defund @cbrt-step (label mem loc pred)
  (case label
    (%0 (@cbrt-%0-bb mem loc pred))
    (%13 (@cbrt-%13-bb mem loc pred))
    (%17 (@cbrt-%17-bb mem loc pred))
    (%23 (@cbrt-%23-bb mem loc pred))
    (%25 (@cbrt-%25-bb mem loc pred))
    (%31 (@cbrt-%31-bb mem loc pred))
    (%44 (@cbrt-%44-bb mem loc pred))
    (%50 (@cbrt-%50-bb mem loc pred))
    (%101 (@cbrt-%101-bb mem loc pred))
    (otherwise (mv nil mem loc))))

(defund @cbrt-steps (label mem loc pred n)
  (declare (xargs :measure (nfix n)))
  (if (equal label 'ret)
      (g '%102 loc)
    (if (zp n) nil
      (mv-let
        (new-label new-mem new-loc)
        (@cbrt-step label mem loc pred)
        (@cbrt-steps new-label new-mem new-loc label (1- n))))))

(defund @cbrt (%x)
  (declare (ignore %x))
   nil)
