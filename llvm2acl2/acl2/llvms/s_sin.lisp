(in-package "ACL2")
(include-book "../llvm")
(include-book "k_sin")
(include-book "k_cos")
(include-book "e_rem_pio2")

(defconst *sin-globals* '())

(defund @sin-%0-bb (mem loc)
  (b* (
    (mem (alloca-double 'ret 1 mem))
    (mem (alloca-double 'x 1 mem))
    (mem (alloca-double 'y 2 mem))
    (mem (alloca-double 'z 1 mem))
    (mem (alloca-i32 'n 1 mem))
    (mem (alloca-i32 'ix 1 mem))
    (mem (store-double (g '%x loc) '(x . 0) mem))
    (mem (store-double #x0000000000000000 '(z . 0) mem))
    (loc (s '%3 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%4 (getelementptr-i32 (g '%3 loc) 1) loc))
    (loc (s '%5 (load-i32 (g '%4 loc) mem) loc))
    (mem (store-i32 (g '%5 loc) '(ix . 0) mem))
    (loc (s '%6 (load-i32 '(ix . 0) mem) loc))
    (loc (s '%7 (and-i32 (g '%6 loc) 2147483647) loc))
    (mem (store-i32 (g '%7 loc) '(ix . 0) mem))
    (loc (s '%8 (load-i32 '(ix . 0) mem) loc))
    (loc (s '%9 (icmp-sle-i32 (g '%8 loc) 1072243195) loc)))
  (case (g '%9 loc)
    (-1 (mv '@sin-%10-bb mem loc))
    ( 0 (mv '@sin-%14-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @sin-%10-bb (mem loc)
  (b* (
    (loc (s '%11 (load-double '(x . 0) mem) loc))
    (loc (s '%12 (load-double '(z . 0) mem) loc))
    (loc (s '%13 (@__kernel_sin (g '%11 loc) (g '%12 loc) 0) loc))
    (mem (store-double (g '%13 loc) '(ret . 0) mem)))
  (mv '@sin-%53-bb mem loc)))

(defund @sin-%14-bb (mem loc)
  (b* (
    (loc (s '%15 (load-i32 '(ix . 0) mem) loc))
    (loc (s '%16 (icmp-sge-i32 (g '%15 loc) 2146435072) loc)))
  (case (g '%16 loc)
    (-1 (mv '@sin-%17-bb mem loc))
    ( 0 (mv '@sin-%21-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @sin-%17-bb (mem loc)
  (b* (
    (loc (s '%18 (load-double '(x . 0) mem) loc))
    (loc (s '%19 (load-double '(x . 0) mem) loc))
    (loc (s '%20 (fsub-double (g '%18 loc) (g '%19 loc)) loc))
    (mem (store-double (g '%20 loc) '(ret . 0) mem)))
  (mv '@sin-%53-bb mem loc)))

(defund @sin-%21-bb (mem loc)
  (b* (
    (loc (s '%22 (load-double '(x . 0) mem) loc))
    (loc (s '%23 (getelementptr-double '(y . 0) 0) loc))
    (loc (s '%24 (@__ieee754_rem_pio2 (g '%22 loc) (g '%23 loc)) loc))
    (mem (store-i32 (g '%24 loc) '(n . 0) mem))
    (loc (s '%25 (load-i32 '(n . 0) mem) loc))
    (loc (s '%26 (and-i32 (g '%25 loc) 3) loc)))
  (case (g '%26 loc)
    (0 (mv '@sin-%27-bb mem loc))
    (1 (mv '@sin-%33-bb mem loc))
    (2 (mv '@sin-%39-bb mem loc))
    (otherwise (mv '@sin-%46-bb mem loc)))))

(defund @sin-%27-bb (mem loc)
  (b* (
    (loc (s '%28 (getelementptr-double '(y . 0) 0) loc))
    (loc (s '%29 (load-double (g '%28 loc) mem) loc))
    (loc (s '%30 (getelementptr-double '(y . 0) 1) loc))
    (loc (s '%31 (load-double (g '%30 loc) mem) loc))
    (loc (s '%32 (@__kernel_sin (g '%29 loc) (g '%31 loc) 1) loc))
    (mem (store-double (g '%32 loc) '(ret . 0) mem)))
  (mv '@sin-%53-bb mem loc)))

(defund @sin-%33-bb (mem loc)
  (b* (
    (loc (s '%34 (getelementptr-double '(y . 0) 0) loc))
    (loc (s '%35 (load-double (g '%34 loc) mem) loc))
    (loc (s '%36 (getelementptr-double '(y . 0) 1) loc))
    (loc (s '%37 (load-double (g '%36 loc) mem) loc))
    (loc (s '%38 (@__kernel_cos (g '%35 loc) (g '%37 loc)) loc))
    (mem (store-double (g '%38 loc) '(ret . 0) mem)))
  (mv '@sin-%53-bb mem loc)))

(defund @sin-%39-bb (mem loc)
  (b* (
    (loc (s '%40 (getelementptr-double '(y . 0) 0) loc))
    (loc (s '%41 (load-double (g '%40 loc) mem) loc))
    (loc (s '%42 (getelementptr-double '(y . 0) 1) loc))
    (loc (s '%43 (load-double (g '%42 loc) mem) loc))
    (loc (s '%44 (@__kernel_sin (g '%41 loc) (g '%43 loc) 1) loc))
    (loc (s '%45 (fsub-double #x8000000000000000 (g '%44 loc)) loc))
    (mem (store-double (g '%45 loc) '(ret . 0) mem)))
  (mv '@sin-%53-bb mem loc)))

(defund @sin-%46-bb (mem loc)
  (b* (
    (loc (s '%47 (getelementptr-double '(y . 0) 0) loc))
    (loc (s '%48 (load-double (g '%47 loc) mem) loc))
    (loc (s '%49 (getelementptr-double '(y . 0) 1) loc))
    (loc (s '%50 (load-double (g '%49 loc) mem) loc))
    (loc (s '%51 (@__kernel_cos (g '%48 loc) (g '%50 loc)) loc))
    (loc (s '%52 (fsub-double #x8000000000000000 (g '%51 loc)) loc))
    (mem (store-double (g '%52 loc) '(ret . 0) mem)))
  (mv '@sin-%53-bb mem loc)))

(defund @sin-%53-bb (mem loc)
  (b* (
    (loc (s '%54 (load-double '(ret . 0) mem) loc)))
  (mv 'ret mem loc)))

(defund @sin-step (label mem loc)
  (case label
    (%-0 (@sin-%0-bb mem loc))
    (%-10 (@sin-%10-bb mem loc))
    (%-14 (@sin-%14-bb mem loc))
    (%-17 (@sin-%17-bb mem loc))
    (%-21 (@sin-%21-bb mem loc))
    (%-27 (@sin-%27-bb mem loc))
    (%-33 (@sin-%33-bb mem loc))
    (%-39 (@sin-%39-bb mem loc))
    (%-46 (@sin-%46-bb mem loc))
    (%-53 (@sin-%53-bb mem loc))
    (otherwise (mv nil mem loc))))

(defund @sin-steps (label mem loc n)
  (declare (xargs :measure (nfix n)))
  (if (equal label 'ret)
      (g '%54 loc)
    (if (zp n) nil
      (mv-let
        (label mem loc)
        (@sin-step label mem loc)
        (@sin-steps label mem loc (1- n))))))

(defund @sin (%x)
  (declare (ignore %x))
   nil)
