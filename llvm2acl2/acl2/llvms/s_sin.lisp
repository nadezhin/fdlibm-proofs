(in-package "ACL2")
(include-book "std/util/defrule" :dir :system)
(include-book "../llvm")
(include-book "k_sin")
(include-book "k_cos")
(include-book "e_rem_pio2")

(defconst *sin-globals* '())

(defconst *sin-labels* '(%0 %10 %14 %17 %21 %27 %33 %39 %46 %53))

(defund @sin-%0-mem (s0)
  (car s0))
(defund @sin-%0-loc (s0)
  (cadr s0))
(defund @sin-%0-pred (s0)
  (caddr s0))
(defund @sin-%1-mem (s0)
  (alloca-double 'ret 1 (@sin-%0-mem s0)))
(defund @sin-%1-loc (s0)
  (s '%1 '(ret . 0) (@sin-%0-loc s0)))
(defund @sin-%2-mem (s0)
  (alloca-double 'x 1 (@sin-%1-mem s0)))
(defund @sin-%2-loc (s0)
  (s '%2 '(x . 0) (@sin-%1-loc s0)))
(defund @sin-%y-mem (s0)
  (alloca-double 'y 2 (@sin-%2-mem s0)))
(defund @sin-%y-loc (s0)
  (s '%y '(y . 0) (@sin-%2-loc s0)))
(defund @sin-%z-mem (s0)
  (alloca-double 'z 1 (@sin-%y-mem s0)))
(defund @sin-%z-loc (s0)
  (s '%z '(z . 0) (@sin-%y-loc s0)))
(defund @sin-%n-mem (s0)
  (alloca-i32 'n 1 (@sin-%z-mem s0)))
(defund @sin-%n-loc (s0)
  (s '%n '(n . 0) (@sin-%z-loc s0)))
(defund @sin-%ix-mem (s0)
  (alloca-i32 'ix 1 (@sin-%n-mem s0)))
(defund @sin-%ix-loc (s0)
  (s '%ix '(ix . 0) (@sin-%n-loc s0)))
(defund @sin-m0.1-mem (s0)
  (store-double (g '%x (@sin-%ix-loc s0)) (g '%2 (@sin-%ix-loc s0)) (@sin-%ix-mem s0)))
(defund @sin-m0.2-mem (s0)
  (store-double #x0000000000000000 (g '%z (@sin-%ix-loc s0)) (@sin-m0.1-mem s0)))
(defund @sin-%3-val (s0)
  (bitcast-double*-to-i32* (g '%2 (@sin-%ix-loc s0))))
(defund @sin-%3-loc (s0)
  (s '%3 (@sin-%3-val s0) (@sin-%ix-loc s0)))
(defund @sin-%4-val (s0)
  (getelementptr-i32 (g '%3 (@sin-%3-loc s0)) 1))
(defund @sin-%4-loc (s0)
  (s '%4 (@sin-%4-val s0) (@sin-%3-loc s0)))
(defund @sin-%5-val (s0)
  (load-i32 (g '%4 (@sin-%4-loc s0)) (@sin-m0.2-mem s0)))
(defund @sin-%5-loc (s0)
  (s '%5 (@sin-%5-val s0) (@sin-%4-loc s0)))
(defund @sin-m0.3-mem (s0)
  (store-i32 (g '%5 (@sin-%5-loc s0)) (g '%ix (@sin-%5-loc s0)) (@sin-m0.2-mem s0)))
(defund @sin-%6-val (s0)
  (load-i32 (g '%ix (@sin-%5-loc s0)) (@sin-m0.3-mem s0)))
(defund @sin-%6-loc (s0)
  (s '%6 (@sin-%6-val s0) (@sin-%5-loc s0)))
(defund @sin-%7-val (s0)
  (and-i32 (g '%6 (@sin-%6-loc s0)) 2147483647))
(defund @sin-%7-loc (s0)
  (s '%7 (@sin-%7-val s0) (@sin-%6-loc s0)))
(defund @sin-m0.4-mem (s0)
  (store-i32 (g '%7 (@sin-%7-loc s0)) (g '%ix (@sin-%7-loc s0)) (@sin-m0.3-mem s0)))
(defund @sin-%8-val (s0)
  (load-i32 (g '%ix (@sin-%7-loc s0)) (@sin-m0.4-mem s0)))
(defund @sin-%8-loc (s0)
  (s '%8 (@sin-%8-val s0) (@sin-%7-loc s0)))
(defund @sin-%9-val (s0)
  (icmp-sle-i32 (g '%8 (@sin-%8-loc s0)) 1072243195))
(defund @sin-%9-loc (s0)
  (s '%9 (@sin-%9-val s0) (@sin-%8-loc s0)))
(defund @sin-succ0-lab (s0)
  (case (g '%9 (@sin-%9-loc s0)) (-1 '%10) (0 '%14)))

(defund @sin-%0-fwd (mem loc pred)
  (let ((s0 (list mem loc pred)))
    (mv (@sin-succ0-lab s0) (@sin-m0.4-mem s0) (@sin-%9-loc s0))))

(defund @sin-succ0-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%9 loc) (-1 '%10) (0 '%14)) mem loc))
(defund @sin-%9-rev (mem loc pred)
  (@sin-succ0-rev mem (s '%9 (icmp-sle-i32 (g '%8 loc) 1072243195) loc) pred))
(defund @sin-%8-rev (mem loc pred)
  (@sin-%9-rev mem (s '%8 (load-i32 (g '%ix loc) mem) loc) pred))
(defund @sin-m0.4-rev (mem loc pred)
  (@sin-%8-rev (store-i32 (g '%7 loc) (g '%ix loc) mem) loc pred))
(defund @sin-%7-rev (mem loc pred)
  (@sin-m0.4-rev mem (s '%7 (and-i32 (g '%6 loc) 2147483647) loc) pred))
(defund @sin-%6-rev (mem loc pred)
  (@sin-%7-rev mem (s '%6 (load-i32 (g '%ix loc) mem) loc) pred))
(defund @sin-m0.3-rev (mem loc pred)
  (@sin-%6-rev (store-i32 (g '%5 loc) (g '%ix loc) mem) loc pred))
(defund @sin-%5-rev (mem loc pred)
  (@sin-m0.3-rev mem (s '%5 (load-i32 (g '%4 loc) mem) loc) pred))
(defund @sin-%4-rev (mem loc pred)
  (@sin-%5-rev mem (s '%4 (getelementptr-i32 (g '%3 loc) 1) loc) pred))
(defund @sin-%3-rev (mem loc pred)
  (@sin-%4-rev mem (s '%3 (bitcast-double*-to-i32* (g '%2 loc)) loc) pred))
(defund @sin-m0.2-rev (mem loc pred)
  (@sin-%3-rev (store-double #x0000000000000000 (g '%z loc) mem) loc pred))
(defund @sin-m0.1-rev (mem loc pred)
  (@sin-m0.2-rev (store-double (g '%x loc) (g '%2 loc) mem) loc pred))
(defund @sin-%ix-rev (mem loc pred)
  (@sin-m0.1-rev (alloca-i32 'ix 1 mem) (s '%ix '(ix . 0) loc) pred))
(defund @sin-%n-rev (mem loc pred)
  (@sin-%ix-rev (alloca-i32 'n 1 mem) (s '%n '(n . 0) loc) pred))
(defund @sin-%z-rev (mem loc pred)
  (@sin-%n-rev (alloca-double 'z 1 mem) (s '%z '(z . 0) loc) pred))
(defund @sin-%y-rev (mem loc pred)
  (@sin-%z-rev (alloca-double 'y 2 mem) (s '%y '(y . 0) loc) pred))
(defund @sin-%2-rev (mem loc pred)
  (@sin-%y-rev (alloca-double 'x 1 mem) (s '%2 '(x . 0) loc) pred))
(defund @sin-%1-rev (mem loc pred)
  (@sin-%2-rev (alloca-double 'ret 1 mem) (s '%1 '(ret . 0) loc) pred))

(defund @sin-%0-rev (mem loc pred)
  (@sin-%1-rev mem loc pred))

(defruled @sin-%0-expand-rev-as-@sin-%1-rev
  (equal (@sin-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@sin-%1-rev
            (@sin-%0-mem s0)
            (@sin-%0-loc s0)
            (@sin-%0-pred s0))))
  :enable (@sin-%0-rev @sin-%0-mem @sin-%0-loc @sin-%0-pred))
(defruled @sin-%0-expand-rev-as-@sin-%2-rev
  (equal (@sin-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@sin-%2-rev
            (@sin-%1-mem s0)
            (@sin-%1-loc s0)
            (@sin-%0-pred s0))))
  :enable (@sin-%0-expand-rev-as-@sin-%1-rev @sin-%1-rev @sin-%1-mem @sin-%1-loc))
(defruled @sin-%0-expand-rev-as-@sin-%y-rev
  (equal (@sin-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@sin-%y-rev
            (@sin-%2-mem s0)
            (@sin-%2-loc s0)
            (@sin-%0-pred s0))))
  :enable (@sin-%0-expand-rev-as-@sin-%2-rev @sin-%2-rev @sin-%2-mem @sin-%2-loc))
(defruled @sin-%0-expand-rev-as-@sin-%z-rev
  (equal (@sin-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@sin-%z-rev
            (@sin-%y-mem s0)
            (@sin-%y-loc s0)
            (@sin-%0-pred s0))))
  :enable (@sin-%0-expand-rev-as-@sin-%y-rev @sin-%y-rev @sin-%y-mem @sin-%y-loc))
(defruled @sin-%0-expand-rev-as-@sin-%n-rev
  (equal (@sin-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@sin-%n-rev
            (@sin-%z-mem s0)
            (@sin-%z-loc s0)
            (@sin-%0-pred s0))))
  :enable (@sin-%0-expand-rev-as-@sin-%z-rev @sin-%z-rev @sin-%z-mem @sin-%z-loc))
(defruled @sin-%0-expand-rev-as-@sin-%ix-rev
  (equal (@sin-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@sin-%ix-rev
            (@sin-%n-mem s0)
            (@sin-%n-loc s0)
            (@sin-%0-pred s0))))
  :enable (@sin-%0-expand-rev-as-@sin-%n-rev @sin-%n-rev @sin-%n-mem @sin-%n-loc))
(defruled @sin-%0-expand-rev-as-@sin-m0.1-rev
  (equal (@sin-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@sin-m0.1-rev
            (@sin-%ix-mem s0)
            (@sin-%ix-loc s0)
            (@sin-%0-pred s0))))
  :enable (@sin-%0-expand-rev-as-@sin-%ix-rev @sin-%ix-rev @sin-%ix-mem @sin-%ix-loc))
(defruled @sin-%0-expand-rev-as-@sin-m0.2-rev
  (equal (@sin-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@sin-m0.2-rev
            (@sin-m0.1-mem s0)
            (@sin-%ix-loc s0)
            (@sin-%0-pred s0))))
  :enable (@sin-%0-expand-rev-as-@sin-m0.1-rev @sin-m0.1-rev @sin-m0.1-mem))
(defruled @sin-%0-expand-rev-as-@sin-%3-rev
  (equal (@sin-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@sin-%3-rev
            (@sin-m0.2-mem s0)
            (@sin-%ix-loc s0)
            (@sin-%0-pred s0))))
  :enable (@sin-%0-expand-rev-as-@sin-m0.2-rev @sin-m0.2-rev @sin-m0.2-mem))
(defruled @sin-%0-expand-rev-as-@sin-%4-rev
  (equal (@sin-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@sin-%4-rev
            (@sin-m0.2-mem s0)
            (@sin-%3-loc s0)
            (@sin-%0-pred s0))))
  :enable (@sin-%0-expand-rev-as-@sin-%3-rev @sin-%3-rev @sin-%3-loc @sin-%3-val))
(defruled @sin-%0-expand-rev-as-@sin-%5-rev
  (equal (@sin-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@sin-%5-rev
            (@sin-m0.2-mem s0)
            (@sin-%4-loc s0)
            (@sin-%0-pred s0))))
  :enable (@sin-%0-expand-rev-as-@sin-%4-rev @sin-%4-rev @sin-%4-loc @sin-%4-val))
(defruled @sin-%0-expand-rev-as-@sin-m0.3-rev
  (equal (@sin-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@sin-m0.3-rev
            (@sin-m0.2-mem s0)
            (@sin-%5-loc s0)
            (@sin-%0-pred s0))))
  :enable (@sin-%0-expand-rev-as-@sin-%5-rev @sin-%5-rev @sin-%5-loc @sin-%5-val))
(defruled @sin-%0-expand-rev-as-@sin-%6-rev
  (equal (@sin-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@sin-%6-rev
            (@sin-m0.3-mem s0)
            (@sin-%5-loc s0)
            (@sin-%0-pred s0))))
  :enable (@sin-%0-expand-rev-as-@sin-m0.3-rev @sin-m0.3-rev @sin-m0.3-mem))
(defruled @sin-%0-expand-rev-as-@sin-%7-rev
  (equal (@sin-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@sin-%7-rev
            (@sin-m0.3-mem s0)
            (@sin-%6-loc s0)
            (@sin-%0-pred s0))))
  :enable (@sin-%0-expand-rev-as-@sin-%6-rev @sin-%6-rev @sin-%6-loc @sin-%6-val))
(defruled @sin-%0-expand-rev-as-@sin-m0.4-rev
  (equal (@sin-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@sin-m0.4-rev
            (@sin-m0.3-mem s0)
            (@sin-%7-loc s0)
            (@sin-%0-pred s0))))
  :enable (@sin-%0-expand-rev-as-@sin-%7-rev @sin-%7-rev @sin-%7-loc @sin-%7-val))
(defruled @sin-%0-expand-rev-as-@sin-%8-rev
  (equal (@sin-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@sin-%8-rev
            (@sin-m0.4-mem s0)
            (@sin-%7-loc s0)
            (@sin-%0-pred s0))))
  :enable (@sin-%0-expand-rev-as-@sin-m0.4-rev @sin-m0.4-rev @sin-m0.4-mem))
(defruled @sin-%0-expand-rev-as-@sin-%9-rev
  (equal (@sin-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@sin-%9-rev
            (@sin-m0.4-mem s0)
            (@sin-%8-loc s0)
            (@sin-%0-pred s0))))
  :enable (@sin-%0-expand-rev-as-@sin-%8-rev @sin-%8-rev @sin-%8-loc @sin-%8-val))
(defruled @sin-%0-expand-rev-as-@sin-succ0-rev
  (equal (@sin-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@sin-succ0-rev
            (@sin-m0.4-mem s0)
            (@sin-%9-loc s0)
            (@sin-%0-pred s0))))
  :enable (@sin-%0-expand-rev-as-@sin-%9-rev @sin-%9-rev @sin-%9-loc @sin-%9-val))
(defruled @sin-%0-expand-rev-as-fwd
  (equal (@sin-%0-rev mem loc pred)
         (@sin-%0-fwd mem loc pred))
  :enable (@sin-%0-expand-rev-as-@sin-succ0-rev @sin-succ0-rev @sin-succ0-lab @sin-%0-fwd))

(defund @sin-%0-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (mem (alloca-double 'ret 1 mem))
    (loc (s '%1 '(ret . 0) loc))
    (mem (alloca-double 'x 1 mem))
    (loc (s '%2 '(x . 0) loc))
    (mem (alloca-double 'y 2 mem))
    (loc (s '%y '(y . 0) loc))
    (mem (alloca-double 'z 1 mem))
    (loc (s '%z '(z . 0) loc))
    (mem (alloca-i32 'n 1 mem))
    (loc (s '%n '(n . 0) loc))
    (mem (alloca-i32 'ix 1 mem))
    (loc (s '%ix '(ix . 0) loc))
    (mem (store-double (g '%x loc) (g '%2 loc) mem))
    (mem (store-double #x0000000000000000 (g '%z loc) mem))
    (loc (s '%3 (bitcast-double*-to-i32* (g '%2 loc)) loc))
    (loc (s '%4 (getelementptr-i32 (g '%3 loc) 1) loc))
    (loc (s '%5 (load-i32 (g '%4 loc) mem) loc))
    (mem (store-i32 (g '%5 loc) (g '%ix loc) mem))
    (loc (s '%6 (load-i32 (g '%ix loc) mem) loc))
    (loc (s '%7 (and-i32 (g '%6 loc) 2147483647) loc))
    (mem (store-i32 (g '%7 loc) (g '%ix loc) mem))
    (loc (s '%8 (load-i32 (g '%ix loc) mem) loc))
    (loc (s '%9 (icmp-sle-i32 (g '%8 loc) 1072243195) loc))
    (succ (case (g '%9 loc) (-1 '%10) (0 '%14))))
  (mv succ mem loc)))

(defund @sin-%10-mem (s10)
  (car s10))
(defund @sin-%10-loc (s10)
  (cadr s10))
(defund @sin-%10-pred (s10)
  (caddr s10))
(defund @sin-%11-val (s10)
  (load-double (g '%2 (@sin-%10-loc s10)) (@sin-%10-mem s10)))
(defund @sin-%11-loc (s10)
  (s '%11 (@sin-%11-val s10) (@sin-%10-loc s10)))
(defund @sin-%12-val (s10)
  (load-double (g '%z (@sin-%11-loc s10)) (@sin-%10-mem s10)))
(defund @sin-%12-loc (s10)
  (s '%12 (@sin-%12-val s10) (@sin-%11-loc s10)))
(defund @sin-%13-val (s10)
  (@__kernel_sin (g '%11 (@sin-%12-loc s10)) (g '%12 (@sin-%12-loc s10)) 0))
(defund @sin-%13-loc (s10)
  (s '%13 (@sin-%13-val s10) (@sin-%12-loc s10)))
(defund @sin-m10.1-mem (s10)
  (store-double (g '%13 (@sin-%13-loc s10)) (g '%1 (@sin-%13-loc s10)) (@sin-%10-mem s10)))
(defund @sin-succ10-lab (s10)
  (declare (ignore s10))
  '%53)

(defund @sin-%10-fwd (mem loc pred)
  (let ((s10 (list mem loc pred)))
    (mv (@sin-succ10-lab s10) (@sin-m10.1-mem s10) (@sin-%13-loc s10))))

(defund @sin-succ10-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%53 mem loc))
(defund @sin-m10.1-rev (mem loc pred)
  (@sin-succ10-rev (store-double (g '%13 loc) (g '%1 loc) mem) loc pred))
(defund @sin-%13-rev (mem loc pred)
  (@sin-m10.1-rev mem (s '%13 (@__kernel_sin (g '%11 loc) (g '%12 loc) 0) loc) pred))
(defund @sin-%12-rev (mem loc pred)
  (@sin-%13-rev mem (s '%12 (load-double (g '%z loc) mem) loc) pred))
(defund @sin-%11-rev (mem loc pred)
  (@sin-%12-rev mem (s '%11 (load-double (g '%2 loc) mem) loc) pred))

(defund @sin-%10-rev (mem loc pred)
  (@sin-%11-rev mem loc pred))

(defruled @sin-%10-expand-rev-as-@sin-%11-rev
  (equal (@sin-%10-rev mem loc pred)
         (let ((s10 (list mem loc pred)))
           (@sin-%11-rev
            (@sin-%10-mem s10)
            (@sin-%10-loc s10)
            (@sin-%10-pred s10))))
  :enable (@sin-%10-rev @sin-%10-mem @sin-%10-loc @sin-%10-pred))
(defruled @sin-%10-expand-rev-as-@sin-%12-rev
  (equal (@sin-%10-rev mem loc pred)
         (let ((s10 (list mem loc pred)))
           (@sin-%12-rev
            (@sin-%10-mem s10)
            (@sin-%11-loc s10)
            (@sin-%10-pred s10))))
  :enable (@sin-%10-expand-rev-as-@sin-%11-rev @sin-%11-rev @sin-%11-loc @sin-%11-val))
(defruled @sin-%10-expand-rev-as-@sin-%13-rev
  (equal (@sin-%10-rev mem loc pred)
         (let ((s10 (list mem loc pred)))
           (@sin-%13-rev
            (@sin-%10-mem s10)
            (@sin-%12-loc s10)
            (@sin-%10-pred s10))))
  :enable (@sin-%10-expand-rev-as-@sin-%12-rev @sin-%12-rev @sin-%12-loc @sin-%12-val))
(defruled @sin-%10-expand-rev-as-@sin-m10.1-rev
  (equal (@sin-%10-rev mem loc pred)
         (let ((s10 (list mem loc pred)))
           (@sin-m10.1-rev
            (@sin-%10-mem s10)
            (@sin-%13-loc s10)
            (@sin-%10-pred s10))))
  :enable (@sin-%10-expand-rev-as-@sin-%13-rev @sin-%13-rev @sin-%13-loc @sin-%13-val))
(defruled @sin-%10-expand-rev-as-@sin-succ10-rev
  (equal (@sin-%10-rev mem loc pred)
         (let ((s10 (list mem loc pred)))
           (@sin-succ10-rev
            (@sin-m10.1-mem s10)
            (@sin-%13-loc s10)
            (@sin-%10-pred s10))))
  :enable (@sin-%10-expand-rev-as-@sin-m10.1-rev @sin-m10.1-rev @sin-m10.1-mem))
(defruled @sin-%10-expand-rev-as-fwd
  (equal (@sin-%10-rev mem loc pred)
         (@sin-%10-fwd mem loc pred))
  :enable (@sin-%10-expand-rev-as-@sin-succ10-rev @sin-succ10-rev @sin-succ10-lab @sin-%10-fwd))

(defund @sin-%10-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%11 (load-double (g '%2 loc) mem) loc))
    (loc (s '%12 (load-double (g '%z loc) mem) loc))
    (loc (s '%13 (@__kernel_sin (g '%11 loc) (g '%12 loc) 0) loc))
    (mem (store-double (g '%13 loc) (g '%1 loc) mem))
    (succ '%53))
  (mv succ mem loc)))

(defund @sin-%14-mem (s14)
  (car s14))
(defund @sin-%14-loc (s14)
  (cadr s14))
(defund @sin-%14-pred (s14)
  (caddr s14))
(defund @sin-%15-val (s14)
  (load-i32 (g '%ix (@sin-%14-loc s14)) (@sin-%14-mem s14)))
(defund @sin-%15-loc (s14)
  (s '%15 (@sin-%15-val s14) (@sin-%14-loc s14)))
(defund @sin-%16-val (s14)
  (icmp-sge-i32 (g '%15 (@sin-%15-loc s14)) 2146435072))
(defund @sin-%16-loc (s14)
  (s '%16 (@sin-%16-val s14) (@sin-%15-loc s14)))
(defund @sin-succ14-lab (s14)
  (case (g '%16 (@sin-%16-loc s14)) (-1 '%17) (0 '%21)))

(defund @sin-%14-fwd (mem loc pred)
  (let ((s14 (list mem loc pred)))
    (mv (@sin-succ14-lab s14) (@sin-%14-mem s14) (@sin-%16-loc s14))))

(defund @sin-succ14-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%16 loc) (-1 '%17) (0 '%21)) mem loc))
(defund @sin-%16-rev (mem loc pred)
  (@sin-succ14-rev mem (s '%16 (icmp-sge-i32 (g '%15 loc) 2146435072) loc) pred))
(defund @sin-%15-rev (mem loc pred)
  (@sin-%16-rev mem (s '%15 (load-i32 (g '%ix loc) mem) loc) pred))

(defund @sin-%14-rev (mem loc pred)
  (@sin-%15-rev mem loc pred))

(defruled @sin-%14-expand-rev-as-@sin-%15-rev
  (equal (@sin-%14-rev mem loc pred)
         (let ((s14 (list mem loc pred)))
           (@sin-%15-rev
            (@sin-%14-mem s14)
            (@sin-%14-loc s14)
            (@sin-%14-pred s14))))
  :enable (@sin-%14-rev @sin-%14-mem @sin-%14-loc @sin-%14-pred))
(defruled @sin-%14-expand-rev-as-@sin-%16-rev
  (equal (@sin-%14-rev mem loc pred)
         (let ((s14 (list mem loc pred)))
           (@sin-%16-rev
            (@sin-%14-mem s14)
            (@sin-%15-loc s14)
            (@sin-%14-pred s14))))
  :enable (@sin-%14-expand-rev-as-@sin-%15-rev @sin-%15-rev @sin-%15-loc @sin-%15-val))
(defruled @sin-%14-expand-rev-as-@sin-succ14-rev
  (equal (@sin-%14-rev mem loc pred)
         (let ((s14 (list mem loc pred)))
           (@sin-succ14-rev
            (@sin-%14-mem s14)
            (@sin-%16-loc s14)
            (@sin-%14-pred s14))))
  :enable (@sin-%14-expand-rev-as-@sin-%16-rev @sin-%16-rev @sin-%16-loc @sin-%16-val))
(defruled @sin-%14-expand-rev-as-fwd
  (equal (@sin-%14-rev mem loc pred)
         (@sin-%14-fwd mem loc pred))
  :enable (@sin-%14-expand-rev-as-@sin-succ14-rev @sin-succ14-rev @sin-succ14-lab @sin-%14-fwd))

(defund @sin-%14-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%15 (load-i32 (g '%ix loc) mem) loc))
    (loc (s '%16 (icmp-sge-i32 (g '%15 loc) 2146435072) loc))
    (succ (case (g '%16 loc) (-1 '%17) (0 '%21))))
  (mv succ mem loc)))

(defund @sin-%17-mem (s17)
  (car s17))
(defund @sin-%17-loc (s17)
  (cadr s17))
(defund @sin-%17-pred (s17)
  (caddr s17))
(defund @sin-%18-val (s17)
  (load-double (g '%2 (@sin-%17-loc s17)) (@sin-%17-mem s17)))
(defund @sin-%18-loc (s17)
  (s '%18 (@sin-%18-val s17) (@sin-%17-loc s17)))
(defund @sin-%19-val (s17)
  (load-double (g '%2 (@sin-%18-loc s17)) (@sin-%17-mem s17)))
(defund @sin-%19-loc (s17)
  (s '%19 (@sin-%19-val s17) (@sin-%18-loc s17)))
(defund @sin-%20-val (s17)
  (fsub-double (g '%18 (@sin-%19-loc s17)) (g '%19 (@sin-%19-loc s17))))
(defund @sin-%20-loc (s17)
  (s '%20 (@sin-%20-val s17) (@sin-%19-loc s17)))
(defund @sin-m17.1-mem (s17)
  (store-double (g '%20 (@sin-%20-loc s17)) (g '%1 (@sin-%20-loc s17)) (@sin-%17-mem s17)))
(defund @sin-succ17-lab (s17)
  (declare (ignore s17))
  '%53)

(defund @sin-%17-fwd (mem loc pred)
  (let ((s17 (list mem loc pred)))
    (mv (@sin-succ17-lab s17) (@sin-m17.1-mem s17) (@sin-%20-loc s17))))

(defund @sin-succ17-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%53 mem loc))
(defund @sin-m17.1-rev (mem loc pred)
  (@sin-succ17-rev (store-double (g '%20 loc) (g '%1 loc) mem) loc pred))
(defund @sin-%20-rev (mem loc pred)
  (@sin-m17.1-rev mem (s '%20 (fsub-double (g '%18 loc) (g '%19 loc)) loc) pred))
(defund @sin-%19-rev (mem loc pred)
  (@sin-%20-rev mem (s '%19 (load-double (g '%2 loc) mem) loc) pred))
(defund @sin-%18-rev (mem loc pred)
  (@sin-%19-rev mem (s '%18 (load-double (g '%2 loc) mem) loc) pred))

(defund @sin-%17-rev (mem loc pred)
  (@sin-%18-rev mem loc pred))

(defruled @sin-%17-expand-rev-as-@sin-%18-rev
  (equal (@sin-%17-rev mem loc pred)
         (let ((s17 (list mem loc pred)))
           (@sin-%18-rev
            (@sin-%17-mem s17)
            (@sin-%17-loc s17)
            (@sin-%17-pred s17))))
  :enable (@sin-%17-rev @sin-%17-mem @sin-%17-loc @sin-%17-pred))
(defruled @sin-%17-expand-rev-as-@sin-%19-rev
  (equal (@sin-%17-rev mem loc pred)
         (let ((s17 (list mem loc pred)))
           (@sin-%19-rev
            (@sin-%17-mem s17)
            (@sin-%18-loc s17)
            (@sin-%17-pred s17))))
  :enable (@sin-%17-expand-rev-as-@sin-%18-rev @sin-%18-rev @sin-%18-loc @sin-%18-val))
(defruled @sin-%17-expand-rev-as-@sin-%20-rev
  (equal (@sin-%17-rev mem loc pred)
         (let ((s17 (list mem loc pred)))
           (@sin-%20-rev
            (@sin-%17-mem s17)
            (@sin-%19-loc s17)
            (@sin-%17-pred s17))))
  :enable (@sin-%17-expand-rev-as-@sin-%19-rev @sin-%19-rev @sin-%19-loc @sin-%19-val))
(defruled @sin-%17-expand-rev-as-@sin-m17.1-rev
  (equal (@sin-%17-rev mem loc pred)
         (let ((s17 (list mem loc pred)))
           (@sin-m17.1-rev
            (@sin-%17-mem s17)
            (@sin-%20-loc s17)
            (@sin-%17-pred s17))))
  :enable (@sin-%17-expand-rev-as-@sin-%20-rev @sin-%20-rev @sin-%20-loc @sin-%20-val))
(defruled @sin-%17-expand-rev-as-@sin-succ17-rev
  (equal (@sin-%17-rev mem loc pred)
         (let ((s17 (list mem loc pred)))
           (@sin-succ17-rev
            (@sin-m17.1-mem s17)
            (@sin-%20-loc s17)
            (@sin-%17-pred s17))))
  :enable (@sin-%17-expand-rev-as-@sin-m17.1-rev @sin-m17.1-rev @sin-m17.1-mem))
(defruled @sin-%17-expand-rev-as-fwd
  (equal (@sin-%17-rev mem loc pred)
         (@sin-%17-fwd mem loc pred))
  :enable (@sin-%17-expand-rev-as-@sin-succ17-rev @sin-succ17-rev @sin-succ17-lab @sin-%17-fwd))

(defund @sin-%17-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%18 (load-double (g '%2 loc) mem) loc))
    (loc (s '%19 (load-double (g '%2 loc) mem) loc))
    (loc (s '%20 (fsub-double (g '%18 loc) (g '%19 loc)) loc))
    (mem (store-double (g '%20 loc) (g '%1 loc) mem))
    (succ '%53))
  (mv succ mem loc)))

(defund @sin-%21-mem (s21)
  (car s21))
(defund @sin-%21-loc (s21)
  (cadr s21))
(defund @sin-%21-pred (s21)
  (caddr s21))
(defund @sin-%22-val (s21)
  (load-double (g '%2 (@sin-%21-loc s21)) (@sin-%21-mem s21)))
(defund @sin-%22-loc (s21)
  (s '%22 (@sin-%22-val s21) (@sin-%21-loc s21)))
(defund @sin-%23-val (s21)
  (getelementptr-double (g '%y (@sin-%22-loc s21)) 0))
(defund @sin-%23-loc (s21)
  (s '%23 (@sin-%23-val s21) (@sin-%22-loc s21)))
(defund @sin-%24-val (s21)
  (@__ieee754_rem_pio2 (g '%22 (@sin-%23-loc s21)) (g '%23 (@sin-%23-loc s21))))
(defund @sin-%24-loc (s21)
  (s '%24 (@sin-%24-val s21) (@sin-%23-loc s21)))
(defund @sin-m21.1-mem (s21)
  (store-i32 (g '%24 (@sin-%24-loc s21)) (g '%n (@sin-%24-loc s21)) (@sin-%21-mem s21)))
(defund @sin-%25-val (s21)
  (load-i32 (g '%n (@sin-%24-loc s21)) (@sin-m21.1-mem s21)))
(defund @sin-%25-loc (s21)
  (s '%25 (@sin-%25-val s21) (@sin-%24-loc s21)))
(defund @sin-%26-val (s21)
  (and-i32 (g '%25 (@sin-%25-loc s21)) 3))
(defund @sin-%26-loc (s21)
  (s '%26 (@sin-%26-val s21) (@sin-%25-loc s21)))
(defund @sin-succ21-lab (s21)
  (case (g '%26 (@sin-%26-loc s21))(0 '%27)(1 '%33)(2 '%39) (otherwise '%46)))

(defund @sin-%21-fwd (mem loc pred)
  (let ((s21 (list mem loc pred)))
    (mv (@sin-succ21-lab s21) (@sin-m21.1-mem s21) (@sin-%26-loc s21))))

(defund @sin-succ21-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%26 loc)(0 '%27)(1 '%33)(2 '%39) (otherwise '%46)) mem loc))
(defund @sin-%26-rev (mem loc pred)
  (@sin-succ21-rev mem (s '%26 (and-i32 (g '%25 loc) 3) loc) pred))
(defund @sin-%25-rev (mem loc pred)
  (@sin-%26-rev mem (s '%25 (load-i32 (g '%n loc) mem) loc) pred))
(defund @sin-m21.1-rev (mem loc pred)
  (@sin-%25-rev (store-i32 (g '%24 loc) (g '%n loc) mem) loc pred))
(defund @sin-%24-rev (mem loc pred)
  (@sin-m21.1-rev mem (s '%24 (@__ieee754_rem_pio2 (g '%22 loc) (g '%23 loc)) loc) pred))
(defund @sin-%23-rev (mem loc pred)
  (@sin-%24-rev mem (s '%23 (getelementptr-double (g '%y loc) 0) loc) pred))
(defund @sin-%22-rev (mem loc pred)
  (@sin-%23-rev mem (s '%22 (load-double (g '%2 loc) mem) loc) pred))

(defund @sin-%21-rev (mem loc pred)
  (@sin-%22-rev mem loc pred))

(defruled @sin-%21-expand-rev-as-@sin-%22-rev
  (equal (@sin-%21-rev mem loc pred)
         (let ((s21 (list mem loc pred)))
           (@sin-%22-rev
            (@sin-%21-mem s21)
            (@sin-%21-loc s21)
            (@sin-%21-pred s21))))
  :enable (@sin-%21-rev @sin-%21-mem @sin-%21-loc @sin-%21-pred))
(defruled @sin-%21-expand-rev-as-@sin-%23-rev
  (equal (@sin-%21-rev mem loc pred)
         (let ((s21 (list mem loc pred)))
           (@sin-%23-rev
            (@sin-%21-mem s21)
            (@sin-%22-loc s21)
            (@sin-%21-pred s21))))
  :enable (@sin-%21-expand-rev-as-@sin-%22-rev @sin-%22-rev @sin-%22-loc @sin-%22-val))
(defruled @sin-%21-expand-rev-as-@sin-%24-rev
  (equal (@sin-%21-rev mem loc pred)
         (let ((s21 (list mem loc pred)))
           (@sin-%24-rev
            (@sin-%21-mem s21)
            (@sin-%23-loc s21)
            (@sin-%21-pred s21))))
  :enable (@sin-%21-expand-rev-as-@sin-%23-rev @sin-%23-rev @sin-%23-loc @sin-%23-val))
(defruled @sin-%21-expand-rev-as-@sin-m21.1-rev
  (equal (@sin-%21-rev mem loc pred)
         (let ((s21 (list mem loc pred)))
           (@sin-m21.1-rev
            (@sin-%21-mem s21)
            (@sin-%24-loc s21)
            (@sin-%21-pred s21))))
  :enable (@sin-%21-expand-rev-as-@sin-%24-rev @sin-%24-rev @sin-%24-loc @sin-%24-val))
(defruled @sin-%21-expand-rev-as-@sin-%25-rev
  (equal (@sin-%21-rev mem loc pred)
         (let ((s21 (list mem loc pred)))
           (@sin-%25-rev
            (@sin-m21.1-mem s21)
            (@sin-%24-loc s21)
            (@sin-%21-pred s21))))
  :enable (@sin-%21-expand-rev-as-@sin-m21.1-rev @sin-m21.1-rev @sin-m21.1-mem))
(defruled @sin-%21-expand-rev-as-@sin-%26-rev
  (equal (@sin-%21-rev mem loc pred)
         (let ((s21 (list mem loc pred)))
           (@sin-%26-rev
            (@sin-m21.1-mem s21)
            (@sin-%25-loc s21)
            (@sin-%21-pred s21))))
  :enable (@sin-%21-expand-rev-as-@sin-%25-rev @sin-%25-rev @sin-%25-loc @sin-%25-val))
(defruled @sin-%21-expand-rev-as-@sin-succ21-rev
  (equal (@sin-%21-rev mem loc pred)
         (let ((s21 (list mem loc pred)))
           (@sin-succ21-rev
            (@sin-m21.1-mem s21)
            (@sin-%26-loc s21)
            (@sin-%21-pred s21))))
  :enable (@sin-%21-expand-rev-as-@sin-%26-rev @sin-%26-rev @sin-%26-loc @sin-%26-val))
(defruled @sin-%21-expand-rev-as-fwd
  (equal (@sin-%21-rev mem loc pred)
         (@sin-%21-fwd mem loc pred))
  :enable (@sin-%21-expand-rev-as-@sin-succ21-rev @sin-succ21-rev @sin-succ21-lab @sin-%21-fwd))

(defund @sin-%21-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%22 (load-double (g '%2 loc) mem) loc))
    (loc (s '%23 (getelementptr-double (g '%y loc) 0) loc))
    (loc (s '%24 (@__ieee754_rem_pio2 (g '%22 loc) (g '%23 loc)) loc))
    (mem (store-i32 (g '%24 loc) (g '%n loc) mem))
    (loc (s '%25 (load-i32 (g '%n loc) mem) loc))
    (loc (s '%26 (and-i32 (g '%25 loc) 3) loc))
    (succ (case (g '%26 loc)(0 '%27)(1 '%33)(2 '%39) (otherwise '%46))))
  (mv succ mem loc)))

(defund @sin-%27-mem (s27)
  (car s27))
(defund @sin-%27-loc (s27)
  (cadr s27))
(defund @sin-%27-pred (s27)
  (caddr s27))
(defund @sin-%28-val (s27)
  (getelementptr-double (g '%y (@sin-%27-loc s27)) 0))
(defund @sin-%28-loc (s27)
  (s '%28 (@sin-%28-val s27) (@sin-%27-loc s27)))
(defund @sin-%29-val (s27)
  (load-double (g '%28 (@sin-%28-loc s27)) (@sin-%27-mem s27)))
(defund @sin-%29-loc (s27)
  (s '%29 (@sin-%29-val s27) (@sin-%28-loc s27)))
(defund @sin-%30-val (s27)
  (getelementptr-double (g '%y (@sin-%29-loc s27)) 1))
(defund @sin-%30-loc (s27)
  (s '%30 (@sin-%30-val s27) (@sin-%29-loc s27)))
(defund @sin-%31-val (s27)
  (load-double (g '%30 (@sin-%30-loc s27)) (@sin-%27-mem s27)))
(defund @sin-%31-loc (s27)
  (s '%31 (@sin-%31-val s27) (@sin-%30-loc s27)))
(defund @sin-%32-val (s27)
  (@__kernel_sin (g '%29 (@sin-%31-loc s27)) (g '%31 (@sin-%31-loc s27)) 1))
(defund @sin-%32-loc (s27)
  (s '%32 (@sin-%32-val s27) (@sin-%31-loc s27)))
(defund @sin-m27.1-mem (s27)
  (store-double (g '%32 (@sin-%32-loc s27)) (g '%1 (@sin-%32-loc s27)) (@sin-%27-mem s27)))
(defund @sin-succ27-lab (s27)
  (declare (ignore s27))
  '%53)

(defund @sin-%27-fwd (mem loc pred)
  (let ((s27 (list mem loc pred)))
    (mv (@sin-succ27-lab s27) (@sin-m27.1-mem s27) (@sin-%32-loc s27))))

(defund @sin-succ27-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%53 mem loc))
(defund @sin-m27.1-rev (mem loc pred)
  (@sin-succ27-rev (store-double (g '%32 loc) (g '%1 loc) mem) loc pred))
(defund @sin-%32-rev (mem loc pred)
  (@sin-m27.1-rev mem (s '%32 (@__kernel_sin (g '%29 loc) (g '%31 loc) 1) loc) pred))
(defund @sin-%31-rev (mem loc pred)
  (@sin-%32-rev mem (s '%31 (load-double (g '%30 loc) mem) loc) pred))
(defund @sin-%30-rev (mem loc pred)
  (@sin-%31-rev mem (s '%30 (getelementptr-double (g '%y loc) 1) loc) pred))
(defund @sin-%29-rev (mem loc pred)
  (@sin-%30-rev mem (s '%29 (load-double (g '%28 loc) mem) loc) pred))
(defund @sin-%28-rev (mem loc pred)
  (@sin-%29-rev mem (s '%28 (getelementptr-double (g '%y loc) 0) loc) pred))

(defund @sin-%27-rev (mem loc pred)
  (@sin-%28-rev mem loc pred))

(defruled @sin-%27-expand-rev-as-@sin-%28-rev
  (equal (@sin-%27-rev mem loc pred)
         (let ((s27 (list mem loc pred)))
           (@sin-%28-rev
            (@sin-%27-mem s27)
            (@sin-%27-loc s27)
            (@sin-%27-pred s27))))
  :enable (@sin-%27-rev @sin-%27-mem @sin-%27-loc @sin-%27-pred))
(defruled @sin-%27-expand-rev-as-@sin-%29-rev
  (equal (@sin-%27-rev mem loc pred)
         (let ((s27 (list mem loc pred)))
           (@sin-%29-rev
            (@sin-%27-mem s27)
            (@sin-%28-loc s27)
            (@sin-%27-pred s27))))
  :enable (@sin-%27-expand-rev-as-@sin-%28-rev @sin-%28-rev @sin-%28-loc @sin-%28-val))
(defruled @sin-%27-expand-rev-as-@sin-%30-rev
  (equal (@sin-%27-rev mem loc pred)
         (let ((s27 (list mem loc pred)))
           (@sin-%30-rev
            (@sin-%27-mem s27)
            (@sin-%29-loc s27)
            (@sin-%27-pred s27))))
  :enable (@sin-%27-expand-rev-as-@sin-%29-rev @sin-%29-rev @sin-%29-loc @sin-%29-val))
(defruled @sin-%27-expand-rev-as-@sin-%31-rev
  (equal (@sin-%27-rev mem loc pred)
         (let ((s27 (list mem loc pred)))
           (@sin-%31-rev
            (@sin-%27-mem s27)
            (@sin-%30-loc s27)
            (@sin-%27-pred s27))))
  :enable (@sin-%27-expand-rev-as-@sin-%30-rev @sin-%30-rev @sin-%30-loc @sin-%30-val))
(defruled @sin-%27-expand-rev-as-@sin-%32-rev
  (equal (@sin-%27-rev mem loc pred)
         (let ((s27 (list mem loc pred)))
           (@sin-%32-rev
            (@sin-%27-mem s27)
            (@sin-%31-loc s27)
            (@sin-%27-pred s27))))
  :enable (@sin-%27-expand-rev-as-@sin-%31-rev @sin-%31-rev @sin-%31-loc @sin-%31-val))
(defruled @sin-%27-expand-rev-as-@sin-m27.1-rev
  (equal (@sin-%27-rev mem loc pred)
         (let ((s27 (list mem loc pred)))
           (@sin-m27.1-rev
            (@sin-%27-mem s27)
            (@sin-%32-loc s27)
            (@sin-%27-pred s27))))
  :enable (@sin-%27-expand-rev-as-@sin-%32-rev @sin-%32-rev @sin-%32-loc @sin-%32-val))
(defruled @sin-%27-expand-rev-as-@sin-succ27-rev
  (equal (@sin-%27-rev mem loc pred)
         (let ((s27 (list mem loc pred)))
           (@sin-succ27-rev
            (@sin-m27.1-mem s27)
            (@sin-%32-loc s27)
            (@sin-%27-pred s27))))
  :enable (@sin-%27-expand-rev-as-@sin-m27.1-rev @sin-m27.1-rev @sin-m27.1-mem))
(defruled @sin-%27-expand-rev-as-fwd
  (equal (@sin-%27-rev mem loc pred)
         (@sin-%27-fwd mem loc pred))
  :enable (@sin-%27-expand-rev-as-@sin-succ27-rev @sin-succ27-rev @sin-succ27-lab @sin-%27-fwd))

(defund @sin-%27-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%28 (getelementptr-double (g '%y loc) 0) loc))
    (loc (s '%29 (load-double (g '%28 loc) mem) loc))
    (loc (s '%30 (getelementptr-double (g '%y loc) 1) loc))
    (loc (s '%31 (load-double (g '%30 loc) mem) loc))
    (loc (s '%32 (@__kernel_sin (g '%29 loc) (g '%31 loc) 1) loc))
    (mem (store-double (g '%32 loc) (g '%1 loc) mem))
    (succ '%53))
  (mv succ mem loc)))

(defund @sin-%33-mem (s33)
  (car s33))
(defund @sin-%33-loc (s33)
  (cadr s33))
(defund @sin-%33-pred (s33)
  (caddr s33))
(defund @sin-%34-val (s33)
  (getelementptr-double (g '%y (@sin-%33-loc s33)) 0))
(defund @sin-%34-loc (s33)
  (s '%34 (@sin-%34-val s33) (@sin-%33-loc s33)))
(defund @sin-%35-val (s33)
  (load-double (g '%34 (@sin-%34-loc s33)) (@sin-%33-mem s33)))
(defund @sin-%35-loc (s33)
  (s '%35 (@sin-%35-val s33) (@sin-%34-loc s33)))
(defund @sin-%36-val (s33)
  (getelementptr-double (g '%y (@sin-%35-loc s33)) 1))
(defund @sin-%36-loc (s33)
  (s '%36 (@sin-%36-val s33) (@sin-%35-loc s33)))
(defund @sin-%37-val (s33)
  (load-double (g '%36 (@sin-%36-loc s33)) (@sin-%33-mem s33)))
(defund @sin-%37-loc (s33)
  (s '%37 (@sin-%37-val s33) (@sin-%36-loc s33)))
(defund @sin-%38-val (s33)
  (@__kernel_cos (g '%35 (@sin-%37-loc s33)) (g '%37 (@sin-%37-loc s33))))
(defund @sin-%38-loc (s33)
  (s '%38 (@sin-%38-val s33) (@sin-%37-loc s33)))
(defund @sin-m33.1-mem (s33)
  (store-double (g '%38 (@sin-%38-loc s33)) (g '%1 (@sin-%38-loc s33)) (@sin-%33-mem s33)))
(defund @sin-succ33-lab (s33)
  (declare (ignore s33))
  '%53)

(defund @sin-%33-fwd (mem loc pred)
  (let ((s33 (list mem loc pred)))
    (mv (@sin-succ33-lab s33) (@sin-m33.1-mem s33) (@sin-%38-loc s33))))

(defund @sin-succ33-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%53 mem loc))
(defund @sin-m33.1-rev (mem loc pred)
  (@sin-succ33-rev (store-double (g '%38 loc) (g '%1 loc) mem) loc pred))
(defund @sin-%38-rev (mem loc pred)
  (@sin-m33.1-rev mem (s '%38 (@__kernel_cos (g '%35 loc) (g '%37 loc)) loc) pred))
(defund @sin-%37-rev (mem loc pred)
  (@sin-%38-rev mem (s '%37 (load-double (g '%36 loc) mem) loc) pred))
(defund @sin-%36-rev (mem loc pred)
  (@sin-%37-rev mem (s '%36 (getelementptr-double (g '%y loc) 1) loc) pred))
(defund @sin-%35-rev (mem loc pred)
  (@sin-%36-rev mem (s '%35 (load-double (g '%34 loc) mem) loc) pred))
(defund @sin-%34-rev (mem loc pred)
  (@sin-%35-rev mem (s '%34 (getelementptr-double (g '%y loc) 0) loc) pred))

(defund @sin-%33-rev (mem loc pred)
  (@sin-%34-rev mem loc pred))

(defruled @sin-%33-expand-rev-as-@sin-%34-rev
  (equal (@sin-%33-rev mem loc pred)
         (let ((s33 (list mem loc pred)))
           (@sin-%34-rev
            (@sin-%33-mem s33)
            (@sin-%33-loc s33)
            (@sin-%33-pred s33))))
  :enable (@sin-%33-rev @sin-%33-mem @sin-%33-loc @sin-%33-pred))
(defruled @sin-%33-expand-rev-as-@sin-%35-rev
  (equal (@sin-%33-rev mem loc pred)
         (let ((s33 (list mem loc pred)))
           (@sin-%35-rev
            (@sin-%33-mem s33)
            (@sin-%34-loc s33)
            (@sin-%33-pred s33))))
  :enable (@sin-%33-expand-rev-as-@sin-%34-rev @sin-%34-rev @sin-%34-loc @sin-%34-val))
(defruled @sin-%33-expand-rev-as-@sin-%36-rev
  (equal (@sin-%33-rev mem loc pred)
         (let ((s33 (list mem loc pred)))
           (@sin-%36-rev
            (@sin-%33-mem s33)
            (@sin-%35-loc s33)
            (@sin-%33-pred s33))))
  :enable (@sin-%33-expand-rev-as-@sin-%35-rev @sin-%35-rev @sin-%35-loc @sin-%35-val))
(defruled @sin-%33-expand-rev-as-@sin-%37-rev
  (equal (@sin-%33-rev mem loc pred)
         (let ((s33 (list mem loc pred)))
           (@sin-%37-rev
            (@sin-%33-mem s33)
            (@sin-%36-loc s33)
            (@sin-%33-pred s33))))
  :enable (@sin-%33-expand-rev-as-@sin-%36-rev @sin-%36-rev @sin-%36-loc @sin-%36-val))
(defruled @sin-%33-expand-rev-as-@sin-%38-rev
  (equal (@sin-%33-rev mem loc pred)
         (let ((s33 (list mem loc pred)))
           (@sin-%38-rev
            (@sin-%33-mem s33)
            (@sin-%37-loc s33)
            (@sin-%33-pred s33))))
  :enable (@sin-%33-expand-rev-as-@sin-%37-rev @sin-%37-rev @sin-%37-loc @sin-%37-val))
(defruled @sin-%33-expand-rev-as-@sin-m33.1-rev
  (equal (@sin-%33-rev mem loc pred)
         (let ((s33 (list mem loc pred)))
           (@sin-m33.1-rev
            (@sin-%33-mem s33)
            (@sin-%38-loc s33)
            (@sin-%33-pred s33))))
  :enable (@sin-%33-expand-rev-as-@sin-%38-rev @sin-%38-rev @sin-%38-loc @sin-%38-val))
(defruled @sin-%33-expand-rev-as-@sin-succ33-rev
  (equal (@sin-%33-rev mem loc pred)
         (let ((s33 (list mem loc pred)))
           (@sin-succ33-rev
            (@sin-m33.1-mem s33)
            (@sin-%38-loc s33)
            (@sin-%33-pred s33))))
  :enable (@sin-%33-expand-rev-as-@sin-m33.1-rev @sin-m33.1-rev @sin-m33.1-mem))
(defruled @sin-%33-expand-rev-as-fwd
  (equal (@sin-%33-rev mem loc pred)
         (@sin-%33-fwd mem loc pred))
  :enable (@sin-%33-expand-rev-as-@sin-succ33-rev @sin-succ33-rev @sin-succ33-lab @sin-%33-fwd))

(defund @sin-%33-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%34 (getelementptr-double (g '%y loc) 0) loc))
    (loc (s '%35 (load-double (g '%34 loc) mem) loc))
    (loc (s '%36 (getelementptr-double (g '%y loc) 1) loc))
    (loc (s '%37 (load-double (g '%36 loc) mem) loc))
    (loc (s '%38 (@__kernel_cos (g '%35 loc) (g '%37 loc)) loc))
    (mem (store-double (g '%38 loc) (g '%1 loc) mem))
    (succ '%53))
  (mv succ mem loc)))

(defund @sin-%39-mem (s39)
  (car s39))
(defund @sin-%39-loc (s39)
  (cadr s39))
(defund @sin-%39-pred (s39)
  (caddr s39))
(defund @sin-%40-val (s39)
  (getelementptr-double (g '%y (@sin-%39-loc s39)) 0))
(defund @sin-%40-loc (s39)
  (s '%40 (@sin-%40-val s39) (@sin-%39-loc s39)))
(defund @sin-%41-val (s39)
  (load-double (g '%40 (@sin-%40-loc s39)) (@sin-%39-mem s39)))
(defund @sin-%41-loc (s39)
  (s '%41 (@sin-%41-val s39) (@sin-%40-loc s39)))
(defund @sin-%42-val (s39)
  (getelementptr-double (g '%y (@sin-%41-loc s39)) 1))
(defund @sin-%42-loc (s39)
  (s '%42 (@sin-%42-val s39) (@sin-%41-loc s39)))
(defund @sin-%43-val (s39)
  (load-double (g '%42 (@sin-%42-loc s39)) (@sin-%39-mem s39)))
(defund @sin-%43-loc (s39)
  (s '%43 (@sin-%43-val s39) (@sin-%42-loc s39)))
(defund @sin-%44-val (s39)
  (@__kernel_sin (g '%41 (@sin-%43-loc s39)) (g '%43 (@sin-%43-loc s39)) 1))
(defund @sin-%44-loc (s39)
  (s '%44 (@sin-%44-val s39) (@sin-%43-loc s39)))
(defund @sin-%45-val (s39)
  (fsub-double #x8000000000000000 (g '%44 (@sin-%44-loc s39))))
(defund @sin-%45-loc (s39)
  (s '%45 (@sin-%45-val s39) (@sin-%44-loc s39)))
(defund @sin-m39.1-mem (s39)
  (store-double (g '%45 (@sin-%45-loc s39)) (g '%1 (@sin-%45-loc s39)) (@sin-%39-mem s39)))
(defund @sin-succ39-lab (s39)
  (declare (ignore s39))
  '%53)

(defund @sin-%39-fwd (mem loc pred)
  (let ((s39 (list mem loc pred)))
    (mv (@sin-succ39-lab s39) (@sin-m39.1-mem s39) (@sin-%45-loc s39))))

(defund @sin-succ39-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%53 mem loc))
(defund @sin-m39.1-rev (mem loc pred)
  (@sin-succ39-rev (store-double (g '%45 loc) (g '%1 loc) mem) loc pred))
(defund @sin-%45-rev (mem loc pred)
  (@sin-m39.1-rev mem (s '%45 (fsub-double #x8000000000000000 (g '%44 loc)) loc) pred))
(defund @sin-%44-rev (mem loc pred)
  (@sin-%45-rev mem (s '%44 (@__kernel_sin (g '%41 loc) (g '%43 loc) 1) loc) pred))
(defund @sin-%43-rev (mem loc pred)
  (@sin-%44-rev mem (s '%43 (load-double (g '%42 loc) mem) loc) pred))
(defund @sin-%42-rev (mem loc pred)
  (@sin-%43-rev mem (s '%42 (getelementptr-double (g '%y loc) 1) loc) pred))
(defund @sin-%41-rev (mem loc pred)
  (@sin-%42-rev mem (s '%41 (load-double (g '%40 loc) mem) loc) pred))
(defund @sin-%40-rev (mem loc pred)
  (@sin-%41-rev mem (s '%40 (getelementptr-double (g '%y loc) 0) loc) pred))

(defund @sin-%39-rev (mem loc pred)
  (@sin-%40-rev mem loc pred))

(defruled @sin-%39-expand-rev-as-@sin-%40-rev
  (equal (@sin-%39-rev mem loc pred)
         (let ((s39 (list mem loc pred)))
           (@sin-%40-rev
            (@sin-%39-mem s39)
            (@sin-%39-loc s39)
            (@sin-%39-pred s39))))
  :enable (@sin-%39-rev @sin-%39-mem @sin-%39-loc @sin-%39-pred))
(defruled @sin-%39-expand-rev-as-@sin-%41-rev
  (equal (@sin-%39-rev mem loc pred)
         (let ((s39 (list mem loc pred)))
           (@sin-%41-rev
            (@sin-%39-mem s39)
            (@sin-%40-loc s39)
            (@sin-%39-pred s39))))
  :enable (@sin-%39-expand-rev-as-@sin-%40-rev @sin-%40-rev @sin-%40-loc @sin-%40-val))
(defruled @sin-%39-expand-rev-as-@sin-%42-rev
  (equal (@sin-%39-rev mem loc pred)
         (let ((s39 (list mem loc pred)))
           (@sin-%42-rev
            (@sin-%39-mem s39)
            (@sin-%41-loc s39)
            (@sin-%39-pred s39))))
  :enable (@sin-%39-expand-rev-as-@sin-%41-rev @sin-%41-rev @sin-%41-loc @sin-%41-val))
(defruled @sin-%39-expand-rev-as-@sin-%43-rev
  (equal (@sin-%39-rev mem loc pred)
         (let ((s39 (list mem loc pred)))
           (@sin-%43-rev
            (@sin-%39-mem s39)
            (@sin-%42-loc s39)
            (@sin-%39-pred s39))))
  :enable (@sin-%39-expand-rev-as-@sin-%42-rev @sin-%42-rev @sin-%42-loc @sin-%42-val))
(defruled @sin-%39-expand-rev-as-@sin-%44-rev
  (equal (@sin-%39-rev mem loc pred)
         (let ((s39 (list mem loc pred)))
           (@sin-%44-rev
            (@sin-%39-mem s39)
            (@sin-%43-loc s39)
            (@sin-%39-pred s39))))
  :enable (@sin-%39-expand-rev-as-@sin-%43-rev @sin-%43-rev @sin-%43-loc @sin-%43-val))
(defruled @sin-%39-expand-rev-as-@sin-%45-rev
  (equal (@sin-%39-rev mem loc pred)
         (let ((s39 (list mem loc pred)))
           (@sin-%45-rev
            (@sin-%39-mem s39)
            (@sin-%44-loc s39)
            (@sin-%39-pred s39))))
  :enable (@sin-%39-expand-rev-as-@sin-%44-rev @sin-%44-rev @sin-%44-loc @sin-%44-val))
(defruled @sin-%39-expand-rev-as-@sin-m39.1-rev
  (equal (@sin-%39-rev mem loc pred)
         (let ((s39 (list mem loc pred)))
           (@sin-m39.1-rev
            (@sin-%39-mem s39)
            (@sin-%45-loc s39)
            (@sin-%39-pred s39))))
  :enable (@sin-%39-expand-rev-as-@sin-%45-rev @sin-%45-rev @sin-%45-loc @sin-%45-val))
(defruled @sin-%39-expand-rev-as-@sin-succ39-rev
  (equal (@sin-%39-rev mem loc pred)
         (let ((s39 (list mem loc pred)))
           (@sin-succ39-rev
            (@sin-m39.1-mem s39)
            (@sin-%45-loc s39)
            (@sin-%39-pred s39))))
  :enable (@sin-%39-expand-rev-as-@sin-m39.1-rev @sin-m39.1-rev @sin-m39.1-mem))
(defruled @sin-%39-expand-rev-as-fwd
  (equal (@sin-%39-rev mem loc pred)
         (@sin-%39-fwd mem loc pred))
  :enable (@sin-%39-expand-rev-as-@sin-succ39-rev @sin-succ39-rev @sin-succ39-lab @sin-%39-fwd))

(defund @sin-%39-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%40 (getelementptr-double (g '%y loc) 0) loc))
    (loc (s '%41 (load-double (g '%40 loc) mem) loc))
    (loc (s '%42 (getelementptr-double (g '%y loc) 1) loc))
    (loc (s '%43 (load-double (g '%42 loc) mem) loc))
    (loc (s '%44 (@__kernel_sin (g '%41 loc) (g '%43 loc) 1) loc))
    (loc (s '%45 (fsub-double #x8000000000000000 (g '%44 loc)) loc))
    (mem (store-double (g '%45 loc) (g '%1 loc) mem))
    (succ '%53))
  (mv succ mem loc)))

(defund @sin-%46-mem (s46)
  (car s46))
(defund @sin-%46-loc (s46)
  (cadr s46))
(defund @sin-%46-pred (s46)
  (caddr s46))
(defund @sin-%47-val (s46)
  (getelementptr-double (g '%y (@sin-%46-loc s46)) 0))
(defund @sin-%47-loc (s46)
  (s '%47 (@sin-%47-val s46) (@sin-%46-loc s46)))
(defund @sin-%48-val (s46)
  (load-double (g '%47 (@sin-%47-loc s46)) (@sin-%46-mem s46)))
(defund @sin-%48-loc (s46)
  (s '%48 (@sin-%48-val s46) (@sin-%47-loc s46)))
(defund @sin-%49-val (s46)
  (getelementptr-double (g '%y (@sin-%48-loc s46)) 1))
(defund @sin-%49-loc (s46)
  (s '%49 (@sin-%49-val s46) (@sin-%48-loc s46)))
(defund @sin-%50-val (s46)
  (load-double (g '%49 (@sin-%49-loc s46)) (@sin-%46-mem s46)))
(defund @sin-%50-loc (s46)
  (s '%50 (@sin-%50-val s46) (@sin-%49-loc s46)))
(defund @sin-%51-val (s46)
  (@__kernel_cos (g '%48 (@sin-%50-loc s46)) (g '%50 (@sin-%50-loc s46))))
(defund @sin-%51-loc (s46)
  (s '%51 (@sin-%51-val s46) (@sin-%50-loc s46)))
(defund @sin-%52-val (s46)
  (fsub-double #x8000000000000000 (g '%51 (@sin-%51-loc s46))))
(defund @sin-%52-loc (s46)
  (s '%52 (@sin-%52-val s46) (@sin-%51-loc s46)))
(defund @sin-m46.1-mem (s46)
  (store-double (g '%52 (@sin-%52-loc s46)) (g '%1 (@sin-%52-loc s46)) (@sin-%46-mem s46)))
(defund @sin-succ46-lab (s46)
  (declare (ignore s46))
  '%53)

(defund @sin-%46-fwd (mem loc pred)
  (let ((s46 (list mem loc pred)))
    (mv (@sin-succ46-lab s46) (@sin-m46.1-mem s46) (@sin-%52-loc s46))))

(defund @sin-succ46-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%53 mem loc))
(defund @sin-m46.1-rev (mem loc pred)
  (@sin-succ46-rev (store-double (g '%52 loc) (g '%1 loc) mem) loc pred))
(defund @sin-%52-rev (mem loc pred)
  (@sin-m46.1-rev mem (s '%52 (fsub-double #x8000000000000000 (g '%51 loc)) loc) pred))
(defund @sin-%51-rev (mem loc pred)
  (@sin-%52-rev mem (s '%51 (@__kernel_cos (g '%48 loc) (g '%50 loc)) loc) pred))
(defund @sin-%50-rev (mem loc pred)
  (@sin-%51-rev mem (s '%50 (load-double (g '%49 loc) mem) loc) pred))
(defund @sin-%49-rev (mem loc pred)
  (@sin-%50-rev mem (s '%49 (getelementptr-double (g '%y loc) 1) loc) pred))
(defund @sin-%48-rev (mem loc pred)
  (@sin-%49-rev mem (s '%48 (load-double (g '%47 loc) mem) loc) pred))
(defund @sin-%47-rev (mem loc pred)
  (@sin-%48-rev mem (s '%47 (getelementptr-double (g '%y loc) 0) loc) pred))

(defund @sin-%46-rev (mem loc pred)
  (@sin-%47-rev mem loc pred))

(defruled @sin-%46-expand-rev-as-@sin-%47-rev
  (equal (@sin-%46-rev mem loc pred)
         (let ((s46 (list mem loc pred)))
           (@sin-%47-rev
            (@sin-%46-mem s46)
            (@sin-%46-loc s46)
            (@sin-%46-pred s46))))
  :enable (@sin-%46-rev @sin-%46-mem @sin-%46-loc @sin-%46-pred))
(defruled @sin-%46-expand-rev-as-@sin-%48-rev
  (equal (@sin-%46-rev mem loc pred)
         (let ((s46 (list mem loc pred)))
           (@sin-%48-rev
            (@sin-%46-mem s46)
            (@sin-%47-loc s46)
            (@sin-%46-pred s46))))
  :enable (@sin-%46-expand-rev-as-@sin-%47-rev @sin-%47-rev @sin-%47-loc @sin-%47-val))
(defruled @sin-%46-expand-rev-as-@sin-%49-rev
  (equal (@sin-%46-rev mem loc pred)
         (let ((s46 (list mem loc pred)))
           (@sin-%49-rev
            (@sin-%46-mem s46)
            (@sin-%48-loc s46)
            (@sin-%46-pred s46))))
  :enable (@sin-%46-expand-rev-as-@sin-%48-rev @sin-%48-rev @sin-%48-loc @sin-%48-val))
(defruled @sin-%46-expand-rev-as-@sin-%50-rev
  (equal (@sin-%46-rev mem loc pred)
         (let ((s46 (list mem loc pred)))
           (@sin-%50-rev
            (@sin-%46-mem s46)
            (@sin-%49-loc s46)
            (@sin-%46-pred s46))))
  :enable (@sin-%46-expand-rev-as-@sin-%49-rev @sin-%49-rev @sin-%49-loc @sin-%49-val))
(defruled @sin-%46-expand-rev-as-@sin-%51-rev
  (equal (@sin-%46-rev mem loc pred)
         (let ((s46 (list mem loc pred)))
           (@sin-%51-rev
            (@sin-%46-mem s46)
            (@sin-%50-loc s46)
            (@sin-%46-pred s46))))
  :enable (@sin-%46-expand-rev-as-@sin-%50-rev @sin-%50-rev @sin-%50-loc @sin-%50-val))
(defruled @sin-%46-expand-rev-as-@sin-%52-rev
  (equal (@sin-%46-rev mem loc pred)
         (let ((s46 (list mem loc pred)))
           (@sin-%52-rev
            (@sin-%46-mem s46)
            (@sin-%51-loc s46)
            (@sin-%46-pred s46))))
  :enable (@sin-%46-expand-rev-as-@sin-%51-rev @sin-%51-rev @sin-%51-loc @sin-%51-val))
(defruled @sin-%46-expand-rev-as-@sin-m46.1-rev
  (equal (@sin-%46-rev mem loc pred)
         (let ((s46 (list mem loc pred)))
           (@sin-m46.1-rev
            (@sin-%46-mem s46)
            (@sin-%52-loc s46)
            (@sin-%46-pred s46))))
  :enable (@sin-%46-expand-rev-as-@sin-%52-rev @sin-%52-rev @sin-%52-loc @sin-%52-val))
(defruled @sin-%46-expand-rev-as-@sin-succ46-rev
  (equal (@sin-%46-rev mem loc pred)
         (let ((s46 (list mem loc pred)))
           (@sin-succ46-rev
            (@sin-m46.1-mem s46)
            (@sin-%52-loc s46)
            (@sin-%46-pred s46))))
  :enable (@sin-%46-expand-rev-as-@sin-m46.1-rev @sin-m46.1-rev @sin-m46.1-mem))
(defruled @sin-%46-expand-rev-as-fwd
  (equal (@sin-%46-rev mem loc pred)
         (@sin-%46-fwd mem loc pred))
  :enable (@sin-%46-expand-rev-as-@sin-succ46-rev @sin-succ46-rev @sin-succ46-lab @sin-%46-fwd))

(defund @sin-%46-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%47 (getelementptr-double (g '%y loc) 0) loc))
    (loc (s '%48 (load-double (g '%47 loc) mem) loc))
    (loc (s '%49 (getelementptr-double (g '%y loc) 1) loc))
    (loc (s '%50 (load-double (g '%49 loc) mem) loc))
    (loc (s '%51 (@__kernel_cos (g '%48 loc) (g '%50 loc)) loc))
    (loc (s '%52 (fsub-double #x8000000000000000 (g '%51 loc)) loc))
    (mem (store-double (g '%52 loc) (g '%1 loc) mem))
    (succ '%53))
  (mv succ mem loc)))

(defund @sin-%53-mem (s53)
  (car s53))
(defund @sin-%53-loc (s53)
  (cadr s53))
(defund @sin-%53-pred (s53)
  (caddr s53))
(defund @sin-%54-val (s53)
  (load-double (g '%1 (@sin-%53-loc s53)) (@sin-%53-mem s53)))
(defund @sin-%54-loc (s53)
  (s '%54 (@sin-%54-val s53) (@sin-%53-loc s53)))
(defund @sin-succ53-lab (s53)
  (declare (ignore s53))
  'ret)

(defund @sin-%53-fwd (mem loc pred)
  (let ((s53 (list mem loc pred)))
    (mv (@sin-succ53-lab s53) (@sin-%53-mem s53) (@sin-%54-loc s53))))

(defund @sin-succ53-rev (mem loc pred)
  (declare (ignore pred))
  (mv 'ret mem loc))
(defund @sin-%54-rev (mem loc pred)
  (@sin-succ53-rev mem (s '%54 (load-double (g '%1 loc) mem) loc) pred))

(defund @sin-%53-rev (mem loc pred)
  (@sin-%54-rev mem loc pred))

(defruled @sin-%53-expand-rev-as-@sin-%54-rev
  (equal (@sin-%53-rev mem loc pred)
         (let ((s53 (list mem loc pred)))
           (@sin-%54-rev
            (@sin-%53-mem s53)
            (@sin-%53-loc s53)
            (@sin-%53-pred s53))))
  :enable (@sin-%53-rev @sin-%53-mem @sin-%53-loc @sin-%53-pred))
(defruled @sin-%53-expand-rev-as-@sin-succ53-rev
  (equal (@sin-%53-rev mem loc pred)
         (let ((s53 (list mem loc pred)))
           (@sin-succ53-rev
            (@sin-%53-mem s53)
            (@sin-%54-loc s53)
            (@sin-%53-pred s53))))
  :enable (@sin-%53-expand-rev-as-@sin-%54-rev @sin-%54-rev @sin-%54-loc @sin-%54-val))
(defruled @sin-%53-expand-rev-as-fwd
  (equal (@sin-%53-rev mem loc pred)
         (@sin-%53-fwd mem loc pred))
  :enable (@sin-%53-expand-rev-as-@sin-succ53-rev @sin-succ53-rev @sin-succ53-lab @sin-%53-fwd))

(defund @sin-%53-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%54 (load-double (g '%1 loc) mem) loc))
    (succ 'ret))
  (mv succ mem loc)))

(defund @sin-step (label mem loc pred)
  (case label
    (%0 (@sin-%0-bb mem loc pred))
    (%10 (@sin-%10-bb mem loc pred))
    (%14 (@sin-%14-bb mem loc pred))
    (%17 (@sin-%17-bb mem loc pred))
    (%21 (@sin-%21-bb mem loc pred))
    (%27 (@sin-%27-bb mem loc pred))
    (%33 (@sin-%33-bb mem loc pred))
    (%39 (@sin-%39-bb mem loc pred))
    (%46 (@sin-%46-bb mem loc pred))
    (%53 (@sin-%53-bb mem loc pred))
    (otherwise (mv nil mem loc))))

(defund @sin-steps (label mem loc pred n)
  (declare (xargs :measure (nfix n)))
  (if (equal label 'ret)
      (g '%54 loc)
    (if (zp n) nil
      (mv-let
        (new-label new-mem new-loc)
        (@sin-step label mem loc pred)
        (@sin-steps new-label new-mem new-loc label (1- n))))))

(defund @sin (%x)
  (declare (ignore %x))
   nil)
