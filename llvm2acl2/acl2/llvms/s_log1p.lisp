(in-package "ACL2")
(include-book "../llvm")

(defconst *log1p-globals* '(
  (zero #x00000000 #x00000000)))

(defund @log1p-%0-bb (mem loc)
  (b* (
    (mem (alloca-double 'ret 1 mem))
    (mem (alloca-double 'x 1 mem))
    (mem (alloca-double 'hfsq 1 mem))
    (mem (alloca-double 'f 1 mem))
    (mem (alloca-double 'c 1 mem))
    (mem (alloca-double 's 1 mem))
    (mem (alloca-double 'z 1 mem))
    (mem (alloca-double 'R 1 mem))
    (mem (alloca-double 'u 1 mem))
    (mem (alloca-i32 'k 1 mem))
    (mem (alloca-i32 'hx 1 mem))
    (mem (alloca-i32 'hu 1 mem))
    (mem (alloca-i32 'ax 1 mem))
    (mem (store-double (g '%x loc) '(x . 0) mem))
    (loc (s '%3 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%4 (getelementptr-i32 (g '%3 loc) 1) loc))
    (loc (s '%5 (load-i32 (g '%4 loc) mem) loc))
    (mem (store-i32 (g '%5 loc) '(hx . 0) mem))
    (loc (s '%6 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%7 (and-i32 (g '%6 loc) 2147483647) loc))
    (mem (store-i32 (g '%7 loc) '(ax . 0) mem))
    (mem (store-i32 1 '(k . 0) mem))
    (loc (s '%8 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%9 (icmp-slt-i32 (g '%8 loc) 1071284858) loc)))
  (case (g '%9 loc)
    (-1 (mv '@log1p-%10-bb mem loc))
    ( 0 (mv '@log1p-%56-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @log1p-%10-bb (mem loc)
  (b* (
    (loc (s '%11 (load-i32 '(ax . 0) mem) loc))
    (loc (s '%12 (icmp-sge-i32 (g '%11 loc) 1072693248) loc)))
  (case (g '%12 loc)
    (-1 (mv '@log1p-%13-bb mem loc))
    ( 0 (mv '@log1p-%27-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @log1p-%13-bb (mem loc)
  (b* (
    (loc (s '%14 (load-double '(x . 0) mem) loc))
    (loc (s '%15 (fcmp-oeq-double (g '%14 loc) #xbff0000000000000) loc)))
  (case (g '%15 loc)
    (-1 (mv '@log1p-%16-bb mem loc))
    ( 0 (mv '@log1p-%19-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @log1p-%16-bb (mem loc)
  (b* (
    (loc (s '%17 (load-double '(zero . 0) mem) loc))
    (loc (s '%18 (fdiv-double #xC350000000000000 (g '%17 loc)) loc))
    (mem (store-double (g '%18 loc) '(ret . 0) mem)))
  (mv '@log1p-%239-bb mem loc)))

(defund @log1p-%19-bb (mem loc)
  (b* (
    (loc (s '%20 (load-double '(x . 0) mem) loc))
    (loc (s '%21 (load-double '(x . 0) mem) loc))
    (loc (s '%22 (fsub-double (g '%20 loc) (g '%21 loc)) loc))
    (loc (s '%23 (load-double '(x . 0) mem) loc))
    (loc (s '%24 (load-double '(x . 0) mem) loc))
    (loc (s '%25 (fsub-double (g '%23 loc) (g '%24 loc)) loc))
    (loc (s '%26 (fdiv-double (g '%22 loc) (g '%25 loc)) loc))
    (mem (store-double (g '%26 loc) '(ret . 0) mem)))
  (mv '@log1p-%239-bb mem loc)))

(defund @log1p-%27-bb (mem loc)
  (b* (
    (loc (s '%28 (load-i32 '(ax . 0) mem) loc))
    (loc (s '%29 (icmp-slt-i32 (g '%28 loc) 1042284544) loc)))
  (case (g '%29 loc)
    (-1 (mv '@log1p-%30-bb mem loc))
    ( 0 (mv '@log1p-%47-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @log1p-%30-bb (mem loc)
  (b* (
    (loc (s '%31 (load-double '(x . 0) mem) loc))
    (loc (s '%32 (fadd-double #x4350000000000000 (g '%31 loc)) loc))
    (loc (s '%33 (load-double '(zero . 0) mem) loc))
    (loc (s '%34 (fcmp-ogt-double (g '%32 loc) (g '%33 loc)) loc)))
  (case (g '%34 loc)
    (-1 (mv '@log1p-%35-bb mem loc))
    ( 0 (mv '@log1p-%40-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @log1p-%35-bb (mem loc)
  (b* (
    (loc (s '%36 (load-i32 '(ax . 0) mem) loc))
    (loc (s '%37 (icmp-slt-i32 (g '%36 loc) 1016070144) loc)))
  (case (g '%37 loc)
    (-1 (mv '@log1p-%38-bb mem loc))
    ( 0 (mv '@log1p-%40-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @log1p-%38-bb (mem loc)
  (b* (
    (loc (s '%39 (load-double '(x . 0) mem) loc))
    (mem (store-double (g '%39 loc) '(ret . 0) mem)))
  (mv '@log1p-%239-bb mem loc)))

(defund @log1p-%40-bb (mem loc)
  (b* (
    (loc (s '%41 (load-double '(x . 0) mem) loc))
    (loc (s '%42 (load-double '(x . 0) mem) loc))
    (loc (s '%43 (load-double '(x . 0) mem) loc))
    (loc (s '%44 (fmul-double (g '%42 loc) (g '%43 loc)) loc))
    (loc (s '%45 (fmul-double (g '%44 loc) #x3fe0000000000000) loc))
    (loc (s '%46 (fsub-double (g '%41 loc) (g '%45 loc)) loc))
    (mem (store-double (g '%46 loc) '(ret . 0) mem)))
  (mv '@log1p-%239-bb mem loc)))

(defund @log1p-%47-bb (mem loc)
  (b* (
    (loc (s '%48 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%49 (icmp-sgt-i32 (g '%48 loc) 0) loc)))
  (case (g '%49 loc)
    (-1 (mv '@log1p-%53-bb mem loc))
    ( 0 (mv '@log1p-%50-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @log1p-%50-bb (mem loc)
  (b* (
    (loc (s '%51 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%52 (icmp-sle-i32 (g '%51 loc) -1076707645) loc)))
  (case (g '%52 loc)
    (-1 (mv '@log1p-%53-bb mem loc))
    ( 0 (mv '@log1p-%55-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @log1p-%53-bb (mem loc)
  (b* (
    (mem (store-i32 0 '(k . 0) mem))
    (loc (s '%54 (load-double '(x . 0) mem) loc))
    (mem (store-double (g '%54 loc) '(f . 0) mem))
    (mem (store-i32 1 '(hu . 0) mem)))
  (mv '@log1p-%55-bb mem loc)))

(defund @log1p-%55-bb (mem loc)
  (b* ()
  (mv '@log1p-%56-bb mem loc)))

(defund @log1p-%56-bb (mem loc)
  (b* (
    (loc (s '%57 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%58 (icmp-sge-i32 (g '%57 loc) 2146435072) loc)))
  (case (g '%58 loc)
    (-1 (mv '@log1p-%59-bb mem loc))
    ( 0 (mv '@log1p-%63-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @log1p-%59-bb (mem loc)
  (b* (
    (loc (s '%60 (load-double '(x . 0) mem) loc))
    (loc (s '%61 (load-double '(x . 0) mem) loc))
    (loc (s '%62 (fadd-double (g '%60 loc) (g '%61 loc)) loc))
    (mem (store-double (g '%62 loc) '(ret . 0) mem)))
  (mv '@log1p-%239-bb mem loc)))

(defund @log1p-%63-bb (mem loc)
  (b* (
    (loc (s '%64 (load-i32 '(k . 0) mem) loc))
    (loc (s '%65 (icmp-ne-i32 (g '%64 loc) 0) loc)))
  (case (g '%65 loc)
    (-1 (mv '@log1p-%66-bb mem loc))
    ( 0 (mv '@log1p-%126-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @log1p-%66-bb (mem loc)
  (b* (
    (loc (s '%67 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%68 (icmp-slt-i32 (g '%67 loc) 1128267776) loc)))
  (case (g '%68 loc)
    (-1 (mv '@log1p-%69-bb mem loc))
    ( 0 (mv '@log1p-%95-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @log1p-%69-bb (mem loc)
  (b* (
    (loc (s '%70 (load-double '(x . 0) mem) loc))
    (loc (s '%71 (fadd-double #x3ff0000000000000 (g '%70 loc)) loc))
    (mem (store-double (g '%71 loc) '(u . 0) mem))
    (loc (s '%72 (bitcast-double*-to-i32* '(u . 0)) loc))
    (loc (s '%73 (getelementptr-i32 (g '%72 loc) 1) loc))
    (loc (s '%74 (load-i32 (g '%73 loc) mem) loc))
    (mem (store-i32 (g '%74 loc) '(hu . 0) mem))
    (loc (s '%75 (load-i32 '(hu . 0) mem) loc))
    (loc (s '%76 (ashr-i32 (g '%75 loc) 20) loc))
    (loc (s '%77 (sub-i32 (g '%76 loc) 1023) loc))
    (mem (store-i32 (g '%77 loc) '(k . 0) mem))
    (loc (s '%78 (load-i32 '(k . 0) mem) loc))
    (loc (s '%79 (icmp-sgt-i32 (g '%78 loc) 0) loc)))
  (case (g '%79 loc)
    (-1 (mv '@log1p-%80-bb mem loc))
    ( 0 (mv '@log1p-%85-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @log1p-%80-bb (mem loc)
  (b* (
    (loc (s '%81 (load-double '(u . 0) mem) loc))
    (loc (s '%82 (load-double '(x . 0) mem) loc))
    (loc (s '%83 (fsub-double (g '%81 loc) (g '%82 loc)) loc))
    (loc (s '%84 (fsub-double #x3ff0000000000000 (g '%83 loc)) loc)))
  (let* ((loc (s '%91 (g '%84 loc) loc))) (mv '@log1p-%90-bb mem loc))))

(defund @log1p-%85-bb (mem loc)
  (b* (
    (loc (s '%86 (load-double '(x . 0) mem) loc))
    (loc (s '%87 (load-double '(u . 0) mem) loc))
    (loc (s '%88 (fsub-double (g '%87 loc) #x3ff0000000000000) loc))
    (loc (s '%89 (fsub-double (g '%86 loc) (g '%88 loc)) loc)))
  (let* ((loc (s '%91 (g '%89 loc) loc))) (mv '@log1p-%90-bb mem loc))))

(defund @log1p-%90-bb (mem loc)
  ; %91 = phi double [ (g '%84 loc), %80 ], [ (g '%89 loc), %85 ]
  (b* (
    (mem (store-double (g '%91 loc) '(c . 0) mem))
    (loc (s '%92 (load-double '(u . 0) mem) loc))
    (loc (s '%93 (load-double '(c . 0) mem) loc))
    (loc (s '%94 (fdiv-double (g '%93 loc) (g '%92 loc)) loc))
    (mem (store-double (g '%94 loc) '(c . 0) mem)))
  (mv '@log1p-%103-bb mem loc)))

(defund @log1p-%95-bb (mem loc)
  (b* (
    (loc (s '%96 (load-double '(x . 0) mem) loc))
    (mem (store-double (g '%96 loc) '(u . 0) mem))
    (loc (s '%97 (bitcast-double*-to-i32* '(u . 0)) loc))
    (loc (s '%98 (getelementptr-i32 (g '%97 loc) 1) loc))
    (loc (s '%99 (load-i32 (g '%98 loc) mem) loc))
    (mem (store-i32 (g '%99 loc) '(hu . 0) mem))
    (loc (s '%100 (load-i32 '(hu . 0) mem) loc))
    (loc (s '%101 (ashr-i32 (g '%100 loc) 20) loc))
    (loc (s '%102 (sub-i32 (g '%101 loc) 1023) loc))
    (mem (store-i32 (g '%102 loc) '(k . 0) mem))
    (mem (store-double #x0000000000000000 '(c . 0) mem)))
  (mv '@log1p-%103-bb mem loc)))

(defund @log1p-%103-bb (mem loc)
  (b* (
    (loc (s '%104 (load-i32 '(hu . 0) mem) loc))
    (loc (s '%105 (and-i32 (g '%104 loc) 1048575) loc))
    (mem (store-i32 (g '%105 loc) '(hu . 0) mem))
    (loc (s '%106 (load-i32 '(hu . 0) mem) loc))
    (loc (s '%107 (icmp-slt-i32 (g '%106 loc) 434334) loc)))
  (case (g '%107 loc)
    (-1 (mv '@log1p-%108-bb mem loc))
    ( 0 (mv '@log1p-%113-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @log1p-%108-bb (mem loc)
  (b* (
    (loc (s '%109 (load-i32 '(hu . 0) mem) loc))
    (loc (s '%110 (or-i32 (g '%109 loc) 1072693248) loc))
    (loc (s '%111 (bitcast-double*-to-i32* '(u . 0)) loc))
    (loc (s '%112 (getelementptr-i32 (g '%111 loc) 1) loc))
    (mem (store-i32 (g '%110 loc) (g '%112 loc) mem)))
  (mv '@log1p-%123-bb mem loc)))

(defund @log1p-%113-bb (mem loc)
  (b* (
    (loc (s '%114 (load-i32 '(k . 0) mem) loc))
    (loc (s '%115 (add-i32 (g '%114 loc) 1) loc))
    (mem (store-i32 (g '%115 loc) '(k . 0) mem))
    (loc (s '%116 (load-i32 '(hu . 0) mem) loc))
    (loc (s '%117 (or-i32 (g '%116 loc) 1071644672) loc))
    (loc (s '%118 (bitcast-double*-to-i32* '(u . 0)) loc))
    (loc (s '%119 (getelementptr-i32 (g '%118 loc) 1) loc))
    (mem (store-i32 (g '%117 loc) (g '%119 loc) mem))
    (loc (s '%120 (load-i32 '(hu . 0) mem) loc))
    (loc (s '%121 (sub-i32 1048576 (g '%120 loc)) loc))
    (loc (s '%122 (ashr-i32 (g '%121 loc) 2) loc))
    (mem (store-i32 (g '%122 loc) '(hu . 0) mem)))
  (mv '@log1p-%123-bb mem loc)))

(defund @log1p-%123-bb (mem loc)
  (b* (
    (loc (s '%124 (load-double '(u . 0) mem) loc))
    (loc (s '%125 (fsub-double (g '%124 loc) #x3ff0000000000000) loc))
    (mem (store-double (g '%125 loc) '(f . 0) mem)))
  (mv '@log1p-%126-bb mem loc)))

(defund @log1p-%126-bb (mem loc)
  (b* (
    (loc (s '%127 (load-double '(f . 0) mem) loc))
    (loc (s '%128 (fmul-double #x3fe0000000000000 (g '%127 loc)) loc))
    (loc (s '%129 (load-double '(f . 0) mem) loc))
    (loc (s '%130 (fmul-double (g '%128 loc) (g '%129 loc)) loc))
    (mem (store-double (g '%130 loc) '(hfsq . 0) mem))
    (loc (s '%131 (load-i32 '(hu . 0) mem) loc))
    (loc (s '%132 (icmp-eq-i32 (g '%131 loc) 0) loc)))
  (case (g '%132 loc)
    (-1 (mv '@log1p-%133-bb mem loc))
    ( 0 (mv '@log1p-%179-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @log1p-%133-bb (mem loc)
  (b* (
    (loc (s '%134 (load-double '(f . 0) mem) loc))
    (loc (s '%135 (load-double '(zero . 0) mem) loc))
    (loc (s '%136 (fcmp-oeq-double (g '%134 loc) (g '%135 loc)) loc)))
  (case (g '%136 loc)
    (-1 (mv '@log1p-%137-bb mem loc))
    ( 0 (mv '@log1p-%153-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @log1p-%137-bb (mem loc)
  (b* (
    (loc (s '%138 (load-i32 '(k . 0) mem) loc))
    (loc (s '%139 (icmp-eq-i32 (g '%138 loc) 0) loc)))
  (case (g '%139 loc)
    (-1 (mv '@log1p-%140-bb mem loc))
    ( 0 (mv '@log1p-%142-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @log1p-%140-bb (mem loc)
  (b* (
    (loc (s '%141 (load-double '(zero . 0) mem) loc))
    (mem (store-double (g '%141 loc) '(ret . 0) mem)))
  (mv '@log1p-%239-bb mem loc)))

(defund @log1p-%142-bb (mem loc)
  (b* (
    (loc (s '%143 (load-i32 '(k . 0) mem) loc))
    (loc (s '%144 (sitofp-i32-to-double (g '%143 loc)) loc))
    (loc (s '%145 (fmul-double (g '%144 loc) #x3DEA39EF35793C76) loc))
    (loc (s '%146 (load-double '(c . 0) mem) loc))
    (loc (s '%147 (fadd-double (g '%146 loc) (g '%145 loc)) loc))
    (mem (store-double (g '%147 loc) '(c . 0) mem))
    (loc (s '%148 (load-i32 '(k . 0) mem) loc))
    (loc (s '%149 (sitofp-i32-to-double (g '%148 loc)) loc))
    (loc (s '%150 (fmul-double (g '%149 loc) #x3FE62E42FEE00000) loc))
    (loc (s '%151 (load-double '(c . 0) mem) loc))
    (loc (s '%152 (fadd-double (g '%150 loc) (g '%151 loc)) loc))
    (mem (store-double (g '%152 loc) '(ret . 0) mem)))
  (mv '@log1p-%239-bb mem loc)))

(defund @log1p-%153-bb (mem loc)
  (b* (
    (loc (s '%154 (load-double '(hfsq . 0) mem) loc))
    (loc (s '%155 (load-double '(f . 0) mem) loc))
    (loc (s '%156 (fmul-double #x3FE5555555555555 (g '%155 loc)) loc))
    (loc (s '%157 (fsub-double #x3ff0000000000000 (g '%156 loc)) loc))
    (loc (s '%158 (fmul-double (g '%154 loc) (g '%157 loc)) loc))
    (mem (store-double (g '%158 loc) '(R . 0) mem))
    (loc (s '%159 (load-i32 '(k . 0) mem) loc))
    (loc (s '%160 (icmp-eq-i32 (g '%159 loc) 0) loc)))
  (case (g '%160 loc)
    (-1 (mv '@log1p-%161-bb mem loc))
    ( 0 (mv '@log1p-%165-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @log1p-%161-bb (mem loc)
  (b* (
    (loc (s '%162 (load-double '(f . 0) mem) loc))
    (loc (s '%163 (load-double '(R . 0) mem) loc))
    (loc (s '%164 (fsub-double (g '%162 loc) (g '%163 loc)) loc))
    (mem (store-double (g '%164 loc) '(ret . 0) mem)))
  (mv '@log1p-%239-bb mem loc)))

(defund @log1p-%165-bb (mem loc)
  (b* (
    (loc (s '%166 (load-i32 '(k . 0) mem) loc))
    (loc (s '%167 (sitofp-i32-to-double (g '%166 loc)) loc))
    (loc (s '%168 (fmul-double (g '%167 loc) #x3FE62E42FEE00000) loc))
    (loc (s '%169 (load-double '(R . 0) mem) loc))
    (loc (s '%170 (load-i32 '(k . 0) mem) loc))
    (loc (s '%171 (sitofp-i32-to-double (g '%170 loc)) loc))
    (loc (s '%172 (fmul-double (g '%171 loc) #x3DEA39EF35793C76) loc))
    (loc (s '%173 (load-double '(c . 0) mem) loc))
    (loc (s '%174 (fadd-double (g '%172 loc) (g '%173 loc)) loc))
    (loc (s '%175 (fsub-double (g '%169 loc) (g '%174 loc)) loc))
    (loc (s '%176 (load-double '(f . 0) mem) loc))
    (loc (s '%177 (fsub-double (g '%175 loc) (g '%176 loc)) loc))
    (loc (s '%178 (fsub-double (g '%168 loc) (g '%177 loc)) loc))
    (mem (store-double (g '%178 loc) '(ret . 0) mem)))
  (mv '@log1p-%239-bb mem loc)))

(defund @log1p-%179-bb (mem loc)
  (b* (
    (loc (s '%180 (load-double '(f . 0) mem) loc))
    (loc (s '%181 (load-double '(f . 0) mem) loc))
    (loc (s '%182 (fadd-double #x4000000000000000 (g '%181 loc)) loc))
    (loc (s '%183 (fdiv-double (g '%180 loc) (g '%182 loc)) loc))
    (mem (store-double (g '%183 loc) '(s . 0) mem))
    (loc (s '%184 (load-double '(s . 0) mem) loc))
    (loc (s '%185 (load-double '(s . 0) mem) loc))
    (loc (s '%186 (fmul-double (g '%184 loc) (g '%185 loc)) loc))
    (mem (store-double (g '%186 loc) '(z . 0) mem))
    (loc (s '%187 (load-double '(z . 0) mem) loc))
    (loc (s '%188 (load-double '(z . 0) mem) loc))
    (loc (s '%189 (load-double '(z . 0) mem) loc))
    (loc (s '%190 (load-double '(z . 0) mem) loc))
    (loc (s '%191 (load-double '(z . 0) mem) loc))
    (loc (s '%192 (load-double '(z . 0) mem) loc))
    (loc (s '%193 (load-double '(z . 0) mem) loc))
    (loc (s '%194 (fmul-double (g '%193 loc) #x3FC2F112DF3E5244) loc))
    (loc (s '%195 (fadd-double #x3FC39A09D078C69F (g '%194 loc)) loc))
    (loc (s '%196 (fmul-double (g '%192 loc) (g '%195 loc)) loc))
    (loc (s '%197 (fadd-double #x3FC7466496CB03DE (g '%196 loc)) loc))
    (loc (s '%198 (fmul-double (g '%191 loc) (g '%197 loc)) loc))
    (loc (s '%199 (fadd-double #x3FCC71C51D8E78AF (g '%198 loc)) loc))
    (loc (s '%200 (fmul-double (g '%190 loc) (g '%199 loc)) loc))
    (loc (s '%201 (fadd-double #x3FD2492494229359 (g '%200 loc)) loc))
    (loc (s '%202 (fmul-double (g '%189 loc) (g '%201 loc)) loc))
    (loc (s '%203 (fadd-double #x3FD999999997FA04 (g '%202 loc)) loc))
    (loc (s '%204 (fmul-double (g '%188 loc) (g '%203 loc)) loc))
    (loc (s '%205 (fadd-double #x3FE5555555555593 (g '%204 loc)) loc))
    (loc (s '%206 (fmul-double (g '%187 loc) (g '%205 loc)) loc))
    (mem (store-double (g '%206 loc) '(R . 0) mem))
    (loc (s '%207 (load-i32 '(k . 0) mem) loc))
    (loc (s '%208 (icmp-eq-i32 (g '%207 loc) 0) loc)))
  (case (g '%208 loc)
    (-1 (mv '@log1p-%209-bb mem loc))
    ( 0 (mv '@log1p-%219-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @log1p-%209-bb (mem loc)
  (b* (
    (loc (s '%210 (load-double '(f . 0) mem) loc))
    (loc (s '%211 (load-double '(hfsq . 0) mem) loc))
    (loc (s '%212 (load-double '(s . 0) mem) loc))
    (loc (s '%213 (load-double '(hfsq . 0) mem) loc))
    (loc (s '%214 (load-double '(R . 0) mem) loc))
    (loc (s '%215 (fadd-double (g '%213 loc) (g '%214 loc)) loc))
    (loc (s '%216 (fmul-double (g '%212 loc) (g '%215 loc)) loc))
    (loc (s '%217 (fsub-double (g '%211 loc) (g '%216 loc)) loc))
    (loc (s '%218 (fsub-double (g '%210 loc) (g '%217 loc)) loc))
    (mem (store-double (g '%218 loc) '(ret . 0) mem)))
  (mv '@log1p-%239-bb mem loc)))

(defund @log1p-%219-bb (mem loc)
  (b* (
    (loc (s '%220 (load-i32 '(k . 0) mem) loc))
    (loc (s '%221 (sitofp-i32-to-double (g '%220 loc)) loc))
    (loc (s '%222 (fmul-double (g '%221 loc) #x3FE62E42FEE00000) loc))
    (loc (s '%223 (load-double '(hfsq . 0) mem) loc))
    (loc (s '%224 (load-double '(s . 0) mem) loc))
    (loc (s '%225 (load-double '(hfsq . 0) mem) loc))
    (loc (s '%226 (load-double '(R . 0) mem) loc))
    (loc (s '%227 (fadd-double (g '%225 loc) (g '%226 loc)) loc))
    (loc (s '%228 (fmul-double (g '%224 loc) (g '%227 loc)) loc))
    (loc (s '%229 (load-i32 '(k . 0) mem) loc))
    (loc (s '%230 (sitofp-i32-to-double (g '%229 loc)) loc))
    (loc (s '%231 (fmul-double (g '%230 loc) #x3DEA39EF35793C76) loc))
    (loc (s '%232 (load-double '(c . 0) mem) loc))
    (loc (s '%233 (fadd-double (g '%231 loc) (g '%232 loc)) loc))
    (loc (s '%234 (fadd-double (g '%228 loc) (g '%233 loc)) loc))
    (loc (s '%235 (fsub-double (g '%223 loc) (g '%234 loc)) loc))
    (loc (s '%236 (load-double '(f . 0) mem) loc))
    (loc (s '%237 (fsub-double (g '%235 loc) (g '%236 loc)) loc))
    (loc (s '%238 (fsub-double (g '%222 loc) (g '%237 loc)) loc))
    (mem (store-double (g '%238 loc) '(ret . 0) mem)))
  (mv '@log1p-%239-bb mem loc)))

(defund @log1p-%239-bb (mem loc)
  (b* (
    (loc (s '%240 (load-double '(ret . 0) mem) loc)))
  (mv 'ret mem loc)))

(defund @log1p-step (label mem loc)
  (case label
    (%-0 (@log1p-%0-bb mem loc))
    (%-10 (@log1p-%10-bb mem loc))
    (%-13 (@log1p-%13-bb mem loc))
    (%-16 (@log1p-%16-bb mem loc))
    (%-19 (@log1p-%19-bb mem loc))
    (%-27 (@log1p-%27-bb mem loc))
    (%-30 (@log1p-%30-bb mem loc))
    (%-35 (@log1p-%35-bb mem loc))
    (%-38 (@log1p-%38-bb mem loc))
    (%-40 (@log1p-%40-bb mem loc))
    (%-47 (@log1p-%47-bb mem loc))
    (%-50 (@log1p-%50-bb mem loc))
    (%-53 (@log1p-%53-bb mem loc))
    (%-55 (@log1p-%55-bb mem loc))
    (%-56 (@log1p-%56-bb mem loc))
    (%-59 (@log1p-%59-bb mem loc))
    (%-63 (@log1p-%63-bb mem loc))
    (%-66 (@log1p-%66-bb mem loc))
    (%-69 (@log1p-%69-bb mem loc))
    (%-80 (@log1p-%80-bb mem loc))
    (%-85 (@log1p-%85-bb mem loc))
    (%-90 (@log1p-%90-bb mem loc))
    (%-95 (@log1p-%95-bb mem loc))
    (%-103 (@log1p-%103-bb mem loc))
    (%-108 (@log1p-%108-bb mem loc))
    (%-113 (@log1p-%113-bb mem loc))
    (%-123 (@log1p-%123-bb mem loc))
    (%-126 (@log1p-%126-bb mem loc))
    (%-133 (@log1p-%133-bb mem loc))
    (%-137 (@log1p-%137-bb mem loc))
    (%-140 (@log1p-%140-bb mem loc))
    (%-142 (@log1p-%142-bb mem loc))
    (%-153 (@log1p-%153-bb mem loc))
    (%-161 (@log1p-%161-bb mem loc))
    (%-165 (@log1p-%165-bb mem loc))
    (%-179 (@log1p-%179-bb mem loc))
    (%-209 (@log1p-%209-bb mem loc))
    (%-219 (@log1p-%219-bb mem loc))
    (%-239 (@log1p-%239-bb mem loc))
    (otherwise (mv nil mem loc))))

(defund @log1p-steps (label mem loc n)
  (declare (xargs :measure (nfix n)))
  (if (equal label 'ret)
      (g '%240 loc)
    (if (zp n) nil
      (mv-let
        (label mem loc)
        (@log1p-step label mem loc)
        (@log1p-steps label mem loc (1- n))))))

(defund @log1p (%x)
  (declare (ignore %x))
   nil)
