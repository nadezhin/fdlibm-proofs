(in-package "ACL2")
(include-book "std/util/defrule" :dir :system)
(include-book "../llvm")

(defconst *log1p-globals* '(
  (zero #x00000000 #x00000000)))

(defconst *log1p-labels* '(%0 %10 %13 %16 %19 %27 %30 %35 %38 %40 %47 %50 %53 %55 %56 %59 %63 %66 %69 %80 %85 %90 %95 %103 %108 %113 %123 %126 %133 %137 %140 %142 %153 %161 %165 %179 %209 %219 %239))

(defund @log1p-%0-mem (s0)
  (car s0))
(defund @log1p-%0-loc (s0)
  (cadr s0))
(defund @log1p-%0-pred (s0)
  (caddr s0))
(defund @log1p-%1-mem (s0)
  (alloca-double 'ret 1 (@log1p-%0-mem s0)))
(defund @log1p-%1-loc (s0)
  (s '%1 '(ret . 0) (@log1p-%0-loc s0)))
(defund @log1p-%2-mem (s0)
  (alloca-double 'x 1 (@log1p-%1-mem s0)))
(defund @log1p-%2-loc (s0)
  (s '%2 '(x . 0) (@log1p-%1-loc s0)))
(defund @log1p-%hfsq-mem (s0)
  (alloca-double 'hfsq 1 (@log1p-%2-mem s0)))
(defund @log1p-%hfsq-loc (s0)
  (s '%hfsq '(hfsq . 0) (@log1p-%2-loc s0)))
(defund @log1p-%f-mem (s0)
  (alloca-double 'f 1 (@log1p-%hfsq-mem s0)))
(defund @log1p-%f-loc (s0)
  (s '%f '(f . 0) (@log1p-%hfsq-loc s0)))
(defund @log1p-%c-mem (s0)
  (alloca-double 'c 1 (@log1p-%f-mem s0)))
(defund @log1p-%c-loc (s0)
  (s '%c '(c . 0) (@log1p-%f-loc s0)))
(defund @log1p-%s-mem (s0)
  (alloca-double 's 1 (@log1p-%c-mem s0)))
(defund @log1p-%s-loc (s0)
  (s '%s '(s . 0) (@log1p-%c-loc s0)))
(defund @log1p-%z-mem (s0)
  (alloca-double 'z 1 (@log1p-%s-mem s0)))
(defund @log1p-%z-loc (s0)
  (s '%z '(z . 0) (@log1p-%s-loc s0)))
(defund @log1p-%R-mem (s0)
  (alloca-double 'R 1 (@log1p-%z-mem s0)))
(defund @log1p-%R-loc (s0)
  (s '%R '(R . 0) (@log1p-%z-loc s0)))
(defund @log1p-%u-mem (s0)
  (alloca-double 'u 1 (@log1p-%R-mem s0)))
(defund @log1p-%u-loc (s0)
  (s '%u '(u . 0) (@log1p-%R-loc s0)))
(defund @log1p-%k-mem (s0)
  (alloca-i32 'k 1 (@log1p-%u-mem s0)))
(defund @log1p-%k-loc (s0)
  (s '%k '(k . 0) (@log1p-%u-loc s0)))
(defund @log1p-%hx-mem (s0)
  (alloca-i32 'hx 1 (@log1p-%k-mem s0)))
(defund @log1p-%hx-loc (s0)
  (s '%hx '(hx . 0) (@log1p-%k-loc s0)))
(defund @log1p-%hu-mem (s0)
  (alloca-i32 'hu 1 (@log1p-%hx-mem s0)))
(defund @log1p-%hu-loc (s0)
  (s '%hu '(hu . 0) (@log1p-%hx-loc s0)))
(defund @log1p-%ax-mem (s0)
  (alloca-i32 'ax 1 (@log1p-%hu-mem s0)))
(defund @log1p-%ax-loc (s0)
  (s '%ax '(ax . 0) (@log1p-%hu-loc s0)))
(defund @log1p-m0.1-mem (s0)
  (store-double (g '%x (@log1p-%ax-loc s0)) (g '%2 (@log1p-%ax-loc s0)) (@log1p-%ax-mem s0)))
(defund @log1p-%3-val (s0)
  (bitcast-double*-to-i32* (g '%2 (@log1p-%ax-loc s0))))
(defund @log1p-%3-loc (s0)
  (s '%3 (@log1p-%3-val s0) (@log1p-%ax-loc s0)))
(defund @log1p-%4-val (s0)
  (getelementptr-i32 (g '%3 (@log1p-%3-loc s0)) 1))
(defund @log1p-%4-loc (s0)
  (s '%4 (@log1p-%4-val s0) (@log1p-%3-loc s0)))
(defund @log1p-%5-val (s0)
  (load-i32 (g '%4 (@log1p-%4-loc s0)) (@log1p-m0.1-mem s0)))
(defund @log1p-%5-loc (s0)
  (s '%5 (@log1p-%5-val s0) (@log1p-%4-loc s0)))
(defund @log1p-m0.2-mem (s0)
  (store-i32 (g '%5 (@log1p-%5-loc s0)) (g '%hx (@log1p-%5-loc s0)) (@log1p-m0.1-mem s0)))
(defund @log1p-%6-val (s0)
  (load-i32 (g '%hx (@log1p-%5-loc s0)) (@log1p-m0.2-mem s0)))
(defund @log1p-%6-loc (s0)
  (s '%6 (@log1p-%6-val s0) (@log1p-%5-loc s0)))
(defund @log1p-%7-val (s0)
  (and-i32 (g '%6 (@log1p-%6-loc s0)) 2147483647))
(defund @log1p-%7-loc (s0)
  (s '%7 (@log1p-%7-val s0) (@log1p-%6-loc s0)))
(defund @log1p-m0.3-mem (s0)
  (store-i32 (g '%7 (@log1p-%7-loc s0)) (g '%ax (@log1p-%7-loc s0)) (@log1p-m0.2-mem s0)))
(defund @log1p-m0.4-mem (s0)
  (store-i32 1 (g '%k (@log1p-%7-loc s0)) (@log1p-m0.3-mem s0)))
(defund @log1p-%8-val (s0)
  (load-i32 (g '%hx (@log1p-%7-loc s0)) (@log1p-m0.4-mem s0)))
(defund @log1p-%8-loc (s0)
  (s '%8 (@log1p-%8-val s0) (@log1p-%7-loc s0)))
(defund @log1p-%9-val (s0)
  (icmp-slt-i32 (g '%8 (@log1p-%8-loc s0)) 1071284858))
(defund @log1p-%9-loc (s0)
  (s '%9 (@log1p-%9-val s0) (@log1p-%8-loc s0)))
(defund @log1p-succ0-lab (s0)
  (case (g '%9 (@log1p-%9-loc s0)) (-1 '%10) (0 '%56)))

(defund @log1p-succ0-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%9 loc) (-1 '%10) (0 '%56)) mem loc))
(defund @log1p-%9-rev (mem loc pred)
  (@log1p-succ0-rev mem (s '%9 (icmp-slt-i32 (g '%8 loc) 1071284858) loc) pred))
(defund @log1p-%8-rev (mem loc pred)
  (@log1p-%9-rev mem (s '%8 (load-i32 (g '%hx loc) mem) loc) pred))
(defund @log1p-m0.4-rev (mem loc pred)
  (@log1p-%8-rev (store-i32 1 (g '%k loc) mem) loc pred))
(defund @log1p-m0.3-rev (mem loc pred)
  (@log1p-m0.4-rev (store-i32 (g '%7 loc) (g '%ax loc) mem) loc pred))
(defund @log1p-%7-rev (mem loc pred)
  (@log1p-m0.3-rev mem (s '%7 (and-i32 (g '%6 loc) 2147483647) loc) pred))
(defund @log1p-%6-rev (mem loc pred)
  (@log1p-%7-rev mem (s '%6 (load-i32 (g '%hx loc) mem) loc) pred))
(defund @log1p-m0.2-rev (mem loc pred)
  (@log1p-%6-rev (store-i32 (g '%5 loc) (g '%hx loc) mem) loc pred))
(defund @log1p-%5-rev (mem loc pred)
  (@log1p-m0.2-rev mem (s '%5 (load-i32 (g '%4 loc) mem) loc) pred))
(defund @log1p-%4-rev (mem loc pred)
  (@log1p-%5-rev mem (s '%4 (getelementptr-i32 (g '%3 loc) 1) loc) pred))
(defund @log1p-%3-rev (mem loc pred)
  (@log1p-%4-rev mem (s '%3 (bitcast-double*-to-i32* (g '%2 loc)) loc) pred))
(defund @log1p-m0.1-rev (mem loc pred)
  (@log1p-%3-rev (store-double (g '%x loc) (g '%2 loc) mem) loc pred))
(defund @log1p-%ax-rev (mem loc pred)
  (@log1p-m0.1-rev (alloca-i32 'ax 1 mem) (s '%ax '(ax . 0) loc) pred))
(defund @log1p-%hu-rev (mem loc pred)
  (@log1p-%ax-rev (alloca-i32 'hu 1 mem) (s '%hu '(hu . 0) loc) pred))
(defund @log1p-%hx-rev (mem loc pred)
  (@log1p-%hu-rev (alloca-i32 'hx 1 mem) (s '%hx '(hx . 0) loc) pred))
(defund @log1p-%k-rev (mem loc pred)
  (@log1p-%hx-rev (alloca-i32 'k 1 mem) (s '%k '(k . 0) loc) pred))
(defund @log1p-%u-rev (mem loc pred)
  (@log1p-%k-rev (alloca-double 'u 1 mem) (s '%u '(u . 0) loc) pred))
(defund @log1p-%R-rev (mem loc pred)
  (@log1p-%u-rev (alloca-double 'R 1 mem) (s '%R '(R . 0) loc) pred))
(defund @log1p-%z-rev (mem loc pred)
  (@log1p-%R-rev (alloca-double 'z 1 mem) (s '%z '(z . 0) loc) pred))
(defund @log1p-%s-rev (mem loc pred)
  (@log1p-%z-rev (alloca-double 's 1 mem) (s '%s '(s . 0) loc) pred))
(defund @log1p-%c-rev (mem loc pred)
  (@log1p-%s-rev (alloca-double 'c 1 mem) (s '%c '(c . 0) loc) pred))
(defund @log1p-%f-rev (mem loc pred)
  (@log1p-%c-rev (alloca-double 'f 1 mem) (s '%f '(f . 0) loc) pred))
(defund @log1p-%hfsq-rev (mem loc pred)
  (@log1p-%f-rev (alloca-double 'hfsq 1 mem) (s '%hfsq '(hfsq . 0) loc) pred))
(defund @log1p-%2-rev (mem loc pred)
  (@log1p-%hfsq-rev (alloca-double 'x 1 mem) (s '%2 '(x . 0) loc) pred))
(defund @log1p-%1-rev (mem loc pred)
  (@log1p-%2-rev (alloca-double 'ret 1 mem) (s '%1 '(ret . 0) loc) pred))

(defund @log1p-%0-rev (mem loc pred)
  (@log1p-%1-rev mem loc pred))

(defund @log1p-%0-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (mem (alloca-double 'ret 1 mem))
    (loc (s '%1 '(ret . 0) loc))
    (mem (alloca-double 'x 1 mem))
    (loc (s '%2 '(x . 0) loc))
    (mem (alloca-double 'hfsq 1 mem))
    (loc (s '%hfsq '(hfsq . 0) loc))
    (mem (alloca-double 'f 1 mem))
    (loc (s '%f '(f . 0) loc))
    (mem (alloca-double 'c 1 mem))
    (loc (s '%c '(c . 0) loc))
    (mem (alloca-double 's 1 mem))
    (loc (s '%s '(s . 0) loc))
    (mem (alloca-double 'z 1 mem))
    (loc (s '%z '(z . 0) loc))
    (mem (alloca-double 'R 1 mem))
    (loc (s '%R '(R . 0) loc))
    (mem (alloca-double 'u 1 mem))
    (loc (s '%u '(u . 0) loc))
    (mem (alloca-i32 'k 1 mem))
    (loc (s '%k '(k . 0) loc))
    (mem (alloca-i32 'hx 1 mem))
    (loc (s '%hx '(hx . 0) loc))
    (mem (alloca-i32 'hu 1 mem))
    (loc (s '%hu '(hu . 0) loc))
    (mem (alloca-i32 'ax 1 mem))
    (loc (s '%ax '(ax . 0) loc))
    (mem (store-double (g '%x loc) (g '%2 loc) mem))
    (loc (s '%3 (bitcast-double*-to-i32* (g '%2 loc)) loc))
    (loc (s '%4 (getelementptr-i32 (g '%3 loc) 1) loc))
    (loc (s '%5 (load-i32 (g '%4 loc) mem) loc))
    (mem (store-i32 (g '%5 loc) (g '%hx loc) mem))
    (loc (s '%6 (load-i32 (g '%hx loc) mem) loc))
    (loc (s '%7 (and-i32 (g '%6 loc) 2147483647) loc))
    (mem (store-i32 (g '%7 loc) (g '%ax loc) mem))
    (mem (store-i32 1 (g '%k loc) mem))
    (loc (s '%8 (load-i32 (g '%hx loc) mem) loc))
    (loc (s '%9 (icmp-slt-i32 (g '%8 loc) 1071284858) loc))
    (succ (case (g '%9 loc) (-1 '%10) (0 '%56))))
  (mv succ mem loc)))

(defruled @log1p-%0-expand-bb
  (equal (@log1p-%0-bb mem loc pred)
         (@log1p-%0-rev mem loc pred))
  :enable (@log1p-%0-bb @log1p-%0-rev
    @log1p-%1-rev
    @log1p-%2-rev
    @log1p-%hfsq-rev
    @log1p-%f-rev
    @log1p-%c-rev
    @log1p-%s-rev
    @log1p-%z-rev
    @log1p-%R-rev
    @log1p-%u-rev
    @log1p-%k-rev
    @log1p-%hx-rev
    @log1p-%hu-rev
    @log1p-%ax-rev
    @log1p-m0.1-rev
    @log1p-%3-rev
    @log1p-%4-rev
    @log1p-%5-rev
    @log1p-m0.2-rev
    @log1p-%6-rev
    @log1p-%7-rev
    @log1p-m0.3-rev
    @log1p-m0.4-rev
    @log1p-%8-rev
    @log1p-%9-rev
    @log1p-succ0-rev)
  :disable s-diff-s)

(defund @log1p-%10-mem (s10)
  (car s10))
(defund @log1p-%10-loc (s10)
  (cadr s10))
(defund @log1p-%10-pred (s10)
  (caddr s10))
(defund @log1p-%11-val (s10)
  (load-i32 (g '%ax (@log1p-%10-loc s10)) (@log1p-%10-mem s10)))
(defund @log1p-%11-loc (s10)
  (s '%11 (@log1p-%11-val s10) (@log1p-%10-loc s10)))
(defund @log1p-%12-val (s10)
  (icmp-sge-i32 (g '%11 (@log1p-%11-loc s10)) 1072693248))
(defund @log1p-%12-loc (s10)
  (s '%12 (@log1p-%12-val s10) (@log1p-%11-loc s10)))
(defund @log1p-succ10-lab (s10)
  (case (g '%12 (@log1p-%12-loc s10)) (-1 '%13) (0 '%27)))

(defund @log1p-succ10-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%12 loc) (-1 '%13) (0 '%27)) mem loc))
(defund @log1p-%12-rev (mem loc pred)
  (@log1p-succ10-rev mem (s '%12 (icmp-sge-i32 (g '%11 loc) 1072693248) loc) pred))
(defund @log1p-%11-rev (mem loc pred)
  (@log1p-%12-rev mem (s '%11 (load-i32 (g '%ax loc) mem) loc) pred))

(defund @log1p-%10-rev (mem loc pred)
  (@log1p-%11-rev mem loc pred))

(defund @log1p-%10-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%11 (load-i32 (g '%ax loc) mem) loc))
    (loc (s '%12 (icmp-sge-i32 (g '%11 loc) 1072693248) loc))
    (succ (case (g '%12 loc) (-1 '%13) (0 '%27))))
  (mv succ mem loc)))

(defruled @log1p-%10-expand-bb
  (equal (@log1p-%10-bb mem loc pred)
         (@log1p-%10-rev mem loc pred))
  :enable (@log1p-%10-bb @log1p-%10-rev
    @log1p-%11-rev
    @log1p-%12-rev
    @log1p-succ10-rev)
  :disable s-diff-s)

(defund @log1p-%13-mem (s13)
  (car s13))
(defund @log1p-%13-loc (s13)
  (cadr s13))
(defund @log1p-%13-pred (s13)
  (caddr s13))
(defund @log1p-%14-val (s13)
  (load-double (g '%2 (@log1p-%13-loc s13)) (@log1p-%13-mem s13)))
(defund @log1p-%14-loc (s13)
  (s '%14 (@log1p-%14-val s13) (@log1p-%13-loc s13)))
(defund @log1p-%15-val (s13)
  (fcmp-oeq-double (g '%14 (@log1p-%14-loc s13)) #xbff0000000000000))
(defund @log1p-%15-loc (s13)
  (s '%15 (@log1p-%15-val s13) (@log1p-%14-loc s13)))
(defund @log1p-succ13-lab (s13)
  (case (g '%15 (@log1p-%15-loc s13)) (-1 '%16) (0 '%19)))

(defund @log1p-succ13-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%15 loc) (-1 '%16) (0 '%19)) mem loc))
(defund @log1p-%15-rev (mem loc pred)
  (@log1p-succ13-rev mem (s '%15 (fcmp-oeq-double (g '%14 loc) #xbff0000000000000) loc) pred))
(defund @log1p-%14-rev (mem loc pred)
  (@log1p-%15-rev mem (s '%14 (load-double (g '%2 loc) mem) loc) pred))

(defund @log1p-%13-rev (mem loc pred)
  (@log1p-%14-rev mem loc pred))

(defund @log1p-%13-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%14 (load-double (g '%2 loc) mem) loc))
    (loc (s '%15 (fcmp-oeq-double (g '%14 loc) #xbff0000000000000) loc))
    (succ (case (g '%15 loc) (-1 '%16) (0 '%19))))
  (mv succ mem loc)))

(defruled @log1p-%13-expand-bb
  (equal (@log1p-%13-bb mem loc pred)
         (@log1p-%13-rev mem loc pred))
  :enable (@log1p-%13-bb @log1p-%13-rev
    @log1p-%14-rev
    @log1p-%15-rev
    @log1p-succ13-rev)
  :disable s-diff-s)

(defund @log1p-%16-mem (s16)
  (car s16))
(defund @log1p-%16-loc (s16)
  (cadr s16))
(defund @log1p-%16-pred (s16)
  (caddr s16))
(defund @log1p-%17-val (s16)
  (load-double '(zero . 0) (@log1p-%16-mem s16)))
(defund @log1p-%17-loc (s16)
  (s '%17 (@log1p-%17-val s16) (@log1p-%16-loc s16)))
(defund @log1p-%18-val (s16)
  (fdiv-double #xC350000000000000 (g '%17 (@log1p-%17-loc s16))))
(defund @log1p-%18-loc (s16)
  (s '%18 (@log1p-%18-val s16) (@log1p-%17-loc s16)))
(defund @log1p-m16.1-mem (s16)
  (store-double (g '%18 (@log1p-%18-loc s16)) (g '%1 (@log1p-%18-loc s16)) (@log1p-%16-mem s16)))
(defund @log1p-succ16-lab (s16)
  (declare (ignore s16))
  '%239)

(defund @log1p-succ16-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%239 mem loc))
(defund @log1p-m16.1-rev (mem loc pred)
  (@log1p-succ16-rev (store-double (g '%18 loc) (g '%1 loc) mem) loc pred))
(defund @log1p-%18-rev (mem loc pred)
  (@log1p-m16.1-rev mem (s '%18 (fdiv-double #xC350000000000000 (g '%17 loc)) loc) pred))
(defund @log1p-%17-rev (mem loc pred)
  (@log1p-%18-rev mem (s '%17 (load-double '(zero . 0) mem) loc) pred))

(defund @log1p-%16-rev (mem loc pred)
  (@log1p-%17-rev mem loc pred))

(defund @log1p-%16-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%17 (load-double '(zero . 0) mem) loc))
    (loc (s '%18 (fdiv-double #xC350000000000000 (g '%17 loc)) loc))
    (mem (store-double (g '%18 loc) (g '%1 loc) mem))
    (succ '%239))
  (mv succ mem loc)))

(defruled @log1p-%16-expand-bb
  (equal (@log1p-%16-bb mem loc pred)
         (@log1p-%16-rev mem loc pred))
  :enable (@log1p-%16-bb @log1p-%16-rev
    @log1p-%17-rev
    @log1p-%18-rev
    @log1p-m16.1-rev
    @log1p-succ16-rev)
  :disable s-diff-s)

(defund @log1p-%19-mem (s19)
  (car s19))
(defund @log1p-%19-loc (s19)
  (cadr s19))
(defund @log1p-%19-pred (s19)
  (caddr s19))
(defund @log1p-%20-val (s19)
  (load-double (g '%2 (@log1p-%19-loc s19)) (@log1p-%19-mem s19)))
(defund @log1p-%20-loc (s19)
  (s '%20 (@log1p-%20-val s19) (@log1p-%19-loc s19)))
(defund @log1p-%21-val (s19)
  (load-double (g '%2 (@log1p-%20-loc s19)) (@log1p-%19-mem s19)))
(defund @log1p-%21-loc (s19)
  (s '%21 (@log1p-%21-val s19) (@log1p-%20-loc s19)))
(defund @log1p-%22-val (s19)
  (fsub-double (g '%20 (@log1p-%21-loc s19)) (g '%21 (@log1p-%21-loc s19))))
(defund @log1p-%22-loc (s19)
  (s '%22 (@log1p-%22-val s19) (@log1p-%21-loc s19)))
(defund @log1p-%23-val (s19)
  (load-double (g '%2 (@log1p-%22-loc s19)) (@log1p-%19-mem s19)))
(defund @log1p-%23-loc (s19)
  (s '%23 (@log1p-%23-val s19) (@log1p-%22-loc s19)))
(defund @log1p-%24-val (s19)
  (load-double (g '%2 (@log1p-%23-loc s19)) (@log1p-%19-mem s19)))
(defund @log1p-%24-loc (s19)
  (s '%24 (@log1p-%24-val s19) (@log1p-%23-loc s19)))
(defund @log1p-%25-val (s19)
  (fsub-double (g '%23 (@log1p-%24-loc s19)) (g '%24 (@log1p-%24-loc s19))))
(defund @log1p-%25-loc (s19)
  (s '%25 (@log1p-%25-val s19) (@log1p-%24-loc s19)))
(defund @log1p-%26-val (s19)
  (fdiv-double (g '%22 (@log1p-%25-loc s19)) (g '%25 (@log1p-%25-loc s19))))
(defund @log1p-%26-loc (s19)
  (s '%26 (@log1p-%26-val s19) (@log1p-%25-loc s19)))
(defund @log1p-m19.1-mem (s19)
  (store-double (g '%26 (@log1p-%26-loc s19)) (g '%1 (@log1p-%26-loc s19)) (@log1p-%19-mem s19)))
(defund @log1p-succ19-lab (s19)
  (declare (ignore s19))
  '%239)

(defund @log1p-succ19-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%239 mem loc))
(defund @log1p-m19.1-rev (mem loc pred)
  (@log1p-succ19-rev (store-double (g '%26 loc) (g '%1 loc) mem) loc pred))
(defund @log1p-%26-rev (mem loc pred)
  (@log1p-m19.1-rev mem (s '%26 (fdiv-double (g '%22 loc) (g '%25 loc)) loc) pred))
(defund @log1p-%25-rev (mem loc pred)
  (@log1p-%26-rev mem (s '%25 (fsub-double (g '%23 loc) (g '%24 loc)) loc) pred))
(defund @log1p-%24-rev (mem loc pred)
  (@log1p-%25-rev mem (s '%24 (load-double (g '%2 loc) mem) loc) pred))
(defund @log1p-%23-rev (mem loc pred)
  (@log1p-%24-rev mem (s '%23 (load-double (g '%2 loc) mem) loc) pred))
(defund @log1p-%22-rev (mem loc pred)
  (@log1p-%23-rev mem (s '%22 (fsub-double (g '%20 loc) (g '%21 loc)) loc) pred))
(defund @log1p-%21-rev (mem loc pred)
  (@log1p-%22-rev mem (s '%21 (load-double (g '%2 loc) mem) loc) pred))
(defund @log1p-%20-rev (mem loc pred)
  (@log1p-%21-rev mem (s '%20 (load-double (g '%2 loc) mem) loc) pred))

(defund @log1p-%19-rev (mem loc pred)
  (@log1p-%20-rev mem loc pred))

(defund @log1p-%19-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%20 (load-double (g '%2 loc) mem) loc))
    (loc (s '%21 (load-double (g '%2 loc) mem) loc))
    (loc (s '%22 (fsub-double (g '%20 loc) (g '%21 loc)) loc))
    (loc (s '%23 (load-double (g '%2 loc) mem) loc))
    (loc (s '%24 (load-double (g '%2 loc) mem) loc))
    (loc (s '%25 (fsub-double (g '%23 loc) (g '%24 loc)) loc))
    (loc (s '%26 (fdiv-double (g '%22 loc) (g '%25 loc)) loc))
    (mem (store-double (g '%26 loc) (g '%1 loc) mem))
    (succ '%239))
  (mv succ mem loc)))

(defruled @log1p-%19-expand-bb
  (equal (@log1p-%19-bb mem loc pred)
         (@log1p-%19-rev mem loc pred))
  :enable (@log1p-%19-bb @log1p-%19-rev
    @log1p-%20-rev
    @log1p-%21-rev
    @log1p-%22-rev
    @log1p-%23-rev
    @log1p-%24-rev
    @log1p-%25-rev
    @log1p-%26-rev
    @log1p-m19.1-rev
    @log1p-succ19-rev)
  :disable s-diff-s)

(defund @log1p-%27-mem (s27)
  (car s27))
(defund @log1p-%27-loc (s27)
  (cadr s27))
(defund @log1p-%27-pred (s27)
  (caddr s27))
(defund @log1p-%28-val (s27)
  (load-i32 (g '%ax (@log1p-%27-loc s27)) (@log1p-%27-mem s27)))
(defund @log1p-%28-loc (s27)
  (s '%28 (@log1p-%28-val s27) (@log1p-%27-loc s27)))
(defund @log1p-%29-val (s27)
  (icmp-slt-i32 (g '%28 (@log1p-%28-loc s27)) 1042284544))
(defund @log1p-%29-loc (s27)
  (s '%29 (@log1p-%29-val s27) (@log1p-%28-loc s27)))
(defund @log1p-succ27-lab (s27)
  (case (g '%29 (@log1p-%29-loc s27)) (-1 '%30) (0 '%47)))

(defund @log1p-succ27-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%29 loc) (-1 '%30) (0 '%47)) mem loc))
(defund @log1p-%29-rev (mem loc pred)
  (@log1p-succ27-rev mem (s '%29 (icmp-slt-i32 (g '%28 loc) 1042284544) loc) pred))
(defund @log1p-%28-rev (mem loc pred)
  (@log1p-%29-rev mem (s '%28 (load-i32 (g '%ax loc) mem) loc) pred))

(defund @log1p-%27-rev (mem loc pred)
  (@log1p-%28-rev mem loc pred))

(defund @log1p-%27-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%28 (load-i32 (g '%ax loc) mem) loc))
    (loc (s '%29 (icmp-slt-i32 (g '%28 loc) 1042284544) loc))
    (succ (case (g '%29 loc) (-1 '%30) (0 '%47))))
  (mv succ mem loc)))

(defruled @log1p-%27-expand-bb
  (equal (@log1p-%27-bb mem loc pred)
         (@log1p-%27-rev mem loc pred))
  :enable (@log1p-%27-bb @log1p-%27-rev
    @log1p-%28-rev
    @log1p-%29-rev
    @log1p-succ27-rev)
  :disable s-diff-s)

(defund @log1p-%30-mem (s30)
  (car s30))
(defund @log1p-%30-loc (s30)
  (cadr s30))
(defund @log1p-%30-pred (s30)
  (caddr s30))
(defund @log1p-%31-val (s30)
  (load-double (g '%2 (@log1p-%30-loc s30)) (@log1p-%30-mem s30)))
(defund @log1p-%31-loc (s30)
  (s '%31 (@log1p-%31-val s30) (@log1p-%30-loc s30)))
(defund @log1p-%32-val (s30)
  (fadd-double #x4350000000000000 (g '%31 (@log1p-%31-loc s30))))
(defund @log1p-%32-loc (s30)
  (s '%32 (@log1p-%32-val s30) (@log1p-%31-loc s30)))
(defund @log1p-%33-val (s30)
  (load-double '(zero . 0) (@log1p-%30-mem s30)))
(defund @log1p-%33-loc (s30)
  (s '%33 (@log1p-%33-val s30) (@log1p-%32-loc s30)))
(defund @log1p-%34-val (s30)
  (fcmp-ogt-double (g '%32 (@log1p-%33-loc s30)) (g '%33 (@log1p-%33-loc s30))))
(defund @log1p-%34-loc (s30)
  (s '%34 (@log1p-%34-val s30) (@log1p-%33-loc s30)))
(defund @log1p-succ30-lab (s30)
  (case (g '%34 (@log1p-%34-loc s30)) (-1 '%35) (0 '%40)))

(defund @log1p-succ30-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%34 loc) (-1 '%35) (0 '%40)) mem loc))
(defund @log1p-%34-rev (mem loc pred)
  (@log1p-succ30-rev mem (s '%34 (fcmp-ogt-double (g '%32 loc) (g '%33 loc)) loc) pred))
(defund @log1p-%33-rev (mem loc pred)
  (@log1p-%34-rev mem (s '%33 (load-double '(zero . 0) mem) loc) pred))
(defund @log1p-%32-rev (mem loc pred)
  (@log1p-%33-rev mem (s '%32 (fadd-double #x4350000000000000 (g '%31 loc)) loc) pred))
(defund @log1p-%31-rev (mem loc pred)
  (@log1p-%32-rev mem (s '%31 (load-double (g '%2 loc) mem) loc) pred))

(defund @log1p-%30-rev (mem loc pred)
  (@log1p-%31-rev mem loc pred))

(defund @log1p-%30-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%31 (load-double (g '%2 loc) mem) loc))
    (loc (s '%32 (fadd-double #x4350000000000000 (g '%31 loc)) loc))
    (loc (s '%33 (load-double '(zero . 0) mem) loc))
    (loc (s '%34 (fcmp-ogt-double (g '%32 loc) (g '%33 loc)) loc))
    (succ (case (g '%34 loc) (-1 '%35) (0 '%40))))
  (mv succ mem loc)))

(defruled @log1p-%30-expand-bb
  (equal (@log1p-%30-bb mem loc pred)
         (@log1p-%30-rev mem loc pred))
  :enable (@log1p-%30-bb @log1p-%30-rev
    @log1p-%31-rev
    @log1p-%32-rev
    @log1p-%33-rev
    @log1p-%34-rev
    @log1p-succ30-rev)
  :disable s-diff-s)

(defund @log1p-%35-mem (s35)
  (car s35))
(defund @log1p-%35-loc (s35)
  (cadr s35))
(defund @log1p-%35-pred (s35)
  (caddr s35))
(defund @log1p-%36-val (s35)
  (load-i32 (g '%ax (@log1p-%35-loc s35)) (@log1p-%35-mem s35)))
(defund @log1p-%36-loc (s35)
  (s '%36 (@log1p-%36-val s35) (@log1p-%35-loc s35)))
(defund @log1p-%37-val (s35)
  (icmp-slt-i32 (g '%36 (@log1p-%36-loc s35)) 1016070144))
(defund @log1p-%37-loc (s35)
  (s '%37 (@log1p-%37-val s35) (@log1p-%36-loc s35)))
(defund @log1p-succ35-lab (s35)
  (case (g '%37 (@log1p-%37-loc s35)) (-1 '%38) (0 '%40)))

(defund @log1p-succ35-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%37 loc) (-1 '%38) (0 '%40)) mem loc))
(defund @log1p-%37-rev (mem loc pred)
  (@log1p-succ35-rev mem (s '%37 (icmp-slt-i32 (g '%36 loc) 1016070144) loc) pred))
(defund @log1p-%36-rev (mem loc pred)
  (@log1p-%37-rev mem (s '%36 (load-i32 (g '%ax loc) mem) loc) pred))

(defund @log1p-%35-rev (mem loc pred)
  (@log1p-%36-rev mem loc pred))

(defund @log1p-%35-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%36 (load-i32 (g '%ax loc) mem) loc))
    (loc (s '%37 (icmp-slt-i32 (g '%36 loc) 1016070144) loc))
    (succ (case (g '%37 loc) (-1 '%38) (0 '%40))))
  (mv succ mem loc)))

(defruled @log1p-%35-expand-bb
  (equal (@log1p-%35-bb mem loc pred)
         (@log1p-%35-rev mem loc pred))
  :enable (@log1p-%35-bb @log1p-%35-rev
    @log1p-%36-rev
    @log1p-%37-rev
    @log1p-succ35-rev)
  :disable s-diff-s)

(defund @log1p-%38-mem (s38)
  (car s38))
(defund @log1p-%38-loc (s38)
  (cadr s38))
(defund @log1p-%38-pred (s38)
  (caddr s38))
(defund @log1p-%39-val (s38)
  (load-double (g '%2 (@log1p-%38-loc s38)) (@log1p-%38-mem s38)))
(defund @log1p-%39-loc (s38)
  (s '%39 (@log1p-%39-val s38) (@log1p-%38-loc s38)))
(defund @log1p-m38.1-mem (s38)
  (store-double (g '%39 (@log1p-%39-loc s38)) (g '%1 (@log1p-%39-loc s38)) (@log1p-%38-mem s38)))
(defund @log1p-succ38-lab (s38)
  (declare (ignore s38))
  '%239)

(defund @log1p-succ38-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%239 mem loc))
(defund @log1p-m38.1-rev (mem loc pred)
  (@log1p-succ38-rev (store-double (g '%39 loc) (g '%1 loc) mem) loc pred))
(defund @log1p-%39-rev (mem loc pred)
  (@log1p-m38.1-rev mem (s '%39 (load-double (g '%2 loc) mem) loc) pred))

(defund @log1p-%38-rev (mem loc pred)
  (@log1p-%39-rev mem loc pred))

(defund @log1p-%38-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%39 (load-double (g '%2 loc) mem) loc))
    (mem (store-double (g '%39 loc) (g '%1 loc) mem))
    (succ '%239))
  (mv succ mem loc)))

(defruled @log1p-%38-expand-bb
  (equal (@log1p-%38-bb mem loc pred)
         (@log1p-%38-rev mem loc pred))
  :enable (@log1p-%38-bb @log1p-%38-rev
    @log1p-%39-rev
    @log1p-m38.1-rev
    @log1p-succ38-rev)
  :disable s-diff-s)

(defund @log1p-%40-mem (s40)
  (car s40))
(defund @log1p-%40-loc (s40)
  (cadr s40))
(defund @log1p-%40-pred (s40)
  (caddr s40))
(defund @log1p-%41-val (s40)
  (load-double (g '%2 (@log1p-%40-loc s40)) (@log1p-%40-mem s40)))
(defund @log1p-%41-loc (s40)
  (s '%41 (@log1p-%41-val s40) (@log1p-%40-loc s40)))
(defund @log1p-%42-val (s40)
  (load-double (g '%2 (@log1p-%41-loc s40)) (@log1p-%40-mem s40)))
(defund @log1p-%42-loc (s40)
  (s '%42 (@log1p-%42-val s40) (@log1p-%41-loc s40)))
(defund @log1p-%43-val (s40)
  (load-double (g '%2 (@log1p-%42-loc s40)) (@log1p-%40-mem s40)))
(defund @log1p-%43-loc (s40)
  (s '%43 (@log1p-%43-val s40) (@log1p-%42-loc s40)))
(defund @log1p-%44-val (s40)
  (fmul-double (g '%42 (@log1p-%43-loc s40)) (g '%43 (@log1p-%43-loc s40))))
(defund @log1p-%44-loc (s40)
  (s '%44 (@log1p-%44-val s40) (@log1p-%43-loc s40)))
(defund @log1p-%45-val (s40)
  (fmul-double (g '%44 (@log1p-%44-loc s40)) #x3fe0000000000000))
(defund @log1p-%45-loc (s40)
  (s '%45 (@log1p-%45-val s40) (@log1p-%44-loc s40)))
(defund @log1p-%46-val (s40)
  (fsub-double (g '%41 (@log1p-%45-loc s40)) (g '%45 (@log1p-%45-loc s40))))
(defund @log1p-%46-loc (s40)
  (s '%46 (@log1p-%46-val s40) (@log1p-%45-loc s40)))
(defund @log1p-m40.1-mem (s40)
  (store-double (g '%46 (@log1p-%46-loc s40)) (g '%1 (@log1p-%46-loc s40)) (@log1p-%40-mem s40)))
(defund @log1p-succ40-lab (s40)
  (declare (ignore s40))
  '%239)

(defund @log1p-succ40-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%239 mem loc))
(defund @log1p-m40.1-rev (mem loc pred)
  (@log1p-succ40-rev (store-double (g '%46 loc) (g '%1 loc) mem) loc pred))
(defund @log1p-%46-rev (mem loc pred)
  (@log1p-m40.1-rev mem (s '%46 (fsub-double (g '%41 loc) (g '%45 loc)) loc) pred))
(defund @log1p-%45-rev (mem loc pred)
  (@log1p-%46-rev mem (s '%45 (fmul-double (g '%44 loc) #x3fe0000000000000) loc) pred))
(defund @log1p-%44-rev (mem loc pred)
  (@log1p-%45-rev mem (s '%44 (fmul-double (g '%42 loc) (g '%43 loc)) loc) pred))
(defund @log1p-%43-rev (mem loc pred)
  (@log1p-%44-rev mem (s '%43 (load-double (g '%2 loc) mem) loc) pred))
(defund @log1p-%42-rev (mem loc pred)
  (@log1p-%43-rev mem (s '%42 (load-double (g '%2 loc) mem) loc) pred))
(defund @log1p-%41-rev (mem loc pred)
  (@log1p-%42-rev mem (s '%41 (load-double (g '%2 loc) mem) loc) pred))

(defund @log1p-%40-rev (mem loc pred)
  (@log1p-%41-rev mem loc pred))

(defund @log1p-%40-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%41 (load-double (g '%2 loc) mem) loc))
    (loc (s '%42 (load-double (g '%2 loc) mem) loc))
    (loc (s '%43 (load-double (g '%2 loc) mem) loc))
    (loc (s '%44 (fmul-double (g '%42 loc) (g '%43 loc)) loc))
    (loc (s '%45 (fmul-double (g '%44 loc) #x3fe0000000000000) loc))
    (loc (s '%46 (fsub-double (g '%41 loc) (g '%45 loc)) loc))
    (mem (store-double (g '%46 loc) (g '%1 loc) mem))
    (succ '%239))
  (mv succ mem loc)))

(defruled @log1p-%40-expand-bb
  (equal (@log1p-%40-bb mem loc pred)
         (@log1p-%40-rev mem loc pred))
  :enable (@log1p-%40-bb @log1p-%40-rev
    @log1p-%41-rev
    @log1p-%42-rev
    @log1p-%43-rev
    @log1p-%44-rev
    @log1p-%45-rev
    @log1p-%46-rev
    @log1p-m40.1-rev
    @log1p-succ40-rev)
  :disable s-diff-s)

(defund @log1p-%47-mem (s47)
  (car s47))
(defund @log1p-%47-loc (s47)
  (cadr s47))
(defund @log1p-%47-pred (s47)
  (caddr s47))
(defund @log1p-%48-val (s47)
  (load-i32 (g '%hx (@log1p-%47-loc s47)) (@log1p-%47-mem s47)))
(defund @log1p-%48-loc (s47)
  (s '%48 (@log1p-%48-val s47) (@log1p-%47-loc s47)))
(defund @log1p-%49-val (s47)
  (icmp-sgt-i32 (g '%48 (@log1p-%48-loc s47)) 0))
(defund @log1p-%49-loc (s47)
  (s '%49 (@log1p-%49-val s47) (@log1p-%48-loc s47)))
(defund @log1p-succ47-lab (s47)
  (case (g '%49 (@log1p-%49-loc s47)) (-1 '%53) (0 '%50)))

(defund @log1p-succ47-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%49 loc) (-1 '%53) (0 '%50)) mem loc))
(defund @log1p-%49-rev (mem loc pred)
  (@log1p-succ47-rev mem (s '%49 (icmp-sgt-i32 (g '%48 loc) 0) loc) pred))
(defund @log1p-%48-rev (mem loc pred)
  (@log1p-%49-rev mem (s '%48 (load-i32 (g '%hx loc) mem) loc) pred))

(defund @log1p-%47-rev (mem loc pred)
  (@log1p-%48-rev mem loc pred))

(defund @log1p-%47-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%48 (load-i32 (g '%hx loc) mem) loc))
    (loc (s '%49 (icmp-sgt-i32 (g '%48 loc) 0) loc))
    (succ (case (g '%49 loc) (-1 '%53) (0 '%50))))
  (mv succ mem loc)))

(defruled @log1p-%47-expand-bb
  (equal (@log1p-%47-bb mem loc pred)
         (@log1p-%47-rev mem loc pred))
  :enable (@log1p-%47-bb @log1p-%47-rev
    @log1p-%48-rev
    @log1p-%49-rev
    @log1p-succ47-rev)
  :disable s-diff-s)

(defund @log1p-%50-mem (s50)
  (car s50))
(defund @log1p-%50-loc (s50)
  (cadr s50))
(defund @log1p-%50-pred (s50)
  (caddr s50))
(defund @log1p-%51-val (s50)
  (load-i32 (g '%hx (@log1p-%50-loc s50)) (@log1p-%50-mem s50)))
(defund @log1p-%51-loc (s50)
  (s '%51 (@log1p-%51-val s50) (@log1p-%50-loc s50)))
(defund @log1p-%52-val (s50)
  (icmp-sle-i32 (g '%51 (@log1p-%51-loc s50)) -1076707645))
(defund @log1p-%52-loc (s50)
  (s '%52 (@log1p-%52-val s50) (@log1p-%51-loc s50)))
(defund @log1p-succ50-lab (s50)
  (case (g '%52 (@log1p-%52-loc s50)) (-1 '%53) (0 '%55)))

(defund @log1p-succ50-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%52 loc) (-1 '%53) (0 '%55)) mem loc))
(defund @log1p-%52-rev (mem loc pred)
  (@log1p-succ50-rev mem (s '%52 (icmp-sle-i32 (g '%51 loc) -1076707645) loc) pred))
(defund @log1p-%51-rev (mem loc pred)
  (@log1p-%52-rev mem (s '%51 (load-i32 (g '%hx loc) mem) loc) pred))

(defund @log1p-%50-rev (mem loc pred)
  (@log1p-%51-rev mem loc pred))

(defund @log1p-%50-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%51 (load-i32 (g '%hx loc) mem) loc))
    (loc (s '%52 (icmp-sle-i32 (g '%51 loc) -1076707645) loc))
    (succ (case (g '%52 loc) (-1 '%53) (0 '%55))))
  (mv succ mem loc)))

(defruled @log1p-%50-expand-bb
  (equal (@log1p-%50-bb mem loc pred)
         (@log1p-%50-rev mem loc pred))
  :enable (@log1p-%50-bb @log1p-%50-rev
    @log1p-%51-rev
    @log1p-%52-rev
    @log1p-succ50-rev)
  :disable s-diff-s)

(defund @log1p-%53-mem (s53)
  (car s53))
(defund @log1p-%53-loc (s53)
  (cadr s53))
(defund @log1p-%53-pred (s53)
  (caddr s53))
(defund @log1p-m53.1-mem (s53)
  (store-i32 0 (g '%k (@log1p-%53-loc s53)) (@log1p-%53-mem s53)))
(defund @log1p-%54-val (s53)
  (load-double (g '%2 (@log1p-%53-loc s53)) (@log1p-m53.1-mem s53)))
(defund @log1p-%54-loc (s53)
  (s '%54 (@log1p-%54-val s53) (@log1p-%53-loc s53)))
(defund @log1p-m53.2-mem (s53)
  (store-double (g '%54 (@log1p-%54-loc s53)) (g '%f (@log1p-%54-loc s53)) (@log1p-m53.1-mem s53)))
(defund @log1p-m53.3-mem (s53)
  (store-i32 1 (g '%hu (@log1p-%54-loc s53)) (@log1p-m53.2-mem s53)))
(defund @log1p-succ53-lab (s53)
  (declare (ignore s53))
  '%55)

(defund @log1p-succ53-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%55 mem loc))
(defund @log1p-m53.3-rev (mem loc pred)
  (@log1p-succ53-rev (store-i32 1 (g '%hu loc) mem) loc pred))
(defund @log1p-m53.2-rev (mem loc pred)
  (@log1p-m53.3-rev (store-double (g '%54 loc) (g '%f loc) mem) loc pred))
(defund @log1p-%54-rev (mem loc pred)
  (@log1p-m53.2-rev mem (s '%54 (load-double (g '%2 loc) mem) loc) pred))
(defund @log1p-m53.1-rev (mem loc pred)
  (@log1p-%54-rev (store-i32 0 (g '%k loc) mem) loc pred))

(defund @log1p-%53-rev (mem loc pred)
  (@log1p-m53.1-rev mem loc pred))

(defund @log1p-%53-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (mem (store-i32 0 (g '%k loc) mem))
    (loc (s '%54 (load-double (g '%2 loc) mem) loc))
    (mem (store-double (g '%54 loc) (g '%f loc) mem))
    (mem (store-i32 1 (g '%hu loc) mem))
    (succ '%55))
  (mv succ mem loc)))

(defruled @log1p-%53-expand-bb
  (equal (@log1p-%53-bb mem loc pred)
         (@log1p-%53-rev mem loc pred))
  :enable (@log1p-%53-bb @log1p-%53-rev
    @log1p-m53.1-rev
    @log1p-%54-rev
    @log1p-m53.2-rev
    @log1p-m53.3-rev
    @log1p-succ53-rev)
  :disable s-diff-s)

(defund @log1p-%55-mem (s55)
  (car s55))
(defund @log1p-%55-loc (s55)
  (cadr s55))
(defund @log1p-%55-pred (s55)
  (caddr s55))
(defund @log1p-succ55-lab (s55)
  (declare (ignore s55))
  '%56)

(defund @log1p-succ55-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%56 mem loc))

(defund @log1p-%55-rev (mem loc pred)
  (@log1p-succ55-rev mem loc pred))

(defund @log1p-%55-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (succ '%56))
  (mv succ mem loc)))

(defruled @log1p-%55-expand-bb
  (equal (@log1p-%55-bb mem loc pred)
         (@log1p-%55-rev mem loc pred))
  :enable (@log1p-%55-bb @log1p-%55-rev
    @log1p-succ55-rev)
  :disable s-diff-s)

(defund @log1p-%56-mem (s56)
  (car s56))
(defund @log1p-%56-loc (s56)
  (cadr s56))
(defund @log1p-%56-pred (s56)
  (caddr s56))
(defund @log1p-%57-val (s56)
  (load-i32 (g '%hx (@log1p-%56-loc s56)) (@log1p-%56-mem s56)))
(defund @log1p-%57-loc (s56)
  (s '%57 (@log1p-%57-val s56) (@log1p-%56-loc s56)))
(defund @log1p-%58-val (s56)
  (icmp-sge-i32 (g '%57 (@log1p-%57-loc s56)) 2146435072))
(defund @log1p-%58-loc (s56)
  (s '%58 (@log1p-%58-val s56) (@log1p-%57-loc s56)))
(defund @log1p-succ56-lab (s56)
  (case (g '%58 (@log1p-%58-loc s56)) (-1 '%59) (0 '%63)))

(defund @log1p-succ56-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%58 loc) (-1 '%59) (0 '%63)) mem loc))
(defund @log1p-%58-rev (mem loc pred)
  (@log1p-succ56-rev mem (s '%58 (icmp-sge-i32 (g '%57 loc) 2146435072) loc) pred))
(defund @log1p-%57-rev (mem loc pred)
  (@log1p-%58-rev mem (s '%57 (load-i32 (g '%hx loc) mem) loc) pred))

(defund @log1p-%56-rev (mem loc pred)
  (@log1p-%57-rev mem loc pred))

(defund @log1p-%56-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%57 (load-i32 (g '%hx loc) mem) loc))
    (loc (s '%58 (icmp-sge-i32 (g '%57 loc) 2146435072) loc))
    (succ (case (g '%58 loc) (-1 '%59) (0 '%63))))
  (mv succ mem loc)))

(defruled @log1p-%56-expand-bb
  (equal (@log1p-%56-bb mem loc pred)
         (@log1p-%56-rev mem loc pred))
  :enable (@log1p-%56-bb @log1p-%56-rev
    @log1p-%57-rev
    @log1p-%58-rev
    @log1p-succ56-rev)
  :disable s-diff-s)

(defund @log1p-%59-mem (s59)
  (car s59))
(defund @log1p-%59-loc (s59)
  (cadr s59))
(defund @log1p-%59-pred (s59)
  (caddr s59))
(defund @log1p-%60-val (s59)
  (load-double (g '%2 (@log1p-%59-loc s59)) (@log1p-%59-mem s59)))
(defund @log1p-%60-loc (s59)
  (s '%60 (@log1p-%60-val s59) (@log1p-%59-loc s59)))
(defund @log1p-%61-val (s59)
  (load-double (g '%2 (@log1p-%60-loc s59)) (@log1p-%59-mem s59)))
(defund @log1p-%61-loc (s59)
  (s '%61 (@log1p-%61-val s59) (@log1p-%60-loc s59)))
(defund @log1p-%62-val (s59)
  (fadd-double (g '%60 (@log1p-%61-loc s59)) (g '%61 (@log1p-%61-loc s59))))
(defund @log1p-%62-loc (s59)
  (s '%62 (@log1p-%62-val s59) (@log1p-%61-loc s59)))
(defund @log1p-m59.1-mem (s59)
  (store-double (g '%62 (@log1p-%62-loc s59)) (g '%1 (@log1p-%62-loc s59)) (@log1p-%59-mem s59)))
(defund @log1p-succ59-lab (s59)
  (declare (ignore s59))
  '%239)

(defund @log1p-succ59-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%239 mem loc))
(defund @log1p-m59.1-rev (mem loc pred)
  (@log1p-succ59-rev (store-double (g '%62 loc) (g '%1 loc) mem) loc pred))
(defund @log1p-%62-rev (mem loc pred)
  (@log1p-m59.1-rev mem (s '%62 (fadd-double (g '%60 loc) (g '%61 loc)) loc) pred))
(defund @log1p-%61-rev (mem loc pred)
  (@log1p-%62-rev mem (s '%61 (load-double (g '%2 loc) mem) loc) pred))
(defund @log1p-%60-rev (mem loc pred)
  (@log1p-%61-rev mem (s '%60 (load-double (g '%2 loc) mem) loc) pred))

(defund @log1p-%59-rev (mem loc pred)
  (@log1p-%60-rev mem loc pred))

(defund @log1p-%59-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%60 (load-double (g '%2 loc) mem) loc))
    (loc (s '%61 (load-double (g '%2 loc) mem) loc))
    (loc (s '%62 (fadd-double (g '%60 loc) (g '%61 loc)) loc))
    (mem (store-double (g '%62 loc) (g '%1 loc) mem))
    (succ '%239))
  (mv succ mem loc)))

(defruled @log1p-%59-expand-bb
  (equal (@log1p-%59-bb mem loc pred)
         (@log1p-%59-rev mem loc pred))
  :enable (@log1p-%59-bb @log1p-%59-rev
    @log1p-%60-rev
    @log1p-%61-rev
    @log1p-%62-rev
    @log1p-m59.1-rev
    @log1p-succ59-rev)
  :disable s-diff-s)

(defund @log1p-%63-mem (s63)
  (car s63))
(defund @log1p-%63-loc (s63)
  (cadr s63))
(defund @log1p-%63-pred (s63)
  (caddr s63))
(defund @log1p-%64-val (s63)
  (load-i32 (g '%k (@log1p-%63-loc s63)) (@log1p-%63-mem s63)))
(defund @log1p-%64-loc (s63)
  (s '%64 (@log1p-%64-val s63) (@log1p-%63-loc s63)))
(defund @log1p-%65-val (s63)
  (icmp-ne-i32 (g '%64 (@log1p-%64-loc s63)) 0))
(defund @log1p-%65-loc (s63)
  (s '%65 (@log1p-%65-val s63) (@log1p-%64-loc s63)))
(defund @log1p-succ63-lab (s63)
  (case (g '%65 (@log1p-%65-loc s63)) (-1 '%66) (0 '%126)))

(defund @log1p-succ63-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%65 loc) (-1 '%66) (0 '%126)) mem loc))
(defund @log1p-%65-rev (mem loc pred)
  (@log1p-succ63-rev mem (s '%65 (icmp-ne-i32 (g '%64 loc) 0) loc) pred))
(defund @log1p-%64-rev (mem loc pred)
  (@log1p-%65-rev mem (s '%64 (load-i32 (g '%k loc) mem) loc) pred))

(defund @log1p-%63-rev (mem loc pred)
  (@log1p-%64-rev mem loc pred))

(defund @log1p-%63-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%64 (load-i32 (g '%k loc) mem) loc))
    (loc (s '%65 (icmp-ne-i32 (g '%64 loc) 0) loc))
    (succ (case (g '%65 loc) (-1 '%66) (0 '%126))))
  (mv succ mem loc)))

(defruled @log1p-%63-expand-bb
  (equal (@log1p-%63-bb mem loc pred)
         (@log1p-%63-rev mem loc pred))
  :enable (@log1p-%63-bb @log1p-%63-rev
    @log1p-%64-rev
    @log1p-%65-rev
    @log1p-succ63-rev)
  :disable s-diff-s)

(defund @log1p-%66-mem (s66)
  (car s66))
(defund @log1p-%66-loc (s66)
  (cadr s66))
(defund @log1p-%66-pred (s66)
  (caddr s66))
(defund @log1p-%67-val (s66)
  (load-i32 (g '%hx (@log1p-%66-loc s66)) (@log1p-%66-mem s66)))
(defund @log1p-%67-loc (s66)
  (s '%67 (@log1p-%67-val s66) (@log1p-%66-loc s66)))
(defund @log1p-%68-val (s66)
  (icmp-slt-i32 (g '%67 (@log1p-%67-loc s66)) 1128267776))
(defund @log1p-%68-loc (s66)
  (s '%68 (@log1p-%68-val s66) (@log1p-%67-loc s66)))
(defund @log1p-succ66-lab (s66)
  (case (g '%68 (@log1p-%68-loc s66)) (-1 '%69) (0 '%95)))

(defund @log1p-succ66-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%68 loc) (-1 '%69) (0 '%95)) mem loc))
(defund @log1p-%68-rev (mem loc pred)
  (@log1p-succ66-rev mem (s '%68 (icmp-slt-i32 (g '%67 loc) 1128267776) loc) pred))
(defund @log1p-%67-rev (mem loc pred)
  (@log1p-%68-rev mem (s '%67 (load-i32 (g '%hx loc) mem) loc) pred))

(defund @log1p-%66-rev (mem loc pred)
  (@log1p-%67-rev mem loc pred))

(defund @log1p-%66-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%67 (load-i32 (g '%hx loc) mem) loc))
    (loc (s '%68 (icmp-slt-i32 (g '%67 loc) 1128267776) loc))
    (succ (case (g '%68 loc) (-1 '%69) (0 '%95))))
  (mv succ mem loc)))

(defruled @log1p-%66-expand-bb
  (equal (@log1p-%66-bb mem loc pred)
         (@log1p-%66-rev mem loc pred))
  :enable (@log1p-%66-bb @log1p-%66-rev
    @log1p-%67-rev
    @log1p-%68-rev
    @log1p-succ66-rev)
  :disable s-diff-s)

(defund @log1p-%69-mem (s69)
  (car s69))
(defund @log1p-%69-loc (s69)
  (cadr s69))
(defund @log1p-%69-pred (s69)
  (caddr s69))
(defund @log1p-%70-val (s69)
  (load-double (g '%2 (@log1p-%69-loc s69)) (@log1p-%69-mem s69)))
(defund @log1p-%70-loc (s69)
  (s '%70 (@log1p-%70-val s69) (@log1p-%69-loc s69)))
(defund @log1p-%71-val (s69)
  (fadd-double #x3ff0000000000000 (g '%70 (@log1p-%70-loc s69))))
(defund @log1p-%71-loc (s69)
  (s '%71 (@log1p-%71-val s69) (@log1p-%70-loc s69)))
(defund @log1p-m69.1-mem (s69)
  (store-double (g '%71 (@log1p-%71-loc s69)) (g '%u (@log1p-%71-loc s69)) (@log1p-%69-mem s69)))
(defund @log1p-%72-val (s69)
  (bitcast-double*-to-i32* (g '%u (@log1p-%71-loc s69))))
(defund @log1p-%72-loc (s69)
  (s '%72 (@log1p-%72-val s69) (@log1p-%71-loc s69)))
(defund @log1p-%73-val (s69)
  (getelementptr-i32 (g '%72 (@log1p-%72-loc s69)) 1))
(defund @log1p-%73-loc (s69)
  (s '%73 (@log1p-%73-val s69) (@log1p-%72-loc s69)))
(defund @log1p-%74-val (s69)
  (load-i32 (g '%73 (@log1p-%73-loc s69)) (@log1p-m69.1-mem s69)))
(defund @log1p-%74-loc (s69)
  (s '%74 (@log1p-%74-val s69) (@log1p-%73-loc s69)))
(defund @log1p-m69.2-mem (s69)
  (store-i32 (g '%74 (@log1p-%74-loc s69)) (g '%hu (@log1p-%74-loc s69)) (@log1p-m69.1-mem s69)))
(defund @log1p-%75-val (s69)
  (load-i32 (g '%hu (@log1p-%74-loc s69)) (@log1p-m69.2-mem s69)))
(defund @log1p-%75-loc (s69)
  (s '%75 (@log1p-%75-val s69) (@log1p-%74-loc s69)))
(defund @log1p-%76-val (s69)
  (ashr-i32 (g '%75 (@log1p-%75-loc s69)) 20))
(defund @log1p-%76-loc (s69)
  (s '%76 (@log1p-%76-val s69) (@log1p-%75-loc s69)))
(defund @log1p-%77-val (s69)
  (sub-i32 (g '%76 (@log1p-%76-loc s69)) 1023))
(defund @log1p-%77-loc (s69)
  (s '%77 (@log1p-%77-val s69) (@log1p-%76-loc s69)))
(defund @log1p-m69.3-mem (s69)
  (store-i32 (g '%77 (@log1p-%77-loc s69)) (g '%k (@log1p-%77-loc s69)) (@log1p-m69.2-mem s69)))
(defund @log1p-%78-val (s69)
  (load-i32 (g '%k (@log1p-%77-loc s69)) (@log1p-m69.3-mem s69)))
(defund @log1p-%78-loc (s69)
  (s '%78 (@log1p-%78-val s69) (@log1p-%77-loc s69)))
(defund @log1p-%79-val (s69)
  (icmp-sgt-i32 (g '%78 (@log1p-%78-loc s69)) 0))
(defund @log1p-%79-loc (s69)
  (s '%79 (@log1p-%79-val s69) (@log1p-%78-loc s69)))
(defund @log1p-succ69-lab (s69)
  (case (g '%79 (@log1p-%79-loc s69)) (-1 '%80) (0 '%85)))

(defund @log1p-succ69-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%79 loc) (-1 '%80) (0 '%85)) mem loc))
(defund @log1p-%79-rev (mem loc pred)
  (@log1p-succ69-rev mem (s '%79 (icmp-sgt-i32 (g '%78 loc) 0) loc) pred))
(defund @log1p-%78-rev (mem loc pred)
  (@log1p-%79-rev mem (s '%78 (load-i32 (g '%k loc) mem) loc) pred))
(defund @log1p-m69.3-rev (mem loc pred)
  (@log1p-%78-rev (store-i32 (g '%77 loc) (g '%k loc) mem) loc pred))
(defund @log1p-%77-rev (mem loc pred)
  (@log1p-m69.3-rev mem (s '%77 (sub-i32 (g '%76 loc) 1023) loc) pred))
(defund @log1p-%76-rev (mem loc pred)
  (@log1p-%77-rev mem (s '%76 (ashr-i32 (g '%75 loc) 20) loc) pred))
(defund @log1p-%75-rev (mem loc pred)
  (@log1p-%76-rev mem (s '%75 (load-i32 (g '%hu loc) mem) loc) pred))
(defund @log1p-m69.2-rev (mem loc pred)
  (@log1p-%75-rev (store-i32 (g '%74 loc) (g '%hu loc) mem) loc pred))
(defund @log1p-%74-rev (mem loc pred)
  (@log1p-m69.2-rev mem (s '%74 (load-i32 (g '%73 loc) mem) loc) pred))
(defund @log1p-%73-rev (mem loc pred)
  (@log1p-%74-rev mem (s '%73 (getelementptr-i32 (g '%72 loc) 1) loc) pred))
(defund @log1p-%72-rev (mem loc pred)
  (@log1p-%73-rev mem (s '%72 (bitcast-double*-to-i32* (g '%u loc)) loc) pred))
(defund @log1p-m69.1-rev (mem loc pred)
  (@log1p-%72-rev (store-double (g '%71 loc) (g '%u loc) mem) loc pred))
(defund @log1p-%71-rev (mem loc pred)
  (@log1p-m69.1-rev mem (s '%71 (fadd-double #x3ff0000000000000 (g '%70 loc)) loc) pred))
(defund @log1p-%70-rev (mem loc pred)
  (@log1p-%71-rev mem (s '%70 (load-double (g '%2 loc) mem) loc) pred))

(defund @log1p-%69-rev (mem loc pred)
  (@log1p-%70-rev mem loc pred))

(defund @log1p-%69-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%70 (load-double (g '%2 loc) mem) loc))
    (loc (s '%71 (fadd-double #x3ff0000000000000 (g '%70 loc)) loc))
    (mem (store-double (g '%71 loc) (g '%u loc) mem))
    (loc (s '%72 (bitcast-double*-to-i32* (g '%u loc)) loc))
    (loc (s '%73 (getelementptr-i32 (g '%72 loc) 1) loc))
    (loc (s '%74 (load-i32 (g '%73 loc) mem) loc))
    (mem (store-i32 (g '%74 loc) (g '%hu loc) mem))
    (loc (s '%75 (load-i32 (g '%hu loc) mem) loc))
    (loc (s '%76 (ashr-i32 (g '%75 loc) 20) loc))
    (loc (s '%77 (sub-i32 (g '%76 loc) 1023) loc))
    (mem (store-i32 (g '%77 loc) (g '%k loc) mem))
    (loc (s '%78 (load-i32 (g '%k loc) mem) loc))
    (loc (s '%79 (icmp-sgt-i32 (g '%78 loc) 0) loc))
    (succ (case (g '%79 loc) (-1 '%80) (0 '%85))))
  (mv succ mem loc)))

(defruled @log1p-%69-expand-bb
  (equal (@log1p-%69-bb mem loc pred)
         (@log1p-%69-rev mem loc pred))
  :enable (@log1p-%69-bb @log1p-%69-rev
    @log1p-%70-rev
    @log1p-%71-rev
    @log1p-m69.1-rev
    @log1p-%72-rev
    @log1p-%73-rev
    @log1p-%74-rev
    @log1p-m69.2-rev
    @log1p-%75-rev
    @log1p-%76-rev
    @log1p-%77-rev
    @log1p-m69.3-rev
    @log1p-%78-rev
    @log1p-%79-rev
    @log1p-succ69-rev)
  :disable s-diff-s)

(defund @log1p-%80-mem (s80)
  (car s80))
(defund @log1p-%80-loc (s80)
  (cadr s80))
(defund @log1p-%80-pred (s80)
  (caddr s80))
(defund @log1p-%81-val (s80)
  (load-double (g '%u (@log1p-%80-loc s80)) (@log1p-%80-mem s80)))
(defund @log1p-%81-loc (s80)
  (s '%81 (@log1p-%81-val s80) (@log1p-%80-loc s80)))
(defund @log1p-%82-val (s80)
  (load-double (g '%2 (@log1p-%81-loc s80)) (@log1p-%80-mem s80)))
(defund @log1p-%82-loc (s80)
  (s '%82 (@log1p-%82-val s80) (@log1p-%81-loc s80)))
(defund @log1p-%83-val (s80)
  (fsub-double (g '%81 (@log1p-%82-loc s80)) (g '%82 (@log1p-%82-loc s80))))
(defund @log1p-%83-loc (s80)
  (s '%83 (@log1p-%83-val s80) (@log1p-%82-loc s80)))
(defund @log1p-%84-val (s80)
  (fsub-double #x3ff0000000000000 (g '%83 (@log1p-%83-loc s80))))
(defund @log1p-%84-loc (s80)
  (s '%84 (@log1p-%84-val s80) (@log1p-%83-loc s80)))
(defund @log1p-succ80-lab (s80)
  (declare (ignore s80))
  '%90)

(defund @log1p-succ80-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%90 mem loc))
(defund @log1p-%84-rev (mem loc pred)
  (@log1p-succ80-rev mem (s '%84 (fsub-double #x3ff0000000000000 (g '%83 loc)) loc) pred))
(defund @log1p-%83-rev (mem loc pred)
  (@log1p-%84-rev mem (s '%83 (fsub-double (g '%81 loc) (g '%82 loc)) loc) pred))
(defund @log1p-%82-rev (mem loc pred)
  (@log1p-%83-rev mem (s '%82 (load-double (g '%2 loc) mem) loc) pred))
(defund @log1p-%81-rev (mem loc pred)
  (@log1p-%82-rev mem (s '%81 (load-double (g '%u loc) mem) loc) pred))

(defund @log1p-%80-rev (mem loc pred)
  (@log1p-%81-rev mem loc pred))

(defund @log1p-%80-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%81 (load-double (g '%u loc) mem) loc))
    (loc (s '%82 (load-double (g '%2 loc) mem) loc))
    (loc (s '%83 (fsub-double (g '%81 loc) (g '%82 loc)) loc))
    (loc (s '%84 (fsub-double #x3ff0000000000000 (g '%83 loc)) loc))
    (succ '%90))
  (mv succ mem loc)))

(defruled @log1p-%80-expand-bb
  (equal (@log1p-%80-bb mem loc pred)
         (@log1p-%80-rev mem loc pred))
  :enable (@log1p-%80-bb @log1p-%80-rev
    @log1p-%81-rev
    @log1p-%82-rev
    @log1p-%83-rev
    @log1p-%84-rev
    @log1p-succ80-rev)
  :disable s-diff-s)

(defund @log1p-%85-mem (s85)
  (car s85))
(defund @log1p-%85-loc (s85)
  (cadr s85))
(defund @log1p-%85-pred (s85)
  (caddr s85))
(defund @log1p-%86-val (s85)
  (load-double (g '%2 (@log1p-%85-loc s85)) (@log1p-%85-mem s85)))
(defund @log1p-%86-loc (s85)
  (s '%86 (@log1p-%86-val s85) (@log1p-%85-loc s85)))
(defund @log1p-%87-val (s85)
  (load-double (g '%u (@log1p-%86-loc s85)) (@log1p-%85-mem s85)))
(defund @log1p-%87-loc (s85)
  (s '%87 (@log1p-%87-val s85) (@log1p-%86-loc s85)))
(defund @log1p-%88-val (s85)
  (fsub-double (g '%87 (@log1p-%87-loc s85)) #x3ff0000000000000))
(defund @log1p-%88-loc (s85)
  (s '%88 (@log1p-%88-val s85) (@log1p-%87-loc s85)))
(defund @log1p-%89-val (s85)
  (fsub-double (g '%86 (@log1p-%88-loc s85)) (g '%88 (@log1p-%88-loc s85))))
(defund @log1p-%89-loc (s85)
  (s '%89 (@log1p-%89-val s85) (@log1p-%88-loc s85)))
(defund @log1p-succ85-lab (s85)
  (declare (ignore s85))
  '%90)

(defund @log1p-succ85-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%90 mem loc))
(defund @log1p-%89-rev (mem loc pred)
  (@log1p-succ85-rev mem (s '%89 (fsub-double (g '%86 loc) (g '%88 loc)) loc) pred))
(defund @log1p-%88-rev (mem loc pred)
  (@log1p-%89-rev mem (s '%88 (fsub-double (g '%87 loc) #x3ff0000000000000) loc) pred))
(defund @log1p-%87-rev (mem loc pred)
  (@log1p-%88-rev mem (s '%87 (load-double (g '%u loc) mem) loc) pred))
(defund @log1p-%86-rev (mem loc pred)
  (@log1p-%87-rev mem (s '%86 (load-double (g '%2 loc) mem) loc) pred))

(defund @log1p-%85-rev (mem loc pred)
  (@log1p-%86-rev mem loc pred))

(defund @log1p-%85-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%86 (load-double (g '%2 loc) mem) loc))
    (loc (s '%87 (load-double (g '%u loc) mem) loc))
    (loc (s '%88 (fsub-double (g '%87 loc) #x3ff0000000000000) loc))
    (loc (s '%89 (fsub-double (g '%86 loc) (g '%88 loc)) loc))
    (succ '%90))
  (mv succ mem loc)))

(defruled @log1p-%85-expand-bb
  (equal (@log1p-%85-bb mem loc pred)
         (@log1p-%85-rev mem loc pred))
  :enable (@log1p-%85-bb @log1p-%85-rev
    @log1p-%86-rev
    @log1p-%87-rev
    @log1p-%88-rev
    @log1p-%89-rev
    @log1p-succ85-rev)
  :disable s-diff-s)

(defund @log1p-%90-mem (s90)
  (car s90))
(defund @log1p-%90-loc (s90)
  (cadr s90))
(defund @log1p-%90-pred (s90)
  (caddr s90))
(defund @log1p-%91-val (s90)
  (case (@log1p-%90-pred s90) (%80 (g '%84 (@log1p-%90-loc s90))) (%85 (g '%89 (@log1p-%90-loc s90)))))
(defund @log1p-%91-loc (s90)
  (s '%91 (@log1p-%91-val s90) (@log1p-%90-loc s90)))
(defund @log1p-m90.1-mem (s90)
  (store-double (g '%91 (@log1p-%91-loc s90)) (g '%c (@log1p-%91-loc s90)) (@log1p-%90-mem s90)))
(defund @log1p-%92-val (s90)
  (load-double (g '%u (@log1p-%91-loc s90)) (@log1p-m90.1-mem s90)))
(defund @log1p-%92-loc (s90)
  (s '%92 (@log1p-%92-val s90) (@log1p-%91-loc s90)))
(defund @log1p-%93-val (s90)
  (load-double (g '%c (@log1p-%92-loc s90)) (@log1p-m90.1-mem s90)))
(defund @log1p-%93-loc (s90)
  (s '%93 (@log1p-%93-val s90) (@log1p-%92-loc s90)))
(defund @log1p-%94-val (s90)
  (fdiv-double (g '%93 (@log1p-%93-loc s90)) (g '%92 (@log1p-%93-loc s90))))
(defund @log1p-%94-loc (s90)
  (s '%94 (@log1p-%94-val s90) (@log1p-%93-loc s90)))
(defund @log1p-m90.2-mem (s90)
  (store-double (g '%94 (@log1p-%94-loc s90)) (g '%c (@log1p-%94-loc s90)) (@log1p-m90.1-mem s90)))
(defund @log1p-succ90-lab (s90)
  (declare (ignore s90))
  '%103)

(defund @log1p-succ90-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%103 mem loc))
(defund @log1p-m90.2-rev (mem loc pred)
  (@log1p-succ90-rev (store-double (g '%94 loc) (g '%c loc) mem) loc pred))
(defund @log1p-%94-rev (mem loc pred)
  (@log1p-m90.2-rev mem (s '%94 (fdiv-double (g '%93 loc) (g '%92 loc)) loc) pred))
(defund @log1p-%93-rev (mem loc pred)
  (@log1p-%94-rev mem (s '%93 (load-double (g '%c loc) mem) loc) pred))
(defund @log1p-%92-rev (mem loc pred)
  (@log1p-%93-rev mem (s '%92 (load-double (g '%u loc) mem) loc) pred))
(defund @log1p-m90.1-rev (mem loc pred)
  (@log1p-%92-rev (store-double (g '%91 loc) (g '%c loc) mem) loc pred))
(defund @log1p-%91-rev (mem loc pred)
  (@log1p-m90.1-rev mem (s '%91 (case pred (%80 (g '%84 loc)) (%85 (g '%89 loc))) loc) pred))

(defund @log1p-%90-rev (mem loc pred)
  (@log1p-%91-rev mem loc pred))

(defund @log1p-%90-bb (mem loc pred)
  (b* (
    (loc (s '%91 (case pred (%80 (g '%84 loc)) (%85 (g '%89 loc))) loc))
    (mem (store-double (g '%91 loc) (g '%c loc) mem))
    (loc (s '%92 (load-double (g '%u loc) mem) loc))
    (loc (s '%93 (load-double (g '%c loc) mem) loc))
    (loc (s '%94 (fdiv-double (g '%93 loc) (g '%92 loc)) loc))
    (mem (store-double (g '%94 loc) (g '%c loc) mem))
    (succ '%103))
  (mv succ mem loc)))

(defruled @log1p-%90-expand-bb
  (equal (@log1p-%90-bb mem loc pred)
         (@log1p-%90-rev mem loc pred))
  :enable (@log1p-%90-bb @log1p-%90-rev
    @log1p-%91-rev
    @log1p-m90.1-rev
    @log1p-%92-rev
    @log1p-%93-rev
    @log1p-%94-rev
    @log1p-m90.2-rev
    @log1p-succ90-rev)
  :disable s-diff-s)

(defund @log1p-%95-mem (s95)
  (car s95))
(defund @log1p-%95-loc (s95)
  (cadr s95))
(defund @log1p-%95-pred (s95)
  (caddr s95))
(defund @log1p-%96-val (s95)
  (load-double (g '%2 (@log1p-%95-loc s95)) (@log1p-%95-mem s95)))
(defund @log1p-%96-loc (s95)
  (s '%96 (@log1p-%96-val s95) (@log1p-%95-loc s95)))
(defund @log1p-m95.1-mem (s95)
  (store-double (g '%96 (@log1p-%96-loc s95)) (g '%u (@log1p-%96-loc s95)) (@log1p-%95-mem s95)))
(defund @log1p-%97-val (s95)
  (bitcast-double*-to-i32* (g '%u (@log1p-%96-loc s95))))
(defund @log1p-%97-loc (s95)
  (s '%97 (@log1p-%97-val s95) (@log1p-%96-loc s95)))
(defund @log1p-%98-val (s95)
  (getelementptr-i32 (g '%97 (@log1p-%97-loc s95)) 1))
(defund @log1p-%98-loc (s95)
  (s '%98 (@log1p-%98-val s95) (@log1p-%97-loc s95)))
(defund @log1p-%99-val (s95)
  (load-i32 (g '%98 (@log1p-%98-loc s95)) (@log1p-m95.1-mem s95)))
(defund @log1p-%99-loc (s95)
  (s '%99 (@log1p-%99-val s95) (@log1p-%98-loc s95)))
(defund @log1p-m95.2-mem (s95)
  (store-i32 (g '%99 (@log1p-%99-loc s95)) (g '%hu (@log1p-%99-loc s95)) (@log1p-m95.1-mem s95)))
(defund @log1p-%100-val (s95)
  (load-i32 (g '%hu (@log1p-%99-loc s95)) (@log1p-m95.2-mem s95)))
(defund @log1p-%100-loc (s95)
  (s '%100 (@log1p-%100-val s95) (@log1p-%99-loc s95)))
(defund @log1p-%101-val (s95)
  (ashr-i32 (g '%100 (@log1p-%100-loc s95)) 20))
(defund @log1p-%101-loc (s95)
  (s '%101 (@log1p-%101-val s95) (@log1p-%100-loc s95)))
(defund @log1p-%102-val (s95)
  (sub-i32 (g '%101 (@log1p-%101-loc s95)) 1023))
(defund @log1p-%102-loc (s95)
  (s '%102 (@log1p-%102-val s95) (@log1p-%101-loc s95)))
(defund @log1p-m95.3-mem (s95)
  (store-i32 (g '%102 (@log1p-%102-loc s95)) (g '%k (@log1p-%102-loc s95)) (@log1p-m95.2-mem s95)))
(defund @log1p-m95.4-mem (s95)
  (store-double #x0000000000000000 (g '%c (@log1p-%102-loc s95)) (@log1p-m95.3-mem s95)))
(defund @log1p-succ95-lab (s95)
  (declare (ignore s95))
  '%103)

(defund @log1p-succ95-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%103 mem loc))
(defund @log1p-m95.4-rev (mem loc pred)
  (@log1p-succ95-rev (store-double #x0000000000000000 (g '%c loc) mem) loc pred))
(defund @log1p-m95.3-rev (mem loc pred)
  (@log1p-m95.4-rev (store-i32 (g '%102 loc) (g '%k loc) mem) loc pred))
(defund @log1p-%102-rev (mem loc pred)
  (@log1p-m95.3-rev mem (s '%102 (sub-i32 (g '%101 loc) 1023) loc) pred))
(defund @log1p-%101-rev (mem loc pred)
  (@log1p-%102-rev mem (s '%101 (ashr-i32 (g '%100 loc) 20) loc) pred))
(defund @log1p-%100-rev (mem loc pred)
  (@log1p-%101-rev mem (s '%100 (load-i32 (g '%hu loc) mem) loc) pred))
(defund @log1p-m95.2-rev (mem loc pred)
  (@log1p-%100-rev (store-i32 (g '%99 loc) (g '%hu loc) mem) loc pred))
(defund @log1p-%99-rev (mem loc pred)
  (@log1p-m95.2-rev mem (s '%99 (load-i32 (g '%98 loc) mem) loc) pred))
(defund @log1p-%98-rev (mem loc pred)
  (@log1p-%99-rev mem (s '%98 (getelementptr-i32 (g '%97 loc) 1) loc) pred))
(defund @log1p-%97-rev (mem loc pred)
  (@log1p-%98-rev mem (s '%97 (bitcast-double*-to-i32* (g '%u loc)) loc) pred))
(defund @log1p-m95.1-rev (mem loc pred)
  (@log1p-%97-rev (store-double (g '%96 loc) (g '%u loc) mem) loc pred))
(defund @log1p-%96-rev (mem loc pred)
  (@log1p-m95.1-rev mem (s '%96 (load-double (g '%2 loc) mem) loc) pred))

(defund @log1p-%95-rev (mem loc pred)
  (@log1p-%96-rev mem loc pred))

(defund @log1p-%95-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%96 (load-double (g '%2 loc) mem) loc))
    (mem (store-double (g '%96 loc) (g '%u loc) mem))
    (loc (s '%97 (bitcast-double*-to-i32* (g '%u loc)) loc))
    (loc (s '%98 (getelementptr-i32 (g '%97 loc) 1) loc))
    (loc (s '%99 (load-i32 (g '%98 loc) mem) loc))
    (mem (store-i32 (g '%99 loc) (g '%hu loc) mem))
    (loc (s '%100 (load-i32 (g '%hu loc) mem) loc))
    (loc (s '%101 (ashr-i32 (g '%100 loc) 20) loc))
    (loc (s '%102 (sub-i32 (g '%101 loc) 1023) loc))
    (mem (store-i32 (g '%102 loc) (g '%k loc) mem))
    (mem (store-double #x0000000000000000 (g '%c loc) mem))
    (succ '%103))
  (mv succ mem loc)))

(defruled @log1p-%95-expand-bb
  (equal (@log1p-%95-bb mem loc pred)
         (@log1p-%95-rev mem loc pred))
  :enable (@log1p-%95-bb @log1p-%95-rev
    @log1p-%96-rev
    @log1p-m95.1-rev
    @log1p-%97-rev
    @log1p-%98-rev
    @log1p-%99-rev
    @log1p-m95.2-rev
    @log1p-%100-rev
    @log1p-%101-rev
    @log1p-%102-rev
    @log1p-m95.3-rev
    @log1p-m95.4-rev
    @log1p-succ95-rev)
  :disable s-diff-s)

(defund @log1p-%103-mem (s103)
  (car s103))
(defund @log1p-%103-loc (s103)
  (cadr s103))
(defund @log1p-%103-pred (s103)
  (caddr s103))
(defund @log1p-%104-val (s103)
  (load-i32 (g '%hu (@log1p-%103-loc s103)) (@log1p-%103-mem s103)))
(defund @log1p-%104-loc (s103)
  (s '%104 (@log1p-%104-val s103) (@log1p-%103-loc s103)))
(defund @log1p-%105-val (s103)
  (and-i32 (g '%104 (@log1p-%104-loc s103)) 1048575))
(defund @log1p-%105-loc (s103)
  (s '%105 (@log1p-%105-val s103) (@log1p-%104-loc s103)))
(defund @log1p-m103.1-mem (s103)
  (store-i32 (g '%105 (@log1p-%105-loc s103)) (g '%hu (@log1p-%105-loc s103)) (@log1p-%103-mem s103)))
(defund @log1p-%106-val (s103)
  (load-i32 (g '%hu (@log1p-%105-loc s103)) (@log1p-m103.1-mem s103)))
(defund @log1p-%106-loc (s103)
  (s '%106 (@log1p-%106-val s103) (@log1p-%105-loc s103)))
(defund @log1p-%107-val (s103)
  (icmp-slt-i32 (g '%106 (@log1p-%106-loc s103)) 434334))
(defund @log1p-%107-loc (s103)
  (s '%107 (@log1p-%107-val s103) (@log1p-%106-loc s103)))
(defund @log1p-succ103-lab (s103)
  (case (g '%107 (@log1p-%107-loc s103)) (-1 '%108) (0 '%113)))

(defund @log1p-succ103-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%107 loc) (-1 '%108) (0 '%113)) mem loc))
(defund @log1p-%107-rev (mem loc pred)
  (@log1p-succ103-rev mem (s '%107 (icmp-slt-i32 (g '%106 loc) 434334) loc) pred))
(defund @log1p-%106-rev (mem loc pred)
  (@log1p-%107-rev mem (s '%106 (load-i32 (g '%hu loc) mem) loc) pred))
(defund @log1p-m103.1-rev (mem loc pred)
  (@log1p-%106-rev (store-i32 (g '%105 loc) (g '%hu loc) mem) loc pred))
(defund @log1p-%105-rev (mem loc pred)
  (@log1p-m103.1-rev mem (s '%105 (and-i32 (g '%104 loc) 1048575) loc) pred))
(defund @log1p-%104-rev (mem loc pred)
  (@log1p-%105-rev mem (s '%104 (load-i32 (g '%hu loc) mem) loc) pred))

(defund @log1p-%103-rev (mem loc pred)
  (@log1p-%104-rev mem loc pred))

(defund @log1p-%103-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%104 (load-i32 (g '%hu loc) mem) loc))
    (loc (s '%105 (and-i32 (g '%104 loc) 1048575) loc))
    (mem (store-i32 (g '%105 loc) (g '%hu loc) mem))
    (loc (s '%106 (load-i32 (g '%hu loc) mem) loc))
    (loc (s '%107 (icmp-slt-i32 (g '%106 loc) 434334) loc))
    (succ (case (g '%107 loc) (-1 '%108) (0 '%113))))
  (mv succ mem loc)))

(defruled @log1p-%103-expand-bb
  (equal (@log1p-%103-bb mem loc pred)
         (@log1p-%103-rev mem loc pred))
  :enable (@log1p-%103-bb @log1p-%103-rev
    @log1p-%104-rev
    @log1p-%105-rev
    @log1p-m103.1-rev
    @log1p-%106-rev
    @log1p-%107-rev
    @log1p-succ103-rev)
  :disable s-diff-s)

(defund @log1p-%108-mem (s108)
  (car s108))
(defund @log1p-%108-loc (s108)
  (cadr s108))
(defund @log1p-%108-pred (s108)
  (caddr s108))
(defund @log1p-%109-val (s108)
  (load-i32 (g '%hu (@log1p-%108-loc s108)) (@log1p-%108-mem s108)))
(defund @log1p-%109-loc (s108)
  (s '%109 (@log1p-%109-val s108) (@log1p-%108-loc s108)))
(defund @log1p-%110-val (s108)
  (or-i32 (g '%109 (@log1p-%109-loc s108)) 1072693248))
(defund @log1p-%110-loc (s108)
  (s '%110 (@log1p-%110-val s108) (@log1p-%109-loc s108)))
(defund @log1p-%111-val (s108)
  (bitcast-double*-to-i32* (g '%u (@log1p-%110-loc s108))))
(defund @log1p-%111-loc (s108)
  (s '%111 (@log1p-%111-val s108) (@log1p-%110-loc s108)))
(defund @log1p-%112-val (s108)
  (getelementptr-i32 (g '%111 (@log1p-%111-loc s108)) 1))
(defund @log1p-%112-loc (s108)
  (s '%112 (@log1p-%112-val s108) (@log1p-%111-loc s108)))
(defund @log1p-m108.1-mem (s108)
  (store-i32 (g '%110 (@log1p-%112-loc s108)) (g '%112 (@log1p-%112-loc s108)) (@log1p-%108-mem s108)))
(defund @log1p-succ108-lab (s108)
  (declare (ignore s108))
  '%123)

(defund @log1p-succ108-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%123 mem loc))
(defund @log1p-m108.1-rev (mem loc pred)
  (@log1p-succ108-rev (store-i32 (g '%110 loc) (g '%112 loc) mem) loc pred))
(defund @log1p-%112-rev (mem loc pred)
  (@log1p-m108.1-rev mem (s '%112 (getelementptr-i32 (g '%111 loc) 1) loc) pred))
(defund @log1p-%111-rev (mem loc pred)
  (@log1p-%112-rev mem (s '%111 (bitcast-double*-to-i32* (g '%u loc)) loc) pred))
(defund @log1p-%110-rev (mem loc pred)
  (@log1p-%111-rev mem (s '%110 (or-i32 (g '%109 loc) 1072693248) loc) pred))
(defund @log1p-%109-rev (mem loc pred)
  (@log1p-%110-rev mem (s '%109 (load-i32 (g '%hu loc) mem) loc) pred))

(defund @log1p-%108-rev (mem loc pred)
  (@log1p-%109-rev mem loc pred))

(defund @log1p-%108-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%109 (load-i32 (g '%hu loc) mem) loc))
    (loc (s '%110 (or-i32 (g '%109 loc) 1072693248) loc))
    (loc (s '%111 (bitcast-double*-to-i32* (g '%u loc)) loc))
    (loc (s '%112 (getelementptr-i32 (g '%111 loc) 1) loc))
    (mem (store-i32 (g '%110 loc) (g '%112 loc) mem))
    (succ '%123))
  (mv succ mem loc)))

(defruled @log1p-%108-expand-bb
  (equal (@log1p-%108-bb mem loc pred)
         (@log1p-%108-rev mem loc pred))
  :enable (@log1p-%108-bb @log1p-%108-rev
    @log1p-%109-rev
    @log1p-%110-rev
    @log1p-%111-rev
    @log1p-%112-rev
    @log1p-m108.1-rev
    @log1p-succ108-rev)
  :disable s-diff-s)

(defund @log1p-%113-mem (s113)
  (car s113))
(defund @log1p-%113-loc (s113)
  (cadr s113))
(defund @log1p-%113-pred (s113)
  (caddr s113))
(defund @log1p-%114-val (s113)
  (load-i32 (g '%k (@log1p-%113-loc s113)) (@log1p-%113-mem s113)))
(defund @log1p-%114-loc (s113)
  (s '%114 (@log1p-%114-val s113) (@log1p-%113-loc s113)))
(defund @log1p-%115-val (s113)
  (add-i32 (g '%114 (@log1p-%114-loc s113)) 1))
(defund @log1p-%115-loc (s113)
  (s '%115 (@log1p-%115-val s113) (@log1p-%114-loc s113)))
(defund @log1p-m113.1-mem (s113)
  (store-i32 (g '%115 (@log1p-%115-loc s113)) (g '%k (@log1p-%115-loc s113)) (@log1p-%113-mem s113)))
(defund @log1p-%116-val (s113)
  (load-i32 (g '%hu (@log1p-%115-loc s113)) (@log1p-m113.1-mem s113)))
(defund @log1p-%116-loc (s113)
  (s '%116 (@log1p-%116-val s113) (@log1p-%115-loc s113)))
(defund @log1p-%117-val (s113)
  (or-i32 (g '%116 (@log1p-%116-loc s113)) 1071644672))
(defund @log1p-%117-loc (s113)
  (s '%117 (@log1p-%117-val s113) (@log1p-%116-loc s113)))
(defund @log1p-%118-val (s113)
  (bitcast-double*-to-i32* (g '%u (@log1p-%117-loc s113))))
(defund @log1p-%118-loc (s113)
  (s '%118 (@log1p-%118-val s113) (@log1p-%117-loc s113)))
(defund @log1p-%119-val (s113)
  (getelementptr-i32 (g '%118 (@log1p-%118-loc s113)) 1))
(defund @log1p-%119-loc (s113)
  (s '%119 (@log1p-%119-val s113) (@log1p-%118-loc s113)))
(defund @log1p-m113.2-mem (s113)
  (store-i32 (g '%117 (@log1p-%119-loc s113)) (g '%119 (@log1p-%119-loc s113)) (@log1p-m113.1-mem s113)))
(defund @log1p-%120-val (s113)
  (load-i32 (g '%hu (@log1p-%119-loc s113)) (@log1p-m113.2-mem s113)))
(defund @log1p-%120-loc (s113)
  (s '%120 (@log1p-%120-val s113) (@log1p-%119-loc s113)))
(defund @log1p-%121-val (s113)
  (sub-i32 1048576 (g '%120 (@log1p-%120-loc s113))))
(defund @log1p-%121-loc (s113)
  (s '%121 (@log1p-%121-val s113) (@log1p-%120-loc s113)))
(defund @log1p-%122-val (s113)
  (ashr-i32 (g '%121 (@log1p-%121-loc s113)) 2))
(defund @log1p-%122-loc (s113)
  (s '%122 (@log1p-%122-val s113) (@log1p-%121-loc s113)))
(defund @log1p-m113.3-mem (s113)
  (store-i32 (g '%122 (@log1p-%122-loc s113)) (g '%hu (@log1p-%122-loc s113)) (@log1p-m113.2-mem s113)))
(defund @log1p-succ113-lab (s113)
  (declare (ignore s113))
  '%123)

(defund @log1p-succ113-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%123 mem loc))
(defund @log1p-m113.3-rev (mem loc pred)
  (@log1p-succ113-rev (store-i32 (g '%122 loc) (g '%hu loc) mem) loc pred))
(defund @log1p-%122-rev (mem loc pred)
  (@log1p-m113.3-rev mem (s '%122 (ashr-i32 (g '%121 loc) 2) loc) pred))
(defund @log1p-%121-rev (mem loc pred)
  (@log1p-%122-rev mem (s '%121 (sub-i32 1048576 (g '%120 loc)) loc) pred))
(defund @log1p-%120-rev (mem loc pred)
  (@log1p-%121-rev mem (s '%120 (load-i32 (g '%hu loc) mem) loc) pred))
(defund @log1p-m113.2-rev (mem loc pred)
  (@log1p-%120-rev (store-i32 (g '%117 loc) (g '%119 loc) mem) loc pred))
(defund @log1p-%119-rev (mem loc pred)
  (@log1p-m113.2-rev mem (s '%119 (getelementptr-i32 (g '%118 loc) 1) loc) pred))
(defund @log1p-%118-rev (mem loc pred)
  (@log1p-%119-rev mem (s '%118 (bitcast-double*-to-i32* (g '%u loc)) loc) pred))
(defund @log1p-%117-rev (mem loc pred)
  (@log1p-%118-rev mem (s '%117 (or-i32 (g '%116 loc) 1071644672) loc) pred))
(defund @log1p-%116-rev (mem loc pred)
  (@log1p-%117-rev mem (s '%116 (load-i32 (g '%hu loc) mem) loc) pred))
(defund @log1p-m113.1-rev (mem loc pred)
  (@log1p-%116-rev (store-i32 (g '%115 loc) (g '%k loc) mem) loc pred))
(defund @log1p-%115-rev (mem loc pred)
  (@log1p-m113.1-rev mem (s '%115 (add-i32 (g '%114 loc) 1) loc) pred))
(defund @log1p-%114-rev (mem loc pred)
  (@log1p-%115-rev mem (s '%114 (load-i32 (g '%k loc) mem) loc) pred))

(defund @log1p-%113-rev (mem loc pred)
  (@log1p-%114-rev mem loc pred))

(defund @log1p-%113-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%114 (load-i32 (g '%k loc) mem) loc))
    (loc (s '%115 (add-i32 (g '%114 loc) 1) loc))
    (mem (store-i32 (g '%115 loc) (g '%k loc) mem))
    (loc (s '%116 (load-i32 (g '%hu loc) mem) loc))
    (loc (s '%117 (or-i32 (g '%116 loc) 1071644672) loc))
    (loc (s '%118 (bitcast-double*-to-i32* (g '%u loc)) loc))
    (loc (s '%119 (getelementptr-i32 (g '%118 loc) 1) loc))
    (mem (store-i32 (g '%117 loc) (g '%119 loc) mem))
    (loc (s '%120 (load-i32 (g '%hu loc) mem) loc))
    (loc (s '%121 (sub-i32 1048576 (g '%120 loc)) loc))
    (loc (s '%122 (ashr-i32 (g '%121 loc) 2) loc))
    (mem (store-i32 (g '%122 loc) (g '%hu loc) mem))
    (succ '%123))
  (mv succ mem loc)))

(defruled @log1p-%113-expand-bb
  (equal (@log1p-%113-bb mem loc pred)
         (@log1p-%113-rev mem loc pred))
  :enable (@log1p-%113-bb @log1p-%113-rev
    @log1p-%114-rev
    @log1p-%115-rev
    @log1p-m113.1-rev
    @log1p-%116-rev
    @log1p-%117-rev
    @log1p-%118-rev
    @log1p-%119-rev
    @log1p-m113.2-rev
    @log1p-%120-rev
    @log1p-%121-rev
    @log1p-%122-rev
    @log1p-m113.3-rev
    @log1p-succ113-rev)
  :disable s-diff-s)

(defund @log1p-%123-mem (s123)
  (car s123))
(defund @log1p-%123-loc (s123)
  (cadr s123))
(defund @log1p-%123-pred (s123)
  (caddr s123))
(defund @log1p-%124-val (s123)
  (load-double (g '%u (@log1p-%123-loc s123)) (@log1p-%123-mem s123)))
(defund @log1p-%124-loc (s123)
  (s '%124 (@log1p-%124-val s123) (@log1p-%123-loc s123)))
(defund @log1p-%125-val (s123)
  (fsub-double (g '%124 (@log1p-%124-loc s123)) #x3ff0000000000000))
(defund @log1p-%125-loc (s123)
  (s '%125 (@log1p-%125-val s123) (@log1p-%124-loc s123)))
(defund @log1p-m123.1-mem (s123)
  (store-double (g '%125 (@log1p-%125-loc s123)) (g '%f (@log1p-%125-loc s123)) (@log1p-%123-mem s123)))
(defund @log1p-succ123-lab (s123)
  (declare (ignore s123))
  '%126)

(defund @log1p-succ123-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%126 mem loc))
(defund @log1p-m123.1-rev (mem loc pred)
  (@log1p-succ123-rev (store-double (g '%125 loc) (g '%f loc) mem) loc pred))
(defund @log1p-%125-rev (mem loc pred)
  (@log1p-m123.1-rev mem (s '%125 (fsub-double (g '%124 loc) #x3ff0000000000000) loc) pred))
(defund @log1p-%124-rev (mem loc pred)
  (@log1p-%125-rev mem (s '%124 (load-double (g '%u loc) mem) loc) pred))

(defund @log1p-%123-rev (mem loc pred)
  (@log1p-%124-rev mem loc pred))

(defund @log1p-%123-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%124 (load-double (g '%u loc) mem) loc))
    (loc (s '%125 (fsub-double (g '%124 loc) #x3ff0000000000000) loc))
    (mem (store-double (g '%125 loc) (g '%f loc) mem))
    (succ '%126))
  (mv succ mem loc)))

(defruled @log1p-%123-expand-bb
  (equal (@log1p-%123-bb mem loc pred)
         (@log1p-%123-rev mem loc pred))
  :enable (@log1p-%123-bb @log1p-%123-rev
    @log1p-%124-rev
    @log1p-%125-rev
    @log1p-m123.1-rev
    @log1p-succ123-rev)
  :disable s-diff-s)

(defund @log1p-%126-mem (s126)
  (car s126))
(defund @log1p-%126-loc (s126)
  (cadr s126))
(defund @log1p-%126-pred (s126)
  (caddr s126))
(defund @log1p-%127-val (s126)
  (load-double (g '%f (@log1p-%126-loc s126)) (@log1p-%126-mem s126)))
(defund @log1p-%127-loc (s126)
  (s '%127 (@log1p-%127-val s126) (@log1p-%126-loc s126)))
(defund @log1p-%128-val (s126)
  (fmul-double #x3fe0000000000000 (g '%127 (@log1p-%127-loc s126))))
(defund @log1p-%128-loc (s126)
  (s '%128 (@log1p-%128-val s126) (@log1p-%127-loc s126)))
(defund @log1p-%129-val (s126)
  (load-double (g '%f (@log1p-%128-loc s126)) (@log1p-%126-mem s126)))
(defund @log1p-%129-loc (s126)
  (s '%129 (@log1p-%129-val s126) (@log1p-%128-loc s126)))
(defund @log1p-%130-val (s126)
  (fmul-double (g '%128 (@log1p-%129-loc s126)) (g '%129 (@log1p-%129-loc s126))))
(defund @log1p-%130-loc (s126)
  (s '%130 (@log1p-%130-val s126) (@log1p-%129-loc s126)))
(defund @log1p-m126.1-mem (s126)
  (store-double (g '%130 (@log1p-%130-loc s126)) (g '%hfsq (@log1p-%130-loc s126)) (@log1p-%126-mem s126)))
(defund @log1p-%131-val (s126)
  (load-i32 (g '%hu (@log1p-%130-loc s126)) (@log1p-m126.1-mem s126)))
(defund @log1p-%131-loc (s126)
  (s '%131 (@log1p-%131-val s126) (@log1p-%130-loc s126)))
(defund @log1p-%132-val (s126)
  (icmp-eq-i32 (g '%131 (@log1p-%131-loc s126)) 0))
(defund @log1p-%132-loc (s126)
  (s '%132 (@log1p-%132-val s126) (@log1p-%131-loc s126)))
(defund @log1p-succ126-lab (s126)
  (case (g '%132 (@log1p-%132-loc s126)) (-1 '%133) (0 '%179)))

(defund @log1p-succ126-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%132 loc) (-1 '%133) (0 '%179)) mem loc))
(defund @log1p-%132-rev (mem loc pred)
  (@log1p-succ126-rev mem (s '%132 (icmp-eq-i32 (g '%131 loc) 0) loc) pred))
(defund @log1p-%131-rev (mem loc pred)
  (@log1p-%132-rev mem (s '%131 (load-i32 (g '%hu loc) mem) loc) pred))
(defund @log1p-m126.1-rev (mem loc pred)
  (@log1p-%131-rev (store-double (g '%130 loc) (g '%hfsq loc) mem) loc pred))
(defund @log1p-%130-rev (mem loc pred)
  (@log1p-m126.1-rev mem (s '%130 (fmul-double (g '%128 loc) (g '%129 loc)) loc) pred))
(defund @log1p-%129-rev (mem loc pred)
  (@log1p-%130-rev mem (s '%129 (load-double (g '%f loc) mem) loc) pred))
(defund @log1p-%128-rev (mem loc pred)
  (@log1p-%129-rev mem (s '%128 (fmul-double #x3fe0000000000000 (g '%127 loc)) loc) pred))
(defund @log1p-%127-rev (mem loc pred)
  (@log1p-%128-rev mem (s '%127 (load-double (g '%f loc) mem) loc) pred))

(defund @log1p-%126-rev (mem loc pred)
  (@log1p-%127-rev mem loc pred))

(defund @log1p-%126-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%127 (load-double (g '%f loc) mem) loc))
    (loc (s '%128 (fmul-double #x3fe0000000000000 (g '%127 loc)) loc))
    (loc (s '%129 (load-double (g '%f loc) mem) loc))
    (loc (s '%130 (fmul-double (g '%128 loc) (g '%129 loc)) loc))
    (mem (store-double (g '%130 loc) (g '%hfsq loc) mem))
    (loc (s '%131 (load-i32 (g '%hu loc) mem) loc))
    (loc (s '%132 (icmp-eq-i32 (g '%131 loc) 0) loc))
    (succ (case (g '%132 loc) (-1 '%133) (0 '%179))))
  (mv succ mem loc)))

(defruled @log1p-%126-expand-bb
  (equal (@log1p-%126-bb mem loc pred)
         (@log1p-%126-rev mem loc pred))
  :enable (@log1p-%126-bb @log1p-%126-rev
    @log1p-%127-rev
    @log1p-%128-rev
    @log1p-%129-rev
    @log1p-%130-rev
    @log1p-m126.1-rev
    @log1p-%131-rev
    @log1p-%132-rev
    @log1p-succ126-rev)
  :disable s-diff-s)

(defund @log1p-%133-mem (s133)
  (car s133))
(defund @log1p-%133-loc (s133)
  (cadr s133))
(defund @log1p-%133-pred (s133)
  (caddr s133))
(defund @log1p-%134-val (s133)
  (load-double (g '%f (@log1p-%133-loc s133)) (@log1p-%133-mem s133)))
(defund @log1p-%134-loc (s133)
  (s '%134 (@log1p-%134-val s133) (@log1p-%133-loc s133)))
(defund @log1p-%135-val (s133)
  (load-double '(zero . 0) (@log1p-%133-mem s133)))
(defund @log1p-%135-loc (s133)
  (s '%135 (@log1p-%135-val s133) (@log1p-%134-loc s133)))
(defund @log1p-%136-val (s133)
  (fcmp-oeq-double (g '%134 (@log1p-%135-loc s133)) (g '%135 (@log1p-%135-loc s133))))
(defund @log1p-%136-loc (s133)
  (s '%136 (@log1p-%136-val s133) (@log1p-%135-loc s133)))
(defund @log1p-succ133-lab (s133)
  (case (g '%136 (@log1p-%136-loc s133)) (-1 '%137) (0 '%153)))

(defund @log1p-succ133-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%136 loc) (-1 '%137) (0 '%153)) mem loc))
(defund @log1p-%136-rev (mem loc pred)
  (@log1p-succ133-rev mem (s '%136 (fcmp-oeq-double (g '%134 loc) (g '%135 loc)) loc) pred))
(defund @log1p-%135-rev (mem loc pred)
  (@log1p-%136-rev mem (s '%135 (load-double '(zero . 0) mem) loc) pred))
(defund @log1p-%134-rev (mem loc pred)
  (@log1p-%135-rev mem (s '%134 (load-double (g '%f loc) mem) loc) pred))

(defund @log1p-%133-rev (mem loc pred)
  (@log1p-%134-rev mem loc pred))

(defund @log1p-%133-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%134 (load-double (g '%f loc) mem) loc))
    (loc (s '%135 (load-double '(zero . 0) mem) loc))
    (loc (s '%136 (fcmp-oeq-double (g '%134 loc) (g '%135 loc)) loc))
    (succ (case (g '%136 loc) (-1 '%137) (0 '%153))))
  (mv succ mem loc)))

(defruled @log1p-%133-expand-bb
  (equal (@log1p-%133-bb mem loc pred)
         (@log1p-%133-rev mem loc pred))
  :enable (@log1p-%133-bb @log1p-%133-rev
    @log1p-%134-rev
    @log1p-%135-rev
    @log1p-%136-rev
    @log1p-succ133-rev)
  :disable s-diff-s)

(defund @log1p-%137-mem (s137)
  (car s137))
(defund @log1p-%137-loc (s137)
  (cadr s137))
(defund @log1p-%137-pred (s137)
  (caddr s137))
(defund @log1p-%138-val (s137)
  (load-i32 (g '%k (@log1p-%137-loc s137)) (@log1p-%137-mem s137)))
(defund @log1p-%138-loc (s137)
  (s '%138 (@log1p-%138-val s137) (@log1p-%137-loc s137)))
(defund @log1p-%139-val (s137)
  (icmp-eq-i32 (g '%138 (@log1p-%138-loc s137)) 0))
(defund @log1p-%139-loc (s137)
  (s '%139 (@log1p-%139-val s137) (@log1p-%138-loc s137)))
(defund @log1p-succ137-lab (s137)
  (case (g '%139 (@log1p-%139-loc s137)) (-1 '%140) (0 '%142)))

(defund @log1p-succ137-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%139 loc) (-1 '%140) (0 '%142)) mem loc))
(defund @log1p-%139-rev (mem loc pred)
  (@log1p-succ137-rev mem (s '%139 (icmp-eq-i32 (g '%138 loc) 0) loc) pred))
(defund @log1p-%138-rev (mem loc pred)
  (@log1p-%139-rev mem (s '%138 (load-i32 (g '%k loc) mem) loc) pred))

(defund @log1p-%137-rev (mem loc pred)
  (@log1p-%138-rev mem loc pred))

(defund @log1p-%137-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%138 (load-i32 (g '%k loc) mem) loc))
    (loc (s '%139 (icmp-eq-i32 (g '%138 loc) 0) loc))
    (succ (case (g '%139 loc) (-1 '%140) (0 '%142))))
  (mv succ mem loc)))

(defruled @log1p-%137-expand-bb
  (equal (@log1p-%137-bb mem loc pred)
         (@log1p-%137-rev mem loc pred))
  :enable (@log1p-%137-bb @log1p-%137-rev
    @log1p-%138-rev
    @log1p-%139-rev
    @log1p-succ137-rev)
  :disable s-diff-s)

(defund @log1p-%140-mem (s140)
  (car s140))
(defund @log1p-%140-loc (s140)
  (cadr s140))
(defund @log1p-%140-pred (s140)
  (caddr s140))
(defund @log1p-%141-val (s140)
  (load-double '(zero . 0) (@log1p-%140-mem s140)))
(defund @log1p-%141-loc (s140)
  (s '%141 (@log1p-%141-val s140) (@log1p-%140-loc s140)))
(defund @log1p-m140.1-mem (s140)
  (store-double (g '%141 (@log1p-%141-loc s140)) (g '%1 (@log1p-%141-loc s140)) (@log1p-%140-mem s140)))
(defund @log1p-succ140-lab (s140)
  (declare (ignore s140))
  '%239)

(defund @log1p-succ140-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%239 mem loc))
(defund @log1p-m140.1-rev (mem loc pred)
  (@log1p-succ140-rev (store-double (g '%141 loc) (g '%1 loc) mem) loc pred))
(defund @log1p-%141-rev (mem loc pred)
  (@log1p-m140.1-rev mem (s '%141 (load-double '(zero . 0) mem) loc) pred))

(defund @log1p-%140-rev (mem loc pred)
  (@log1p-%141-rev mem loc pred))

(defund @log1p-%140-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%141 (load-double '(zero . 0) mem) loc))
    (mem (store-double (g '%141 loc) (g '%1 loc) mem))
    (succ '%239))
  (mv succ mem loc)))

(defruled @log1p-%140-expand-bb
  (equal (@log1p-%140-bb mem loc pred)
         (@log1p-%140-rev mem loc pred))
  :enable (@log1p-%140-bb @log1p-%140-rev
    @log1p-%141-rev
    @log1p-m140.1-rev
    @log1p-succ140-rev)
  :disable s-diff-s)

(defund @log1p-%142-mem (s142)
  (car s142))
(defund @log1p-%142-loc (s142)
  (cadr s142))
(defund @log1p-%142-pred (s142)
  (caddr s142))
(defund @log1p-%143-val (s142)
  (load-i32 (g '%k (@log1p-%142-loc s142)) (@log1p-%142-mem s142)))
(defund @log1p-%143-loc (s142)
  (s '%143 (@log1p-%143-val s142) (@log1p-%142-loc s142)))
(defund @log1p-%144-val (s142)
  (sitofp-i32-to-double (g '%143 (@log1p-%143-loc s142))))
(defund @log1p-%144-loc (s142)
  (s '%144 (@log1p-%144-val s142) (@log1p-%143-loc s142)))
(defund @log1p-%145-val (s142)
  (fmul-double (g '%144 (@log1p-%144-loc s142)) #x3DEA39EF35793C76))
(defund @log1p-%145-loc (s142)
  (s '%145 (@log1p-%145-val s142) (@log1p-%144-loc s142)))
(defund @log1p-%146-val (s142)
  (load-double (g '%c (@log1p-%145-loc s142)) (@log1p-%142-mem s142)))
(defund @log1p-%146-loc (s142)
  (s '%146 (@log1p-%146-val s142) (@log1p-%145-loc s142)))
(defund @log1p-%147-val (s142)
  (fadd-double (g '%146 (@log1p-%146-loc s142)) (g '%145 (@log1p-%146-loc s142))))
(defund @log1p-%147-loc (s142)
  (s '%147 (@log1p-%147-val s142) (@log1p-%146-loc s142)))
(defund @log1p-m142.1-mem (s142)
  (store-double (g '%147 (@log1p-%147-loc s142)) (g '%c (@log1p-%147-loc s142)) (@log1p-%142-mem s142)))
(defund @log1p-%148-val (s142)
  (load-i32 (g '%k (@log1p-%147-loc s142)) (@log1p-m142.1-mem s142)))
(defund @log1p-%148-loc (s142)
  (s '%148 (@log1p-%148-val s142) (@log1p-%147-loc s142)))
(defund @log1p-%149-val (s142)
  (sitofp-i32-to-double (g '%148 (@log1p-%148-loc s142))))
(defund @log1p-%149-loc (s142)
  (s '%149 (@log1p-%149-val s142) (@log1p-%148-loc s142)))
(defund @log1p-%150-val (s142)
  (fmul-double (g '%149 (@log1p-%149-loc s142)) #x3FE62E42FEE00000))
(defund @log1p-%150-loc (s142)
  (s '%150 (@log1p-%150-val s142) (@log1p-%149-loc s142)))
(defund @log1p-%151-val (s142)
  (load-double (g '%c (@log1p-%150-loc s142)) (@log1p-m142.1-mem s142)))
(defund @log1p-%151-loc (s142)
  (s '%151 (@log1p-%151-val s142) (@log1p-%150-loc s142)))
(defund @log1p-%152-val (s142)
  (fadd-double (g '%150 (@log1p-%151-loc s142)) (g '%151 (@log1p-%151-loc s142))))
(defund @log1p-%152-loc (s142)
  (s '%152 (@log1p-%152-val s142) (@log1p-%151-loc s142)))
(defund @log1p-m142.2-mem (s142)
  (store-double (g '%152 (@log1p-%152-loc s142)) (g '%1 (@log1p-%152-loc s142)) (@log1p-m142.1-mem s142)))
(defund @log1p-succ142-lab (s142)
  (declare (ignore s142))
  '%239)

(defund @log1p-succ142-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%239 mem loc))
(defund @log1p-m142.2-rev (mem loc pred)
  (@log1p-succ142-rev (store-double (g '%152 loc) (g '%1 loc) mem) loc pred))
(defund @log1p-%152-rev (mem loc pred)
  (@log1p-m142.2-rev mem (s '%152 (fadd-double (g '%150 loc) (g '%151 loc)) loc) pred))
(defund @log1p-%151-rev (mem loc pred)
  (@log1p-%152-rev mem (s '%151 (load-double (g '%c loc) mem) loc) pred))
(defund @log1p-%150-rev (mem loc pred)
  (@log1p-%151-rev mem (s '%150 (fmul-double (g '%149 loc) #x3FE62E42FEE00000) loc) pred))
(defund @log1p-%149-rev (mem loc pred)
  (@log1p-%150-rev mem (s '%149 (sitofp-i32-to-double (g '%148 loc)) loc) pred))
(defund @log1p-%148-rev (mem loc pred)
  (@log1p-%149-rev mem (s '%148 (load-i32 (g '%k loc) mem) loc) pred))
(defund @log1p-m142.1-rev (mem loc pred)
  (@log1p-%148-rev (store-double (g '%147 loc) (g '%c loc) mem) loc pred))
(defund @log1p-%147-rev (mem loc pred)
  (@log1p-m142.1-rev mem (s '%147 (fadd-double (g '%146 loc) (g '%145 loc)) loc) pred))
(defund @log1p-%146-rev (mem loc pred)
  (@log1p-%147-rev mem (s '%146 (load-double (g '%c loc) mem) loc) pred))
(defund @log1p-%145-rev (mem loc pred)
  (@log1p-%146-rev mem (s '%145 (fmul-double (g '%144 loc) #x3DEA39EF35793C76) loc) pred))
(defund @log1p-%144-rev (mem loc pred)
  (@log1p-%145-rev mem (s '%144 (sitofp-i32-to-double (g '%143 loc)) loc) pred))
(defund @log1p-%143-rev (mem loc pred)
  (@log1p-%144-rev mem (s '%143 (load-i32 (g '%k loc) mem) loc) pred))

(defund @log1p-%142-rev (mem loc pred)
  (@log1p-%143-rev mem loc pred))

(defund @log1p-%142-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%143 (load-i32 (g '%k loc) mem) loc))
    (loc (s '%144 (sitofp-i32-to-double (g '%143 loc)) loc))
    (loc (s '%145 (fmul-double (g '%144 loc) #x3DEA39EF35793C76) loc))
    (loc (s '%146 (load-double (g '%c loc) mem) loc))
    (loc (s '%147 (fadd-double (g '%146 loc) (g '%145 loc)) loc))
    (mem (store-double (g '%147 loc) (g '%c loc) mem))
    (loc (s '%148 (load-i32 (g '%k loc) mem) loc))
    (loc (s '%149 (sitofp-i32-to-double (g '%148 loc)) loc))
    (loc (s '%150 (fmul-double (g '%149 loc) #x3FE62E42FEE00000) loc))
    (loc (s '%151 (load-double (g '%c loc) mem) loc))
    (loc (s '%152 (fadd-double (g '%150 loc) (g '%151 loc)) loc))
    (mem (store-double (g '%152 loc) (g '%1 loc) mem))
    (succ '%239))
  (mv succ mem loc)))

(defruled @log1p-%142-expand-bb
  (equal (@log1p-%142-bb mem loc pred)
         (@log1p-%142-rev mem loc pred))
  :enable (@log1p-%142-bb @log1p-%142-rev
    @log1p-%143-rev
    @log1p-%144-rev
    @log1p-%145-rev
    @log1p-%146-rev
    @log1p-%147-rev
    @log1p-m142.1-rev
    @log1p-%148-rev
    @log1p-%149-rev
    @log1p-%150-rev
    @log1p-%151-rev
    @log1p-%152-rev
    @log1p-m142.2-rev
    @log1p-succ142-rev)
  :disable s-diff-s)

(defund @log1p-%153-mem (s153)
  (car s153))
(defund @log1p-%153-loc (s153)
  (cadr s153))
(defund @log1p-%153-pred (s153)
  (caddr s153))
(defund @log1p-%154-val (s153)
  (load-double (g '%hfsq (@log1p-%153-loc s153)) (@log1p-%153-mem s153)))
(defund @log1p-%154-loc (s153)
  (s '%154 (@log1p-%154-val s153) (@log1p-%153-loc s153)))
(defund @log1p-%155-val (s153)
  (load-double (g '%f (@log1p-%154-loc s153)) (@log1p-%153-mem s153)))
(defund @log1p-%155-loc (s153)
  (s '%155 (@log1p-%155-val s153) (@log1p-%154-loc s153)))
(defund @log1p-%156-val (s153)
  (fmul-double #x3FE5555555555555 (g '%155 (@log1p-%155-loc s153))))
(defund @log1p-%156-loc (s153)
  (s '%156 (@log1p-%156-val s153) (@log1p-%155-loc s153)))
(defund @log1p-%157-val (s153)
  (fsub-double #x3ff0000000000000 (g '%156 (@log1p-%156-loc s153))))
(defund @log1p-%157-loc (s153)
  (s '%157 (@log1p-%157-val s153) (@log1p-%156-loc s153)))
(defund @log1p-%158-val (s153)
  (fmul-double (g '%154 (@log1p-%157-loc s153)) (g '%157 (@log1p-%157-loc s153))))
(defund @log1p-%158-loc (s153)
  (s '%158 (@log1p-%158-val s153) (@log1p-%157-loc s153)))
(defund @log1p-m153.1-mem (s153)
  (store-double (g '%158 (@log1p-%158-loc s153)) (g '%R (@log1p-%158-loc s153)) (@log1p-%153-mem s153)))
(defund @log1p-%159-val (s153)
  (load-i32 (g '%k (@log1p-%158-loc s153)) (@log1p-m153.1-mem s153)))
(defund @log1p-%159-loc (s153)
  (s '%159 (@log1p-%159-val s153) (@log1p-%158-loc s153)))
(defund @log1p-%160-val (s153)
  (icmp-eq-i32 (g '%159 (@log1p-%159-loc s153)) 0))
(defund @log1p-%160-loc (s153)
  (s '%160 (@log1p-%160-val s153) (@log1p-%159-loc s153)))
(defund @log1p-succ153-lab (s153)
  (case (g '%160 (@log1p-%160-loc s153)) (-1 '%161) (0 '%165)))

(defund @log1p-succ153-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%160 loc) (-1 '%161) (0 '%165)) mem loc))
(defund @log1p-%160-rev (mem loc pred)
  (@log1p-succ153-rev mem (s '%160 (icmp-eq-i32 (g '%159 loc) 0) loc) pred))
(defund @log1p-%159-rev (mem loc pred)
  (@log1p-%160-rev mem (s '%159 (load-i32 (g '%k loc) mem) loc) pred))
(defund @log1p-m153.1-rev (mem loc pred)
  (@log1p-%159-rev (store-double (g '%158 loc) (g '%R loc) mem) loc pred))
(defund @log1p-%158-rev (mem loc pred)
  (@log1p-m153.1-rev mem (s '%158 (fmul-double (g '%154 loc) (g '%157 loc)) loc) pred))
(defund @log1p-%157-rev (mem loc pred)
  (@log1p-%158-rev mem (s '%157 (fsub-double #x3ff0000000000000 (g '%156 loc)) loc) pred))
(defund @log1p-%156-rev (mem loc pred)
  (@log1p-%157-rev mem (s '%156 (fmul-double #x3FE5555555555555 (g '%155 loc)) loc) pred))
(defund @log1p-%155-rev (mem loc pred)
  (@log1p-%156-rev mem (s '%155 (load-double (g '%f loc) mem) loc) pred))
(defund @log1p-%154-rev (mem loc pred)
  (@log1p-%155-rev mem (s '%154 (load-double (g '%hfsq loc) mem) loc) pred))

(defund @log1p-%153-rev (mem loc pred)
  (@log1p-%154-rev mem loc pred))

(defund @log1p-%153-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%154 (load-double (g '%hfsq loc) mem) loc))
    (loc (s '%155 (load-double (g '%f loc) mem) loc))
    (loc (s '%156 (fmul-double #x3FE5555555555555 (g '%155 loc)) loc))
    (loc (s '%157 (fsub-double #x3ff0000000000000 (g '%156 loc)) loc))
    (loc (s '%158 (fmul-double (g '%154 loc) (g '%157 loc)) loc))
    (mem (store-double (g '%158 loc) (g '%R loc) mem))
    (loc (s '%159 (load-i32 (g '%k loc) mem) loc))
    (loc (s '%160 (icmp-eq-i32 (g '%159 loc) 0) loc))
    (succ (case (g '%160 loc) (-1 '%161) (0 '%165))))
  (mv succ mem loc)))

(defruled @log1p-%153-expand-bb
  (equal (@log1p-%153-bb mem loc pred)
         (@log1p-%153-rev mem loc pred))
  :enable (@log1p-%153-bb @log1p-%153-rev
    @log1p-%154-rev
    @log1p-%155-rev
    @log1p-%156-rev
    @log1p-%157-rev
    @log1p-%158-rev
    @log1p-m153.1-rev
    @log1p-%159-rev
    @log1p-%160-rev
    @log1p-succ153-rev)
  :disable s-diff-s)

(defund @log1p-%161-mem (s161)
  (car s161))
(defund @log1p-%161-loc (s161)
  (cadr s161))
(defund @log1p-%161-pred (s161)
  (caddr s161))
(defund @log1p-%162-val (s161)
  (load-double (g '%f (@log1p-%161-loc s161)) (@log1p-%161-mem s161)))
(defund @log1p-%162-loc (s161)
  (s '%162 (@log1p-%162-val s161) (@log1p-%161-loc s161)))
(defund @log1p-%163-val (s161)
  (load-double (g '%R (@log1p-%162-loc s161)) (@log1p-%161-mem s161)))
(defund @log1p-%163-loc (s161)
  (s '%163 (@log1p-%163-val s161) (@log1p-%162-loc s161)))
(defund @log1p-%164-val (s161)
  (fsub-double (g '%162 (@log1p-%163-loc s161)) (g '%163 (@log1p-%163-loc s161))))
(defund @log1p-%164-loc (s161)
  (s '%164 (@log1p-%164-val s161) (@log1p-%163-loc s161)))
(defund @log1p-m161.1-mem (s161)
  (store-double (g '%164 (@log1p-%164-loc s161)) (g '%1 (@log1p-%164-loc s161)) (@log1p-%161-mem s161)))
(defund @log1p-succ161-lab (s161)
  (declare (ignore s161))
  '%239)

(defund @log1p-succ161-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%239 mem loc))
(defund @log1p-m161.1-rev (mem loc pred)
  (@log1p-succ161-rev (store-double (g '%164 loc) (g '%1 loc) mem) loc pred))
(defund @log1p-%164-rev (mem loc pred)
  (@log1p-m161.1-rev mem (s '%164 (fsub-double (g '%162 loc) (g '%163 loc)) loc) pred))
(defund @log1p-%163-rev (mem loc pred)
  (@log1p-%164-rev mem (s '%163 (load-double (g '%R loc) mem) loc) pred))
(defund @log1p-%162-rev (mem loc pred)
  (@log1p-%163-rev mem (s '%162 (load-double (g '%f loc) mem) loc) pred))

(defund @log1p-%161-rev (mem loc pred)
  (@log1p-%162-rev mem loc pred))

(defund @log1p-%161-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%162 (load-double (g '%f loc) mem) loc))
    (loc (s '%163 (load-double (g '%R loc) mem) loc))
    (loc (s '%164 (fsub-double (g '%162 loc) (g '%163 loc)) loc))
    (mem (store-double (g '%164 loc) (g '%1 loc) mem))
    (succ '%239))
  (mv succ mem loc)))

(defruled @log1p-%161-expand-bb
  (equal (@log1p-%161-bb mem loc pred)
         (@log1p-%161-rev mem loc pred))
  :enable (@log1p-%161-bb @log1p-%161-rev
    @log1p-%162-rev
    @log1p-%163-rev
    @log1p-%164-rev
    @log1p-m161.1-rev
    @log1p-succ161-rev)
  :disable s-diff-s)

(defund @log1p-%165-mem (s165)
  (car s165))
(defund @log1p-%165-loc (s165)
  (cadr s165))
(defund @log1p-%165-pred (s165)
  (caddr s165))
(defund @log1p-%166-val (s165)
  (load-i32 (g '%k (@log1p-%165-loc s165)) (@log1p-%165-mem s165)))
(defund @log1p-%166-loc (s165)
  (s '%166 (@log1p-%166-val s165) (@log1p-%165-loc s165)))
(defund @log1p-%167-val (s165)
  (sitofp-i32-to-double (g '%166 (@log1p-%166-loc s165))))
(defund @log1p-%167-loc (s165)
  (s '%167 (@log1p-%167-val s165) (@log1p-%166-loc s165)))
(defund @log1p-%168-val (s165)
  (fmul-double (g '%167 (@log1p-%167-loc s165)) #x3FE62E42FEE00000))
(defund @log1p-%168-loc (s165)
  (s '%168 (@log1p-%168-val s165) (@log1p-%167-loc s165)))
(defund @log1p-%169-val (s165)
  (load-double (g '%R (@log1p-%168-loc s165)) (@log1p-%165-mem s165)))
(defund @log1p-%169-loc (s165)
  (s '%169 (@log1p-%169-val s165) (@log1p-%168-loc s165)))
(defund @log1p-%170-val (s165)
  (load-i32 (g '%k (@log1p-%169-loc s165)) (@log1p-%165-mem s165)))
(defund @log1p-%170-loc (s165)
  (s '%170 (@log1p-%170-val s165) (@log1p-%169-loc s165)))
(defund @log1p-%171-val (s165)
  (sitofp-i32-to-double (g '%170 (@log1p-%170-loc s165))))
(defund @log1p-%171-loc (s165)
  (s '%171 (@log1p-%171-val s165) (@log1p-%170-loc s165)))
(defund @log1p-%172-val (s165)
  (fmul-double (g '%171 (@log1p-%171-loc s165)) #x3DEA39EF35793C76))
(defund @log1p-%172-loc (s165)
  (s '%172 (@log1p-%172-val s165) (@log1p-%171-loc s165)))
(defund @log1p-%173-val (s165)
  (load-double (g '%c (@log1p-%172-loc s165)) (@log1p-%165-mem s165)))
(defund @log1p-%173-loc (s165)
  (s '%173 (@log1p-%173-val s165) (@log1p-%172-loc s165)))
(defund @log1p-%174-val (s165)
  (fadd-double (g '%172 (@log1p-%173-loc s165)) (g '%173 (@log1p-%173-loc s165))))
(defund @log1p-%174-loc (s165)
  (s '%174 (@log1p-%174-val s165) (@log1p-%173-loc s165)))
(defund @log1p-%175-val (s165)
  (fsub-double (g '%169 (@log1p-%174-loc s165)) (g '%174 (@log1p-%174-loc s165))))
(defund @log1p-%175-loc (s165)
  (s '%175 (@log1p-%175-val s165) (@log1p-%174-loc s165)))
(defund @log1p-%176-val (s165)
  (load-double (g '%f (@log1p-%175-loc s165)) (@log1p-%165-mem s165)))
(defund @log1p-%176-loc (s165)
  (s '%176 (@log1p-%176-val s165) (@log1p-%175-loc s165)))
(defund @log1p-%177-val (s165)
  (fsub-double (g '%175 (@log1p-%176-loc s165)) (g '%176 (@log1p-%176-loc s165))))
(defund @log1p-%177-loc (s165)
  (s '%177 (@log1p-%177-val s165) (@log1p-%176-loc s165)))
(defund @log1p-%178-val (s165)
  (fsub-double (g '%168 (@log1p-%177-loc s165)) (g '%177 (@log1p-%177-loc s165))))
(defund @log1p-%178-loc (s165)
  (s '%178 (@log1p-%178-val s165) (@log1p-%177-loc s165)))
(defund @log1p-m165.1-mem (s165)
  (store-double (g '%178 (@log1p-%178-loc s165)) (g '%1 (@log1p-%178-loc s165)) (@log1p-%165-mem s165)))
(defund @log1p-succ165-lab (s165)
  (declare (ignore s165))
  '%239)

(defund @log1p-succ165-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%239 mem loc))
(defund @log1p-m165.1-rev (mem loc pred)
  (@log1p-succ165-rev (store-double (g '%178 loc) (g '%1 loc) mem) loc pred))
(defund @log1p-%178-rev (mem loc pred)
  (@log1p-m165.1-rev mem (s '%178 (fsub-double (g '%168 loc) (g '%177 loc)) loc) pred))
(defund @log1p-%177-rev (mem loc pred)
  (@log1p-%178-rev mem (s '%177 (fsub-double (g '%175 loc) (g '%176 loc)) loc) pred))
(defund @log1p-%176-rev (mem loc pred)
  (@log1p-%177-rev mem (s '%176 (load-double (g '%f loc) mem) loc) pred))
(defund @log1p-%175-rev (mem loc pred)
  (@log1p-%176-rev mem (s '%175 (fsub-double (g '%169 loc) (g '%174 loc)) loc) pred))
(defund @log1p-%174-rev (mem loc pred)
  (@log1p-%175-rev mem (s '%174 (fadd-double (g '%172 loc) (g '%173 loc)) loc) pred))
(defund @log1p-%173-rev (mem loc pred)
  (@log1p-%174-rev mem (s '%173 (load-double (g '%c loc) mem) loc) pred))
(defund @log1p-%172-rev (mem loc pred)
  (@log1p-%173-rev mem (s '%172 (fmul-double (g '%171 loc) #x3DEA39EF35793C76) loc) pred))
(defund @log1p-%171-rev (mem loc pred)
  (@log1p-%172-rev mem (s '%171 (sitofp-i32-to-double (g '%170 loc)) loc) pred))
(defund @log1p-%170-rev (mem loc pred)
  (@log1p-%171-rev mem (s '%170 (load-i32 (g '%k loc) mem) loc) pred))
(defund @log1p-%169-rev (mem loc pred)
  (@log1p-%170-rev mem (s '%169 (load-double (g '%R loc) mem) loc) pred))
(defund @log1p-%168-rev (mem loc pred)
  (@log1p-%169-rev mem (s '%168 (fmul-double (g '%167 loc) #x3FE62E42FEE00000) loc) pred))
(defund @log1p-%167-rev (mem loc pred)
  (@log1p-%168-rev mem (s '%167 (sitofp-i32-to-double (g '%166 loc)) loc) pred))
(defund @log1p-%166-rev (mem loc pred)
  (@log1p-%167-rev mem (s '%166 (load-i32 (g '%k loc) mem) loc) pred))

(defund @log1p-%165-rev (mem loc pred)
  (@log1p-%166-rev mem loc pred))

(defund @log1p-%165-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%166 (load-i32 (g '%k loc) mem) loc))
    (loc (s '%167 (sitofp-i32-to-double (g '%166 loc)) loc))
    (loc (s '%168 (fmul-double (g '%167 loc) #x3FE62E42FEE00000) loc))
    (loc (s '%169 (load-double (g '%R loc) mem) loc))
    (loc (s '%170 (load-i32 (g '%k loc) mem) loc))
    (loc (s '%171 (sitofp-i32-to-double (g '%170 loc)) loc))
    (loc (s '%172 (fmul-double (g '%171 loc) #x3DEA39EF35793C76) loc))
    (loc (s '%173 (load-double (g '%c loc) mem) loc))
    (loc (s '%174 (fadd-double (g '%172 loc) (g '%173 loc)) loc))
    (loc (s '%175 (fsub-double (g '%169 loc) (g '%174 loc)) loc))
    (loc (s '%176 (load-double (g '%f loc) mem) loc))
    (loc (s '%177 (fsub-double (g '%175 loc) (g '%176 loc)) loc))
    (loc (s '%178 (fsub-double (g '%168 loc) (g '%177 loc)) loc))
    (mem (store-double (g '%178 loc) (g '%1 loc) mem))
    (succ '%239))
  (mv succ mem loc)))

(defruled @log1p-%165-expand-bb
  (equal (@log1p-%165-bb mem loc pred)
         (@log1p-%165-rev mem loc pred))
  :enable (@log1p-%165-bb @log1p-%165-rev
    @log1p-%166-rev
    @log1p-%167-rev
    @log1p-%168-rev
    @log1p-%169-rev
    @log1p-%170-rev
    @log1p-%171-rev
    @log1p-%172-rev
    @log1p-%173-rev
    @log1p-%174-rev
    @log1p-%175-rev
    @log1p-%176-rev
    @log1p-%177-rev
    @log1p-%178-rev
    @log1p-m165.1-rev
    @log1p-succ165-rev)
  :disable s-diff-s)

(defund @log1p-%179-mem (s179)
  (car s179))
(defund @log1p-%179-loc (s179)
  (cadr s179))
(defund @log1p-%179-pred (s179)
  (caddr s179))
(defund @log1p-%180-val (s179)
  (load-double (g '%f (@log1p-%179-loc s179)) (@log1p-%179-mem s179)))
(defund @log1p-%180-loc (s179)
  (s '%180 (@log1p-%180-val s179) (@log1p-%179-loc s179)))
(defund @log1p-%181-val (s179)
  (load-double (g '%f (@log1p-%180-loc s179)) (@log1p-%179-mem s179)))
(defund @log1p-%181-loc (s179)
  (s '%181 (@log1p-%181-val s179) (@log1p-%180-loc s179)))
(defund @log1p-%182-val (s179)
  (fadd-double #x4000000000000000 (g '%181 (@log1p-%181-loc s179))))
(defund @log1p-%182-loc (s179)
  (s '%182 (@log1p-%182-val s179) (@log1p-%181-loc s179)))
(defund @log1p-%183-val (s179)
  (fdiv-double (g '%180 (@log1p-%182-loc s179)) (g '%182 (@log1p-%182-loc s179))))
(defund @log1p-%183-loc (s179)
  (s '%183 (@log1p-%183-val s179) (@log1p-%182-loc s179)))
(defund @log1p-m179.1-mem (s179)
  (store-double (g '%183 (@log1p-%183-loc s179)) (g '%s (@log1p-%183-loc s179)) (@log1p-%179-mem s179)))
(defund @log1p-%184-val (s179)
  (load-double (g '%s (@log1p-%183-loc s179)) (@log1p-m179.1-mem s179)))
(defund @log1p-%184-loc (s179)
  (s '%184 (@log1p-%184-val s179) (@log1p-%183-loc s179)))
(defund @log1p-%185-val (s179)
  (load-double (g '%s (@log1p-%184-loc s179)) (@log1p-m179.1-mem s179)))
(defund @log1p-%185-loc (s179)
  (s '%185 (@log1p-%185-val s179) (@log1p-%184-loc s179)))
(defund @log1p-%186-val (s179)
  (fmul-double (g '%184 (@log1p-%185-loc s179)) (g '%185 (@log1p-%185-loc s179))))
(defund @log1p-%186-loc (s179)
  (s '%186 (@log1p-%186-val s179) (@log1p-%185-loc s179)))
(defund @log1p-m179.2-mem (s179)
  (store-double (g '%186 (@log1p-%186-loc s179)) (g '%z (@log1p-%186-loc s179)) (@log1p-m179.1-mem s179)))
(defund @log1p-%187-val (s179)
  (load-double (g '%z (@log1p-%186-loc s179)) (@log1p-m179.2-mem s179)))
(defund @log1p-%187-loc (s179)
  (s '%187 (@log1p-%187-val s179) (@log1p-%186-loc s179)))
(defund @log1p-%188-val (s179)
  (load-double (g '%z (@log1p-%187-loc s179)) (@log1p-m179.2-mem s179)))
(defund @log1p-%188-loc (s179)
  (s '%188 (@log1p-%188-val s179) (@log1p-%187-loc s179)))
(defund @log1p-%189-val (s179)
  (load-double (g '%z (@log1p-%188-loc s179)) (@log1p-m179.2-mem s179)))
(defund @log1p-%189-loc (s179)
  (s '%189 (@log1p-%189-val s179) (@log1p-%188-loc s179)))
(defund @log1p-%190-val (s179)
  (load-double (g '%z (@log1p-%189-loc s179)) (@log1p-m179.2-mem s179)))
(defund @log1p-%190-loc (s179)
  (s '%190 (@log1p-%190-val s179) (@log1p-%189-loc s179)))
(defund @log1p-%191-val (s179)
  (load-double (g '%z (@log1p-%190-loc s179)) (@log1p-m179.2-mem s179)))
(defund @log1p-%191-loc (s179)
  (s '%191 (@log1p-%191-val s179) (@log1p-%190-loc s179)))
(defund @log1p-%192-val (s179)
  (load-double (g '%z (@log1p-%191-loc s179)) (@log1p-m179.2-mem s179)))
(defund @log1p-%192-loc (s179)
  (s '%192 (@log1p-%192-val s179) (@log1p-%191-loc s179)))
(defund @log1p-%193-val (s179)
  (load-double (g '%z (@log1p-%192-loc s179)) (@log1p-m179.2-mem s179)))
(defund @log1p-%193-loc (s179)
  (s '%193 (@log1p-%193-val s179) (@log1p-%192-loc s179)))
(defund @log1p-%194-val (s179)
  (fmul-double (g '%193 (@log1p-%193-loc s179)) #x3FC2F112DF3E5244))
(defund @log1p-%194-loc (s179)
  (s '%194 (@log1p-%194-val s179) (@log1p-%193-loc s179)))
(defund @log1p-%195-val (s179)
  (fadd-double #x3FC39A09D078C69F (g '%194 (@log1p-%194-loc s179))))
(defund @log1p-%195-loc (s179)
  (s '%195 (@log1p-%195-val s179) (@log1p-%194-loc s179)))
(defund @log1p-%196-val (s179)
  (fmul-double (g '%192 (@log1p-%195-loc s179)) (g '%195 (@log1p-%195-loc s179))))
(defund @log1p-%196-loc (s179)
  (s '%196 (@log1p-%196-val s179) (@log1p-%195-loc s179)))
(defund @log1p-%197-val (s179)
  (fadd-double #x3FC7466496CB03DE (g '%196 (@log1p-%196-loc s179))))
(defund @log1p-%197-loc (s179)
  (s '%197 (@log1p-%197-val s179) (@log1p-%196-loc s179)))
(defund @log1p-%198-val (s179)
  (fmul-double (g '%191 (@log1p-%197-loc s179)) (g '%197 (@log1p-%197-loc s179))))
(defund @log1p-%198-loc (s179)
  (s '%198 (@log1p-%198-val s179) (@log1p-%197-loc s179)))
(defund @log1p-%199-val (s179)
  (fadd-double #x3FCC71C51D8E78AF (g '%198 (@log1p-%198-loc s179))))
(defund @log1p-%199-loc (s179)
  (s '%199 (@log1p-%199-val s179) (@log1p-%198-loc s179)))
(defund @log1p-%200-val (s179)
  (fmul-double (g '%190 (@log1p-%199-loc s179)) (g '%199 (@log1p-%199-loc s179))))
(defund @log1p-%200-loc (s179)
  (s '%200 (@log1p-%200-val s179) (@log1p-%199-loc s179)))
(defund @log1p-%201-val (s179)
  (fadd-double #x3FD2492494229359 (g '%200 (@log1p-%200-loc s179))))
(defund @log1p-%201-loc (s179)
  (s '%201 (@log1p-%201-val s179) (@log1p-%200-loc s179)))
(defund @log1p-%202-val (s179)
  (fmul-double (g '%189 (@log1p-%201-loc s179)) (g '%201 (@log1p-%201-loc s179))))
(defund @log1p-%202-loc (s179)
  (s '%202 (@log1p-%202-val s179) (@log1p-%201-loc s179)))
(defund @log1p-%203-val (s179)
  (fadd-double #x3FD999999997FA04 (g '%202 (@log1p-%202-loc s179))))
(defund @log1p-%203-loc (s179)
  (s '%203 (@log1p-%203-val s179) (@log1p-%202-loc s179)))
(defund @log1p-%204-val (s179)
  (fmul-double (g '%188 (@log1p-%203-loc s179)) (g '%203 (@log1p-%203-loc s179))))
(defund @log1p-%204-loc (s179)
  (s '%204 (@log1p-%204-val s179) (@log1p-%203-loc s179)))
(defund @log1p-%205-val (s179)
  (fadd-double #x3FE5555555555593 (g '%204 (@log1p-%204-loc s179))))
(defund @log1p-%205-loc (s179)
  (s '%205 (@log1p-%205-val s179) (@log1p-%204-loc s179)))
(defund @log1p-%206-val (s179)
  (fmul-double (g '%187 (@log1p-%205-loc s179)) (g '%205 (@log1p-%205-loc s179))))
(defund @log1p-%206-loc (s179)
  (s '%206 (@log1p-%206-val s179) (@log1p-%205-loc s179)))
(defund @log1p-m179.3-mem (s179)
  (store-double (g '%206 (@log1p-%206-loc s179)) (g '%R (@log1p-%206-loc s179)) (@log1p-m179.2-mem s179)))
(defund @log1p-%207-val (s179)
  (load-i32 (g '%k (@log1p-%206-loc s179)) (@log1p-m179.3-mem s179)))
(defund @log1p-%207-loc (s179)
  (s '%207 (@log1p-%207-val s179) (@log1p-%206-loc s179)))
(defund @log1p-%208-val (s179)
  (icmp-eq-i32 (g '%207 (@log1p-%207-loc s179)) 0))
(defund @log1p-%208-loc (s179)
  (s '%208 (@log1p-%208-val s179) (@log1p-%207-loc s179)))
(defund @log1p-succ179-lab (s179)
  (case (g '%208 (@log1p-%208-loc s179)) (-1 '%209) (0 '%219)))

(defund @log1p-succ179-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%208 loc) (-1 '%209) (0 '%219)) mem loc))
(defund @log1p-%208-rev (mem loc pred)
  (@log1p-succ179-rev mem (s '%208 (icmp-eq-i32 (g '%207 loc) 0) loc) pred))
(defund @log1p-%207-rev (mem loc pred)
  (@log1p-%208-rev mem (s '%207 (load-i32 (g '%k loc) mem) loc) pred))
(defund @log1p-m179.3-rev (mem loc pred)
  (@log1p-%207-rev (store-double (g '%206 loc) (g '%R loc) mem) loc pred))
(defund @log1p-%206-rev (mem loc pred)
  (@log1p-m179.3-rev mem (s '%206 (fmul-double (g '%187 loc) (g '%205 loc)) loc) pred))
(defund @log1p-%205-rev (mem loc pred)
  (@log1p-%206-rev mem (s '%205 (fadd-double #x3FE5555555555593 (g '%204 loc)) loc) pred))
(defund @log1p-%204-rev (mem loc pred)
  (@log1p-%205-rev mem (s '%204 (fmul-double (g '%188 loc) (g '%203 loc)) loc) pred))
(defund @log1p-%203-rev (mem loc pred)
  (@log1p-%204-rev mem (s '%203 (fadd-double #x3FD999999997FA04 (g '%202 loc)) loc) pred))
(defund @log1p-%202-rev (mem loc pred)
  (@log1p-%203-rev mem (s '%202 (fmul-double (g '%189 loc) (g '%201 loc)) loc) pred))
(defund @log1p-%201-rev (mem loc pred)
  (@log1p-%202-rev mem (s '%201 (fadd-double #x3FD2492494229359 (g '%200 loc)) loc) pred))
(defund @log1p-%200-rev (mem loc pred)
  (@log1p-%201-rev mem (s '%200 (fmul-double (g '%190 loc) (g '%199 loc)) loc) pred))
(defund @log1p-%199-rev (mem loc pred)
  (@log1p-%200-rev mem (s '%199 (fadd-double #x3FCC71C51D8E78AF (g '%198 loc)) loc) pred))
(defund @log1p-%198-rev (mem loc pred)
  (@log1p-%199-rev mem (s '%198 (fmul-double (g '%191 loc) (g '%197 loc)) loc) pred))
(defund @log1p-%197-rev (mem loc pred)
  (@log1p-%198-rev mem (s '%197 (fadd-double #x3FC7466496CB03DE (g '%196 loc)) loc) pred))
(defund @log1p-%196-rev (mem loc pred)
  (@log1p-%197-rev mem (s '%196 (fmul-double (g '%192 loc) (g '%195 loc)) loc) pred))
(defund @log1p-%195-rev (mem loc pred)
  (@log1p-%196-rev mem (s '%195 (fadd-double #x3FC39A09D078C69F (g '%194 loc)) loc) pred))
(defund @log1p-%194-rev (mem loc pred)
  (@log1p-%195-rev mem (s '%194 (fmul-double (g '%193 loc) #x3FC2F112DF3E5244) loc) pred))
(defund @log1p-%193-rev (mem loc pred)
  (@log1p-%194-rev mem (s '%193 (load-double (g '%z loc) mem) loc) pred))
(defund @log1p-%192-rev (mem loc pred)
  (@log1p-%193-rev mem (s '%192 (load-double (g '%z loc) mem) loc) pred))
(defund @log1p-%191-rev (mem loc pred)
  (@log1p-%192-rev mem (s '%191 (load-double (g '%z loc) mem) loc) pred))
(defund @log1p-%190-rev (mem loc pred)
  (@log1p-%191-rev mem (s '%190 (load-double (g '%z loc) mem) loc) pred))
(defund @log1p-%189-rev (mem loc pred)
  (@log1p-%190-rev mem (s '%189 (load-double (g '%z loc) mem) loc) pred))
(defund @log1p-%188-rev (mem loc pred)
  (@log1p-%189-rev mem (s '%188 (load-double (g '%z loc) mem) loc) pred))
(defund @log1p-%187-rev (mem loc pred)
  (@log1p-%188-rev mem (s '%187 (load-double (g '%z loc) mem) loc) pred))
(defund @log1p-m179.2-rev (mem loc pred)
  (@log1p-%187-rev (store-double (g '%186 loc) (g '%z loc) mem) loc pred))
(defund @log1p-%186-rev (mem loc pred)
  (@log1p-m179.2-rev mem (s '%186 (fmul-double (g '%184 loc) (g '%185 loc)) loc) pred))
(defund @log1p-%185-rev (mem loc pred)
  (@log1p-%186-rev mem (s '%185 (load-double (g '%s loc) mem) loc) pred))
(defund @log1p-%184-rev (mem loc pred)
  (@log1p-%185-rev mem (s '%184 (load-double (g '%s loc) mem) loc) pred))
(defund @log1p-m179.1-rev (mem loc pred)
  (@log1p-%184-rev (store-double (g '%183 loc) (g '%s loc) mem) loc pred))
(defund @log1p-%183-rev (mem loc pred)
  (@log1p-m179.1-rev mem (s '%183 (fdiv-double (g '%180 loc) (g '%182 loc)) loc) pred))
(defund @log1p-%182-rev (mem loc pred)
  (@log1p-%183-rev mem (s '%182 (fadd-double #x4000000000000000 (g '%181 loc)) loc) pred))
(defund @log1p-%181-rev (mem loc pred)
  (@log1p-%182-rev mem (s '%181 (load-double (g '%f loc) mem) loc) pred))
(defund @log1p-%180-rev (mem loc pred)
  (@log1p-%181-rev mem (s '%180 (load-double (g '%f loc) mem) loc) pred))

(defund @log1p-%179-rev (mem loc pred)
  (@log1p-%180-rev mem loc pred))

(defund @log1p-%179-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%180 (load-double (g '%f loc) mem) loc))
    (loc (s '%181 (load-double (g '%f loc) mem) loc))
    (loc (s '%182 (fadd-double #x4000000000000000 (g '%181 loc)) loc))
    (loc (s '%183 (fdiv-double (g '%180 loc) (g '%182 loc)) loc))
    (mem (store-double (g '%183 loc) (g '%s loc) mem))
    (loc (s '%184 (load-double (g '%s loc) mem) loc))
    (loc (s '%185 (load-double (g '%s loc) mem) loc))
    (loc (s '%186 (fmul-double (g '%184 loc) (g '%185 loc)) loc))
    (mem (store-double (g '%186 loc) (g '%z loc) mem))
    (loc (s '%187 (load-double (g '%z loc) mem) loc))
    (loc (s '%188 (load-double (g '%z loc) mem) loc))
    (loc (s '%189 (load-double (g '%z loc) mem) loc))
    (loc (s '%190 (load-double (g '%z loc) mem) loc))
    (loc (s '%191 (load-double (g '%z loc) mem) loc))
    (loc (s '%192 (load-double (g '%z loc) mem) loc))
    (loc (s '%193 (load-double (g '%z loc) mem) loc))
    (loc (s '%194 (fmul-double (g '%193 loc) #x3FC2F112DF3E5244) loc))
    (loc (s '%195 (fadd-double #x3FC39A09D078C69F (g '%194 loc)) loc))
    (loc (s '%196 (fmul-double (g '%192 loc) (g '%195 loc)) loc))
    (loc (s '%197 (fadd-double #x3FC7466496CB03DE (g '%196 loc)) loc))
    (loc (s '%198 (fmul-double (g '%191 loc) (g '%197 loc)) loc))
    (loc (s '%199 (fadd-double #x3FCC71C51D8E78AF (g '%198 loc)) loc))
    (loc (s '%200 (fmul-double (g '%190 loc) (g '%199 loc)) loc))
    (loc (s '%201 (fadd-double #x3FD2492494229359 (g '%200 loc)) loc))
    (loc (s '%202 (fmul-double (g '%189 loc) (g '%201 loc)) loc))
    (loc (s '%203 (fadd-double #x3FD999999997FA04 (g '%202 loc)) loc))
    (loc (s '%204 (fmul-double (g '%188 loc) (g '%203 loc)) loc))
    (loc (s '%205 (fadd-double #x3FE5555555555593 (g '%204 loc)) loc))
    (loc (s '%206 (fmul-double (g '%187 loc) (g '%205 loc)) loc))
    (mem (store-double (g '%206 loc) (g '%R loc) mem))
    (loc (s '%207 (load-i32 (g '%k loc) mem) loc))
    (loc (s '%208 (icmp-eq-i32 (g '%207 loc) 0) loc))
    (succ (case (g '%208 loc) (-1 '%209) (0 '%219))))
  (mv succ mem loc)))

(defruled @log1p-%179-expand-bb
  (equal (@log1p-%179-bb mem loc pred)
         (@log1p-%179-rev mem loc pred))
  :enable (@log1p-%179-bb @log1p-%179-rev
    @log1p-%180-rev
    @log1p-%181-rev
    @log1p-%182-rev
    @log1p-%183-rev
    @log1p-m179.1-rev
    @log1p-%184-rev
    @log1p-%185-rev
    @log1p-%186-rev
    @log1p-m179.2-rev
    @log1p-%187-rev
    @log1p-%188-rev
    @log1p-%189-rev
    @log1p-%190-rev
    @log1p-%191-rev
    @log1p-%192-rev
    @log1p-%193-rev
    @log1p-%194-rev
    @log1p-%195-rev
    @log1p-%196-rev
    @log1p-%197-rev
    @log1p-%198-rev
    @log1p-%199-rev
    @log1p-%200-rev
    @log1p-%201-rev
    @log1p-%202-rev
    @log1p-%203-rev
    @log1p-%204-rev
    @log1p-%205-rev
    @log1p-%206-rev
    @log1p-m179.3-rev
    @log1p-%207-rev
    @log1p-%208-rev
    @log1p-succ179-rev)
  :disable s-diff-s)

(defund @log1p-%209-mem (s209)
  (car s209))
(defund @log1p-%209-loc (s209)
  (cadr s209))
(defund @log1p-%209-pred (s209)
  (caddr s209))
(defund @log1p-%210-val (s209)
  (load-double (g '%f (@log1p-%209-loc s209)) (@log1p-%209-mem s209)))
(defund @log1p-%210-loc (s209)
  (s '%210 (@log1p-%210-val s209) (@log1p-%209-loc s209)))
(defund @log1p-%211-val (s209)
  (load-double (g '%hfsq (@log1p-%210-loc s209)) (@log1p-%209-mem s209)))
(defund @log1p-%211-loc (s209)
  (s '%211 (@log1p-%211-val s209) (@log1p-%210-loc s209)))
(defund @log1p-%212-val (s209)
  (load-double (g '%s (@log1p-%211-loc s209)) (@log1p-%209-mem s209)))
(defund @log1p-%212-loc (s209)
  (s '%212 (@log1p-%212-val s209) (@log1p-%211-loc s209)))
(defund @log1p-%213-val (s209)
  (load-double (g '%hfsq (@log1p-%212-loc s209)) (@log1p-%209-mem s209)))
(defund @log1p-%213-loc (s209)
  (s '%213 (@log1p-%213-val s209) (@log1p-%212-loc s209)))
(defund @log1p-%214-val (s209)
  (load-double (g '%R (@log1p-%213-loc s209)) (@log1p-%209-mem s209)))
(defund @log1p-%214-loc (s209)
  (s '%214 (@log1p-%214-val s209) (@log1p-%213-loc s209)))
(defund @log1p-%215-val (s209)
  (fadd-double (g '%213 (@log1p-%214-loc s209)) (g '%214 (@log1p-%214-loc s209))))
(defund @log1p-%215-loc (s209)
  (s '%215 (@log1p-%215-val s209) (@log1p-%214-loc s209)))
(defund @log1p-%216-val (s209)
  (fmul-double (g '%212 (@log1p-%215-loc s209)) (g '%215 (@log1p-%215-loc s209))))
(defund @log1p-%216-loc (s209)
  (s '%216 (@log1p-%216-val s209) (@log1p-%215-loc s209)))
(defund @log1p-%217-val (s209)
  (fsub-double (g '%211 (@log1p-%216-loc s209)) (g '%216 (@log1p-%216-loc s209))))
(defund @log1p-%217-loc (s209)
  (s '%217 (@log1p-%217-val s209) (@log1p-%216-loc s209)))
(defund @log1p-%218-val (s209)
  (fsub-double (g '%210 (@log1p-%217-loc s209)) (g '%217 (@log1p-%217-loc s209))))
(defund @log1p-%218-loc (s209)
  (s '%218 (@log1p-%218-val s209) (@log1p-%217-loc s209)))
(defund @log1p-m209.1-mem (s209)
  (store-double (g '%218 (@log1p-%218-loc s209)) (g '%1 (@log1p-%218-loc s209)) (@log1p-%209-mem s209)))
(defund @log1p-succ209-lab (s209)
  (declare (ignore s209))
  '%239)

(defund @log1p-succ209-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%239 mem loc))
(defund @log1p-m209.1-rev (mem loc pred)
  (@log1p-succ209-rev (store-double (g '%218 loc) (g '%1 loc) mem) loc pred))
(defund @log1p-%218-rev (mem loc pred)
  (@log1p-m209.1-rev mem (s '%218 (fsub-double (g '%210 loc) (g '%217 loc)) loc) pred))
(defund @log1p-%217-rev (mem loc pred)
  (@log1p-%218-rev mem (s '%217 (fsub-double (g '%211 loc) (g '%216 loc)) loc) pred))
(defund @log1p-%216-rev (mem loc pred)
  (@log1p-%217-rev mem (s '%216 (fmul-double (g '%212 loc) (g '%215 loc)) loc) pred))
(defund @log1p-%215-rev (mem loc pred)
  (@log1p-%216-rev mem (s '%215 (fadd-double (g '%213 loc) (g '%214 loc)) loc) pred))
(defund @log1p-%214-rev (mem loc pred)
  (@log1p-%215-rev mem (s '%214 (load-double (g '%R loc) mem) loc) pred))
(defund @log1p-%213-rev (mem loc pred)
  (@log1p-%214-rev mem (s '%213 (load-double (g '%hfsq loc) mem) loc) pred))
(defund @log1p-%212-rev (mem loc pred)
  (@log1p-%213-rev mem (s '%212 (load-double (g '%s loc) mem) loc) pred))
(defund @log1p-%211-rev (mem loc pred)
  (@log1p-%212-rev mem (s '%211 (load-double (g '%hfsq loc) mem) loc) pred))
(defund @log1p-%210-rev (mem loc pred)
  (@log1p-%211-rev mem (s '%210 (load-double (g '%f loc) mem) loc) pred))

(defund @log1p-%209-rev (mem loc pred)
  (@log1p-%210-rev mem loc pred))

(defund @log1p-%209-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%210 (load-double (g '%f loc) mem) loc))
    (loc (s '%211 (load-double (g '%hfsq loc) mem) loc))
    (loc (s '%212 (load-double (g '%s loc) mem) loc))
    (loc (s '%213 (load-double (g '%hfsq loc) mem) loc))
    (loc (s '%214 (load-double (g '%R loc) mem) loc))
    (loc (s '%215 (fadd-double (g '%213 loc) (g '%214 loc)) loc))
    (loc (s '%216 (fmul-double (g '%212 loc) (g '%215 loc)) loc))
    (loc (s '%217 (fsub-double (g '%211 loc) (g '%216 loc)) loc))
    (loc (s '%218 (fsub-double (g '%210 loc) (g '%217 loc)) loc))
    (mem (store-double (g '%218 loc) (g '%1 loc) mem))
    (succ '%239))
  (mv succ mem loc)))

(defruled @log1p-%209-expand-bb
  (equal (@log1p-%209-bb mem loc pred)
         (@log1p-%209-rev mem loc pred))
  :enable (@log1p-%209-bb @log1p-%209-rev
    @log1p-%210-rev
    @log1p-%211-rev
    @log1p-%212-rev
    @log1p-%213-rev
    @log1p-%214-rev
    @log1p-%215-rev
    @log1p-%216-rev
    @log1p-%217-rev
    @log1p-%218-rev
    @log1p-m209.1-rev
    @log1p-succ209-rev)
  :disable s-diff-s)

(defund @log1p-%219-mem (s219)
  (car s219))
(defund @log1p-%219-loc (s219)
  (cadr s219))
(defund @log1p-%219-pred (s219)
  (caddr s219))
(defund @log1p-%220-val (s219)
  (load-i32 (g '%k (@log1p-%219-loc s219)) (@log1p-%219-mem s219)))
(defund @log1p-%220-loc (s219)
  (s '%220 (@log1p-%220-val s219) (@log1p-%219-loc s219)))
(defund @log1p-%221-val (s219)
  (sitofp-i32-to-double (g '%220 (@log1p-%220-loc s219))))
(defund @log1p-%221-loc (s219)
  (s '%221 (@log1p-%221-val s219) (@log1p-%220-loc s219)))
(defund @log1p-%222-val (s219)
  (fmul-double (g '%221 (@log1p-%221-loc s219)) #x3FE62E42FEE00000))
(defund @log1p-%222-loc (s219)
  (s '%222 (@log1p-%222-val s219) (@log1p-%221-loc s219)))
(defund @log1p-%223-val (s219)
  (load-double (g '%hfsq (@log1p-%222-loc s219)) (@log1p-%219-mem s219)))
(defund @log1p-%223-loc (s219)
  (s '%223 (@log1p-%223-val s219) (@log1p-%222-loc s219)))
(defund @log1p-%224-val (s219)
  (load-double (g '%s (@log1p-%223-loc s219)) (@log1p-%219-mem s219)))
(defund @log1p-%224-loc (s219)
  (s '%224 (@log1p-%224-val s219) (@log1p-%223-loc s219)))
(defund @log1p-%225-val (s219)
  (load-double (g '%hfsq (@log1p-%224-loc s219)) (@log1p-%219-mem s219)))
(defund @log1p-%225-loc (s219)
  (s '%225 (@log1p-%225-val s219) (@log1p-%224-loc s219)))
(defund @log1p-%226-val (s219)
  (load-double (g '%R (@log1p-%225-loc s219)) (@log1p-%219-mem s219)))
(defund @log1p-%226-loc (s219)
  (s '%226 (@log1p-%226-val s219) (@log1p-%225-loc s219)))
(defund @log1p-%227-val (s219)
  (fadd-double (g '%225 (@log1p-%226-loc s219)) (g '%226 (@log1p-%226-loc s219))))
(defund @log1p-%227-loc (s219)
  (s '%227 (@log1p-%227-val s219) (@log1p-%226-loc s219)))
(defund @log1p-%228-val (s219)
  (fmul-double (g '%224 (@log1p-%227-loc s219)) (g '%227 (@log1p-%227-loc s219))))
(defund @log1p-%228-loc (s219)
  (s '%228 (@log1p-%228-val s219) (@log1p-%227-loc s219)))
(defund @log1p-%229-val (s219)
  (load-i32 (g '%k (@log1p-%228-loc s219)) (@log1p-%219-mem s219)))
(defund @log1p-%229-loc (s219)
  (s '%229 (@log1p-%229-val s219) (@log1p-%228-loc s219)))
(defund @log1p-%230-val (s219)
  (sitofp-i32-to-double (g '%229 (@log1p-%229-loc s219))))
(defund @log1p-%230-loc (s219)
  (s '%230 (@log1p-%230-val s219) (@log1p-%229-loc s219)))
(defund @log1p-%231-val (s219)
  (fmul-double (g '%230 (@log1p-%230-loc s219)) #x3DEA39EF35793C76))
(defund @log1p-%231-loc (s219)
  (s '%231 (@log1p-%231-val s219) (@log1p-%230-loc s219)))
(defund @log1p-%232-val (s219)
  (load-double (g '%c (@log1p-%231-loc s219)) (@log1p-%219-mem s219)))
(defund @log1p-%232-loc (s219)
  (s '%232 (@log1p-%232-val s219) (@log1p-%231-loc s219)))
(defund @log1p-%233-val (s219)
  (fadd-double (g '%231 (@log1p-%232-loc s219)) (g '%232 (@log1p-%232-loc s219))))
(defund @log1p-%233-loc (s219)
  (s '%233 (@log1p-%233-val s219) (@log1p-%232-loc s219)))
(defund @log1p-%234-val (s219)
  (fadd-double (g '%228 (@log1p-%233-loc s219)) (g '%233 (@log1p-%233-loc s219))))
(defund @log1p-%234-loc (s219)
  (s '%234 (@log1p-%234-val s219) (@log1p-%233-loc s219)))
(defund @log1p-%235-val (s219)
  (fsub-double (g '%223 (@log1p-%234-loc s219)) (g '%234 (@log1p-%234-loc s219))))
(defund @log1p-%235-loc (s219)
  (s '%235 (@log1p-%235-val s219) (@log1p-%234-loc s219)))
(defund @log1p-%236-val (s219)
  (load-double (g '%f (@log1p-%235-loc s219)) (@log1p-%219-mem s219)))
(defund @log1p-%236-loc (s219)
  (s '%236 (@log1p-%236-val s219) (@log1p-%235-loc s219)))
(defund @log1p-%237-val (s219)
  (fsub-double (g '%235 (@log1p-%236-loc s219)) (g '%236 (@log1p-%236-loc s219))))
(defund @log1p-%237-loc (s219)
  (s '%237 (@log1p-%237-val s219) (@log1p-%236-loc s219)))
(defund @log1p-%238-val (s219)
  (fsub-double (g '%222 (@log1p-%237-loc s219)) (g '%237 (@log1p-%237-loc s219))))
(defund @log1p-%238-loc (s219)
  (s '%238 (@log1p-%238-val s219) (@log1p-%237-loc s219)))
(defund @log1p-m219.1-mem (s219)
  (store-double (g '%238 (@log1p-%238-loc s219)) (g '%1 (@log1p-%238-loc s219)) (@log1p-%219-mem s219)))
(defund @log1p-succ219-lab (s219)
  (declare (ignore s219))
  '%239)

(defund @log1p-succ219-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%239 mem loc))
(defund @log1p-m219.1-rev (mem loc pred)
  (@log1p-succ219-rev (store-double (g '%238 loc) (g '%1 loc) mem) loc pred))
(defund @log1p-%238-rev (mem loc pred)
  (@log1p-m219.1-rev mem (s '%238 (fsub-double (g '%222 loc) (g '%237 loc)) loc) pred))
(defund @log1p-%237-rev (mem loc pred)
  (@log1p-%238-rev mem (s '%237 (fsub-double (g '%235 loc) (g '%236 loc)) loc) pred))
(defund @log1p-%236-rev (mem loc pred)
  (@log1p-%237-rev mem (s '%236 (load-double (g '%f loc) mem) loc) pred))
(defund @log1p-%235-rev (mem loc pred)
  (@log1p-%236-rev mem (s '%235 (fsub-double (g '%223 loc) (g '%234 loc)) loc) pred))
(defund @log1p-%234-rev (mem loc pred)
  (@log1p-%235-rev mem (s '%234 (fadd-double (g '%228 loc) (g '%233 loc)) loc) pred))
(defund @log1p-%233-rev (mem loc pred)
  (@log1p-%234-rev mem (s '%233 (fadd-double (g '%231 loc) (g '%232 loc)) loc) pred))
(defund @log1p-%232-rev (mem loc pred)
  (@log1p-%233-rev mem (s '%232 (load-double (g '%c loc) mem) loc) pred))
(defund @log1p-%231-rev (mem loc pred)
  (@log1p-%232-rev mem (s '%231 (fmul-double (g '%230 loc) #x3DEA39EF35793C76) loc) pred))
(defund @log1p-%230-rev (mem loc pred)
  (@log1p-%231-rev mem (s '%230 (sitofp-i32-to-double (g '%229 loc)) loc) pred))
(defund @log1p-%229-rev (mem loc pred)
  (@log1p-%230-rev mem (s '%229 (load-i32 (g '%k loc) mem) loc) pred))
(defund @log1p-%228-rev (mem loc pred)
  (@log1p-%229-rev mem (s '%228 (fmul-double (g '%224 loc) (g '%227 loc)) loc) pred))
(defund @log1p-%227-rev (mem loc pred)
  (@log1p-%228-rev mem (s '%227 (fadd-double (g '%225 loc) (g '%226 loc)) loc) pred))
(defund @log1p-%226-rev (mem loc pred)
  (@log1p-%227-rev mem (s '%226 (load-double (g '%R loc) mem) loc) pred))
(defund @log1p-%225-rev (mem loc pred)
  (@log1p-%226-rev mem (s '%225 (load-double (g '%hfsq loc) mem) loc) pred))
(defund @log1p-%224-rev (mem loc pred)
  (@log1p-%225-rev mem (s '%224 (load-double (g '%s loc) mem) loc) pred))
(defund @log1p-%223-rev (mem loc pred)
  (@log1p-%224-rev mem (s '%223 (load-double (g '%hfsq loc) mem) loc) pred))
(defund @log1p-%222-rev (mem loc pred)
  (@log1p-%223-rev mem (s '%222 (fmul-double (g '%221 loc) #x3FE62E42FEE00000) loc) pred))
(defund @log1p-%221-rev (mem loc pred)
  (@log1p-%222-rev mem (s '%221 (sitofp-i32-to-double (g '%220 loc)) loc) pred))
(defund @log1p-%220-rev (mem loc pred)
  (@log1p-%221-rev mem (s '%220 (load-i32 (g '%k loc) mem) loc) pred))

(defund @log1p-%219-rev (mem loc pred)
  (@log1p-%220-rev mem loc pred))

(defund @log1p-%219-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%220 (load-i32 (g '%k loc) mem) loc))
    (loc (s '%221 (sitofp-i32-to-double (g '%220 loc)) loc))
    (loc (s '%222 (fmul-double (g '%221 loc) #x3FE62E42FEE00000) loc))
    (loc (s '%223 (load-double (g '%hfsq loc) mem) loc))
    (loc (s '%224 (load-double (g '%s loc) mem) loc))
    (loc (s '%225 (load-double (g '%hfsq loc) mem) loc))
    (loc (s '%226 (load-double (g '%R loc) mem) loc))
    (loc (s '%227 (fadd-double (g '%225 loc) (g '%226 loc)) loc))
    (loc (s '%228 (fmul-double (g '%224 loc) (g '%227 loc)) loc))
    (loc (s '%229 (load-i32 (g '%k loc) mem) loc))
    (loc (s '%230 (sitofp-i32-to-double (g '%229 loc)) loc))
    (loc (s '%231 (fmul-double (g '%230 loc) #x3DEA39EF35793C76) loc))
    (loc (s '%232 (load-double (g '%c loc) mem) loc))
    (loc (s '%233 (fadd-double (g '%231 loc) (g '%232 loc)) loc))
    (loc (s '%234 (fadd-double (g '%228 loc) (g '%233 loc)) loc))
    (loc (s '%235 (fsub-double (g '%223 loc) (g '%234 loc)) loc))
    (loc (s '%236 (load-double (g '%f loc) mem) loc))
    (loc (s '%237 (fsub-double (g '%235 loc) (g '%236 loc)) loc))
    (loc (s '%238 (fsub-double (g '%222 loc) (g '%237 loc)) loc))
    (mem (store-double (g '%238 loc) (g '%1 loc) mem))
    (succ '%239))
  (mv succ mem loc)))

(defruled @log1p-%219-expand-bb
  (equal (@log1p-%219-bb mem loc pred)
         (@log1p-%219-rev mem loc pred))
  :enable (@log1p-%219-bb @log1p-%219-rev
    @log1p-%220-rev
    @log1p-%221-rev
    @log1p-%222-rev
    @log1p-%223-rev
    @log1p-%224-rev
    @log1p-%225-rev
    @log1p-%226-rev
    @log1p-%227-rev
    @log1p-%228-rev
    @log1p-%229-rev
    @log1p-%230-rev
    @log1p-%231-rev
    @log1p-%232-rev
    @log1p-%233-rev
    @log1p-%234-rev
    @log1p-%235-rev
    @log1p-%236-rev
    @log1p-%237-rev
    @log1p-%238-rev
    @log1p-m219.1-rev
    @log1p-succ219-rev)
  :disable s-diff-s)

(defund @log1p-%239-mem (s239)
  (car s239))
(defund @log1p-%239-loc (s239)
  (cadr s239))
(defund @log1p-%239-pred (s239)
  (caddr s239))
(defund @log1p-%240-val (s239)
  (load-double (g '%1 (@log1p-%239-loc s239)) (@log1p-%239-mem s239)))
(defund @log1p-%240-loc (s239)
  (s '%240 (@log1p-%240-val s239) (@log1p-%239-loc s239)))
(defund @log1p-succ239-lab (s239)
  (declare (ignore s239))
  'ret)

(defund @log1p-succ239-rev (mem loc pred)
  (declare (ignore pred))
  (mv 'ret mem loc))
(defund @log1p-%240-rev (mem loc pred)
  (@log1p-succ239-rev mem (s '%240 (load-double (g '%1 loc) mem) loc) pred))

(defund @log1p-%239-rev (mem loc pred)
  (@log1p-%240-rev mem loc pred))

(defund @log1p-%239-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%240 (load-double (g '%1 loc) mem) loc))
    (succ 'ret))
  (mv succ mem loc)))

(defruled @log1p-%239-expand-bb
  (equal (@log1p-%239-bb mem loc pred)
         (@log1p-%239-rev mem loc pred))
  :enable (@log1p-%239-bb @log1p-%239-rev
    @log1p-%240-rev
    @log1p-succ239-rev)
  :disable s-diff-s)

(defund @log1p-step (label mem loc pred)
  (case label
    (%0 (@log1p-%0-bb mem loc pred))
    (%10 (@log1p-%10-bb mem loc pred))
    (%13 (@log1p-%13-bb mem loc pred))
    (%16 (@log1p-%16-bb mem loc pred))
    (%19 (@log1p-%19-bb mem loc pred))
    (%27 (@log1p-%27-bb mem loc pred))
    (%30 (@log1p-%30-bb mem loc pred))
    (%35 (@log1p-%35-bb mem loc pred))
    (%38 (@log1p-%38-bb mem loc pred))
    (%40 (@log1p-%40-bb mem loc pred))
    (%47 (@log1p-%47-bb mem loc pred))
    (%50 (@log1p-%50-bb mem loc pred))
    (%53 (@log1p-%53-bb mem loc pred))
    (%55 (@log1p-%55-bb mem loc pred))
    (%56 (@log1p-%56-bb mem loc pred))
    (%59 (@log1p-%59-bb mem loc pred))
    (%63 (@log1p-%63-bb mem loc pred))
    (%66 (@log1p-%66-bb mem loc pred))
    (%69 (@log1p-%69-bb mem loc pred))
    (%80 (@log1p-%80-bb mem loc pred))
    (%85 (@log1p-%85-bb mem loc pred))
    (%90 (@log1p-%90-bb mem loc pred))
    (%95 (@log1p-%95-bb mem loc pred))
    (%103 (@log1p-%103-bb mem loc pred))
    (%108 (@log1p-%108-bb mem loc pred))
    (%113 (@log1p-%113-bb mem loc pred))
    (%123 (@log1p-%123-bb mem loc pred))
    (%126 (@log1p-%126-bb mem loc pred))
    (%133 (@log1p-%133-bb mem loc pred))
    (%137 (@log1p-%137-bb mem loc pred))
    (%140 (@log1p-%140-bb mem loc pred))
    (%142 (@log1p-%142-bb mem loc pred))
    (%153 (@log1p-%153-bb mem loc pred))
    (%161 (@log1p-%161-bb mem loc pred))
    (%165 (@log1p-%165-bb mem loc pred))
    (%179 (@log1p-%179-bb mem loc pred))
    (%209 (@log1p-%209-bb mem loc pred))
    (%219 (@log1p-%219-bb mem loc pred))
    (%239 (@log1p-%239-bb mem loc pred))
    (otherwise (mv nil mem loc))))

(defund @log1p-steps (label mem loc pred n)
  (declare (xargs :measure (nfix n)))
  (if (equal label 'ret)
      (g '%240 loc)
    (if (zp n) nil
      (mv-let
        (new-label new-mem new-loc)
        (@log1p-step label mem loc pred)
        (@log1p-steps new-label new-mem new-loc label (1- n))))))

(defund @log1p (%x)
  (declare (ignore %x))
   nil)
