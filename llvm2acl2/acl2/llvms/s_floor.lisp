(in-package "ACL2")
(include-book "../llvm")

(defconst *floor-globals* '())

(defund @floor-%0-bb (mem loc)
  (b* (
    (mem (alloca-double 'ret 1 mem))
    (mem (alloca-double 'x 1 mem))
    (mem (alloca-i32 'i0 1 mem))
    (mem (alloca-i32 'i1 1 mem))
    (mem (alloca-i32 'j0 1 mem))
    (mem (alloca-i32 'i 1 mem))
    (mem (alloca-i32 'j 1 mem))
    (mem (store-double (g '%x loc) '(x . 0) mem))
    (loc (s '%3 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%4 (getelementptr-i32 (g '%3 loc) 1) loc))
    (loc (s '%5 (load-i32 (g '%4 loc) mem) loc))
    (mem (store-i32 (g '%5 loc) '(i0 . 0) mem))
    (loc (s '%6 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%7 (load-i32 (g '%6 loc) mem) loc))
    (mem (store-i32 (g '%7 loc) '(i1 . 0) mem))
    (loc (s '%8 (load-i32 '(i0 . 0) mem) loc))
    (loc (s '%9 (ashr-i32 (g '%8 loc) 20) loc))
    (loc (s '%10 (and-i32 (g '%9 loc) 2047) loc))
    (loc (s '%11 (sub-i32 (g '%10 loc) 1023) loc))
    (mem (store-i32 (g '%11 loc) '(j0 . 0) mem))
    (loc (s '%12 (load-i32 '(j0 . 0) mem) loc))
    (loc (s '%13 (icmp-slt-i32 (g '%12 loc) 20) loc)))
  (case (g '%13 loc)
    (-1 (mv '@floor-%14-bb mem loc))
    ( 0 (mv '@floor-%65-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @floor-%14-bb (mem loc)
  (b* (
    (loc (s '%15 (load-i32 '(j0 . 0) mem) loc))
    (loc (s '%16 (icmp-slt-i32 (g '%15 loc) 0) loc)))
  (case (g '%16 loc)
    (-1 (mv '@floor-%17-bb mem loc))
    ( 0 (mv '@floor-%35-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @floor-%17-bb (mem loc)
  (b* (
    (loc (s '%18 (load-double '(x . 0) mem) loc))
    (loc (s '%19 (fadd-double #x7e37e43c8800759c (g '%18 loc)) loc))
    (loc (s '%20 (fcmp-ogt-double (g '%19 loc) #x0000000000000000) loc)))
  (case (g '%20 loc)
    (-1 (mv '@floor-%21-bb mem loc))
    ( 0 (mv '@floor-%34-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @floor-%21-bb (mem loc)
  (b* (
    (loc (s '%22 (load-i32 '(i0 . 0) mem) loc))
    (loc (s '%23 (icmp-sge-i32 (g '%22 loc) 0) loc)))
  (case (g '%23 loc)
    (-1 (mv '@floor-%24-bb mem loc))
    ( 0 (mv '@floor-%25-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @floor-%24-bb (mem loc)
  (b* (
    (mem (store-i32 0 '(i1 . 0) mem))
    (mem (store-i32 0 '(i0 . 0) mem)))
  (mv '@floor-%33-bb mem loc)))

(defund @floor-%25-bb (mem loc)
  (b* (
    (loc (s '%26 (load-i32 '(i0 . 0) mem) loc))
    (loc (s '%27 (and-i32 (g '%26 loc) 2147483647) loc))
    (loc (s '%28 (load-i32 '(i1 . 0) mem) loc))
    (loc (s '%29 (or-i32 (g '%27 loc) (g '%28 loc)) loc))
    (loc (s '%30 (icmp-ne-i32 (g '%29 loc) 0) loc)))
  (case (g '%30 loc)
    (-1 (mv '@floor-%31-bb mem loc))
    ( 0 (mv '@floor-%32-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @floor-%31-bb (mem loc)
  (b* (
    (mem (store-i32 -1074790400 '(i0 . 0) mem))
    (mem (store-i32 0 '(i1 . 0) mem)))
  (mv '@floor-%32-bb mem loc)))

(defund @floor-%32-bb (mem loc)
  (b* ()
  (mv '@floor-%33-bb mem loc)))

(defund @floor-%33-bb (mem loc)
  (b* ()
  (mv '@floor-%34-bb mem loc)))

(defund @floor-%34-bb (mem loc)
  (b* ()
  (mv '@floor-%64-bb mem loc)))

(defund @floor-%35-bb (mem loc)
  (b* (
    (loc (s '%36 (load-i32 '(j0 . 0) mem) loc))
    (loc (s '%37 (ashr-i32 1048575 (g '%36 loc)) loc))
    (mem (store-i32 (g '%37 loc) '(i . 0) mem))
    (loc (s '%38 (load-i32 '(i0 . 0) mem) loc))
    (loc (s '%39 (load-i32 '(i . 0) mem) loc))
    (loc (s '%40 (and-i32 (g '%38 loc) (g '%39 loc)) loc))
    (loc (s '%41 (load-i32 '(i1 . 0) mem) loc))
    (loc (s '%42 (or-i32 (g '%40 loc) (g '%41 loc)) loc))
    (loc (s '%43 (icmp-eq-i32 (g '%42 loc) 0) loc)))
  (case (g '%43 loc)
    (-1 (mv '@floor-%44-bb mem loc))
    ( 0 (mv '@floor-%46-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @floor-%44-bb (mem loc)
  (b* (
    (loc (s '%45 (load-double '(x . 0) mem) loc))
    (mem (store-double (g '%45 loc) '(ret . 0) mem)))
  (mv '@floor-%129-bb mem loc)))

(defund @floor-%46-bb (mem loc)
  (b* (
    (loc (s '%47 (load-double '(x . 0) mem) loc))
    (loc (s '%48 (fadd-double #x7e37e43c8800759c (g '%47 loc)) loc))
    (loc (s '%49 (fcmp-ogt-double (g '%48 loc) #x0000000000000000) loc)))
  (case (g '%49 loc)
    (-1 (mv '@floor-%50-bb mem loc))
    ( 0 (mv '@floor-%63-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @floor-%50-bb (mem loc)
  (b* (
    (loc (s '%51 (load-i32 '(i0 . 0) mem) loc))
    (loc (s '%52 (icmp-slt-i32 (g '%51 loc) 0) loc)))
  (case (g '%52 loc)
    (-1 (mv '@floor-%53-bb mem loc))
    ( 0 (mv '@floor-%58-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @floor-%53-bb (mem loc)
  (b* (
    (loc (s '%54 (load-i32 '(j0 . 0) mem) loc))
    (loc (s '%55 (ashr-i32 1048576 (g '%54 loc)) loc))
    (loc (s '%56 (load-i32 '(i0 . 0) mem) loc))
    (loc (s '%57 (add-i32 (g '%56 loc) (g '%55 loc)) loc))
    (mem (store-i32 (g '%57 loc) '(i0 . 0) mem)))
  (mv '@floor-%58-bb mem loc)))

(defund @floor-%58-bb (mem loc)
  (b* (
    (loc (s '%59 (load-i32 '(i . 0) mem) loc))
    (loc (s '%60 (xor-i32 (g '%59 loc) -1) loc))
    (loc (s '%61 (load-i32 '(i0 . 0) mem) loc))
    (loc (s '%62 (and-i32 (g '%61 loc) (g '%60 loc)) loc))
    (mem (store-i32 (g '%62 loc) '(i0 . 0) mem))
    (mem (store-i32 0 '(i1 . 0) mem)))
  (mv '@floor-%63-bb mem loc)))

(defund @floor-%63-bb (mem loc)
  (b* ()
  (mv '@floor-%64-bb mem loc)))

(defund @floor-%64-bb (mem loc)
  (b* ()
  (mv '@floor-%122-bb mem loc)))

(defund @floor-%65-bb (mem loc)
  (b* (
    (loc (s '%66 (load-i32 '(j0 . 0) mem) loc))
    (loc (s '%67 (icmp-sgt-i32 (g '%66 loc) 51) loc)))
  (case (g '%67 loc)
    (-1 (mv '@floor-%68-bb mem loc))
    ( 0 (mv '@floor-%77-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @floor-%68-bb (mem loc)
  (b* (
    (loc (s '%69 (load-i32 '(j0 . 0) mem) loc))
    (loc (s '%70 (icmp-eq-i32 (g '%69 loc) 1024) loc)))
  (case (g '%70 loc)
    (-1 (mv '@floor-%71-bb mem loc))
    ( 0 (mv '@floor-%75-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @floor-%71-bb (mem loc)
  (b* (
    (loc (s '%72 (load-double '(x . 0) mem) loc))
    (loc (s '%73 (load-double '(x . 0) mem) loc))
    (loc (s '%74 (fadd-double (g '%72 loc) (g '%73 loc)) loc))
    (mem (store-double (g '%74 loc) '(ret . 0) mem)))
  (mv '@floor-%129-bb mem loc)))

(defund @floor-%75-bb (mem loc)
  (b* (
    (loc (s '%76 (load-double '(x . 0) mem) loc))
    (mem (store-double (g '%76 loc) '(ret . 0) mem)))
  (mv '@floor-%129-bb mem loc)))

(defund @floor-%77-bb (mem loc)
  (b* (
    (loc (s '%78 (load-i32 '(j0 . 0) mem) loc))
    (loc (s '%79 (sub-i32 (g '%78 loc) 20) loc))
    (loc (s '%80 (lshr-i32 -1 (g '%79 loc)) loc))
    (mem (store-i32 (g '%80 loc) '(i . 0) mem))
    (loc (s '%81 (load-i32 '(i1 . 0) mem) loc))
    (loc (s '%82 (load-i32 '(i . 0) mem) loc))
    (loc (s '%83 (and-i32 (g '%81 loc) (g '%82 loc)) loc))
    (loc (s '%84 (icmp-eq-i32 (g '%83 loc) 0) loc)))
  (case (g '%84 loc)
    (-1 (mv '@floor-%85-bb mem loc))
    ( 0 (mv '@floor-%87-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @floor-%85-bb (mem loc)
  (b* (
    (loc (s '%86 (load-double '(x . 0) mem) loc))
    (mem (store-double (g '%86 loc) '(ret . 0) mem)))
  (mv '@floor-%129-bb mem loc)))

(defund @floor-%87-bb (mem loc)
  (b* (
    (loc (s '%88 (load-double '(x . 0) mem) loc))
    (loc (s '%89 (fadd-double #x7e37e43c8800759c (g '%88 loc)) loc))
    (loc (s '%90 (fcmp-ogt-double (g '%89 loc) #x0000000000000000) loc)))
  (case (g '%90 loc)
    (-1 (mv '@floor-%91-bb mem loc))
    ( 0 (mv '@floor-%120-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @floor-%91-bb (mem loc)
  (b* (
    (loc (s '%92 (load-i32 '(i0 . 0) mem) loc))
    (loc (s '%93 (icmp-slt-i32 (g '%92 loc) 0) loc)))
  (case (g '%93 loc)
    (-1 (mv '@floor-%94-bb mem loc))
    ( 0 (mv '@floor-%115-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @floor-%94-bb (mem loc)
  (b* (
    (loc (s '%95 (load-i32 '(j0 . 0) mem) loc))
    (loc (s '%96 (icmp-eq-i32 (g '%95 loc) 20) loc)))
  (case (g '%96 loc)
    (-1 (mv '@floor-%97-bb mem loc))
    ( 0 (mv '@floor-%100-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @floor-%97-bb (mem loc)
  (b* (
    (loc (s '%98 (load-i32 '(i0 . 0) mem) loc))
    (loc (s '%99 (add-i32 (g '%98 loc) 1) loc))
    (mem (store-i32 (g '%99 loc) '(i0 . 0) mem)))
  (mv '@floor-%114-bb mem loc)))

(defund @floor-%100-bb (mem loc)
  (b* (
    (loc (s '%101 (load-i32 '(i1 . 0) mem) loc))
    (loc (s '%102 (load-i32 '(j0 . 0) mem) loc))
    (loc (s '%103 (sub-i32 52 (g '%102 loc)) loc))
    (loc (s '%104 (shl-i32 1 (g '%103 loc)) loc))
    (loc (s '%105 (add-i32 (g '%101 loc) (g '%104 loc)) loc))
    (mem (store-i32 (g '%105 loc) '(j . 0) mem))
    (loc (s '%106 (load-i32 '(j . 0) mem) loc))
    (loc (s '%107 (load-i32 '(i1 . 0) mem) loc))
    (loc (s '%108 (icmp-ult-i32 (g '%106 loc) (g '%107 loc)) loc)))
  (case (g '%108 loc)
    (-1 (mv '@floor-%109-bb mem loc))
    ( 0 (mv '@floor-%112-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @floor-%109-bb (mem loc)
  (b* (
    (loc (s '%110 (load-i32 '(i0 . 0) mem) loc))
    (loc (s '%111 (add-i32 (g '%110 loc) 1) loc))
    (mem (store-i32 (g '%111 loc) '(i0 . 0) mem)))
  (mv '@floor-%112-bb mem loc)))

(defund @floor-%112-bb (mem loc)
  (b* (
    (loc (s '%113 (load-i32 '(j . 0) mem) loc))
    (mem (store-i32 (g '%113 loc) '(i1 . 0) mem)))
  (mv '@floor-%114-bb mem loc)))

(defund @floor-%114-bb (mem loc)
  (b* ()
  (mv '@floor-%115-bb mem loc)))

(defund @floor-%115-bb (mem loc)
  (b* (
    (loc (s '%116 (load-i32 '(i . 0) mem) loc))
    (loc (s '%117 (xor-i32 (g '%116 loc) -1) loc))
    (loc (s '%118 (load-i32 '(i1 . 0) mem) loc))
    (loc (s '%119 (and-i32 (g '%118 loc) (g '%117 loc)) loc))
    (mem (store-i32 (g '%119 loc) '(i1 . 0) mem)))
  (mv '@floor-%120-bb mem loc)))

(defund @floor-%120-bb (mem loc)
  (b* ()
  (mv '@floor-%121-bb mem loc)))

(defund @floor-%121-bb (mem loc)
  (b* ()
  (mv '@floor-%122-bb mem loc)))

(defund @floor-%122-bb (mem loc)
  (b* (
    (loc (s '%123 (load-i32 '(i0 . 0) mem) loc))
    (loc (s '%124 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%125 (getelementptr-i32 (g '%124 loc) 1) loc))
    (mem (store-i32 (g '%123 loc) (g '%125 loc) mem))
    (loc (s '%126 (load-i32 '(i1 . 0) mem) loc))
    (loc (s '%127 (bitcast-double*-to-i32* '(x . 0)) loc))
    (mem (store-i32 (g '%126 loc) (g '%127 loc) mem))
    (loc (s '%128 (load-double '(x . 0) mem) loc))
    (mem (store-double (g '%128 loc) '(ret . 0) mem)))
  (mv '@floor-%129-bb mem loc)))

(defund @floor-%129-bb (mem loc)
  (b* (
    (loc (s '%130 (load-double '(ret . 0) mem) loc)))
  (mv 'ret mem loc)))

(defund @floor-step (label mem loc)
  (case label
    (%-0 (@floor-%0-bb mem loc))
    (%-14 (@floor-%14-bb mem loc))
    (%-17 (@floor-%17-bb mem loc))
    (%-21 (@floor-%21-bb mem loc))
    (%-24 (@floor-%24-bb mem loc))
    (%-25 (@floor-%25-bb mem loc))
    (%-31 (@floor-%31-bb mem loc))
    (%-32 (@floor-%32-bb mem loc))
    (%-33 (@floor-%33-bb mem loc))
    (%-34 (@floor-%34-bb mem loc))
    (%-35 (@floor-%35-bb mem loc))
    (%-44 (@floor-%44-bb mem loc))
    (%-46 (@floor-%46-bb mem loc))
    (%-50 (@floor-%50-bb mem loc))
    (%-53 (@floor-%53-bb mem loc))
    (%-58 (@floor-%58-bb mem loc))
    (%-63 (@floor-%63-bb mem loc))
    (%-64 (@floor-%64-bb mem loc))
    (%-65 (@floor-%65-bb mem loc))
    (%-68 (@floor-%68-bb mem loc))
    (%-71 (@floor-%71-bb mem loc))
    (%-75 (@floor-%75-bb mem loc))
    (%-77 (@floor-%77-bb mem loc))
    (%-85 (@floor-%85-bb mem loc))
    (%-87 (@floor-%87-bb mem loc))
    (%-91 (@floor-%91-bb mem loc))
    (%-94 (@floor-%94-bb mem loc))
    (%-97 (@floor-%97-bb mem loc))
    (%-100 (@floor-%100-bb mem loc))
    (%-109 (@floor-%109-bb mem loc))
    (%-112 (@floor-%112-bb mem loc))
    (%-114 (@floor-%114-bb mem loc))
    (%-115 (@floor-%115-bb mem loc))
    (%-120 (@floor-%120-bb mem loc))
    (%-121 (@floor-%121-bb mem loc))
    (%-122 (@floor-%122-bb mem loc))
    (%-129 (@floor-%129-bb mem loc))
    (otherwise (mv nil mem loc))))

(defund @floor-steps (label mem loc n)
  (declare (xargs :measure (nfix n)))
  (if (equal label 'ret)
      (g '%130 loc)
    (if (zp n) nil
      (mv-let
        (label mem loc)
        (@floor-step label mem loc)
        (@floor-steps label mem loc (1- n))))))

(defund @floor (%x)
  (declare (ignore %x))
   nil)
