(in-package "ACL2")
(include-book "std/util/defrule" :dir :system)
(include-book "../llvm")
(include-book "k_tan")
(include-book "e_rem_pio2")

(defconst *tan-globals* '())

(defconst *tan-labels* '(%0 %10 %14 %17 %21 %34))

(defund @tan-%0-mem (s0)
  (car s0))
(defund @tan-%0-loc (s0)
  (cadr s0))
(defund @tan-%0-pred (s0)
  (caddr s0))
(defund @tan-%1-mem (s0)
  (alloca-double 'ret 1 (@tan-%0-mem s0)))
(defund @tan-%1-loc (s0)
  (s '%1 '(ret . 0) (@tan-%0-loc s0)))
(defund @tan-%2-mem (s0)
  (alloca-double 'x 1 (@tan-%1-mem s0)))
(defund @tan-%2-loc (s0)
  (s '%2 '(x . 0) (@tan-%1-loc s0)))
(defund @tan-%y-mem (s0)
  (alloca-double 'y 2 (@tan-%2-mem s0)))
(defund @tan-%y-loc (s0)
  (s '%y '(y . 0) (@tan-%2-loc s0)))
(defund @tan-%z-mem (s0)
  (alloca-double 'z 1 (@tan-%y-mem s0)))
(defund @tan-%z-loc (s0)
  (s '%z '(z . 0) (@tan-%y-loc s0)))
(defund @tan-%n-mem (s0)
  (alloca-i32 'n 1 (@tan-%z-mem s0)))
(defund @tan-%n-loc (s0)
  (s '%n '(n . 0) (@tan-%z-loc s0)))
(defund @tan-%ix-mem (s0)
  (alloca-i32 'ix 1 (@tan-%n-mem s0)))
(defund @tan-%ix-loc (s0)
  (s '%ix '(ix . 0) (@tan-%n-loc s0)))
(defund @tan-m0.1-mem (s0)
  (store-double (g '%x (@tan-%ix-loc s0)) (g '%2 (@tan-%ix-loc s0)) (@tan-%ix-mem s0)))
(defund @tan-m0.2-mem (s0)
  (store-double #x0000000000000000 (g '%z (@tan-%ix-loc s0)) (@tan-m0.1-mem s0)))
(defund @tan-%3-val (s0)
  (bitcast-double*-to-i32* (g '%2 (@tan-%ix-loc s0))))
(defund @tan-%3-loc (s0)
  (s '%3 (@tan-%3-val s0) (@tan-%ix-loc s0)))
(defund @tan-%4-val (s0)
  (getelementptr-i32 (g '%3 (@tan-%3-loc s0)) 1))
(defund @tan-%4-loc (s0)
  (s '%4 (@tan-%4-val s0) (@tan-%3-loc s0)))
(defund @tan-%5-val (s0)
  (load-i32 (g '%4 (@tan-%4-loc s0)) (@tan-m0.2-mem s0)))
(defund @tan-%5-loc (s0)
  (s '%5 (@tan-%5-val s0) (@tan-%4-loc s0)))
(defund @tan-m0.3-mem (s0)
  (store-i32 (g '%5 (@tan-%5-loc s0)) (g '%ix (@tan-%5-loc s0)) (@tan-m0.2-mem s0)))
(defund @tan-%6-val (s0)
  (load-i32 (g '%ix (@tan-%5-loc s0)) (@tan-m0.3-mem s0)))
(defund @tan-%6-loc (s0)
  (s '%6 (@tan-%6-val s0) (@tan-%5-loc s0)))
(defund @tan-%7-val (s0)
  (and-i32 (g '%6 (@tan-%6-loc s0)) 2147483647))
(defund @tan-%7-loc (s0)
  (s '%7 (@tan-%7-val s0) (@tan-%6-loc s0)))
(defund @tan-m0.4-mem (s0)
  (store-i32 (g '%7 (@tan-%7-loc s0)) (g '%ix (@tan-%7-loc s0)) (@tan-m0.3-mem s0)))
(defund @tan-%8-val (s0)
  (load-i32 (g '%ix (@tan-%7-loc s0)) (@tan-m0.4-mem s0)))
(defund @tan-%8-loc (s0)
  (s '%8 (@tan-%8-val s0) (@tan-%7-loc s0)))
(defund @tan-%9-val (s0)
  (icmp-sle-i32 (g '%8 (@tan-%8-loc s0)) 1072243195))
(defund @tan-%9-loc (s0)
  (s '%9 (@tan-%9-val s0) (@tan-%8-loc s0)))
(defund @tan-succ0-lab (s0)
  (case (g '%9 (@tan-%9-loc s0)) (-1 '%10) (0 '%14)))

(defund @tan-succ0-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%9 loc) (-1 '%10) (0 '%14)) mem loc))
(defund @tan-%9-rev (mem loc pred)
  (@tan-succ0-rev mem (s '%9 (icmp-sle-i32 (g '%8 loc) 1072243195) loc) pred))
(defund @tan-%8-rev (mem loc pred)
  (@tan-%9-rev mem (s '%8 (load-i32 (g '%ix loc) mem) loc) pred))
(defund @tan-m0.4-rev (mem loc pred)
  (@tan-%8-rev (store-i32 (g '%7 loc) (g '%ix loc) mem) loc pred))
(defund @tan-%7-rev (mem loc pred)
  (@tan-m0.4-rev mem (s '%7 (and-i32 (g '%6 loc) 2147483647) loc) pred))
(defund @tan-%6-rev (mem loc pred)
  (@tan-%7-rev mem (s '%6 (load-i32 (g '%ix loc) mem) loc) pred))
(defund @tan-m0.3-rev (mem loc pred)
  (@tan-%6-rev (store-i32 (g '%5 loc) (g '%ix loc) mem) loc pred))
(defund @tan-%5-rev (mem loc pred)
  (@tan-m0.3-rev mem (s '%5 (load-i32 (g '%4 loc) mem) loc) pred))
(defund @tan-%4-rev (mem loc pred)
  (@tan-%5-rev mem (s '%4 (getelementptr-i32 (g '%3 loc) 1) loc) pred))
(defund @tan-%3-rev (mem loc pred)
  (@tan-%4-rev mem (s '%3 (bitcast-double*-to-i32* (g '%2 loc)) loc) pred))
(defund @tan-m0.2-rev (mem loc pred)
  (@tan-%3-rev (store-double #x0000000000000000 (g '%z loc) mem) loc pred))
(defund @tan-m0.1-rev (mem loc pred)
  (@tan-m0.2-rev (store-double (g '%x loc) (g '%2 loc) mem) loc pred))
(defund @tan-%ix-rev (mem loc pred)
  (@tan-m0.1-rev (alloca-i32 'ix 1 mem) (s '%ix '(ix . 0) loc) pred))
(defund @tan-%n-rev (mem loc pred)
  (@tan-%ix-rev (alloca-i32 'n 1 mem) (s '%n '(n . 0) loc) pred))
(defund @tan-%z-rev (mem loc pred)
  (@tan-%n-rev (alloca-double 'z 1 mem) (s '%z '(z . 0) loc) pred))
(defund @tan-%y-rev (mem loc pred)
  (@tan-%z-rev (alloca-double 'y 2 mem) (s '%y '(y . 0) loc) pred))
(defund @tan-%2-rev (mem loc pred)
  (@tan-%y-rev (alloca-double 'x 1 mem) (s '%2 '(x . 0) loc) pred))
(defund @tan-%1-rev (mem loc pred)
  (@tan-%2-rev (alloca-double 'ret 1 mem) (s '%1 '(ret . 0) loc) pred))

(defund @tan-%0-rev (mem loc pred)
  (@tan-%1-rev mem loc pred))

(defund @tan-%0-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (mem (alloca-double 'ret 1 mem))
    (loc (s '%1 '(ret . 0) loc))
    (mem (alloca-double 'x 1 mem))
    (loc (s '%2 '(x . 0) loc))
    (mem (alloca-double 'y 2 mem))
    (loc (s '%y '(y . 0) loc))
    (mem (alloca-double 'z 1 mem))
    (loc (s '%z '(z . 0) loc))
    (mem (alloca-i32 'n 1 mem))
    (loc (s '%n '(n . 0) loc))
    (mem (alloca-i32 'ix 1 mem))
    (loc (s '%ix '(ix . 0) loc))
    (mem (store-double (g '%x loc) (g '%2 loc) mem))
    (mem (store-double #x0000000000000000 (g '%z loc) mem))
    (loc (s '%3 (bitcast-double*-to-i32* (g '%2 loc)) loc))
    (loc (s '%4 (getelementptr-i32 (g '%3 loc) 1) loc))
    (loc (s '%5 (load-i32 (g '%4 loc) mem) loc))
    (mem (store-i32 (g '%5 loc) (g '%ix loc) mem))
    (loc (s '%6 (load-i32 (g '%ix loc) mem) loc))
    (loc (s '%7 (and-i32 (g '%6 loc) 2147483647) loc))
    (mem (store-i32 (g '%7 loc) (g '%ix loc) mem))
    (loc (s '%8 (load-i32 (g '%ix loc) mem) loc))
    (loc (s '%9 (icmp-sle-i32 (g '%8 loc) 1072243195) loc))
    (succ (case (g '%9 loc) (-1 '%10) (0 '%14))))
  (mv succ mem loc)))

(defruled @tan-%0-expand-bb
  (equal (@tan-%0-bb mem loc pred)
         (@tan-%0-rev mem loc pred))
  :enable (@tan-%0-bb @tan-%0-rev
    @tan-%1-rev
    @tan-%2-rev
    @tan-%y-rev
    @tan-%z-rev
    @tan-%n-rev
    @tan-%ix-rev
    @tan-m0.1-rev
    @tan-m0.2-rev
    @tan-%3-rev
    @tan-%4-rev
    @tan-%5-rev
    @tan-m0.3-rev
    @tan-%6-rev
    @tan-%7-rev
    @tan-m0.4-rev
    @tan-%8-rev
    @tan-%9-rev
    @tan-succ0-rev)
  :disable s-diff-s)

(defund @tan-%10-mem (s10)
  (car s10))
(defund @tan-%10-loc (s10)
  (cadr s10))
(defund @tan-%10-pred (s10)
  (caddr s10))
(defund @tan-%11-val (s10)
  (load-double (g '%2 (@tan-%10-loc s10)) (@tan-%10-mem s10)))
(defund @tan-%11-loc (s10)
  (s '%11 (@tan-%11-val s10) (@tan-%10-loc s10)))
(defund @tan-%12-val (s10)
  (load-double (g '%z (@tan-%11-loc s10)) (@tan-%10-mem s10)))
(defund @tan-%12-loc (s10)
  (s '%12 (@tan-%12-val s10) (@tan-%11-loc s10)))
(defund @tan-%13-val (s10)
  (@__kernel_tan (g '%11 (@tan-%12-loc s10)) (g '%12 (@tan-%12-loc s10)) 1))
(defund @tan-%13-loc (s10)
  (s '%13 (@tan-%13-val s10) (@tan-%12-loc s10)))
(defund @tan-m10.1-mem (s10)
  (store-double (g '%13 (@tan-%13-loc s10)) (g '%1 (@tan-%13-loc s10)) (@tan-%10-mem s10)))
(defund @tan-succ10-lab (s10)
  (declare (ignore s10))
  '%34)

(defund @tan-succ10-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%34 mem loc))
(defund @tan-m10.1-rev (mem loc pred)
  (@tan-succ10-rev (store-double (g '%13 loc) (g '%1 loc) mem) loc pred))
(defund @tan-%13-rev (mem loc pred)
  (@tan-m10.1-rev mem (s '%13 (@__kernel_tan (g '%11 loc) (g '%12 loc) 1) loc) pred))
(defund @tan-%12-rev (mem loc pred)
  (@tan-%13-rev mem (s '%12 (load-double (g '%z loc) mem) loc) pred))
(defund @tan-%11-rev (mem loc pred)
  (@tan-%12-rev mem (s '%11 (load-double (g '%2 loc) mem) loc) pred))

(defund @tan-%10-rev (mem loc pred)
  (@tan-%11-rev mem loc pred))

(defund @tan-%10-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%11 (load-double (g '%2 loc) mem) loc))
    (loc (s '%12 (load-double (g '%z loc) mem) loc))
    (loc (s '%13 (@__kernel_tan (g '%11 loc) (g '%12 loc) 1) loc))
    (mem (store-double (g '%13 loc) (g '%1 loc) mem))
    (succ '%34))
  (mv succ mem loc)))

(defruled @tan-%10-expand-bb
  (equal (@tan-%10-bb mem loc pred)
         (@tan-%10-rev mem loc pred))
  :enable (@tan-%10-bb @tan-%10-rev
    @tan-%11-rev
    @tan-%12-rev
    @tan-%13-rev
    @tan-m10.1-rev
    @tan-succ10-rev)
  :disable s-diff-s)

(defund @tan-%14-mem (s14)
  (car s14))
(defund @tan-%14-loc (s14)
  (cadr s14))
(defund @tan-%14-pred (s14)
  (caddr s14))
(defund @tan-%15-val (s14)
  (load-i32 (g '%ix (@tan-%14-loc s14)) (@tan-%14-mem s14)))
(defund @tan-%15-loc (s14)
  (s '%15 (@tan-%15-val s14) (@tan-%14-loc s14)))
(defund @tan-%16-val (s14)
  (icmp-sge-i32 (g '%15 (@tan-%15-loc s14)) 2146435072))
(defund @tan-%16-loc (s14)
  (s '%16 (@tan-%16-val s14) (@tan-%15-loc s14)))
(defund @tan-succ14-lab (s14)
  (case (g '%16 (@tan-%16-loc s14)) (-1 '%17) (0 '%21)))

(defund @tan-succ14-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%16 loc) (-1 '%17) (0 '%21)) mem loc))
(defund @tan-%16-rev (mem loc pred)
  (@tan-succ14-rev mem (s '%16 (icmp-sge-i32 (g '%15 loc) 2146435072) loc) pred))
(defund @tan-%15-rev (mem loc pred)
  (@tan-%16-rev mem (s '%15 (load-i32 (g '%ix loc) mem) loc) pred))

(defund @tan-%14-rev (mem loc pred)
  (@tan-%15-rev mem loc pred))

(defund @tan-%14-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%15 (load-i32 (g '%ix loc) mem) loc))
    (loc (s '%16 (icmp-sge-i32 (g '%15 loc) 2146435072) loc))
    (succ (case (g '%16 loc) (-1 '%17) (0 '%21))))
  (mv succ mem loc)))

(defruled @tan-%14-expand-bb
  (equal (@tan-%14-bb mem loc pred)
         (@tan-%14-rev mem loc pred))
  :enable (@tan-%14-bb @tan-%14-rev
    @tan-%15-rev
    @tan-%16-rev
    @tan-succ14-rev)
  :disable s-diff-s)

(defund @tan-%17-mem (s17)
  (car s17))
(defund @tan-%17-loc (s17)
  (cadr s17))
(defund @tan-%17-pred (s17)
  (caddr s17))
(defund @tan-%18-val (s17)
  (load-double (g '%2 (@tan-%17-loc s17)) (@tan-%17-mem s17)))
(defund @tan-%18-loc (s17)
  (s '%18 (@tan-%18-val s17) (@tan-%17-loc s17)))
(defund @tan-%19-val (s17)
  (load-double (g '%2 (@tan-%18-loc s17)) (@tan-%17-mem s17)))
(defund @tan-%19-loc (s17)
  (s '%19 (@tan-%19-val s17) (@tan-%18-loc s17)))
(defund @tan-%20-val (s17)
  (fsub-double (g '%18 (@tan-%19-loc s17)) (g '%19 (@tan-%19-loc s17))))
(defund @tan-%20-loc (s17)
  (s '%20 (@tan-%20-val s17) (@tan-%19-loc s17)))
(defund @tan-m17.1-mem (s17)
  (store-double (g '%20 (@tan-%20-loc s17)) (g '%1 (@tan-%20-loc s17)) (@tan-%17-mem s17)))
(defund @tan-succ17-lab (s17)
  (declare (ignore s17))
  '%34)

(defund @tan-succ17-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%34 mem loc))
(defund @tan-m17.1-rev (mem loc pred)
  (@tan-succ17-rev (store-double (g '%20 loc) (g '%1 loc) mem) loc pred))
(defund @tan-%20-rev (mem loc pred)
  (@tan-m17.1-rev mem (s '%20 (fsub-double (g '%18 loc) (g '%19 loc)) loc) pred))
(defund @tan-%19-rev (mem loc pred)
  (@tan-%20-rev mem (s '%19 (load-double (g '%2 loc) mem) loc) pred))
(defund @tan-%18-rev (mem loc pred)
  (@tan-%19-rev mem (s '%18 (load-double (g '%2 loc) mem) loc) pred))

(defund @tan-%17-rev (mem loc pred)
  (@tan-%18-rev mem loc pred))

(defund @tan-%17-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%18 (load-double (g '%2 loc) mem) loc))
    (loc (s '%19 (load-double (g '%2 loc) mem) loc))
    (loc (s '%20 (fsub-double (g '%18 loc) (g '%19 loc)) loc))
    (mem (store-double (g '%20 loc) (g '%1 loc) mem))
    (succ '%34))
  (mv succ mem loc)))

(defruled @tan-%17-expand-bb
  (equal (@tan-%17-bb mem loc pred)
         (@tan-%17-rev mem loc pred))
  :enable (@tan-%17-bb @tan-%17-rev
    @tan-%18-rev
    @tan-%19-rev
    @tan-%20-rev
    @tan-m17.1-rev
    @tan-succ17-rev)
  :disable s-diff-s)

(defund @tan-%21-mem (s21)
  (car s21))
(defund @tan-%21-loc (s21)
  (cadr s21))
(defund @tan-%21-pred (s21)
  (caddr s21))
(defund @tan-%22-val (s21)
  (load-double (g '%2 (@tan-%21-loc s21)) (@tan-%21-mem s21)))
(defund @tan-%22-loc (s21)
  (s '%22 (@tan-%22-val s21) (@tan-%21-loc s21)))
(defund @tan-%23-val (s21)
  (getelementptr-double (g '%y (@tan-%22-loc s21)) 0))
(defund @tan-%23-loc (s21)
  (s '%23 (@tan-%23-val s21) (@tan-%22-loc s21)))
(defund @tan-%24-val (s21)
  (@__ieee754_rem_pio2 (g '%22 (@tan-%23-loc s21)) (g '%23 (@tan-%23-loc s21))))
(defund @tan-%24-loc (s21)
  (s '%24 (@tan-%24-val s21) (@tan-%23-loc s21)))
(defund @tan-m21.1-mem (s21)
  (store-i32 (g '%24 (@tan-%24-loc s21)) (g '%n (@tan-%24-loc s21)) (@tan-%21-mem s21)))
(defund @tan-%25-val (s21)
  (getelementptr-double (g '%y (@tan-%24-loc s21)) 0))
(defund @tan-%25-loc (s21)
  (s '%25 (@tan-%25-val s21) (@tan-%24-loc s21)))
(defund @tan-%26-val (s21)
  (load-double (g '%25 (@tan-%25-loc s21)) (@tan-m21.1-mem s21)))
(defund @tan-%26-loc (s21)
  (s '%26 (@tan-%26-val s21) (@tan-%25-loc s21)))
(defund @tan-%27-val (s21)
  (getelementptr-double (g '%y (@tan-%26-loc s21)) 1))
(defund @tan-%27-loc (s21)
  (s '%27 (@tan-%27-val s21) (@tan-%26-loc s21)))
(defund @tan-%28-val (s21)
  (load-double (g '%27 (@tan-%27-loc s21)) (@tan-m21.1-mem s21)))
(defund @tan-%28-loc (s21)
  (s '%28 (@tan-%28-val s21) (@tan-%27-loc s21)))
(defund @tan-%29-val (s21)
  (load-i32 (g '%n (@tan-%28-loc s21)) (@tan-m21.1-mem s21)))
(defund @tan-%29-loc (s21)
  (s '%29 (@tan-%29-val s21) (@tan-%28-loc s21)))
(defund @tan-%30-val (s21)
  (and-i32 (g '%29 (@tan-%29-loc s21)) 1))
(defund @tan-%30-loc (s21)
  (s '%30 (@tan-%30-val s21) (@tan-%29-loc s21)))
(defund @tan-%31-val (s21)
  (shl-i32 (g '%30 (@tan-%30-loc s21)) 1))
(defund @tan-%31-loc (s21)
  (s '%31 (@tan-%31-val s21) (@tan-%30-loc s21)))
(defund @tan-%32-val (s21)
  (sub-i32 1 (g '%31 (@tan-%31-loc s21))))
(defund @tan-%32-loc (s21)
  (s '%32 (@tan-%32-val s21) (@tan-%31-loc s21)))
(defund @tan-%33-val (s21)
  (@__kernel_tan (g '%26 (@tan-%32-loc s21)) (g '%28 (@tan-%32-loc s21)) (g '%32 (@tan-%32-loc s21))))
(defund @tan-%33-loc (s21)
  (s '%33 (@tan-%33-val s21) (@tan-%32-loc s21)))
(defund @tan-m21.2-mem (s21)
  (store-double (g '%33 (@tan-%33-loc s21)) (g '%1 (@tan-%33-loc s21)) (@tan-m21.1-mem s21)))
(defund @tan-succ21-lab (s21)
  (declare (ignore s21))
  '%34)

(defund @tan-succ21-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%34 mem loc))
(defund @tan-m21.2-rev (mem loc pred)
  (@tan-succ21-rev (store-double (g '%33 loc) (g '%1 loc) mem) loc pred))
(defund @tan-%33-rev (mem loc pred)
  (@tan-m21.2-rev mem (s '%33 (@__kernel_tan (g '%26 loc) (g '%28 loc) (g '%32 loc)) loc) pred))
(defund @tan-%32-rev (mem loc pred)
  (@tan-%33-rev mem (s '%32 (sub-i32 1 (g '%31 loc)) loc) pred))
(defund @tan-%31-rev (mem loc pred)
  (@tan-%32-rev mem (s '%31 (shl-i32 (g '%30 loc) 1) loc) pred))
(defund @tan-%30-rev (mem loc pred)
  (@tan-%31-rev mem (s '%30 (and-i32 (g '%29 loc) 1) loc) pred))
(defund @tan-%29-rev (mem loc pred)
  (@tan-%30-rev mem (s '%29 (load-i32 (g '%n loc) mem) loc) pred))
(defund @tan-%28-rev (mem loc pred)
  (@tan-%29-rev mem (s '%28 (load-double (g '%27 loc) mem) loc) pred))
(defund @tan-%27-rev (mem loc pred)
  (@tan-%28-rev mem (s '%27 (getelementptr-double (g '%y loc) 1) loc) pred))
(defund @tan-%26-rev (mem loc pred)
  (@tan-%27-rev mem (s '%26 (load-double (g '%25 loc) mem) loc) pred))
(defund @tan-%25-rev (mem loc pred)
  (@tan-%26-rev mem (s '%25 (getelementptr-double (g '%y loc) 0) loc) pred))
(defund @tan-m21.1-rev (mem loc pred)
  (@tan-%25-rev (store-i32 (g '%24 loc) (g '%n loc) mem) loc pred))
(defund @tan-%24-rev (mem loc pred)
  (@tan-m21.1-rev mem (s '%24 (@__ieee754_rem_pio2 (g '%22 loc) (g '%23 loc)) loc) pred))
(defund @tan-%23-rev (mem loc pred)
  (@tan-%24-rev mem (s '%23 (getelementptr-double (g '%y loc) 0) loc) pred))
(defund @tan-%22-rev (mem loc pred)
  (@tan-%23-rev mem (s '%22 (load-double (g '%2 loc) mem) loc) pred))

(defund @tan-%21-rev (mem loc pred)
  (@tan-%22-rev mem loc pred))

(defund @tan-%21-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%22 (load-double (g '%2 loc) mem) loc))
    (loc (s '%23 (getelementptr-double (g '%y loc) 0) loc))
    (loc (s '%24 (@__ieee754_rem_pio2 (g '%22 loc) (g '%23 loc)) loc))
    (mem (store-i32 (g '%24 loc) (g '%n loc) mem))
    (loc (s '%25 (getelementptr-double (g '%y loc) 0) loc))
    (loc (s '%26 (load-double (g '%25 loc) mem) loc))
    (loc (s '%27 (getelementptr-double (g '%y loc) 1) loc))
    (loc (s '%28 (load-double (g '%27 loc) mem) loc))
    (loc (s '%29 (load-i32 (g '%n loc) mem) loc))
    (loc (s '%30 (and-i32 (g '%29 loc) 1) loc))
    (loc (s '%31 (shl-i32 (g '%30 loc) 1) loc))
    (loc (s '%32 (sub-i32 1 (g '%31 loc)) loc))
    (loc (s '%33 (@__kernel_tan (g '%26 loc) (g '%28 loc) (g '%32 loc)) loc))
    (mem (store-double (g '%33 loc) (g '%1 loc) mem))
    (succ '%34))
  (mv succ mem loc)))

(defruled @tan-%21-expand-bb
  (equal (@tan-%21-bb mem loc pred)
         (@tan-%21-rev mem loc pred))
  :enable (@tan-%21-bb @tan-%21-rev
    @tan-%22-rev
    @tan-%23-rev
    @tan-%24-rev
    @tan-m21.1-rev
    @tan-%25-rev
    @tan-%26-rev
    @tan-%27-rev
    @tan-%28-rev
    @tan-%29-rev
    @tan-%30-rev
    @tan-%31-rev
    @tan-%32-rev
    @tan-%33-rev
    @tan-m21.2-rev
    @tan-succ21-rev)
  :disable s-diff-s)

(defund @tan-%34-mem (s34)
  (car s34))
(defund @tan-%34-loc (s34)
  (cadr s34))
(defund @tan-%34-pred (s34)
  (caddr s34))
(defund @tan-%35-val (s34)
  (load-double (g '%1 (@tan-%34-loc s34)) (@tan-%34-mem s34)))
(defund @tan-%35-loc (s34)
  (s '%35 (@tan-%35-val s34) (@tan-%34-loc s34)))
(defund @tan-succ34-lab (s34)
  (declare (ignore s34))
  'ret)

(defund @tan-succ34-rev (mem loc pred)
  (declare (ignore pred))
  (mv 'ret mem loc))
(defund @tan-%35-rev (mem loc pred)
  (@tan-succ34-rev mem (s '%35 (load-double (g '%1 loc) mem) loc) pred))

(defund @tan-%34-rev (mem loc pred)
  (@tan-%35-rev mem loc pred))

(defund @tan-%34-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%35 (load-double (g '%1 loc) mem) loc))
    (succ 'ret))
  (mv succ mem loc)))

(defruled @tan-%34-expand-bb
  (equal (@tan-%34-bb mem loc pred)
         (@tan-%34-rev mem loc pred))
  :enable (@tan-%34-bb @tan-%34-rev
    @tan-%35-rev
    @tan-succ34-rev)
  :disable s-diff-s)

(defund @tan-step (label mem loc pred)
  (case label
    (%0 (@tan-%0-bb mem loc pred))
    (%10 (@tan-%10-bb mem loc pred))
    (%14 (@tan-%14-bb mem loc pred))
    (%17 (@tan-%17-bb mem loc pred))
    (%21 (@tan-%21-bb mem loc pred))
    (%34 (@tan-%34-bb mem loc pred))
    (otherwise (mv nil mem loc))))

(defund @tan-steps (label mem loc pred n)
  (declare (xargs :measure (nfix n)))
  (if (equal label 'ret)
      (g '%35 loc)
    (if (zp n) nil
      (mv-let
        (new-label new-mem new-loc)
        (@tan-step label mem loc pred)
        (@tan-steps new-label new-mem new-loc label (1- n))))))

(defund @tan (%x)
  (declare (ignore %x))
   nil)
