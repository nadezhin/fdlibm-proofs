(in-package "ACL2")
(include-book "../llvm")

(defconst *__kernel_sin-globals* '())

(defund @__kernel_sin-%0-bb (mem loc)
  (b* (
    (mem (alloca-double 'ret 1 mem))
    (mem (alloca-double 'x 1 mem))
    (mem (alloca-double 'y 1 mem))
    (mem (alloca-i32 'iy 1 mem))
    (mem (alloca-double 'z 1 mem))
    (mem (alloca-double 'r 1 mem))
    (mem (alloca-double 'v 1 mem))
    (mem (alloca-i32 'ix 1 mem))
    (mem (store-double (g '%x loc) '(x . 0) mem))
    (mem (store-double (g '%y loc) '(y . 0) mem))
    (mem (store-i32 (g '%iy loc) '(iy . 0) mem))
    (loc (s '%5 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%6 (getelementptr-i32 (g '%5 loc) 1) loc))
    (loc (s '%7 (load-i32 (g '%6 loc) mem) loc))
    (loc (s '%8 (and-i32 (g '%7 loc) 2147483647) loc))
    (mem (store-i32 (g '%8 loc) '(ix . 0) mem))
    (loc (s '%9 (load-i32 '(ix . 0) mem) loc))
    (loc (s '%10 (icmp-slt-i32 (g '%9 loc) 1044381696) loc)))
  (case (g '%10 loc)
    (-1 (mv '@__kernel_sin-%11-bb mem loc))
    ( 0 (mv '@__kernel_sin-%18-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__kernel_sin-%11-bb (mem loc)
  (b* (
    (loc (s '%12 (load-double '(x . 0) mem) loc))
    (loc (s '%13 (fptosi-double-to-i32 (g '%12 loc)) loc))
    (loc (s '%14 (icmp-eq-i32 (g '%13 loc) 0) loc)))
  (case (g '%14 loc)
    (-1 (mv '@__kernel_sin-%15-bb mem loc))
    ( 0 (mv '@__kernel_sin-%17-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__kernel_sin-%15-bb (mem loc)
  (b* (
    (loc (s '%16 (load-double '(x . 0) mem) loc))
    (mem (store-double (g '%16 loc) '(ret . 0) mem)))
  (mv '@__kernel_sin-%64-bb mem loc)))

(defund @__kernel_sin-%17-bb (mem loc)
  (b* ()
  (mv '@__kernel_sin-%18-bb mem loc)))

(defund @__kernel_sin-%18-bb (mem loc)
  (b* (
    (loc (s '%19 (load-double '(x . 0) mem) loc))
    (loc (s '%20 (load-double '(x . 0) mem) loc))
    (loc (s '%21 (fmul-double (g '%19 loc) (g '%20 loc)) loc))
    (mem (store-double (g '%21 loc) '(z . 0) mem))
    (loc (s '%22 (load-double '(z . 0) mem) loc))
    (loc (s '%23 (load-double '(x . 0) mem) loc))
    (loc (s '%24 (fmul-double (g '%22 loc) (g '%23 loc)) loc))
    (mem (store-double (g '%24 loc) '(v . 0) mem))
    (loc (s '%25 (load-double '(z . 0) mem) loc))
    (loc (s '%26 (load-double '(z . 0) mem) loc))
    (loc (s '%27 (load-double '(z . 0) mem) loc))
    (loc (s '%28 (load-double '(z . 0) mem) loc))
    (loc (s '%29 (fmul-double (g '%28 loc) #x3DE5D93A5ACFD57C) loc))
    (loc (s '%30 (fadd-double #xBE5AE5E68A2B9CEB (g '%29 loc)) loc))
    (loc (s '%31 (fmul-double (g '%27 loc) (g '%30 loc)) loc))
    (loc (s '%32 (fadd-double #x3EC71DE357B1FE7D (g '%31 loc)) loc))
    (loc (s '%33 (fmul-double (g '%26 loc) (g '%32 loc)) loc))
    (loc (s '%34 (fadd-double #xBF2A01A019C161D5 (g '%33 loc)) loc))
    (loc (s '%35 (fmul-double (g '%25 loc) (g '%34 loc)) loc))
    (loc (s '%36 (fadd-double #x3F8111111110F8A6 (g '%35 loc)) loc))
    (mem (store-double (g '%36 loc) '(r . 0) mem))
    (loc (s '%37 (load-i32 '(iy . 0) mem) loc))
    (loc (s '%38 (icmp-eq-i32 (g '%37 loc) 0) loc)))
  (case (g '%38 loc)
    (-1 (mv '@__kernel_sin-%39-bb mem loc))
    ( 0 (mv '@__kernel_sin-%48-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__kernel_sin-%39-bb (mem loc)
  (b* (
    (loc (s '%40 (load-double '(x . 0) mem) loc))
    (loc (s '%41 (load-double '(v . 0) mem) loc))
    (loc (s '%42 (load-double '(z . 0) mem) loc))
    (loc (s '%43 (load-double '(r . 0) mem) loc))
    (loc (s '%44 (fmul-double (g '%42 loc) (g '%43 loc)) loc))
    (loc (s '%45 (fadd-double #xBFC5555555555549 (g '%44 loc)) loc))
    (loc (s '%46 (fmul-double (g '%41 loc) (g '%45 loc)) loc))
    (loc (s '%47 (fadd-double (g '%40 loc) (g '%46 loc)) loc))
    (mem (store-double (g '%47 loc) '(ret . 0) mem)))
  (mv '@__kernel_sin-%64-bb mem loc)))

(defund @__kernel_sin-%48-bb (mem loc)
  (b* (
    (loc (s '%49 (load-double '(x . 0) mem) loc))
    (loc (s '%50 (load-double '(z . 0) mem) loc))
    (loc (s '%51 (load-double '(y . 0) mem) loc))
    (loc (s '%52 (fmul-double #x3fe0000000000000 (g '%51 loc)) loc))
    (loc (s '%53 (load-double '(v . 0) mem) loc))
    (loc (s '%54 (load-double '(r . 0) mem) loc))
    (loc (s '%55 (fmul-double (g '%53 loc) (g '%54 loc)) loc))
    (loc (s '%56 (fsub-double (g '%52 loc) (g '%55 loc)) loc))
    (loc (s '%57 (fmul-double (g '%50 loc) (g '%56 loc)) loc))
    (loc (s '%58 (load-double '(y . 0) mem) loc))
    (loc (s '%59 (fsub-double (g '%57 loc) (g '%58 loc)) loc))
    (loc (s '%60 (load-double '(v . 0) mem) loc))
    (loc (s '%61 (fmul-double (g '%60 loc) #xBFC5555555555549) loc))
    (loc (s '%62 (fsub-double (g '%59 loc) (g '%61 loc)) loc))
    (loc (s '%63 (fsub-double (g '%49 loc) (g '%62 loc)) loc))
    (mem (store-double (g '%63 loc) '(ret . 0) mem)))
  (mv '@__kernel_sin-%64-bb mem loc)))

(defund @__kernel_sin-%64-bb (mem loc)
  (b* (
    (loc (s '%65 (load-double '(ret . 0) mem) loc)))
  (mv 'ret mem loc)))

(defund @__kernel_sin-step (label mem loc)
  (case label
    (%-0 (@__kernel_sin-%0-bb mem loc))
    (%-11 (@__kernel_sin-%11-bb mem loc))
    (%-15 (@__kernel_sin-%15-bb mem loc))
    (%-17 (@__kernel_sin-%17-bb mem loc))
    (%-18 (@__kernel_sin-%18-bb mem loc))
    (%-39 (@__kernel_sin-%39-bb mem loc))
    (%-48 (@__kernel_sin-%48-bb mem loc))
    (%-64 (@__kernel_sin-%64-bb mem loc))
    (otherwise (mv nil mem loc))))

(defund @__kernel_sin-steps (label mem loc n)
  (declare (xargs :measure (nfix n)))
  (if (equal label 'ret)
      (g '%65 loc)
    (if (zp n) nil
      (mv-let
        (label mem loc)
        (@__kernel_sin-step label mem loc)
        (@__kernel_sin-steps label mem loc (1- n))))))

(defund @__kernel_sin (%x %y %iy)
  (declare (ignore %x %y %iy))
   nil)
