(in-package "ACL2")
(include-book "../llvm")

(defconst *__ieee754_log-globals* '(
  (zero #x00000000 #x00000000)))

(defund @__ieee754_log-%0-bb (mem loc)
  (b* (
    (mem (alloca-double 'ret 1 mem))
    (mem (alloca-double 'x 1 mem))
    (mem (alloca-double 'hfsq 1 mem))
    (mem (alloca-double 'f 1 mem))
    (mem (alloca-double 's 1 mem))
    (mem (alloca-double 'z 1 mem))
    (mem (alloca-double 'R 1 mem))
    (mem (alloca-double 'w 1 mem))
    (mem (alloca-double 't1 1 mem))
    (mem (alloca-double 't2 1 mem))
    (mem (alloca-double 'dk 1 mem))
    (mem (alloca-i32 'k 1 mem))
    (mem (alloca-i32 'hx 1 mem))
    (mem (alloca-i32 'i 1 mem))
    (mem (alloca-i32 'j 1 mem))
    (mem (alloca-i32 'lx 1 mem))
    (mem (store-double (g '%x loc) '(x . 0) mem))
    (loc (s '%3 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%4 (getelementptr-i32 (g '%3 loc) 1) loc))
    (loc (s '%5 (load-i32 (g '%4 loc) mem) loc))
    (mem (store-i32 (g '%5 loc) '(hx . 0) mem))
    (loc (s '%6 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%7 (load-i32 (g '%6 loc) mem) loc))
    (mem (store-i32 (g '%7 loc) '(lx . 0) mem))
    (mem (store-i32 0 '(k . 0) mem))
    (loc (s '%8 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%9 (icmp-slt-i32 (g '%8 loc) 1048576) loc)))
  (case (g '%9 loc)
    (-1 (mv '@__ieee754_log-%10-bb mem loc))
    ( 0 (mv '@__ieee754_log-%36-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_log-%10-bb (mem loc)
  (b* (
    (loc (s '%11 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%12 (and-i32 (g '%11 loc) 2147483647) loc))
    (loc (s '%13 (load-i32 '(lx . 0) mem) loc))
    (loc (s '%14 (or-i32 (g '%12 loc) (g '%13 loc)) loc))
    (loc (s '%15 (icmp-eq-i32 (g '%14 loc) 0) loc)))
  (case (g '%15 loc)
    (-1 (mv '@__ieee754_log-%16-bb mem loc))
    ( 0 (mv '@__ieee754_log-%19-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_log-%16-bb (mem loc)
  (b* (
    (loc (s '%17 (load-double '(zero . 0) mem) loc))
    (loc (s '%18 (fdiv-double #xC350000000000000 (g '%17 loc)) loc))
    (mem (store-double (g '%18 loc) '(ret . 0) mem)))
  (mv '@__ieee754_log-%215-bb mem loc)))

(defund @__ieee754_log-%19-bb (mem loc)
  (b* (
    (loc (s '%20 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%21 (icmp-slt-i32 (g '%20 loc) 0) loc)))
  (case (g '%21 loc)
    (-1 (mv '@__ieee754_log-%22-bb mem loc))
    ( 0 (mv '@__ieee754_log-%28-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_log-%22-bb (mem loc)
  (b* (
    (loc (s '%23 (load-double '(x . 0) mem) loc))
    (loc (s '%24 (load-double '(x . 0) mem) loc))
    (loc (s '%25 (fsub-double (g '%23 loc) (g '%24 loc)) loc))
    (loc (s '%26 (load-double '(zero . 0) mem) loc))
    (loc (s '%27 (fdiv-double (g '%25 loc) (g '%26 loc)) loc))
    (mem (store-double (g '%27 loc) '(ret . 0) mem)))
  (mv '@__ieee754_log-%215-bb mem loc)))

(defund @__ieee754_log-%28-bb (mem loc)
  (b* (
    (loc (s '%29 (load-i32 '(k . 0) mem) loc))
    (loc (s '%30 (sub-i32 (g '%29 loc) 54) loc))
    (mem (store-i32 (g '%30 loc) '(k . 0) mem))
    (loc (s '%31 (load-double '(x . 0) mem) loc))
    (loc (s '%32 (fmul-double (g '%31 loc) #x4350000000000000) loc))
    (mem (store-double (g '%32 loc) '(x . 0) mem))
    (loc (s '%33 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%34 (getelementptr-i32 (g '%33 loc) 1) loc))
    (loc (s '%35 (load-i32 (g '%34 loc) mem) loc))
    (mem (store-i32 (g '%35 loc) '(hx . 0) mem)))
  (mv '@__ieee754_log-%36-bb mem loc)))

(defund @__ieee754_log-%36-bb (mem loc)
  (b* (
    (loc (s '%37 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%38 (icmp-sge-i32 (g '%37 loc) 2146435072) loc)))
  (case (g '%38 loc)
    (-1 (mv '@__ieee754_log-%39-bb mem loc))
    ( 0 (mv '@__ieee754_log-%43-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_log-%39-bb (mem loc)
  (b* (
    (loc (s '%40 (load-double '(x . 0) mem) loc))
    (loc (s '%41 (load-double '(x . 0) mem) loc))
    (loc (s '%42 (fadd-double (g '%40 loc) (g '%41 loc)) loc))
    (mem (store-double (g '%42 loc) '(ret . 0) mem)))
  (mv '@__ieee754_log-%215-bb mem loc)))

(defund @__ieee754_log-%43-bb (mem loc)
  (b* (
    (loc (s '%44 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%45 (ashr-i32 (g '%44 loc) 20) loc))
    (loc (s '%46 (sub-i32 (g '%45 loc) 1023) loc))
    (loc (s '%47 (load-i32 '(k . 0) mem) loc))
    (loc (s '%48 (add-i32 (g '%47 loc) (g '%46 loc)) loc))
    (mem (store-i32 (g '%48 loc) '(k . 0) mem))
    (loc (s '%49 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%50 (and-i32 (g '%49 loc) 1048575) loc))
    (mem (store-i32 (g '%50 loc) '(hx . 0) mem))
    (loc (s '%51 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%52 (add-i32 (g '%51 loc) 614244) loc))
    (loc (s '%53 (and-i32 (g '%52 loc) 1048576) loc))
    (mem (store-i32 (g '%53 loc) '(i . 0) mem))
    (loc (s '%54 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%55 (load-i32 '(i . 0) mem) loc))
    (loc (s '%56 (xor-i32 (g '%55 loc) 1072693248) loc))
    (loc (s '%57 (or-i32 (g '%54 loc) (g '%56 loc)) loc))
    (loc (s '%58 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%59 (getelementptr-i32 (g '%58 loc) 1) loc))
    (mem (store-i32 (g '%57 loc) (g '%59 loc) mem))
    (loc (s '%60 (load-i32 '(i . 0) mem) loc))
    (loc (s '%61 (ashr-i32 (g '%60 loc) 20) loc))
    (loc (s '%62 (load-i32 '(k . 0) mem) loc))
    (loc (s '%63 (add-i32 (g '%62 loc) (g '%61 loc)) loc))
    (mem (store-i32 (g '%63 loc) '(k . 0) mem))
    (loc (s '%64 (load-double '(x . 0) mem) loc))
    (loc (s '%65 (fsub-double (g '%64 loc) #x3ff0000000000000) loc))
    (mem (store-double (g '%65 loc) '(f . 0) mem))
    (loc (s '%66 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%67 (add-i32 2 (g '%66 loc)) loc))
    (loc (s '%68 (and-i32 1048575 (g '%67 loc)) loc))
    (loc (s '%69 (icmp-slt-i32 (g '%68 loc) 3) loc)))
  (case (g '%69 loc)
    (-1 (mv '@__ieee754_log-%70-bb mem loc))
    ( 0 (mv '@__ieee754_log-%113-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_log-%70-bb (mem loc)
  (b* (
    (loc (s '%71 (load-double '(f . 0) mem) loc))
    (loc (s '%72 (load-double '(zero . 0) mem) loc))
    (loc (s '%73 (fcmp-oeq-double (g '%71 loc) (g '%72 loc)) loc)))
  (case (g '%73 loc)
    (-1 (mv '@__ieee754_log-%74-bb mem loc))
    ( 0 (mv '@__ieee754_log-%87-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_log-%74-bb (mem loc)
  (b* (
    (loc (s '%75 (load-i32 '(k . 0) mem) loc))
    (loc (s '%76 (icmp-eq-i32 (g '%75 loc) 0) loc)))
  (case (g '%76 loc)
    (-1 (mv '@__ieee754_log-%77-bb mem loc))
    ( 0 (mv '@__ieee754_log-%79-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_log-%77-bb (mem loc)
  (b* (
    (loc (s '%78 (load-double '(zero . 0) mem) loc))
    (mem (store-double (g '%78 loc) '(ret . 0) mem)))
  (mv '@__ieee754_log-%215-bb mem loc)))

(defund @__ieee754_log-%79-bb (mem loc)
  (b* (
    (loc (s '%80 (load-i32 '(k . 0) mem) loc))
    (loc (s '%81 (sitofp-i32-to-double (g '%80 loc)) loc))
    (mem (store-double (g '%81 loc) '(dk . 0) mem))
    (loc (s '%82 (load-double '(dk . 0) mem) loc))
    (loc (s '%83 (fmul-double (g '%82 loc) #x3FE62E42FEE00000) loc))
    (loc (s '%84 (load-double '(dk . 0) mem) loc))
    (loc (s '%85 (fmul-double (g '%84 loc) #x3DEA39EF35793C76) loc))
    (loc (s '%86 (fadd-double (g '%83 loc) (g '%85 loc)) loc))
    (mem (store-double (g '%86 loc) '(ret . 0) mem)))
  (mv '@__ieee754_log-%215-bb mem loc)))

(defund @__ieee754_log-%87-bb (mem loc)
  (b* (
    (loc (s '%88 (load-double '(f . 0) mem) loc))
    (loc (s '%89 (load-double '(f . 0) mem) loc))
    (loc (s '%90 (fmul-double (g '%88 loc) (g '%89 loc)) loc))
    (loc (s '%91 (load-double '(f . 0) mem) loc))
    (loc (s '%92 (fmul-double #x3FD5555555555555 (g '%91 loc)) loc))
    (loc (s '%93 (fsub-double #x3fe0000000000000 (g '%92 loc)) loc))
    (loc (s '%94 (fmul-double (g '%90 loc) (g '%93 loc)) loc))
    (mem (store-double (g '%94 loc) '(R . 0) mem))
    (loc (s '%95 (load-i32 '(k . 0) mem) loc))
    (loc (s '%96 (icmp-eq-i32 (g '%95 loc) 0) loc)))
  (case (g '%96 loc)
    (-1 (mv '@__ieee754_log-%97-bb mem loc))
    ( 0 (mv '@__ieee754_log-%101-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_log-%97-bb (mem loc)
  (b* (
    (loc (s '%98 (load-double '(f . 0) mem) loc))
    (loc (s '%99 (load-double '(R . 0) mem) loc))
    (loc (s '%100 (fsub-double (g '%98 loc) (g '%99 loc)) loc))
    (mem (store-double (g '%100 loc) '(ret . 0) mem)))
  (mv '@__ieee754_log-%215-bb mem loc)))

(defund @__ieee754_log-%101-bb (mem loc)
  (b* (
    (loc (s '%102 (load-i32 '(k . 0) mem) loc))
    (loc (s '%103 (sitofp-i32-to-double (g '%102 loc)) loc))
    (mem (store-double (g '%103 loc) '(dk . 0) mem))
    (loc (s '%104 (load-double '(dk . 0) mem) loc))
    (loc (s '%105 (fmul-double (g '%104 loc) #x3FE62E42FEE00000) loc))
    (loc (s '%106 (load-double '(R . 0) mem) loc))
    (loc (s '%107 (load-double '(dk . 0) mem) loc))
    (loc (s '%108 (fmul-double (g '%107 loc) #x3DEA39EF35793C76) loc))
    (loc (s '%109 (fsub-double (g '%106 loc) (g '%108 loc)) loc))
    (loc (s '%110 (load-double '(f . 0) mem) loc))
    (loc (s '%111 (fsub-double (g '%109 loc) (g '%110 loc)) loc))
    (loc (s '%112 (fsub-double (g '%105 loc) (g '%111 loc)) loc))
    (mem (store-double (g '%112 loc) '(ret . 0) mem)))
  (mv '@__ieee754_log-%215-bb mem loc)))

(defund @__ieee754_log-%113-bb (mem loc)
  (b* (
    (loc (s '%114 (load-double '(f . 0) mem) loc))
    (loc (s '%115 (load-double '(f . 0) mem) loc))
    (loc (s '%116 (fadd-double #x4000000000000000 (g '%115 loc)) loc))
    (loc (s '%117 (fdiv-double (g '%114 loc) (g '%116 loc)) loc))
    (mem (store-double (g '%117 loc) '(s . 0) mem))
    (loc (s '%118 (load-i32 '(k . 0) mem) loc))
    (loc (s '%119 (sitofp-i32-to-double (g '%118 loc)) loc))
    (mem (store-double (g '%119 loc) '(dk . 0) mem))
    (loc (s '%120 (load-double '(s . 0) mem) loc))
    (loc (s '%121 (load-double '(s . 0) mem) loc))
    (loc (s '%122 (fmul-double (g '%120 loc) (g '%121 loc)) loc))
    (mem (store-double (g '%122 loc) '(z . 0) mem))
    (loc (s '%123 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%124 (sub-i32 (g '%123 loc) 398458) loc))
    (mem (store-i32 (g '%124 loc) '(i . 0) mem))
    (loc (s '%125 (load-double '(z . 0) mem) loc))
    (loc (s '%126 (load-double '(z . 0) mem) loc))
    (loc (s '%127 (fmul-double (g '%125 loc) (g '%126 loc)) loc))
    (mem (store-double (g '%127 loc) '(w . 0) mem))
    (loc (s '%128 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%129 (sub-i32 440401 (g '%128 loc)) loc))
    (mem (store-i32 (g '%129 loc) '(j . 0) mem))
    (loc (s '%130 (load-double '(w . 0) mem) loc))
    (loc (s '%131 (load-double '(w . 0) mem) loc))
    (loc (s '%132 (load-double '(w . 0) mem) loc))
    (loc (s '%133 (fmul-double (g '%132 loc) #x3FC39A09D078C69F) loc))
    (loc (s '%134 (fadd-double #x3FCC71C51D8E78AF (g '%133 loc)) loc))
    (loc (s '%135 (fmul-double (g '%131 loc) (g '%134 loc)) loc))
    (loc (s '%136 (fadd-double #x3FD999999997FA04 (g '%135 loc)) loc))
    (loc (s '%137 (fmul-double (g '%130 loc) (g '%136 loc)) loc))
    (mem (store-double (g '%137 loc) '(t1 . 0) mem))
    (loc (s '%138 (load-double '(z . 0) mem) loc))
    (loc (s '%139 (load-double '(w . 0) mem) loc))
    (loc (s '%140 (load-double '(w . 0) mem) loc))
    (loc (s '%141 (load-double '(w . 0) mem) loc))
    (loc (s '%142 (fmul-double (g '%141 loc) #x3FC2F112DF3E5244) loc))
    (loc (s '%143 (fadd-double #x3FC7466496CB03DE (g '%142 loc)) loc))
    (loc (s '%144 (fmul-double (g '%140 loc) (g '%143 loc)) loc))
    (loc (s '%145 (fadd-double #x3FD2492494229359 (g '%144 loc)) loc))
    (loc (s '%146 (fmul-double (g '%139 loc) (g '%145 loc)) loc))
    (loc (s '%147 (fadd-double #x3FE5555555555593 (g '%146 loc)) loc))
    (loc (s '%148 (fmul-double (g '%138 loc) (g '%147 loc)) loc))
    (mem (store-double (g '%148 loc) '(t2 . 0) mem))
    (loc (s '%149 (load-i32 '(j . 0) mem) loc))
    (loc (s '%150 (load-i32 '(i . 0) mem) loc))
    (loc (s '%151 (or-i32 (g '%150 loc) (g '%149 loc)) loc))
    (mem (store-i32 (g '%151 loc) '(i . 0) mem))
    (loc (s '%152 (load-double '(t2 . 0) mem) loc))
    (loc (s '%153 (load-double '(t1 . 0) mem) loc))
    (loc (s '%154 (fadd-double (g '%152 loc) (g '%153 loc)) loc))
    (mem (store-double (g '%154 loc) '(R . 0) mem))
    (loc (s '%155 (load-i32 '(i . 0) mem) loc))
    (loc (s '%156 (icmp-sgt-i32 (g '%155 loc) 0) loc)))
  (case (g '%156 loc)
    (-1 (mv '@__ieee754_log-%157-bb mem loc))
    ( 0 (mv '@__ieee754_log-%190-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_log-%157-bb (mem loc)
  (b* (
    (loc (s '%158 (load-double '(f . 0) mem) loc))
    (loc (s '%159 (fmul-double #x3fe0000000000000 (g '%158 loc)) loc))
    (loc (s '%160 (load-double '(f . 0) mem) loc))
    (loc (s '%161 (fmul-double (g '%159 loc) (g '%160 loc)) loc))
    (mem (store-double (g '%161 loc) '(hfsq . 0) mem))
    (loc (s '%162 (load-i32 '(k . 0) mem) loc))
    (loc (s '%163 (icmp-eq-i32 (g '%162 loc) 0) loc)))
  (case (g '%163 loc)
    (-1 (mv '@__ieee754_log-%164-bb mem loc))
    ( 0 (mv '@__ieee754_log-%174-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_log-%164-bb (mem loc)
  (b* (
    (loc (s '%165 (load-double '(f . 0) mem) loc))
    (loc (s '%166 (load-double '(hfsq . 0) mem) loc))
    (loc (s '%167 (load-double '(s . 0) mem) loc))
    (loc (s '%168 (load-double '(hfsq . 0) mem) loc))
    (loc (s '%169 (load-double '(R . 0) mem) loc))
    (loc (s '%170 (fadd-double (g '%168 loc) (g '%169 loc)) loc))
    (loc (s '%171 (fmul-double (g '%167 loc) (g '%170 loc)) loc))
    (loc (s '%172 (fsub-double (g '%166 loc) (g '%171 loc)) loc))
    (loc (s '%173 (fsub-double (g '%165 loc) (g '%172 loc)) loc))
    (mem (store-double (g '%173 loc) '(ret . 0) mem)))
  (mv '@__ieee754_log-%215-bb mem loc)))

(defund @__ieee754_log-%174-bb (mem loc)
  (b* (
    (loc (s '%175 (load-double '(dk . 0) mem) loc))
    (loc (s '%176 (fmul-double (g '%175 loc) #x3FE62E42FEE00000) loc))
    (loc (s '%177 (load-double '(hfsq . 0) mem) loc))
    (loc (s '%178 (load-double '(s . 0) mem) loc))
    (loc (s '%179 (load-double '(hfsq . 0) mem) loc))
    (loc (s '%180 (load-double '(R . 0) mem) loc))
    (loc (s '%181 (fadd-double (g '%179 loc) (g '%180 loc)) loc))
    (loc (s '%182 (fmul-double (g '%178 loc) (g '%181 loc)) loc))
    (loc (s '%183 (load-double '(dk . 0) mem) loc))
    (loc (s '%184 (fmul-double (g '%183 loc) #x3DEA39EF35793C76) loc))
    (loc (s '%185 (fadd-double (g '%182 loc) (g '%184 loc)) loc))
    (loc (s '%186 (fsub-double (g '%177 loc) (g '%185 loc)) loc))
    (loc (s '%187 (load-double '(f . 0) mem) loc))
    (loc (s '%188 (fsub-double (g '%186 loc) (g '%187 loc)) loc))
    (loc (s '%189 (fsub-double (g '%176 loc) (g '%188 loc)) loc))
    (mem (store-double (g '%189 loc) '(ret . 0) mem)))
  (mv '@__ieee754_log-%215-bb mem loc)))

(defund @__ieee754_log-%190-bb (mem loc)
  (b* (
    (loc (s '%191 (load-i32 '(k . 0) mem) loc))
    (loc (s '%192 (icmp-eq-i32 (g '%191 loc) 0) loc)))
  (case (g '%192 loc)
    (-1 (mv '@__ieee754_log-%193-bb mem loc))
    ( 0 (mv '@__ieee754_log-%201-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_log-%193-bb (mem loc)
  (b* (
    (loc (s '%194 (load-double '(f . 0) mem) loc))
    (loc (s '%195 (load-double '(s . 0) mem) loc))
    (loc (s '%196 (load-double '(f . 0) mem) loc))
    (loc (s '%197 (load-double '(R . 0) mem) loc))
    (loc (s '%198 (fsub-double (g '%196 loc) (g '%197 loc)) loc))
    (loc (s '%199 (fmul-double (g '%195 loc) (g '%198 loc)) loc))
    (loc (s '%200 (fsub-double (g '%194 loc) (g '%199 loc)) loc))
    (mem (store-double (g '%200 loc) '(ret . 0) mem)))
  (mv '@__ieee754_log-%215-bb mem loc)))

(defund @__ieee754_log-%201-bb (mem loc)
  (b* (
    (loc (s '%202 (load-double '(dk . 0) mem) loc))
    (loc (s '%203 (fmul-double (g '%202 loc) #x3FE62E42FEE00000) loc))
    (loc (s '%204 (load-double '(s . 0) mem) loc))
    (loc (s '%205 (load-double '(f . 0) mem) loc))
    (loc (s '%206 (load-double '(R . 0) mem) loc))
    (loc (s '%207 (fsub-double (g '%205 loc) (g '%206 loc)) loc))
    (loc (s '%208 (fmul-double (g '%204 loc) (g '%207 loc)) loc))
    (loc (s '%209 (load-double '(dk . 0) mem) loc))
    (loc (s '%210 (fmul-double (g '%209 loc) #x3DEA39EF35793C76) loc))
    (loc (s '%211 (fsub-double (g '%208 loc) (g '%210 loc)) loc))
    (loc (s '%212 (load-double '(f . 0) mem) loc))
    (loc (s '%213 (fsub-double (g '%211 loc) (g '%212 loc)) loc))
    (loc (s '%214 (fsub-double (g '%203 loc) (g '%213 loc)) loc))
    (mem (store-double (g '%214 loc) '(ret . 0) mem)))
  (mv '@__ieee754_log-%215-bb mem loc)))

(defund @__ieee754_log-%215-bb (mem loc)
  (b* (
    (loc (s '%216 (load-double '(ret . 0) mem) loc)))
  (mv 'ret mem loc)))

(defund @__ieee754_log-step (label mem loc)
  (case label
    (%-0 (@__ieee754_log-%0-bb mem loc))
    (%-10 (@__ieee754_log-%10-bb mem loc))
    (%-16 (@__ieee754_log-%16-bb mem loc))
    (%-19 (@__ieee754_log-%19-bb mem loc))
    (%-22 (@__ieee754_log-%22-bb mem loc))
    (%-28 (@__ieee754_log-%28-bb mem loc))
    (%-36 (@__ieee754_log-%36-bb mem loc))
    (%-39 (@__ieee754_log-%39-bb mem loc))
    (%-43 (@__ieee754_log-%43-bb mem loc))
    (%-70 (@__ieee754_log-%70-bb mem loc))
    (%-74 (@__ieee754_log-%74-bb mem loc))
    (%-77 (@__ieee754_log-%77-bb mem loc))
    (%-79 (@__ieee754_log-%79-bb mem loc))
    (%-87 (@__ieee754_log-%87-bb mem loc))
    (%-97 (@__ieee754_log-%97-bb mem loc))
    (%-101 (@__ieee754_log-%101-bb mem loc))
    (%-113 (@__ieee754_log-%113-bb mem loc))
    (%-157 (@__ieee754_log-%157-bb mem loc))
    (%-164 (@__ieee754_log-%164-bb mem loc))
    (%-174 (@__ieee754_log-%174-bb mem loc))
    (%-190 (@__ieee754_log-%190-bb mem loc))
    (%-193 (@__ieee754_log-%193-bb mem loc))
    (%-201 (@__ieee754_log-%201-bb mem loc))
    (%-215 (@__ieee754_log-%215-bb mem loc))
    (otherwise (mv nil mem loc))))

(defund @__ieee754_log-steps (label mem loc n)
  (declare (xargs :measure (nfix n)))
  (if (equal label 'ret)
      (g '%216 loc)
    (if (zp n) nil
      (mv-let
        (label mem loc)
        (@__ieee754_log-step label mem loc)
        (@__ieee754_log-steps label mem loc (1- n))))))

(defund @__ieee754_log (%x)
  (declare (ignore %x))
   nil)
