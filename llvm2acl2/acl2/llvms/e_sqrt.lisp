(in-package "ACL2")
(include-book "../llvm")

(defconst *__ieee754_sqrt-globals* '())

(defund @__ieee754_sqrt-%0-bb (mem loc)
  (b* (
    (mem (alloca-double 'ret 1 mem))
    (mem (alloca-double 'x 1 mem))
    (mem (alloca-double 'z 1 mem))
    (mem (alloca-i32 'sign 1 mem))
    (mem (alloca-i32 'r 1 mem))
    (mem (alloca-i32 't1 1 mem))
    (mem (alloca-i32 's1 1 mem))
    (mem (alloca-i32 'ix1 1 mem))
    (mem (alloca-i32 'q1 1 mem))
    (mem (alloca-i32 'ix0 1 mem))
    (mem (alloca-i32 's0 1 mem))
    (mem (alloca-i32 'q 1 mem))
    (mem (alloca-i32 'm 1 mem))
    (mem (alloca-i32 't 1 mem))
    (mem (alloca-i32 'i 1 mem))
    (mem (store-double (g '%x loc) '(x . 0) mem))
    (mem (store-i32 -2147483648 '(sign . 0) mem))
    (loc (s '%3 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%4 (getelementptr-i32 (g '%3 loc) 1) loc))
    (loc (s '%5 (load-i32 (g '%4 loc) mem) loc))
    (mem (store-i32 (g '%5 loc) '(ix0 . 0) mem))
    (loc (s '%6 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%7 (load-i32 (g '%6 loc) mem) loc))
    (mem (store-i32 (g '%7 loc) '(ix1 . 0) mem))
    (loc (s '%8 (load-i32 '(ix0 . 0) mem) loc))
    (loc (s '%9 (and-i32 (g '%8 loc) 2146435072) loc))
    (loc (s '%10 (icmp-eq-i32 (g '%9 loc) 2146435072) loc)))
  (case (g '%10 loc)
    (-1 (mv '@__ieee754_sqrt-%11-bb mem loc))
    ( 0 (mv '@__ieee754_sqrt-%17-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_sqrt-%11-bb (mem loc)
  (b* (
    (loc (s '%12 (load-double '(x . 0) mem) loc))
    (loc (s '%13 (load-double '(x . 0) mem) loc))
    (loc (s '%14 (fmul-double (g '%12 loc) (g '%13 loc)) loc))
    (loc (s '%15 (load-double '(x . 0) mem) loc))
    (loc (s '%16 (fadd-double (g '%14 loc) (g '%15 loc)) loc))
    (mem (store-double (g '%16 loc) '(ret . 0) mem)))
  (mv '@__ieee754_sqrt-%282-bb mem loc)))

(defund @__ieee754_sqrt-%17-bb (mem loc)
  (b* (
    (loc (s '%18 (load-i32 '(ix0 . 0) mem) loc))
    (loc (s '%19 (icmp-sle-i32 (g '%18 loc) 0) loc)))
  (case (g '%19 loc)
    (-1 (mv '@__ieee754_sqrt-%20-bb mem loc))
    ( 0 (mv '@__ieee754_sqrt-%43-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_sqrt-%20-bb (mem loc)
  (b* (
    (loc (s '%21 (load-i32 '(ix0 . 0) mem) loc))
    (loc (s '%22 (load-i32 '(sign . 0) mem) loc))
    (loc (s '%23 (xor-i32 (g '%22 loc) -1) loc))
    (loc (s '%24 (and-i32 (g '%21 loc) (g '%23 loc)) loc))
    (loc (s '%25 (load-i32 '(ix1 . 0) mem) loc))
    (loc (s '%26 (or-i32 (g '%24 loc) (g '%25 loc)) loc))
    (loc (s '%27 (icmp-eq-i32 (g '%26 loc) 0) loc)))
  (case (g '%27 loc)
    (-1 (mv '@__ieee754_sqrt-%28-bb mem loc))
    ( 0 (mv '@__ieee754_sqrt-%30-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_sqrt-%28-bb (mem loc)
  (b* (
    (loc (s '%29 (load-double '(x . 0) mem) loc))
    (mem (store-double (g '%29 loc) '(ret . 0) mem)))
  (mv '@__ieee754_sqrt-%282-bb mem loc)))

(defund @__ieee754_sqrt-%30-bb (mem loc)
  (b* (
    (loc (s '%31 (load-i32 '(ix0 . 0) mem) loc))
    (loc (s '%32 (icmp-slt-i32 (g '%31 loc) 0) loc)))
  (case (g '%32 loc)
    (-1 (mv '@__ieee754_sqrt-%33-bb mem loc))
    ( 0 (mv '@__ieee754_sqrt-%41-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_sqrt-%33-bb (mem loc)
  (b* (
    (loc (s '%34 (load-double '(x . 0) mem) loc))
    (loc (s '%35 (load-double '(x . 0) mem) loc))
    (loc (s '%36 (fsub-double (g '%34 loc) (g '%35 loc)) loc))
    (loc (s '%37 (load-double '(x . 0) mem) loc))
    (loc (s '%38 (load-double '(x . 0) mem) loc))
    (loc (s '%39 (fsub-double (g '%37 loc) (g '%38 loc)) loc))
    (loc (s '%40 (fdiv-double (g '%36 loc) (g '%39 loc)) loc))
    (mem (store-double (g '%40 loc) '(ret . 0) mem)))
  (mv '@__ieee754_sqrt-%282-bb mem loc)))

(defund @__ieee754_sqrt-%41-bb (mem loc)
  (b* ()
  (mv '@__ieee754_sqrt-%42-bb mem loc)))

(defund @__ieee754_sqrt-%42-bb (mem loc)
  (b* ()
  (mv '@__ieee754_sqrt-%43-bb mem loc)))

(defund @__ieee754_sqrt-%43-bb (mem loc)
  (b* (
    (loc (s '%44 (load-i32 '(ix0 . 0) mem) loc))
    (loc (s '%45 (ashr-i32 (g '%44 loc) 20) loc))
    (mem (store-i32 (g '%45 loc) '(m . 0) mem))
    (loc (s '%46 (load-i32 '(m . 0) mem) loc))
    (loc (s '%47 (icmp-eq-i32 (g '%46 loc) 0) loc)))
  (case (g '%47 loc)
    (-1 (mv '@__ieee754_sqrt-%48-bb mem loc))
    ( 0 (mv '@__ieee754_sqrt-%86-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_sqrt-%48-bb (mem loc)
  (b* ()
  (mv '@__ieee754_sqrt-%49-bb mem loc)))

(defund @__ieee754_sqrt-%49-bb (mem loc)
  (b* (
    (loc (s '%50 (load-i32 '(ix0 . 0) mem) loc))
    (loc (s '%51 (icmp-eq-i32 (g '%50 loc) 0) loc)))
  (case (g '%51 loc)
    (-1 (mv '@__ieee754_sqrt-%52-bb mem loc))
    ( 0 (mv '@__ieee754_sqrt-%61-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_sqrt-%52-bb (mem loc)
  (b* (
    (loc (s '%53 (load-i32 '(m . 0) mem) loc))
    (loc (s '%54 (sub-i32 (g '%53 loc) 21) loc))
    (mem (store-i32 (g '%54 loc) '(m . 0) mem))
    (loc (s '%55 (load-i32 '(ix1 . 0) mem) loc))
    (loc (s '%56 (lshr-i32 (g '%55 loc) 11) loc))
    (loc (s '%57 (load-i32 '(ix0 . 0) mem) loc))
    (loc (s '%58 (or-i32 (g '%57 loc) (g '%56 loc)) loc))
    (mem (store-i32 (g '%58 loc) '(ix0 . 0) mem))
    (loc (s '%59 (load-i32 '(ix1 . 0) mem) loc))
    (loc (s '%60 (shl-i32 (g '%59 loc) 21) loc))
    (mem (store-i32 (g '%60 loc) '(ix1 . 0) mem)))
  (mv '@__ieee754_sqrt-%49-bb mem loc)))

(defund @__ieee754_sqrt-%61-bb (mem loc)
  (b* (
    (mem (store-i32 0 '(i . 0) mem)))
  (mv '@__ieee754_sqrt-%62-bb mem loc)))

(defund @__ieee754_sqrt-%62-bb (mem loc)
  (b* (
    (loc (s '%63 (load-i32 '(ix0 . 0) mem) loc))
    (loc (s '%64 (and-i32 (g '%63 loc) 1048576) loc))
    (loc (s '%65 (icmp-eq-i32 (g '%64 loc) 0) loc)))
  (case (g '%65 loc)
    (-1 (mv '@__ieee754_sqrt-%66-bb mem loc))
    ( 0 (mv '@__ieee754_sqrt-%72-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_sqrt-%66-bb (mem loc)
  (b* (
    (loc (s '%67 (load-i32 '(ix0 . 0) mem) loc))
    (loc (s '%68 (shl-i32 (g '%67 loc) 1) loc))
    (mem (store-i32 (g '%68 loc) '(ix0 . 0) mem)))
  (mv '@__ieee754_sqrt-%69-bb mem loc)))

(defund @__ieee754_sqrt-%69-bb (mem loc)
  (b* (
    (loc (s '%70 (load-i32 '(i . 0) mem) loc))
    (loc (s '%71 (add-i32 (g '%70 loc) 1) loc))
    (mem (store-i32 (g '%71 loc) '(i . 0) mem)))
  (mv '@__ieee754_sqrt-%62-bb mem loc)))

(defund @__ieee754_sqrt-%72-bb (mem loc)
  (b* (
    (loc (s '%73 (load-i32 '(i . 0) mem) loc))
    (loc (s '%74 (sub-i32 (g '%73 loc) 1) loc))
    (loc (s '%75 (load-i32 '(m . 0) mem) loc))
    (loc (s '%76 (sub-i32 (g '%75 loc) (g '%74 loc)) loc))
    (mem (store-i32 (g '%76 loc) '(m . 0) mem))
    (loc (s '%77 (load-i32 '(ix1 . 0) mem) loc))
    (loc (s '%78 (load-i32 '(i . 0) mem) loc))
    (loc (s '%79 (sub-i32 32 (g '%78 loc)) loc))
    (loc (s '%80 (lshr-i32 (g '%77 loc) (g '%79 loc)) loc))
    (loc (s '%81 (load-i32 '(ix0 . 0) mem) loc))
    (loc (s '%82 (or-i32 (g '%81 loc) (g '%80 loc)) loc))
    (mem (store-i32 (g '%82 loc) '(ix0 . 0) mem))
    (loc (s '%83 (load-i32 '(i . 0) mem) loc))
    (loc (s '%84 (load-i32 '(ix1 . 0) mem) loc))
    (loc (s '%85 (shl-i32 (g '%84 loc) (g '%83 loc)) loc))
    (mem (store-i32 (g '%85 loc) '(ix1 . 0) mem)))
  (mv '@__ieee754_sqrt-%86-bb mem loc)))

(defund @__ieee754_sqrt-%86-bb (mem loc)
  (b* (
    (loc (s '%87 (load-i32 '(m . 0) mem) loc))
    (loc (s '%88 (sub-i32 (g '%87 loc) 1023) loc))
    (mem (store-i32 (g '%88 loc) '(m . 0) mem))
    (loc (s '%89 (load-i32 '(ix0 . 0) mem) loc))
    (loc (s '%90 (and-i32 (g '%89 loc) 1048575) loc))
    (loc (s '%91 (or-i32 (g '%90 loc) 1048576) loc))
    (mem (store-i32 (g '%91 loc) '(ix0 . 0) mem))
    (loc (s '%92 (load-i32 '(m . 0) mem) loc))
    (loc (s '%93 (and-i32 (g '%92 loc) 1) loc))
    (loc (s '%94 (icmp-ne-i32 (g '%93 loc) 0) loc)))
  (case (g '%94 loc)
    (-1 (mv '@__ieee754_sqrt-%95-bb mem loc))
    ( 0 (mv '@__ieee754_sqrt-%107-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_sqrt-%95-bb (mem loc)
  (b* (
    (loc (s '%96 (load-i32 '(ix0 . 0) mem) loc))
    (loc (s '%97 (load-i32 '(ix1 . 0) mem) loc))
    (loc (s '%98 (load-i32 '(sign . 0) mem) loc))
    (loc (s '%99 (and-i32 (g '%97 loc) (g '%98 loc)) loc))
    (loc (s '%100 (lshr-i32 (g '%99 loc) 31) loc))
    (loc (s '%101 (add-i32 (g '%96 loc) (g '%100 loc)) loc))
    (loc (s '%102 (load-i32 '(ix0 . 0) mem) loc))
    (loc (s '%103 (add-i32 (g '%102 loc) (g '%101 loc)) loc))
    (mem (store-i32 (g '%103 loc) '(ix0 . 0) mem))
    (loc (s '%104 (load-i32 '(ix1 . 0) mem) loc))
    (loc (s '%105 (load-i32 '(ix1 . 0) mem) loc))
    (loc (s '%106 (add-i32 (g '%105 loc) (g '%104 loc)) loc))
    (mem (store-i32 (g '%106 loc) '(ix1 . 0) mem)))
  (mv '@__ieee754_sqrt-%107-bb mem loc)))

(defund @__ieee754_sqrt-%107-bb (mem loc)
  (b* (
    (loc (s '%108 (load-i32 '(m . 0) mem) loc))
    (loc (s '%109 (ashr-i32 (g '%108 loc) 1) loc))
    (mem (store-i32 (g '%109 loc) '(m . 0) mem))
    (loc (s '%110 (load-i32 '(ix0 . 0) mem) loc))
    (loc (s '%111 (load-i32 '(ix1 . 0) mem) loc))
    (loc (s '%112 (load-i32 '(sign . 0) mem) loc))
    (loc (s '%113 (and-i32 (g '%111 loc) (g '%112 loc)) loc))
    (loc (s '%114 (lshr-i32 (g '%113 loc) 31) loc))
    (loc (s '%115 (add-i32 (g '%110 loc) (g '%114 loc)) loc))
    (loc (s '%116 (load-i32 '(ix0 . 0) mem) loc))
    (loc (s '%117 (add-i32 (g '%116 loc) (g '%115 loc)) loc))
    (mem (store-i32 (g '%117 loc) '(ix0 . 0) mem))
    (loc (s '%118 (load-i32 '(ix1 . 0) mem) loc))
    (loc (s '%119 (load-i32 '(ix1 . 0) mem) loc))
    (loc (s '%120 (add-i32 (g '%119 loc) (g '%118 loc)) loc))
    (mem (store-i32 (g '%120 loc) '(ix1 . 0) mem))
    (mem (store-i32 0 '(s1 . 0) mem))
    (mem (store-i32 0 '(s0 . 0) mem))
    (mem (store-i32 0 '(q1 . 0) mem))
    (mem (store-i32 0 '(q . 0) mem))
    (mem (store-i32 2097152 '(r . 0) mem)))
  (mv '@__ieee754_sqrt-%121-bb mem loc)))

(defund @__ieee754_sqrt-%121-bb (mem loc)
  (b* (
    (loc (s '%122 (load-i32 '(r . 0) mem) loc))
    (loc (s '%123 (icmp-ne-i32 (g '%122 loc) 0) loc)))
  (case (g '%123 loc)
    (-1 (mv '@__ieee754_sqrt-%124-bb mem loc))
    ( 0 (mv '@__ieee754_sqrt-%155-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_sqrt-%124-bb (mem loc)
  (b* (
    (loc (s '%125 (load-i32 '(s0 . 0) mem) loc))
    (loc (s '%126 (load-i32 '(r . 0) mem) loc))
    (loc (s '%127 (add-i32 (g '%125 loc) (g '%126 loc)) loc))
    (mem (store-i32 (g '%127 loc) '(t . 0) mem))
    (loc (s '%128 (load-i32 '(t . 0) mem) loc))
    (loc (s '%129 (load-i32 '(ix0 . 0) mem) loc))
    (loc (s '%130 (icmp-sle-i32 (g '%128 loc) (g '%129 loc)) loc)))
  (case (g '%130 loc)
    (-1 (mv '@__ieee754_sqrt-%131-bb mem loc))
    ( 0 (mv '@__ieee754_sqrt-%141-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_sqrt-%131-bb (mem loc)
  (b* (
    (loc (s '%132 (load-i32 '(t . 0) mem) loc))
    (loc (s '%133 (load-i32 '(r . 0) mem) loc))
    (loc (s '%134 (add-i32 (g '%132 loc) (g '%133 loc)) loc))
    (mem (store-i32 (g '%134 loc) '(s0 . 0) mem))
    (loc (s '%135 (load-i32 '(t . 0) mem) loc))
    (loc (s '%136 (load-i32 '(ix0 . 0) mem) loc))
    (loc (s '%137 (sub-i32 (g '%136 loc) (g '%135 loc)) loc))
    (mem (store-i32 (g '%137 loc) '(ix0 . 0) mem))
    (loc (s '%138 (load-i32 '(r . 0) mem) loc))
    (loc (s '%139 (load-i32 '(q . 0) mem) loc))
    (loc (s '%140 (add-i32 (g '%139 loc) (g '%138 loc)) loc))
    (mem (store-i32 (g '%140 loc) '(q . 0) mem)))
  (mv '@__ieee754_sqrt-%141-bb mem loc)))

(defund @__ieee754_sqrt-%141-bb (mem loc)
  (b* (
    (loc (s '%142 (load-i32 '(ix0 . 0) mem) loc))
    (loc (s '%143 (load-i32 '(ix1 . 0) mem) loc))
    (loc (s '%144 (load-i32 '(sign . 0) mem) loc))
    (loc (s '%145 (and-i32 (g '%143 loc) (g '%144 loc)) loc))
    (loc (s '%146 (lshr-i32 (g '%145 loc) 31) loc))
    (loc (s '%147 (add-i32 (g '%142 loc) (g '%146 loc)) loc))
    (loc (s '%148 (load-i32 '(ix0 . 0) mem) loc))
    (loc (s '%149 (add-i32 (g '%148 loc) (g '%147 loc)) loc))
    (mem (store-i32 (g '%149 loc) '(ix0 . 0) mem))
    (loc (s '%150 (load-i32 '(ix1 . 0) mem) loc))
    (loc (s '%151 (load-i32 '(ix1 . 0) mem) loc))
    (loc (s '%152 (add-i32 (g '%151 loc) (g '%150 loc)) loc))
    (mem (store-i32 (g '%152 loc) '(ix1 . 0) mem))
    (loc (s '%153 (load-i32 '(r . 0) mem) loc))
    (loc (s '%154 (lshr-i32 (g '%153 loc) 1) loc))
    (mem (store-i32 (g '%154 loc) '(r . 0) mem)))
  (mv '@__ieee754_sqrt-%121-bb mem loc)))

(defund @__ieee754_sqrt-%155-bb (mem loc)
  (b* (
    (loc (s '%156 (load-i32 '(sign . 0) mem) loc))
    (mem (store-i32 (g '%156 loc) '(r . 0) mem)))
  (mv '@__ieee754_sqrt-%157-bb mem loc)))

(defund @__ieee754_sqrt-%157-bb (mem loc)
  (b* (
    (loc (s '%158 (load-i32 '(r . 0) mem) loc))
    (loc (s '%159 (icmp-ne-i32 (g '%158 loc) 0) loc)))
  (case (g '%159 loc)
    (-1 (mv '@__ieee754_sqrt-%160-bb mem loc))
    ( 0 (mv '@__ieee754_sqrt-%224-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_sqrt-%160-bb (mem loc)
  (b* (
    (loc (s '%161 (load-i32 '(s1 . 0) mem) loc))
    (loc (s '%162 (load-i32 '(r . 0) mem) loc))
    (loc (s '%163 (add-i32 (g '%161 loc) (g '%162 loc)) loc))
    (mem (store-i32 (g '%163 loc) '(t1 . 0) mem))
    (loc (s '%164 (load-i32 '(s0 . 0) mem) loc))
    (mem (store-i32 (g '%164 loc) '(t . 0) mem))
    (loc (s '%165 (load-i32 '(t . 0) mem) loc))
    (loc (s '%166 (load-i32 '(ix0 . 0) mem) loc))
    (loc (s '%167 (icmp-slt-i32 (g '%165 loc) (g '%166 loc)) loc)))
  (case (g '%167 loc)
    (-1 (mv '@__ieee754_sqrt-%176-bb mem loc))
    ( 0 (mv '@__ieee754_sqrt-%168-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_sqrt-%168-bb (mem loc)
  (b* (
    (loc (s '%169 (load-i32 '(t . 0) mem) loc))
    (loc (s '%170 (load-i32 '(ix0 . 0) mem) loc))
    (loc (s '%171 (icmp-eq-i32 (g '%169 loc) (g '%170 loc)) loc)))
  (case (g '%171 loc)
    (-1 (mv '@__ieee754_sqrt-%172-bb mem loc))
    ( 0 (mv '@__ieee754_sqrt-%210-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_sqrt-%172-bb (mem loc)
  (b* (
    (loc (s '%173 (load-i32 '(t1 . 0) mem) loc))
    (loc (s '%174 (load-i32 '(ix1 . 0) mem) loc))
    (loc (s '%175 (icmp-ule-i32 (g '%173 loc) (g '%174 loc)) loc)))
  (case (g '%175 loc)
    (-1 (mv '@__ieee754_sqrt-%176-bb mem loc))
    ( 0 (mv '@__ieee754_sqrt-%210-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_sqrt-%176-bb (mem loc)
  (b* (
    (loc (s '%177 (load-i32 '(t1 . 0) mem) loc))
    (loc (s '%178 (load-i32 '(r . 0) mem) loc))
    (loc (s '%179 (add-i32 (g '%177 loc) (g '%178 loc)) loc))
    (mem (store-i32 (g '%179 loc) '(s1 . 0) mem))
    (loc (s '%180 (load-i32 '(t1 . 0) mem) loc))
    (loc (s '%181 (load-i32 '(sign . 0) mem) loc))
    (loc (s '%182 (and-i32 (g '%180 loc) (g '%181 loc)) loc))
    (loc (s '%183 (load-i32 '(sign . 0) mem) loc))
    (loc (s '%184 (icmp-eq-i32 (g '%182 loc) (g '%183 loc)) loc)))
  (case (g '%184 loc)
    (-1 (mv '@__ieee754_sqrt-%185-bb mem loc))
    ( 0 (mv '@__ieee754_sqrt-%193-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_sqrt-%185-bb (mem loc)
  (b* (
    (loc (s '%186 (load-i32 '(s1 . 0) mem) loc))
    (loc (s '%187 (load-i32 '(sign . 0) mem) loc))
    (loc (s '%188 (and-i32 (g '%186 loc) (g '%187 loc)) loc))
    (loc (s '%189 (icmp-eq-i32 (g '%188 loc) 0) loc)))
  (case (g '%189 loc)
    (-1 (mv '@__ieee754_sqrt-%190-bb mem loc))
    ( 0 (mv '@__ieee754_sqrt-%193-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_sqrt-%190-bb (mem loc)
  (b* (
    (loc (s '%191 (load-i32 '(s0 . 0) mem) loc))
    (loc (s '%192 (add-i32 (g '%191 loc) 1) loc))
    (mem (store-i32 (g '%192 loc) '(s0 . 0) mem)))
  (mv '@__ieee754_sqrt-%193-bb mem loc)))

(defund @__ieee754_sqrt-%193-bb (mem loc)
  (b* (
    (loc (s '%194 (load-i32 '(t . 0) mem) loc))
    (loc (s '%195 (load-i32 '(ix0 . 0) mem) loc))
    (loc (s '%196 (sub-i32 (g '%195 loc) (g '%194 loc)) loc))
    (mem (store-i32 (g '%196 loc) '(ix0 . 0) mem))
    (loc (s '%197 (load-i32 '(ix1 . 0) mem) loc))
    (loc (s '%198 (load-i32 '(t1 . 0) mem) loc))
    (loc (s '%199 (icmp-ult-i32 (g '%197 loc) (g '%198 loc)) loc)))
  (case (g '%199 loc)
    (-1 (mv '@__ieee754_sqrt-%200-bb mem loc))
    ( 0 (mv '@__ieee754_sqrt-%203-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_sqrt-%200-bb (mem loc)
  (b* (
    (loc (s '%201 (load-i32 '(ix0 . 0) mem) loc))
    (loc (s '%202 (sub-i32 (g '%201 loc) 1) loc))
    (mem (store-i32 (g '%202 loc) '(ix0 . 0) mem)))
  (mv '@__ieee754_sqrt-%203-bb mem loc)))

(defund @__ieee754_sqrt-%203-bb (mem loc)
  (b* (
    (loc (s '%204 (load-i32 '(t1 . 0) mem) loc))
    (loc (s '%205 (load-i32 '(ix1 . 0) mem) loc))
    (loc (s '%206 (sub-i32 (g '%205 loc) (g '%204 loc)) loc))
    (mem (store-i32 (g '%206 loc) '(ix1 . 0) mem))
    (loc (s '%207 (load-i32 '(r . 0) mem) loc))
    (loc (s '%208 (load-i32 '(q1 . 0) mem) loc))
    (loc (s '%209 (add-i32 (g '%208 loc) (g '%207 loc)) loc))
    (mem (store-i32 (g '%209 loc) '(q1 . 0) mem)))
  (mv '@__ieee754_sqrt-%210-bb mem loc)))

(defund @__ieee754_sqrt-%210-bb (mem loc)
  (b* (
    (loc (s '%211 (load-i32 '(ix0 . 0) mem) loc))
    (loc (s '%212 (load-i32 '(ix1 . 0) mem) loc))
    (loc (s '%213 (load-i32 '(sign . 0) mem) loc))
    (loc (s '%214 (and-i32 (g '%212 loc) (g '%213 loc)) loc))
    (loc (s '%215 (lshr-i32 (g '%214 loc) 31) loc))
    (loc (s '%216 (add-i32 (g '%211 loc) (g '%215 loc)) loc))
    (loc (s '%217 (load-i32 '(ix0 . 0) mem) loc))
    (loc (s '%218 (add-i32 (g '%217 loc) (g '%216 loc)) loc))
    (mem (store-i32 (g '%218 loc) '(ix0 . 0) mem))
    (loc (s '%219 (load-i32 '(ix1 . 0) mem) loc))
    (loc (s '%220 (load-i32 '(ix1 . 0) mem) loc))
    (loc (s '%221 (add-i32 (g '%220 loc) (g '%219 loc)) loc))
    (mem (store-i32 (g '%221 loc) '(ix1 . 0) mem))
    (loc (s '%222 (load-i32 '(r . 0) mem) loc))
    (loc (s '%223 (lshr-i32 (g '%222 loc) 1) loc))
    (mem (store-i32 (g '%223 loc) '(r . 0) mem)))
  (mv '@__ieee754_sqrt-%157-bb mem loc)))

(defund @__ieee754_sqrt-%224-bb (mem loc)
  (b* (
    (loc (s '%225 (load-i32 '(ix0 . 0) mem) loc))
    (loc (s '%226 (load-i32 '(ix1 . 0) mem) loc))
    (loc (s '%227 (or-i32 (g '%225 loc) (g '%226 loc)) loc))
    (loc (s '%228 (icmp-ne-i32 (g '%227 loc) 0) loc)))
  (case (g '%228 loc)
    (-1 (mv '@__ieee754_sqrt-%229-bb mem loc))
    ( 0 (mv '@__ieee754_sqrt-%258-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_sqrt-%229-bb (mem loc)
  (b* (
    (mem (store-double #x3ff0000000000000 '(z . 0) mem))
    (loc (s '%230 (load-double '(z . 0) mem) loc))
    (loc (s '%231 (fcmp-oge-double (g '%230 loc) #x3ff0000000000000) loc)))
  (case (g '%231 loc)
    (-1 (mv '@__ieee754_sqrt-%232-bb mem loc))
    ( 0 (mv '@__ieee754_sqrt-%257-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_sqrt-%232-bb (mem loc)
  (b* (
    (mem (store-double #x3ff0000000000000 '(z . 0) mem))
    (loc (s '%233 (load-i32 '(q1 . 0) mem) loc))
    (loc (s '%234 (icmp-eq-i32 (g '%233 loc) -1) loc)))
  (case (g '%234 loc)
    (-1 (mv '@__ieee754_sqrt-%235-bb mem loc))
    ( 0 (mv '@__ieee754_sqrt-%238-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_sqrt-%235-bb (mem loc)
  (b* (
    (mem (store-i32 0 '(q1 . 0) mem))
    (loc (s '%236 (load-i32 '(q . 0) mem) loc))
    (loc (s '%237 (add-i32 (g '%236 loc) 1) loc))
    (mem (store-i32 (g '%237 loc) '(q . 0) mem)))
  (mv '@__ieee754_sqrt-%256-bb mem loc)))

(defund @__ieee754_sqrt-%238-bb (mem loc)
  (b* (
    (loc (s '%239 (load-double '(z . 0) mem) loc))
    (loc (s '%240 (fcmp-ogt-double (g '%239 loc) #x3ff0000000000000) loc)))
  (case (g '%240 loc)
    (-1 (mv '@__ieee754_sqrt-%241-bb mem loc))
    ( 0 (mv '@__ieee754_sqrt-%250-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_sqrt-%241-bb (mem loc)
  (b* (
    (loc (s '%242 (load-i32 '(q1 . 0) mem) loc))
    (loc (s '%243 (icmp-eq-i32 (g '%242 loc) -2) loc)))
  (case (g '%243 loc)
    (-1 (mv '@__ieee754_sqrt-%244-bb mem loc))
    ( 0 (mv '@__ieee754_sqrt-%247-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_sqrt-%244-bb (mem loc)
  (b* (
    (loc (s '%245 (load-i32 '(q . 0) mem) loc))
    (loc (s '%246 (add-i32 (g '%245 loc) 1) loc))
    (mem (store-i32 (g '%246 loc) '(q . 0) mem)))
  (mv '@__ieee754_sqrt-%247-bb mem loc)))

(defund @__ieee754_sqrt-%247-bb (mem loc)
  (b* (
    (loc (s '%248 (load-i32 '(q1 . 0) mem) loc))
    (loc (s '%249 (add-i32 (g '%248 loc) 2) loc))
    (mem (store-i32 (g '%249 loc) '(q1 . 0) mem)))
  (mv '@__ieee754_sqrt-%255-bb mem loc)))

(defund @__ieee754_sqrt-%250-bb (mem loc)
  (b* (
    (loc (s '%251 (load-i32 '(q1 . 0) mem) loc))
    (loc (s '%252 (and-i32 (g '%251 loc) 1) loc))
    (loc (s '%253 (load-i32 '(q1 . 0) mem) loc))
    (loc (s '%254 (add-i32 (g '%253 loc) (g '%252 loc)) loc))
    (mem (store-i32 (g '%254 loc) '(q1 . 0) mem)))
  (mv '@__ieee754_sqrt-%255-bb mem loc)))

(defund @__ieee754_sqrt-%255-bb (mem loc)
  (b* ()
  (mv '@__ieee754_sqrt-%256-bb mem loc)))

(defund @__ieee754_sqrt-%256-bb (mem loc)
  (b* ()
  (mv '@__ieee754_sqrt-%257-bb mem loc)))

(defund @__ieee754_sqrt-%257-bb (mem loc)
  (b* ()
  (mv '@__ieee754_sqrt-%258-bb mem loc)))

(defund @__ieee754_sqrt-%258-bb (mem loc)
  (b* (
    (loc (s '%259 (load-i32 '(q . 0) mem) loc))
    (loc (s '%260 (ashr-i32 (g '%259 loc) 1) loc))
    (loc (s '%261 (add-i32 (g '%260 loc) 1071644672) loc))
    (mem (store-i32 (g '%261 loc) '(ix0 . 0) mem))
    (loc (s '%262 (load-i32 '(q1 . 0) mem) loc))
    (loc (s '%263 (lshr-i32 (g '%262 loc) 1) loc))
    (mem (store-i32 (g '%263 loc) '(ix1 . 0) mem))
    (loc (s '%264 (load-i32 '(q . 0) mem) loc))
    (loc (s '%265 (and-i32 (g '%264 loc) 1) loc))
    (loc (s '%266 (icmp-eq-i32 (g '%265 loc) 1) loc)))
  (case (g '%266 loc)
    (-1 (mv '@__ieee754_sqrt-%267-bb mem loc))
    ( 0 (mv '@__ieee754_sqrt-%271-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__ieee754_sqrt-%267-bb (mem loc)
  (b* (
    (loc (s '%268 (load-i32 '(sign . 0) mem) loc))
    (loc (s '%269 (load-i32 '(ix1 . 0) mem) loc))
    (loc (s '%270 (or-i32 (g '%269 loc) (g '%268 loc)) loc))
    (mem (store-i32 (g '%270 loc) '(ix1 . 0) mem)))
  (mv '@__ieee754_sqrt-%271-bb mem loc)))

(defund @__ieee754_sqrt-%271-bb (mem loc)
  (b* (
    (loc (s '%272 (load-i32 '(m . 0) mem) loc))
    (loc (s '%273 (shl-i32 (g '%272 loc) 20) loc))
    (loc (s '%274 (load-i32 '(ix0 . 0) mem) loc))
    (loc (s '%275 (add-i32 (g '%274 loc) (g '%273 loc)) loc))
    (mem (store-i32 (g '%275 loc) '(ix0 . 0) mem))
    (loc (s '%276 (load-i32 '(ix0 . 0) mem) loc))
    (loc (s '%277 (bitcast-double*-to-i32* '(z . 0)) loc))
    (loc (s '%278 (getelementptr-i32 (g '%277 loc) 1) loc))
    (mem (store-i32 (g '%276 loc) (g '%278 loc) mem))
    (loc (s '%279 (load-i32 '(ix1 . 0) mem) loc))
    (loc (s '%280 (bitcast-double*-to-i32* '(z . 0)) loc))
    (mem (store-i32 (g '%279 loc) (g '%280 loc) mem))
    (loc (s '%281 (load-double '(z . 0) mem) loc))
    (mem (store-double (g '%281 loc) '(ret . 0) mem)))
  (mv '@__ieee754_sqrt-%282-bb mem loc)))

(defund @__ieee754_sqrt-%282-bb (mem loc)
  (b* (
    (loc (s '%283 (load-double '(ret . 0) mem) loc)))
  (mv 'ret mem loc)))

(defund @__ieee754_sqrt-step (label mem loc)
  (case label
    (%-0 (@__ieee754_sqrt-%0-bb mem loc))
    (%-11 (@__ieee754_sqrt-%11-bb mem loc))
    (%-17 (@__ieee754_sqrt-%17-bb mem loc))
    (%-20 (@__ieee754_sqrt-%20-bb mem loc))
    (%-28 (@__ieee754_sqrt-%28-bb mem loc))
    (%-30 (@__ieee754_sqrt-%30-bb mem loc))
    (%-33 (@__ieee754_sqrt-%33-bb mem loc))
    (%-41 (@__ieee754_sqrt-%41-bb mem loc))
    (%-42 (@__ieee754_sqrt-%42-bb mem loc))
    (%-43 (@__ieee754_sqrt-%43-bb mem loc))
    (%-48 (@__ieee754_sqrt-%48-bb mem loc))
    (%-49 (@__ieee754_sqrt-%49-bb mem loc))
    (%-52 (@__ieee754_sqrt-%52-bb mem loc))
    (%-61 (@__ieee754_sqrt-%61-bb mem loc))
    (%-62 (@__ieee754_sqrt-%62-bb mem loc))
    (%-66 (@__ieee754_sqrt-%66-bb mem loc))
    (%-69 (@__ieee754_sqrt-%69-bb mem loc))
    (%-72 (@__ieee754_sqrt-%72-bb mem loc))
    (%-86 (@__ieee754_sqrt-%86-bb mem loc))
    (%-95 (@__ieee754_sqrt-%95-bb mem loc))
    (%-107 (@__ieee754_sqrt-%107-bb mem loc))
    (%-121 (@__ieee754_sqrt-%121-bb mem loc))
    (%-124 (@__ieee754_sqrt-%124-bb mem loc))
    (%-131 (@__ieee754_sqrt-%131-bb mem loc))
    (%-141 (@__ieee754_sqrt-%141-bb mem loc))
    (%-155 (@__ieee754_sqrt-%155-bb mem loc))
    (%-157 (@__ieee754_sqrt-%157-bb mem loc))
    (%-160 (@__ieee754_sqrt-%160-bb mem loc))
    (%-168 (@__ieee754_sqrt-%168-bb mem loc))
    (%-172 (@__ieee754_sqrt-%172-bb mem loc))
    (%-176 (@__ieee754_sqrt-%176-bb mem loc))
    (%-185 (@__ieee754_sqrt-%185-bb mem loc))
    (%-190 (@__ieee754_sqrt-%190-bb mem loc))
    (%-193 (@__ieee754_sqrt-%193-bb mem loc))
    (%-200 (@__ieee754_sqrt-%200-bb mem loc))
    (%-203 (@__ieee754_sqrt-%203-bb mem loc))
    (%-210 (@__ieee754_sqrt-%210-bb mem loc))
    (%-224 (@__ieee754_sqrt-%224-bb mem loc))
    (%-229 (@__ieee754_sqrt-%229-bb mem loc))
    (%-232 (@__ieee754_sqrt-%232-bb mem loc))
    (%-235 (@__ieee754_sqrt-%235-bb mem loc))
    (%-238 (@__ieee754_sqrt-%238-bb mem loc))
    (%-241 (@__ieee754_sqrt-%241-bb mem loc))
    (%-244 (@__ieee754_sqrt-%244-bb mem loc))
    (%-247 (@__ieee754_sqrt-%247-bb mem loc))
    (%-250 (@__ieee754_sqrt-%250-bb mem loc))
    (%-255 (@__ieee754_sqrt-%255-bb mem loc))
    (%-256 (@__ieee754_sqrt-%256-bb mem loc))
    (%-257 (@__ieee754_sqrt-%257-bb mem loc))
    (%-258 (@__ieee754_sqrt-%258-bb mem loc))
    (%-267 (@__ieee754_sqrt-%267-bb mem loc))
    (%-271 (@__ieee754_sqrt-%271-bb mem loc))
    (%-282 (@__ieee754_sqrt-%282-bb mem loc))
    (otherwise (mv nil mem loc))))

(defund @__ieee754_sqrt-steps (label mem loc n)
  (declare (xargs :measure (nfix n)))
  (if (equal label 'ret)
      (g '%283 loc)
    (if (zp n) nil
      (mv-let
        (label mem loc)
        (@__ieee754_sqrt-step label mem loc)
        (@__ieee754_sqrt-steps label mem loc (1- n))))))

(defund @__ieee754_sqrt (%x)
  (declare (ignore %x))
   nil)
