(in-package "ACL2")
(include-book "../llvm")
(include-book "s_fabs")

(defconst *atan-globals* '(
  (atanhi #x0561bb4f #x3fddac67 #x54442d18 #x3fe921fb #xd281f69b #x3fef730b #x54442d18 #x3ff921fb)
  (atanlo #x222f65e2 #x3c7a2b7f #x33145c07 #x3c81a626 #x7af0cbbd #x3c700788 #x33145c07 #x3c91a626)
  (aT #x5555550d #x3fd55555 #x9998ebc4 #xbfc99999 #x920083ff #x3fc24924 #xfe231671 #xbfbc71c6 #xc54c206e #x3fb745cd #xaf749a6d #xbfb3b0f2 #xa0d03d51 #x3fb10d66 #x52defd9a #xbfadde2d #x24760deb #x3fa97b4b #x2c6a6c2f #xbfa2b444 #xe322da11 #x3f90ad3a)))

(defund @atan-%0-bb (mem loc)
  (b* (
    (mem (alloca-double 'ret 1 mem))
    (mem (alloca-double 'x 1 mem))
    (mem (alloca-double 'w 1 mem))
    (mem (alloca-double 's1 1 mem))
    (mem (alloca-double 's2 1 mem))
    (mem (alloca-double 'z 1 mem))
    (mem (alloca-i32 'ix 1 mem))
    (mem (alloca-i32 'hx 1 mem))
    (mem (alloca-i32 'id 1 mem))
    (mem (store-double (g '%x loc) '(x . 0) mem))
    (loc (s '%3 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%4 (getelementptr-i32 (g '%3 loc) 1) loc))
    (loc (s '%5 (load-i32 (g '%4 loc) mem) loc))
    (mem (store-i32 (g '%5 loc) '(hx . 0) mem))
    (loc (s '%6 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%7 (and-i32 (g '%6 loc) 2147483647) loc))
    (mem (store-i32 (g '%7 loc) '(ix . 0) mem))
    (loc (s '%8 (load-i32 '(ix . 0) mem) loc))
    (loc (s '%9 (icmp-sge-i32 (g '%8 loc) 1141899264) loc)))
  (case (g '%9 loc)
    (-1 (mv '@atan-%10-bb mem loc))
    ( 0 (mv '@atan-%36-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @atan-%10-bb (mem loc)
  (b* (
    (loc (s '%11 (load-i32 '(ix . 0) mem) loc))
    (loc (s '%12 (icmp-sgt-i32 (g '%11 loc) 2146435072) loc)))
  (case (g '%12 loc)
    (-1 (mv '@atan-%20-bb mem loc))
    ( 0 (mv '@atan-%13-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @atan-%13-bb (mem loc)
  (b* (
    (loc (s '%14 (load-i32 '(ix . 0) mem) loc))
    (loc (s '%15 (icmp-eq-i32 (g '%14 loc) 2146435072) loc)))
  (case (g '%15 loc)
    (-1 (mv '@atan-%16-bb mem loc))
    ( 0 (mv '@atan-%24-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @atan-%16-bb (mem loc)
  (b* (
    (loc (s '%17 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%18 (load-i32 (g '%17 loc) mem) loc))
    (loc (s '%19 (icmp-ne-i32 (g '%18 loc) 0) loc)))
  (case (g '%19 loc)
    (-1 (mv '@atan-%20-bb mem loc))
    ( 0 (mv '@atan-%24-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @atan-%20-bb (mem loc)
  (b* (
    (loc (s '%21 (load-double '(x . 0) mem) loc))
    (loc (s '%22 (load-double '(x . 0) mem) loc))
    (loc (s '%23 (fadd-double (g '%21 loc) (g '%22 loc)) loc))
    (mem (store-double (g '%23 loc) '(ret . 0) mem)))
  (mv '@atan-%173-bb mem loc)))

(defund @atan-%24-bb (mem loc)
  (b* (
    (loc (s '%25 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%26 (icmp-sgt-i32 (g '%25 loc) 0) loc)))
  (case (g '%26 loc)
    (-1 (mv '@atan-%27-bb mem loc))
    ( 0 (mv '@atan-%31-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @atan-%27-bb (mem loc)
  (b* (
    (loc (s '%28 (load-double (getelementptr-double '(atanhi . 0) 3) mem) loc))
    (loc (s '%29 (load-double (getelementptr-double '(atanlo . 0) 3) mem) loc))
    (loc (s '%30 (fadd-double (g '%28 loc) (g '%29 loc)) loc))
    (mem (store-double (g '%30 loc) '(ret . 0) mem)))
  (mv '@atan-%173-bb mem loc)))

(defund @atan-%31-bb (mem loc)
  (b* (
    (loc (s '%32 (load-double (getelementptr-double '(atanhi . 0) 3) mem) loc))
    (loc (s '%33 (fsub-double #x8000000000000000 (g '%32 loc)) loc))
    (loc (s '%34 (load-double (getelementptr-double '(atanlo . 0) 3) mem) loc))
    (loc (s '%35 (fsub-double (g '%33 loc) (g '%34 loc)) loc))
    (mem (store-double (g '%35 loc) '(ret . 0) mem)))
  (mv '@atan-%173-bb mem loc)))

(defund @atan-%36-bb (mem loc)
  (b* (
    (loc (s '%37 (load-i32 '(ix . 0) mem) loc))
    (loc (s '%38 (icmp-slt-i32 (g '%37 loc) 1071382528) loc)))
  (case (g '%38 loc)
    (-1 (mv '@atan-%39-bb mem loc))
    ( 0 (mv '@atan-%50-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @atan-%39-bb (mem loc)
  (b* (
    (loc (s '%40 (load-i32 '(ix . 0) mem) loc))
    (loc (s '%41 (icmp-slt-i32 (g '%40 loc) 1042284544) loc)))
  (case (g '%41 loc)
    (-1 (mv '@atan-%42-bb mem loc))
    ( 0 (mv '@atan-%49-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @atan-%42-bb (mem loc)
  (b* (
    (loc (s '%43 (load-double '(x . 0) mem) loc))
    (loc (s '%44 (fadd-double #x7e37e43c8800759c (g '%43 loc)) loc))
    (loc (s '%45 (fcmp-ogt-double (g '%44 loc) #x3ff0000000000000) loc)))
  (case (g '%45 loc)
    (-1 (mv '@atan-%46-bb mem loc))
    ( 0 (mv '@atan-%48-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @atan-%46-bb (mem loc)
  (b* (
    (loc (s '%47 (load-double '(x . 0) mem) loc))
    (mem (store-double (g '%47 loc) '(ret . 0) mem)))
  (mv '@atan-%173-bb mem loc)))

(defund @atan-%48-bb (mem loc)
  (b* ()
  (mv '@atan-%49-bb mem loc)))

(defund @atan-%49-bb (mem loc)
  (b* (
    (mem (store-i32 -1 '(id . 0) mem)))
  (mv '@atan-%87-bb mem loc)))

(defund @atan-%50-bb (mem loc)
  (b* (
    (loc (s '%51 (load-double '(x . 0) mem) loc))
    (loc (s '%52 (@fabs (g '%51 loc)) loc))
    (mem (store-double (g '%52 loc) '(x . 0) mem))
    (loc (s '%53 (load-i32 '(ix . 0) mem) loc))
    (loc (s '%54 (icmp-slt-i32 (g '%53 loc) 1072889856) loc)))
  (case (g '%54 loc)
    (-1 (mv '@atan-%55-bb mem loc))
    ( 0 (mv '@atan-%72-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @atan-%55-bb (mem loc)
  (b* (
    (loc (s '%56 (load-i32 '(ix . 0) mem) loc))
    (loc (s '%57 (icmp-slt-i32 (g '%56 loc) 1072037888) loc)))
  (case (g '%57 loc)
    (-1 (mv '@atan-%58-bb mem loc))
    ( 0 (mv '@atan-%65-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @atan-%58-bb (mem loc)
  (b* (
    (mem (store-i32 0 '(id . 0) mem))
    (loc (s '%59 (load-double '(x . 0) mem) loc))
    (loc (s '%60 (fmul-double #x4000000000000000 (g '%59 loc)) loc))
    (loc (s '%61 (fsub-double (g '%60 loc) #x3ff0000000000000) loc))
    (loc (s '%62 (load-double '(x . 0) mem) loc))
    (loc (s '%63 (fadd-double #x4000000000000000 (g '%62 loc)) loc))
    (loc (s '%64 (fdiv-double (g '%61 loc) (g '%63 loc)) loc))
    (mem (store-double (g '%64 loc) '(x . 0) mem)))
  (mv '@atan-%71-bb mem loc)))

(defund @atan-%65-bb (mem loc)
  (b* (
    (mem (store-i32 1 '(id . 0) mem))
    (loc (s '%66 (load-double '(x . 0) mem) loc))
    (loc (s '%67 (fsub-double (g '%66 loc) #x3ff0000000000000) loc))
    (loc (s '%68 (load-double '(x . 0) mem) loc))
    (loc (s '%69 (fadd-double (g '%68 loc) #x3ff0000000000000) loc))
    (loc (s '%70 (fdiv-double (g '%67 loc) (g '%69 loc)) loc))
    (mem (store-double (g '%70 loc) '(x . 0) mem)))
  (mv '@atan-%71-bb mem loc)))

(defund @atan-%71-bb (mem loc)
  (b* ()
  (mv '@atan-%86-bb mem loc)))

(defund @atan-%72-bb (mem loc)
  (b* (
    (loc (s '%73 (load-i32 '(ix . 0) mem) loc))
    (loc (s '%74 (icmp-slt-i32 (g '%73 loc) 1073971200) loc)))
  (case (g '%74 loc)
    (-1 (mv '@atan-%75-bb mem loc))
    ( 0 (mv '@atan-%82-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @atan-%75-bb (mem loc)
  (b* (
    (mem (store-i32 2 '(id . 0) mem))
    (loc (s '%76 (load-double '(x . 0) mem) loc))
    (loc (s '%77 (fsub-double (g '%76 loc) #x3ff8000000000000) loc))
    (loc (s '%78 (load-double '(x . 0) mem) loc))
    (loc (s '%79 (fmul-double #x3ff8000000000000 (g '%78 loc)) loc))
    (loc (s '%80 (fadd-double #x3ff0000000000000 (g '%79 loc)) loc))
    (loc (s '%81 (fdiv-double (g '%77 loc) (g '%80 loc)) loc))
    (mem (store-double (g '%81 loc) '(x . 0) mem)))
  (mv '@atan-%85-bb mem loc)))

(defund @atan-%82-bb (mem loc)
  (b* (
    (mem (store-i32 3 '(id . 0) mem))
    (loc (s '%83 (load-double '(x . 0) mem) loc))
    (loc (s '%84 (fdiv-double #xbff0000000000000 (g '%83 loc)) loc))
    (mem (store-double (g '%84 loc) '(x . 0) mem)))
  (mv '@atan-%85-bb mem loc)))

(defund @atan-%85-bb (mem loc)
  (b* ()
  (mv '@atan-%86-bb mem loc)))

(defund @atan-%86-bb (mem loc)
  (b* ()
  (mv '@atan-%87-bb mem loc)))

(defund @atan-%87-bb (mem loc)
  (b* (
    (loc (s '%88 (load-double '(x . 0) mem) loc))
    (loc (s '%89 (load-double '(x . 0) mem) loc))
    (loc (s '%90 (fmul-double (g '%88 loc) (g '%89 loc)) loc))
    (mem (store-double (g '%90 loc) '(z . 0) mem))
    (loc (s '%91 (load-double '(z . 0) mem) loc))
    (loc (s '%92 (load-double '(z . 0) mem) loc))
    (loc (s '%93 (fmul-double (g '%91 loc) (g '%92 loc)) loc))
    (mem (store-double (g '%93 loc) '(w . 0) mem))
    (loc (s '%94 (load-double '(z . 0) mem) loc))
    (loc (s '%95 (load-double (getelementptr-double '(aT . 0) 0) mem) loc))
    (loc (s '%96 (load-double '(w . 0) mem) loc))
    (loc (s '%97 (load-double (getelementptr-double '(aT . 0) 2) mem) loc))
    (loc (s '%98 (load-double '(w . 0) mem) loc))
    (loc (s '%99 (load-double (getelementptr-double '(aT . 0) 4) mem) loc))
    (loc (s '%100 (load-double '(w . 0) mem) loc))
    (loc (s '%101 (load-double (getelementptr-double '(aT . 0) 6) mem) loc))
    (loc (s '%102 (load-double '(w . 0) mem) loc))
    (loc (s '%103 (load-double (getelementptr-double '(aT . 0) 8) mem) loc))
    (loc (s '%104 (load-double '(w . 0) mem) loc))
    (loc (s '%105 (load-double (getelementptr-double '(aT . 0) 10) mem) loc))
    (loc (s '%106 (fmul-double (g '%104 loc) (g '%105 loc)) loc))
    (loc (s '%107 (fadd-double (g '%103 loc) (g '%106 loc)) loc))
    (loc (s '%108 (fmul-double (g '%102 loc) (g '%107 loc)) loc))
    (loc (s '%109 (fadd-double (g '%101 loc) (g '%108 loc)) loc))
    (loc (s '%110 (fmul-double (g '%100 loc) (g '%109 loc)) loc))
    (loc (s '%111 (fadd-double (g '%99 loc) (g '%110 loc)) loc))
    (loc (s '%112 (fmul-double (g '%98 loc) (g '%111 loc)) loc))
    (loc (s '%113 (fadd-double (g '%97 loc) (g '%112 loc)) loc))
    (loc (s '%114 (fmul-double (g '%96 loc) (g '%113 loc)) loc))
    (loc (s '%115 (fadd-double (g '%95 loc) (g '%114 loc)) loc))
    (loc (s '%116 (fmul-double (g '%94 loc) (g '%115 loc)) loc))
    (mem (store-double (g '%116 loc) '(s1 . 0) mem))
    (loc (s '%117 (load-double '(w . 0) mem) loc))
    (loc (s '%118 (load-double (getelementptr-double '(aT . 0) 1) mem) loc))
    (loc (s '%119 (load-double '(w . 0) mem) loc))
    (loc (s '%120 (load-double (getelementptr-double '(aT . 0) 3) mem) loc))
    (loc (s '%121 (load-double '(w . 0) mem) loc))
    (loc (s '%122 (load-double (getelementptr-double '(aT . 0) 5) mem) loc))
    (loc (s '%123 (load-double '(w . 0) mem) loc))
    (loc (s '%124 (load-double (getelementptr-double '(aT . 0) 7) mem) loc))
    (loc (s '%125 (load-double '(w . 0) mem) loc))
    (loc (s '%126 (load-double (getelementptr-double '(aT . 0) 9) mem) loc))
    (loc (s '%127 (fmul-double (g '%125 loc) (g '%126 loc)) loc))
    (loc (s '%128 (fadd-double (g '%124 loc) (g '%127 loc)) loc))
    (loc (s '%129 (fmul-double (g '%123 loc) (g '%128 loc)) loc))
    (loc (s '%130 (fadd-double (g '%122 loc) (g '%129 loc)) loc))
    (loc (s '%131 (fmul-double (g '%121 loc) (g '%130 loc)) loc))
    (loc (s '%132 (fadd-double (g '%120 loc) (g '%131 loc)) loc))
    (loc (s '%133 (fmul-double (g '%119 loc) (g '%132 loc)) loc))
    (loc (s '%134 (fadd-double (g '%118 loc) (g '%133 loc)) loc))
    (loc (s '%135 (fmul-double (g '%117 loc) (g '%134 loc)) loc))
    (mem (store-double (g '%135 loc) '(s2 . 0) mem))
    (loc (s '%136 (load-i32 '(id . 0) mem) loc))
    (loc (s '%137 (icmp-slt-i32 (g '%136 loc) 0) loc)))
  (case (g '%137 loc)
    (-1 (mv '@atan-%138-bb mem loc))
    ( 0 (mv '@atan-%146-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @atan-%138-bb (mem loc)
  (b* (
    (loc (s '%139 (load-double '(x . 0) mem) loc))
    (loc (s '%140 (load-double '(x . 0) mem) loc))
    (loc (s '%141 (load-double '(s1 . 0) mem) loc))
    (loc (s '%142 (load-double '(s2 . 0) mem) loc))
    (loc (s '%143 (fadd-double (g '%141 loc) (g '%142 loc)) loc))
    (loc (s '%144 (fmul-double (g '%140 loc) (g '%143 loc)) loc))
    (loc (s '%145 (fsub-double (g '%139 loc) (g '%144 loc)) loc))
    (mem (store-double (g '%145 loc) '(ret . 0) mem)))
  (mv '@atan-%173-bb mem loc)))

(defund @atan-%146-bb (mem loc)
  (b* (
    (loc (s '%147 (load-i32 '(id . 0) mem) loc))
    (loc (s '%148 (sext-i32-to-i64 (g '%147 loc)) loc))
    (loc (s '%149 (getelementptr-double '(atanhi . 0) (g '%148 loc)) loc))
    (loc (s '%150 (load-double (g '%149 loc) mem) loc))
    (loc (s '%151 (load-double '(x . 0) mem) loc))
    (loc (s '%152 (load-double '(s1 . 0) mem) loc))
    (loc (s '%153 (load-double '(s2 . 0) mem) loc))
    (loc (s '%154 (fadd-double (g '%152 loc) (g '%153 loc)) loc))
    (loc (s '%155 (fmul-double (g '%151 loc) (g '%154 loc)) loc))
    (loc (s '%156 (load-i32 '(id . 0) mem) loc))
    (loc (s '%157 (sext-i32-to-i64 (g '%156 loc)) loc))
    (loc (s '%158 (getelementptr-double '(atanlo . 0) (g '%157 loc)) loc))
    (loc (s '%159 (load-double (g '%158 loc) mem) loc))
    (loc (s '%160 (fsub-double (g '%155 loc) (g '%159 loc)) loc))
    (loc (s '%161 (load-double '(x . 0) mem) loc))
    (loc (s '%162 (fsub-double (g '%160 loc) (g '%161 loc)) loc))
    (loc (s '%163 (fsub-double (g '%150 loc) (g '%162 loc)) loc))
    (mem (store-double (g '%163 loc) '(z . 0) mem))
    (loc (s '%164 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%165 (icmp-slt-i32 (g '%164 loc) 0) loc)))
  (case (g '%165 loc)
    (-1 (mv '@atan-%166-bb mem loc))
    ( 0 (mv '@atan-%169-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @atan-%166-bb (mem loc)
  (b* (
    (loc (s '%167 (load-double '(z . 0) mem) loc))
    (loc (s '%168 (fsub-double #x8000000000000000 (g '%167 loc)) loc)))
  (let* ((loc (s '%172 (g '%168 loc) loc))) (mv '@atan-%171-bb mem loc))))

(defund @atan-%169-bb (mem loc)
  (b* (
    (loc (s '%170 (load-double '(z . 0) mem) loc)))
  (let* ((loc (s '%172 (g '%170 loc) loc))) (mv '@atan-%171-bb mem loc))))

(defund @atan-%171-bb (mem loc)
  ; %172 = phi double [ (g '%168 loc), %166 ], [ (g '%170 loc), %169 ]
  (b* (
    (mem (store-double (g '%172 loc) '(ret . 0) mem)))
  (mv '@atan-%173-bb mem loc)))

(defund @atan-%173-bb (mem loc)
  (b* (
    (loc (s '%174 (load-double '(ret . 0) mem) loc)))
  (mv 'ret mem loc)))

(defund @atan-step (label mem loc)
  (case label
    (%-0 (@atan-%0-bb mem loc))
    (%-10 (@atan-%10-bb mem loc))
    (%-13 (@atan-%13-bb mem loc))
    (%-16 (@atan-%16-bb mem loc))
    (%-20 (@atan-%20-bb mem loc))
    (%-24 (@atan-%24-bb mem loc))
    (%-27 (@atan-%27-bb mem loc))
    (%-31 (@atan-%31-bb mem loc))
    (%-36 (@atan-%36-bb mem loc))
    (%-39 (@atan-%39-bb mem loc))
    (%-42 (@atan-%42-bb mem loc))
    (%-46 (@atan-%46-bb mem loc))
    (%-48 (@atan-%48-bb mem loc))
    (%-49 (@atan-%49-bb mem loc))
    (%-50 (@atan-%50-bb mem loc))
    (%-55 (@atan-%55-bb mem loc))
    (%-58 (@atan-%58-bb mem loc))
    (%-65 (@atan-%65-bb mem loc))
    (%-71 (@atan-%71-bb mem loc))
    (%-72 (@atan-%72-bb mem loc))
    (%-75 (@atan-%75-bb mem loc))
    (%-82 (@atan-%82-bb mem loc))
    (%-85 (@atan-%85-bb mem loc))
    (%-86 (@atan-%86-bb mem loc))
    (%-87 (@atan-%87-bb mem loc))
    (%-138 (@atan-%138-bb mem loc))
    (%-146 (@atan-%146-bb mem loc))
    (%-166 (@atan-%166-bb mem loc))
    (%-169 (@atan-%169-bb mem loc))
    (%-171 (@atan-%171-bb mem loc))
    (%-173 (@atan-%173-bb mem loc))
    (otherwise (mv nil mem loc))))

(defund @atan-steps (label mem loc n)
  (declare (xargs :measure (nfix n)))
  (if (equal label 'ret)
      (g '%174 loc)
    (if (zp n) nil
      (mv-let
        (label mem loc)
        (@atan-step label mem loc)
        (@atan-steps label mem loc (1- n))))))

(defund @atan (%x)
  (declare (ignore %x))
   nil)
