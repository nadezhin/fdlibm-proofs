(in-package "ACL2")
(include-book "std/util/defrule" :dir :system)
(include-book "../llvm")

(defconst *expm1-globals* '())

(defconst *expm1-labels* '(%0 %10 %12 %15 %20 %23 %26 %33 %37 %40 %42 %43 %45 %48 %49 %50 %53 %57 %58 %59 %60 %63 %66 %69 %72 %75 %76 %92 %101 %104 %113 %114 %115 %152 %160 %173 %179 %182 %185 %191 %197 %200 %203 %216 %219 %236 %255 %256 %258))

(defund @expm1-%0-mem (s0)
  (car s0))
(defund @expm1-%0-loc (s0)
  (cadr s0))
(defund @expm1-%0-pred (s0)
  (caddr s0))
(defund @expm1-%1-mem (s0)
  (alloca-double 'ret 1 (@expm1-%0-mem s0)))
(defund @expm1-%1-loc (s0)
  (s '%1 '(ret . 0) (@expm1-%0-loc s0)))
(defund @expm1-%2-mem (s0)
  (alloca-double 'x 1 (@expm1-%1-mem s0)))
(defund @expm1-%2-loc (s0)
  (s '%2 '(x . 0) (@expm1-%1-loc s0)))
(defund @expm1-%y-mem (s0)
  (alloca-double 'y 1 (@expm1-%2-mem s0)))
(defund @expm1-%y-loc (s0)
  (s '%y '(y . 0) (@expm1-%2-loc s0)))
(defund @expm1-%hi-mem (s0)
  (alloca-double 'hi 1 (@expm1-%y-mem s0)))
(defund @expm1-%hi-loc (s0)
  (s '%hi '(hi . 0) (@expm1-%y-loc s0)))
(defund @expm1-%lo-mem (s0)
  (alloca-double 'lo 1 (@expm1-%hi-mem s0)))
(defund @expm1-%lo-loc (s0)
  (s '%lo '(lo . 0) (@expm1-%hi-loc s0)))
(defund @expm1-%c-mem (s0)
  (alloca-double 'c 1 (@expm1-%lo-mem s0)))
(defund @expm1-%c-loc (s0)
  (s '%c '(c . 0) (@expm1-%lo-loc s0)))
(defund @expm1-%t-mem (s0)
  (alloca-double 't 1 (@expm1-%c-mem s0)))
(defund @expm1-%t-loc (s0)
  (s '%t '(t . 0) (@expm1-%c-loc s0)))
(defund @expm1-%e-mem (s0)
  (alloca-double 'e 1 (@expm1-%t-mem s0)))
(defund @expm1-%e-loc (s0)
  (s '%e '(e . 0) (@expm1-%t-loc s0)))
(defund @expm1-%hxs-mem (s0)
  (alloca-double 'hxs 1 (@expm1-%e-mem s0)))
(defund @expm1-%hxs-loc (s0)
  (s '%hxs '(hxs . 0) (@expm1-%e-loc s0)))
(defund @expm1-%hfx-mem (s0)
  (alloca-double 'hfx 1 (@expm1-%hxs-mem s0)))
(defund @expm1-%hfx-loc (s0)
  (s '%hfx '(hfx . 0) (@expm1-%hxs-loc s0)))
(defund @expm1-%r1-mem (s0)
  (alloca-double 'r1 1 (@expm1-%hfx-mem s0)))
(defund @expm1-%r1-loc (s0)
  (s '%r1 '(r1 . 0) (@expm1-%hfx-loc s0)))
(defund @expm1-%k-mem (s0)
  (alloca-i32 'k 1 (@expm1-%r1-mem s0)))
(defund @expm1-%k-loc (s0)
  (s '%k '(k . 0) (@expm1-%r1-loc s0)))
(defund @expm1-%xsb-mem (s0)
  (alloca-i32 'xsb 1 (@expm1-%k-mem s0)))
(defund @expm1-%xsb-loc (s0)
  (s '%xsb '(xsb . 0) (@expm1-%k-loc s0)))
(defund @expm1-%hx-mem (s0)
  (alloca-i32 'hx 1 (@expm1-%xsb-mem s0)))
(defund @expm1-%hx-loc (s0)
  (s '%hx '(hx . 0) (@expm1-%xsb-loc s0)))
(defund @expm1-m0.1-mem (s0)
  (store-double (g '%x (@expm1-%hx-loc s0)) (g '%2 (@expm1-%hx-loc s0)) (@expm1-%hx-mem s0)))
(defund @expm1-%3-val (s0)
  (bitcast-double*-to-i32* (g '%2 (@expm1-%hx-loc s0))))
(defund @expm1-%3-loc (s0)
  (s '%3 (@expm1-%3-val s0) (@expm1-%hx-loc s0)))
(defund @expm1-%4-val (s0)
  (getelementptr-i32 (g '%3 (@expm1-%3-loc s0)) 1))
(defund @expm1-%4-loc (s0)
  (s '%4 (@expm1-%4-val s0) (@expm1-%3-loc s0)))
(defund @expm1-%5-val (s0)
  (load-i32 (g '%4 (@expm1-%4-loc s0)) (@expm1-m0.1-mem s0)))
(defund @expm1-%5-loc (s0)
  (s '%5 (@expm1-%5-val s0) (@expm1-%4-loc s0)))
(defund @expm1-m0.2-mem (s0)
  (store-i32 (g '%5 (@expm1-%5-loc s0)) (g '%hx (@expm1-%5-loc s0)) (@expm1-m0.1-mem s0)))
(defund @expm1-%6-val (s0)
  (load-i32 (g '%hx (@expm1-%5-loc s0)) (@expm1-m0.2-mem s0)))
(defund @expm1-%6-loc (s0)
  (s '%6 (@expm1-%6-val s0) (@expm1-%5-loc s0)))
(defund @expm1-%7-val (s0)
  (and-i32 (g '%6 (@expm1-%6-loc s0)) -2147483648))
(defund @expm1-%7-loc (s0)
  (s '%7 (@expm1-%7-val s0) (@expm1-%6-loc s0)))
(defund @expm1-m0.3-mem (s0)
  (store-i32 (g '%7 (@expm1-%7-loc s0)) (g '%xsb (@expm1-%7-loc s0)) (@expm1-m0.2-mem s0)))
(defund @expm1-%8-val (s0)
  (load-i32 (g '%xsb (@expm1-%7-loc s0)) (@expm1-m0.3-mem s0)))
(defund @expm1-%8-loc (s0)
  (s '%8 (@expm1-%8-val s0) (@expm1-%7-loc s0)))
(defund @expm1-%9-val (s0)
  (icmp-eq-i32 (g '%8 (@expm1-%8-loc s0)) 0))
(defund @expm1-%9-loc (s0)
  (s '%9 (@expm1-%9-val s0) (@expm1-%8-loc s0)))
(defund @expm1-succ0-lab (s0)
  (case (g '%9 (@expm1-%9-loc s0)) (-1 '%10) (0 '%12)))

(defund @expm1-%0-fwd (mem loc pred)
  (let ((s0 (list mem loc pred)))
    (mv (@expm1-succ0-lab s0) (@expm1-m0.3-mem s0) (@expm1-%9-loc s0))))

(defund @expm1-succ0-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%9 loc) (-1 '%10) (0 '%12)) mem loc))
(defund @expm1-%9-rev (mem loc pred)
  (@expm1-succ0-rev mem (s '%9 (icmp-eq-i32 (g '%8 loc) 0) loc) pred))
(defund @expm1-%8-rev (mem loc pred)
  (@expm1-%9-rev mem (s '%8 (load-i32 (g '%xsb loc) mem) loc) pred))
(defund @expm1-m0.3-rev (mem loc pred)
  (@expm1-%8-rev (store-i32 (g '%7 loc) (g '%xsb loc) mem) loc pred))
(defund @expm1-%7-rev (mem loc pred)
  (@expm1-m0.3-rev mem (s '%7 (and-i32 (g '%6 loc) -2147483648) loc) pred))
(defund @expm1-%6-rev (mem loc pred)
  (@expm1-%7-rev mem (s '%6 (load-i32 (g '%hx loc) mem) loc) pred))
(defund @expm1-m0.2-rev (mem loc pred)
  (@expm1-%6-rev (store-i32 (g '%5 loc) (g '%hx loc) mem) loc pred))
(defund @expm1-%5-rev (mem loc pred)
  (@expm1-m0.2-rev mem (s '%5 (load-i32 (g '%4 loc) mem) loc) pred))
(defund @expm1-%4-rev (mem loc pred)
  (@expm1-%5-rev mem (s '%4 (getelementptr-i32 (g '%3 loc) 1) loc) pred))
(defund @expm1-%3-rev (mem loc pred)
  (@expm1-%4-rev mem (s '%3 (bitcast-double*-to-i32* (g '%2 loc)) loc) pred))
(defund @expm1-m0.1-rev (mem loc pred)
  (@expm1-%3-rev (store-double (g '%x loc) (g '%2 loc) mem) loc pred))
(defund @expm1-%hx-rev (mem loc pred)
  (@expm1-m0.1-rev (alloca-i32 'hx 1 mem) (s '%hx '(hx . 0) loc) pred))
(defund @expm1-%xsb-rev (mem loc pred)
  (@expm1-%hx-rev (alloca-i32 'xsb 1 mem) (s '%xsb '(xsb . 0) loc) pred))
(defund @expm1-%k-rev (mem loc pred)
  (@expm1-%xsb-rev (alloca-i32 'k 1 mem) (s '%k '(k . 0) loc) pred))
(defund @expm1-%r1-rev (mem loc pred)
  (@expm1-%k-rev (alloca-double 'r1 1 mem) (s '%r1 '(r1 . 0) loc) pred))
(defund @expm1-%hfx-rev (mem loc pred)
  (@expm1-%r1-rev (alloca-double 'hfx 1 mem) (s '%hfx '(hfx . 0) loc) pred))
(defund @expm1-%hxs-rev (mem loc pred)
  (@expm1-%hfx-rev (alloca-double 'hxs 1 mem) (s '%hxs '(hxs . 0) loc) pred))
(defund @expm1-%e-rev (mem loc pred)
  (@expm1-%hxs-rev (alloca-double 'e 1 mem) (s '%e '(e . 0) loc) pred))
(defund @expm1-%t-rev (mem loc pred)
  (@expm1-%e-rev (alloca-double 't 1 mem) (s '%t '(t . 0) loc) pred))
(defund @expm1-%c-rev (mem loc pred)
  (@expm1-%t-rev (alloca-double 'c 1 mem) (s '%c '(c . 0) loc) pred))
(defund @expm1-%lo-rev (mem loc pred)
  (@expm1-%c-rev (alloca-double 'lo 1 mem) (s '%lo '(lo . 0) loc) pred))
(defund @expm1-%hi-rev (mem loc pred)
  (@expm1-%lo-rev (alloca-double 'hi 1 mem) (s '%hi '(hi . 0) loc) pred))
(defund @expm1-%y-rev (mem loc pred)
  (@expm1-%hi-rev (alloca-double 'y 1 mem) (s '%y '(y . 0) loc) pred))
(defund @expm1-%2-rev (mem loc pred)
  (@expm1-%y-rev (alloca-double 'x 1 mem) (s '%2 '(x . 0) loc) pred))
(defund @expm1-%1-rev (mem loc pred)
  (@expm1-%2-rev (alloca-double 'ret 1 mem) (s '%1 '(ret . 0) loc) pred))

(defund @expm1-%0-rev (mem loc pred)
  (@expm1-%1-rev mem loc pred))

(defruled @expm1-%0-expand-rev-as-@expm1-%1-rev
  (equal (@expm1-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@expm1-%1-rev
            (@expm1-%0-mem s0)
            (@expm1-%0-loc s0)
            (@expm1-%0-pred s0))))
  :enable (@expm1-%0-rev @expm1-%0-mem @expm1-%0-loc @expm1-%0-pred))
(defruled @expm1-%0-expand-rev-as-@expm1-%2-rev
  (equal (@expm1-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@expm1-%2-rev
            (@expm1-%1-mem s0)
            (@expm1-%1-loc s0)
            (@expm1-%0-pred s0))))
  :enable (@expm1-%0-expand-rev-as-@expm1-%1-rev @expm1-%1-rev @expm1-%1-mem @expm1-%1-loc))
(defruled @expm1-%0-expand-rev-as-@expm1-%y-rev
  (equal (@expm1-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@expm1-%y-rev
            (@expm1-%2-mem s0)
            (@expm1-%2-loc s0)
            (@expm1-%0-pred s0))))
  :enable (@expm1-%0-expand-rev-as-@expm1-%2-rev @expm1-%2-rev @expm1-%2-mem @expm1-%2-loc))
(defruled @expm1-%0-expand-rev-as-@expm1-%hi-rev
  (equal (@expm1-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@expm1-%hi-rev
            (@expm1-%y-mem s0)
            (@expm1-%y-loc s0)
            (@expm1-%0-pred s0))))
  :enable (@expm1-%0-expand-rev-as-@expm1-%y-rev @expm1-%y-rev @expm1-%y-mem @expm1-%y-loc))
(defruled @expm1-%0-expand-rev-as-@expm1-%lo-rev
  (equal (@expm1-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@expm1-%lo-rev
            (@expm1-%hi-mem s0)
            (@expm1-%hi-loc s0)
            (@expm1-%0-pred s0))))
  :enable (@expm1-%0-expand-rev-as-@expm1-%hi-rev @expm1-%hi-rev @expm1-%hi-mem @expm1-%hi-loc))
(defruled @expm1-%0-expand-rev-as-@expm1-%c-rev
  (equal (@expm1-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@expm1-%c-rev
            (@expm1-%lo-mem s0)
            (@expm1-%lo-loc s0)
            (@expm1-%0-pred s0))))
  :enable (@expm1-%0-expand-rev-as-@expm1-%lo-rev @expm1-%lo-rev @expm1-%lo-mem @expm1-%lo-loc))
(defruled @expm1-%0-expand-rev-as-@expm1-%t-rev
  (equal (@expm1-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@expm1-%t-rev
            (@expm1-%c-mem s0)
            (@expm1-%c-loc s0)
            (@expm1-%0-pred s0))))
  :enable (@expm1-%0-expand-rev-as-@expm1-%c-rev @expm1-%c-rev @expm1-%c-mem @expm1-%c-loc))
(defruled @expm1-%0-expand-rev-as-@expm1-%e-rev
  (equal (@expm1-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@expm1-%e-rev
            (@expm1-%t-mem s0)
            (@expm1-%t-loc s0)
            (@expm1-%0-pred s0))))
  :enable (@expm1-%0-expand-rev-as-@expm1-%t-rev @expm1-%t-rev @expm1-%t-mem @expm1-%t-loc))
(defruled @expm1-%0-expand-rev-as-@expm1-%hxs-rev
  (equal (@expm1-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@expm1-%hxs-rev
            (@expm1-%e-mem s0)
            (@expm1-%e-loc s0)
            (@expm1-%0-pred s0))))
  :enable (@expm1-%0-expand-rev-as-@expm1-%e-rev @expm1-%e-rev @expm1-%e-mem @expm1-%e-loc))
(defruled @expm1-%0-expand-rev-as-@expm1-%hfx-rev
  (equal (@expm1-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@expm1-%hfx-rev
            (@expm1-%hxs-mem s0)
            (@expm1-%hxs-loc s0)
            (@expm1-%0-pred s0))))
  :enable (@expm1-%0-expand-rev-as-@expm1-%hxs-rev @expm1-%hxs-rev @expm1-%hxs-mem @expm1-%hxs-loc))
(defruled @expm1-%0-expand-rev-as-@expm1-%r1-rev
  (equal (@expm1-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@expm1-%r1-rev
            (@expm1-%hfx-mem s0)
            (@expm1-%hfx-loc s0)
            (@expm1-%0-pred s0))))
  :enable (@expm1-%0-expand-rev-as-@expm1-%hfx-rev @expm1-%hfx-rev @expm1-%hfx-mem @expm1-%hfx-loc))
(defruled @expm1-%0-expand-rev-as-@expm1-%k-rev
  (equal (@expm1-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@expm1-%k-rev
            (@expm1-%r1-mem s0)
            (@expm1-%r1-loc s0)
            (@expm1-%0-pred s0))))
  :enable (@expm1-%0-expand-rev-as-@expm1-%r1-rev @expm1-%r1-rev @expm1-%r1-mem @expm1-%r1-loc))
(defruled @expm1-%0-expand-rev-as-@expm1-%xsb-rev
  (equal (@expm1-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@expm1-%xsb-rev
            (@expm1-%k-mem s0)
            (@expm1-%k-loc s0)
            (@expm1-%0-pred s0))))
  :enable (@expm1-%0-expand-rev-as-@expm1-%k-rev @expm1-%k-rev @expm1-%k-mem @expm1-%k-loc))
(defruled @expm1-%0-expand-rev-as-@expm1-%hx-rev
  (equal (@expm1-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@expm1-%hx-rev
            (@expm1-%xsb-mem s0)
            (@expm1-%xsb-loc s0)
            (@expm1-%0-pred s0))))
  :enable (@expm1-%0-expand-rev-as-@expm1-%xsb-rev @expm1-%xsb-rev @expm1-%xsb-mem @expm1-%xsb-loc))
(defruled @expm1-%0-expand-rev-as-@expm1-m0.1-rev
  (equal (@expm1-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@expm1-m0.1-rev
            (@expm1-%hx-mem s0)
            (@expm1-%hx-loc s0)
            (@expm1-%0-pred s0))))
  :enable (@expm1-%0-expand-rev-as-@expm1-%hx-rev @expm1-%hx-rev @expm1-%hx-mem @expm1-%hx-loc))
(defruled @expm1-%0-expand-rev-as-@expm1-%3-rev
  (equal (@expm1-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@expm1-%3-rev
            (@expm1-m0.1-mem s0)
            (@expm1-%hx-loc s0)
            (@expm1-%0-pred s0))))
  :enable (@expm1-%0-expand-rev-as-@expm1-m0.1-rev @expm1-m0.1-rev @expm1-m0.1-mem))
(defruled @expm1-%0-expand-rev-as-@expm1-%4-rev
  (equal (@expm1-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@expm1-%4-rev
            (@expm1-m0.1-mem s0)
            (@expm1-%3-loc s0)
            (@expm1-%0-pred s0))))
  :enable (@expm1-%0-expand-rev-as-@expm1-%3-rev @expm1-%3-rev @expm1-%3-loc @expm1-%3-val))
(defruled @expm1-%0-expand-rev-as-@expm1-%5-rev
  (equal (@expm1-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@expm1-%5-rev
            (@expm1-m0.1-mem s0)
            (@expm1-%4-loc s0)
            (@expm1-%0-pred s0))))
  :enable (@expm1-%0-expand-rev-as-@expm1-%4-rev @expm1-%4-rev @expm1-%4-loc @expm1-%4-val))
(defruled @expm1-%0-expand-rev-as-@expm1-m0.2-rev
  (equal (@expm1-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@expm1-m0.2-rev
            (@expm1-m0.1-mem s0)
            (@expm1-%5-loc s0)
            (@expm1-%0-pred s0))))
  :enable (@expm1-%0-expand-rev-as-@expm1-%5-rev @expm1-%5-rev @expm1-%5-loc @expm1-%5-val))
(defruled @expm1-%0-expand-rev-as-@expm1-%6-rev
  (equal (@expm1-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@expm1-%6-rev
            (@expm1-m0.2-mem s0)
            (@expm1-%5-loc s0)
            (@expm1-%0-pred s0))))
  :enable (@expm1-%0-expand-rev-as-@expm1-m0.2-rev @expm1-m0.2-rev @expm1-m0.2-mem))
(defruled @expm1-%0-expand-rev-as-@expm1-%7-rev
  (equal (@expm1-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@expm1-%7-rev
            (@expm1-m0.2-mem s0)
            (@expm1-%6-loc s0)
            (@expm1-%0-pred s0))))
  :enable (@expm1-%0-expand-rev-as-@expm1-%6-rev @expm1-%6-rev @expm1-%6-loc @expm1-%6-val))
(defruled @expm1-%0-expand-rev-as-@expm1-m0.3-rev
  (equal (@expm1-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@expm1-m0.3-rev
            (@expm1-m0.2-mem s0)
            (@expm1-%7-loc s0)
            (@expm1-%0-pred s0))))
  :enable (@expm1-%0-expand-rev-as-@expm1-%7-rev @expm1-%7-rev @expm1-%7-loc @expm1-%7-val))
(defruled @expm1-%0-expand-rev-as-@expm1-%8-rev
  (equal (@expm1-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@expm1-%8-rev
            (@expm1-m0.3-mem s0)
            (@expm1-%7-loc s0)
            (@expm1-%0-pred s0))))
  :enable (@expm1-%0-expand-rev-as-@expm1-m0.3-rev @expm1-m0.3-rev @expm1-m0.3-mem))
(defruled @expm1-%0-expand-rev-as-@expm1-%9-rev
  (equal (@expm1-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@expm1-%9-rev
            (@expm1-m0.3-mem s0)
            (@expm1-%8-loc s0)
            (@expm1-%0-pred s0))))
  :enable (@expm1-%0-expand-rev-as-@expm1-%8-rev @expm1-%8-rev @expm1-%8-loc @expm1-%8-val))
(defruled @expm1-%0-expand-rev-as-@expm1-succ0-rev
  (equal (@expm1-%0-rev mem loc pred)
         (let ((s0 (list mem loc pred)))
           (@expm1-succ0-rev
            (@expm1-m0.3-mem s0)
            (@expm1-%9-loc s0)
            (@expm1-%0-pred s0))))
  :enable (@expm1-%0-expand-rev-as-@expm1-%9-rev @expm1-%9-rev @expm1-%9-loc @expm1-%9-val))
(defruled @expm1-%0-expand-rev-as-fwd
  (equal (@expm1-%0-rev mem loc pred)
         (@expm1-%0-fwd mem loc pred))
  :enable (@expm1-%0-expand-rev-as-@expm1-succ0-rev @expm1-succ0-rev @expm1-succ0-lab @expm1-%0-fwd))

(defund @expm1-%0-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (mem (alloca-double 'ret 1 mem))
    (loc (s '%1 '(ret . 0) loc))
    (mem (alloca-double 'x 1 mem))
    (loc (s '%2 '(x . 0) loc))
    (mem (alloca-double 'y 1 mem))
    (loc (s '%y '(y . 0) loc))
    (mem (alloca-double 'hi 1 mem))
    (loc (s '%hi '(hi . 0) loc))
    (mem (alloca-double 'lo 1 mem))
    (loc (s '%lo '(lo . 0) loc))
    (mem (alloca-double 'c 1 mem))
    (loc (s '%c '(c . 0) loc))
    (mem (alloca-double 't 1 mem))
    (loc (s '%t '(t . 0) loc))
    (mem (alloca-double 'e 1 mem))
    (loc (s '%e '(e . 0) loc))
    (mem (alloca-double 'hxs 1 mem))
    (loc (s '%hxs '(hxs . 0) loc))
    (mem (alloca-double 'hfx 1 mem))
    (loc (s '%hfx '(hfx . 0) loc))
    (mem (alloca-double 'r1 1 mem))
    (loc (s '%r1 '(r1 . 0) loc))
    (mem (alloca-i32 'k 1 mem))
    (loc (s '%k '(k . 0) loc))
    (mem (alloca-i32 'xsb 1 mem))
    (loc (s '%xsb '(xsb . 0) loc))
    (mem (alloca-i32 'hx 1 mem))
    (loc (s '%hx '(hx . 0) loc))
    (mem (store-double (g '%x loc) (g '%2 loc) mem))
    (loc (s '%3 (bitcast-double*-to-i32* (g '%2 loc)) loc))
    (loc (s '%4 (getelementptr-i32 (g '%3 loc) 1) loc))
    (loc (s '%5 (load-i32 (g '%4 loc) mem) loc))
    (mem (store-i32 (g '%5 loc) (g '%hx loc) mem))
    (loc (s '%6 (load-i32 (g '%hx loc) mem) loc))
    (loc (s '%7 (and-i32 (g '%6 loc) -2147483648) loc))
    (mem (store-i32 (g '%7 loc) (g '%xsb loc) mem))
    (loc (s '%8 (load-i32 (g '%xsb loc) mem) loc))
    (loc (s '%9 (icmp-eq-i32 (g '%8 loc) 0) loc))
    (succ (case (g '%9 loc) (-1 '%10) (0 '%12))))
  (mv succ mem loc)))

(defund @expm1-%10-mem (s10)
  (car s10))
(defund @expm1-%10-loc (s10)
  (cadr s10))
(defund @expm1-%10-pred (s10)
  (caddr s10))
(defund @expm1-%11-val (s10)
  (load-double (g '%2 (@expm1-%10-loc s10)) (@expm1-%10-mem s10)))
(defund @expm1-%11-loc (s10)
  (s '%11 (@expm1-%11-val s10) (@expm1-%10-loc s10)))
(defund @expm1-m10.1-mem (s10)
  (store-double (g '%11 (@expm1-%11-loc s10)) (g '%y (@expm1-%11-loc s10)) (@expm1-%10-mem s10)))
(defund @expm1-succ10-lab (s10)
  (declare (ignore s10))
  '%15)

(defund @expm1-%10-fwd (mem loc pred)
  (let ((s10 (list mem loc pred)))
    (mv (@expm1-succ10-lab s10) (@expm1-m10.1-mem s10) (@expm1-%11-loc s10))))

(defund @expm1-succ10-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%15 mem loc))
(defund @expm1-m10.1-rev (mem loc pred)
  (@expm1-succ10-rev (store-double (g '%11 loc) (g '%y loc) mem) loc pred))
(defund @expm1-%11-rev (mem loc pred)
  (@expm1-m10.1-rev mem (s '%11 (load-double (g '%2 loc) mem) loc) pred))

(defund @expm1-%10-rev (mem loc pred)
  (@expm1-%11-rev mem loc pred))

(defruled @expm1-%10-expand-rev-as-@expm1-%11-rev
  (equal (@expm1-%10-rev mem loc pred)
         (let ((s10 (list mem loc pred)))
           (@expm1-%11-rev
            (@expm1-%10-mem s10)
            (@expm1-%10-loc s10)
            (@expm1-%10-pred s10))))
  :enable (@expm1-%10-rev @expm1-%10-mem @expm1-%10-loc @expm1-%10-pred))
(defruled @expm1-%10-expand-rev-as-@expm1-m10.1-rev
  (equal (@expm1-%10-rev mem loc pred)
         (let ((s10 (list mem loc pred)))
           (@expm1-m10.1-rev
            (@expm1-%10-mem s10)
            (@expm1-%11-loc s10)
            (@expm1-%10-pred s10))))
  :enable (@expm1-%10-expand-rev-as-@expm1-%11-rev @expm1-%11-rev @expm1-%11-loc @expm1-%11-val))
(defruled @expm1-%10-expand-rev-as-@expm1-succ10-rev
  (equal (@expm1-%10-rev mem loc pred)
         (let ((s10 (list mem loc pred)))
           (@expm1-succ10-rev
            (@expm1-m10.1-mem s10)
            (@expm1-%11-loc s10)
            (@expm1-%10-pred s10))))
  :enable (@expm1-%10-expand-rev-as-@expm1-m10.1-rev @expm1-m10.1-rev @expm1-m10.1-mem))
(defruled @expm1-%10-expand-rev-as-fwd
  (equal (@expm1-%10-rev mem loc pred)
         (@expm1-%10-fwd mem loc pred))
  :enable (@expm1-%10-expand-rev-as-@expm1-succ10-rev @expm1-succ10-rev @expm1-succ10-lab @expm1-%10-fwd))

(defund @expm1-%10-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%11 (load-double (g '%2 loc) mem) loc))
    (mem (store-double (g '%11 loc) (g '%y loc) mem))
    (succ '%15))
  (mv succ mem loc)))

(defund @expm1-%12-mem (s12)
  (car s12))
(defund @expm1-%12-loc (s12)
  (cadr s12))
(defund @expm1-%12-pred (s12)
  (caddr s12))
(defund @expm1-%13-val (s12)
  (load-double (g '%2 (@expm1-%12-loc s12)) (@expm1-%12-mem s12)))
(defund @expm1-%13-loc (s12)
  (s '%13 (@expm1-%13-val s12) (@expm1-%12-loc s12)))
(defund @expm1-%14-val (s12)
  (fsub-double #x8000000000000000 (g '%13 (@expm1-%13-loc s12))))
(defund @expm1-%14-loc (s12)
  (s '%14 (@expm1-%14-val s12) (@expm1-%13-loc s12)))
(defund @expm1-m12.1-mem (s12)
  (store-double (g '%14 (@expm1-%14-loc s12)) (g '%y (@expm1-%14-loc s12)) (@expm1-%12-mem s12)))
(defund @expm1-succ12-lab (s12)
  (declare (ignore s12))
  '%15)

(defund @expm1-%12-fwd (mem loc pred)
  (let ((s12 (list mem loc pred)))
    (mv (@expm1-succ12-lab s12) (@expm1-m12.1-mem s12) (@expm1-%14-loc s12))))

(defund @expm1-succ12-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%15 mem loc))
(defund @expm1-m12.1-rev (mem loc pred)
  (@expm1-succ12-rev (store-double (g '%14 loc) (g '%y loc) mem) loc pred))
(defund @expm1-%14-rev (mem loc pred)
  (@expm1-m12.1-rev mem (s '%14 (fsub-double #x8000000000000000 (g '%13 loc)) loc) pred))
(defund @expm1-%13-rev (mem loc pred)
  (@expm1-%14-rev mem (s '%13 (load-double (g '%2 loc) mem) loc) pred))

(defund @expm1-%12-rev (mem loc pred)
  (@expm1-%13-rev mem loc pred))

(defruled @expm1-%12-expand-rev-as-@expm1-%13-rev
  (equal (@expm1-%12-rev mem loc pred)
         (let ((s12 (list mem loc pred)))
           (@expm1-%13-rev
            (@expm1-%12-mem s12)
            (@expm1-%12-loc s12)
            (@expm1-%12-pred s12))))
  :enable (@expm1-%12-rev @expm1-%12-mem @expm1-%12-loc @expm1-%12-pred))
(defruled @expm1-%12-expand-rev-as-@expm1-%14-rev
  (equal (@expm1-%12-rev mem loc pred)
         (let ((s12 (list mem loc pred)))
           (@expm1-%14-rev
            (@expm1-%12-mem s12)
            (@expm1-%13-loc s12)
            (@expm1-%12-pred s12))))
  :enable (@expm1-%12-expand-rev-as-@expm1-%13-rev @expm1-%13-rev @expm1-%13-loc @expm1-%13-val))
(defruled @expm1-%12-expand-rev-as-@expm1-m12.1-rev
  (equal (@expm1-%12-rev mem loc pred)
         (let ((s12 (list mem loc pred)))
           (@expm1-m12.1-rev
            (@expm1-%12-mem s12)
            (@expm1-%14-loc s12)
            (@expm1-%12-pred s12))))
  :enable (@expm1-%12-expand-rev-as-@expm1-%14-rev @expm1-%14-rev @expm1-%14-loc @expm1-%14-val))
(defruled @expm1-%12-expand-rev-as-@expm1-succ12-rev
  (equal (@expm1-%12-rev mem loc pred)
         (let ((s12 (list mem loc pred)))
           (@expm1-succ12-rev
            (@expm1-m12.1-mem s12)
            (@expm1-%14-loc s12)
            (@expm1-%12-pred s12))))
  :enable (@expm1-%12-expand-rev-as-@expm1-m12.1-rev @expm1-m12.1-rev @expm1-m12.1-mem))
(defruled @expm1-%12-expand-rev-as-fwd
  (equal (@expm1-%12-rev mem loc pred)
         (@expm1-%12-fwd mem loc pred))
  :enable (@expm1-%12-expand-rev-as-@expm1-succ12-rev @expm1-succ12-rev @expm1-succ12-lab @expm1-%12-fwd))

(defund @expm1-%12-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%13 (load-double (g '%2 loc) mem) loc))
    (loc (s '%14 (fsub-double #x8000000000000000 (g '%13 loc)) loc))
    (mem (store-double (g '%14 loc) (g '%y loc) mem))
    (succ '%15))
  (mv succ mem loc)))

(defund @expm1-%15-mem (s15)
  (car s15))
(defund @expm1-%15-loc (s15)
  (cadr s15))
(defund @expm1-%15-pred (s15)
  (caddr s15))
(defund @expm1-%16-val (s15)
  (load-i32 (g '%hx (@expm1-%15-loc s15)) (@expm1-%15-mem s15)))
(defund @expm1-%16-loc (s15)
  (s '%16 (@expm1-%16-val s15) (@expm1-%15-loc s15)))
(defund @expm1-%17-val (s15)
  (and-i32 (g '%16 (@expm1-%16-loc s15)) 2147483647))
(defund @expm1-%17-loc (s15)
  (s '%17 (@expm1-%17-val s15) (@expm1-%16-loc s15)))
(defund @expm1-m15.1-mem (s15)
  (store-i32 (g '%17 (@expm1-%17-loc s15)) (g '%hx (@expm1-%17-loc s15)) (@expm1-%15-mem s15)))
(defund @expm1-%18-val (s15)
  (load-i32 (g '%hx (@expm1-%17-loc s15)) (@expm1-m15.1-mem s15)))
(defund @expm1-%18-loc (s15)
  (s '%18 (@expm1-%18-val s15) (@expm1-%17-loc s15)))
(defund @expm1-%19-val (s15)
  (icmp-uge-i32 (g '%18 (@expm1-%18-loc s15)) 1078159482))
(defund @expm1-%19-loc (s15)
  (s '%19 (@expm1-%19-val s15) (@expm1-%18-loc s15)))
(defund @expm1-succ15-lab (s15)
  (case (g '%19 (@expm1-%19-loc s15)) (-1 '%20) (0 '%60)))

(defund @expm1-%15-fwd (mem loc pred)
  (let ((s15 (list mem loc pred)))
    (mv (@expm1-succ15-lab s15) (@expm1-m15.1-mem s15) (@expm1-%19-loc s15))))

(defund @expm1-succ15-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%19 loc) (-1 '%20) (0 '%60)) mem loc))
(defund @expm1-%19-rev (mem loc pred)
  (@expm1-succ15-rev mem (s '%19 (icmp-uge-i32 (g '%18 loc) 1078159482) loc) pred))
(defund @expm1-%18-rev (mem loc pred)
  (@expm1-%19-rev mem (s '%18 (load-i32 (g '%hx loc) mem) loc) pred))
(defund @expm1-m15.1-rev (mem loc pred)
  (@expm1-%18-rev (store-i32 (g '%17 loc) (g '%hx loc) mem) loc pred))
(defund @expm1-%17-rev (mem loc pred)
  (@expm1-m15.1-rev mem (s '%17 (and-i32 (g '%16 loc) 2147483647) loc) pred))
(defund @expm1-%16-rev (mem loc pred)
  (@expm1-%17-rev mem (s '%16 (load-i32 (g '%hx loc) mem) loc) pred))

(defund @expm1-%15-rev (mem loc pred)
  (@expm1-%16-rev mem loc pred))

(defruled @expm1-%15-expand-rev-as-@expm1-%16-rev
  (equal (@expm1-%15-rev mem loc pred)
         (let ((s15 (list mem loc pred)))
           (@expm1-%16-rev
            (@expm1-%15-mem s15)
            (@expm1-%15-loc s15)
            (@expm1-%15-pred s15))))
  :enable (@expm1-%15-rev @expm1-%15-mem @expm1-%15-loc @expm1-%15-pred))
(defruled @expm1-%15-expand-rev-as-@expm1-%17-rev
  (equal (@expm1-%15-rev mem loc pred)
         (let ((s15 (list mem loc pred)))
           (@expm1-%17-rev
            (@expm1-%15-mem s15)
            (@expm1-%16-loc s15)
            (@expm1-%15-pred s15))))
  :enable (@expm1-%15-expand-rev-as-@expm1-%16-rev @expm1-%16-rev @expm1-%16-loc @expm1-%16-val))
(defruled @expm1-%15-expand-rev-as-@expm1-m15.1-rev
  (equal (@expm1-%15-rev mem loc pred)
         (let ((s15 (list mem loc pred)))
           (@expm1-m15.1-rev
            (@expm1-%15-mem s15)
            (@expm1-%17-loc s15)
            (@expm1-%15-pred s15))))
  :enable (@expm1-%15-expand-rev-as-@expm1-%17-rev @expm1-%17-rev @expm1-%17-loc @expm1-%17-val))
(defruled @expm1-%15-expand-rev-as-@expm1-%18-rev
  (equal (@expm1-%15-rev mem loc pred)
         (let ((s15 (list mem loc pred)))
           (@expm1-%18-rev
            (@expm1-m15.1-mem s15)
            (@expm1-%17-loc s15)
            (@expm1-%15-pred s15))))
  :enable (@expm1-%15-expand-rev-as-@expm1-m15.1-rev @expm1-m15.1-rev @expm1-m15.1-mem))
(defruled @expm1-%15-expand-rev-as-@expm1-%19-rev
  (equal (@expm1-%15-rev mem loc pred)
         (let ((s15 (list mem loc pred)))
           (@expm1-%19-rev
            (@expm1-m15.1-mem s15)
            (@expm1-%18-loc s15)
            (@expm1-%15-pred s15))))
  :enable (@expm1-%15-expand-rev-as-@expm1-%18-rev @expm1-%18-rev @expm1-%18-loc @expm1-%18-val))
(defruled @expm1-%15-expand-rev-as-@expm1-succ15-rev
  (equal (@expm1-%15-rev mem loc pred)
         (let ((s15 (list mem loc pred)))
           (@expm1-succ15-rev
            (@expm1-m15.1-mem s15)
            (@expm1-%19-loc s15)
            (@expm1-%15-pred s15))))
  :enable (@expm1-%15-expand-rev-as-@expm1-%19-rev @expm1-%19-rev @expm1-%19-loc @expm1-%19-val))
(defruled @expm1-%15-expand-rev-as-fwd
  (equal (@expm1-%15-rev mem loc pred)
         (@expm1-%15-fwd mem loc pred))
  :enable (@expm1-%15-expand-rev-as-@expm1-succ15-rev @expm1-succ15-rev @expm1-succ15-lab @expm1-%15-fwd))

(defund @expm1-%15-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%16 (load-i32 (g '%hx loc) mem) loc))
    (loc (s '%17 (and-i32 (g '%16 loc) 2147483647) loc))
    (mem (store-i32 (g '%17 loc) (g '%hx loc) mem))
    (loc (s '%18 (load-i32 (g '%hx loc) mem) loc))
    (loc (s '%19 (icmp-uge-i32 (g '%18 loc) 1078159482) loc))
    (succ (case (g '%19 loc) (-1 '%20) (0 '%60))))
  (mv succ mem loc)))

(defund @expm1-%20-mem (s20)
  (car s20))
(defund @expm1-%20-loc (s20)
  (cadr s20))
(defund @expm1-%20-pred (s20)
  (caddr s20))
(defund @expm1-%21-val (s20)
  (load-i32 (g '%hx (@expm1-%20-loc s20)) (@expm1-%20-mem s20)))
(defund @expm1-%21-loc (s20)
  (s '%21 (@expm1-%21-val s20) (@expm1-%20-loc s20)))
(defund @expm1-%22-val (s20)
  (icmp-uge-i32 (g '%21 (@expm1-%21-loc s20)) 1082535490))
(defund @expm1-%22-loc (s20)
  (s '%22 (@expm1-%22-val s20) (@expm1-%21-loc s20)))
(defund @expm1-succ20-lab (s20)
  (case (g '%22 (@expm1-%22-loc s20)) (-1 '%23) (0 '%50)))

(defund @expm1-%20-fwd (mem loc pred)
  (let ((s20 (list mem loc pred)))
    (mv (@expm1-succ20-lab s20) (@expm1-%20-mem s20) (@expm1-%22-loc s20))))

(defund @expm1-succ20-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%22 loc) (-1 '%23) (0 '%50)) mem loc))
(defund @expm1-%22-rev (mem loc pred)
  (@expm1-succ20-rev mem (s '%22 (icmp-uge-i32 (g '%21 loc) 1082535490) loc) pred))
(defund @expm1-%21-rev (mem loc pred)
  (@expm1-%22-rev mem (s '%21 (load-i32 (g '%hx loc) mem) loc) pred))

(defund @expm1-%20-rev (mem loc pred)
  (@expm1-%21-rev mem loc pred))

(defruled @expm1-%20-expand-rev-as-@expm1-%21-rev
  (equal (@expm1-%20-rev mem loc pred)
         (let ((s20 (list mem loc pred)))
           (@expm1-%21-rev
            (@expm1-%20-mem s20)
            (@expm1-%20-loc s20)
            (@expm1-%20-pred s20))))
  :enable (@expm1-%20-rev @expm1-%20-mem @expm1-%20-loc @expm1-%20-pred))
(defruled @expm1-%20-expand-rev-as-@expm1-%22-rev
  (equal (@expm1-%20-rev mem loc pred)
         (let ((s20 (list mem loc pred)))
           (@expm1-%22-rev
            (@expm1-%20-mem s20)
            (@expm1-%21-loc s20)
            (@expm1-%20-pred s20))))
  :enable (@expm1-%20-expand-rev-as-@expm1-%21-rev @expm1-%21-rev @expm1-%21-loc @expm1-%21-val))
(defruled @expm1-%20-expand-rev-as-@expm1-succ20-rev
  (equal (@expm1-%20-rev mem loc pred)
         (let ((s20 (list mem loc pred)))
           (@expm1-succ20-rev
            (@expm1-%20-mem s20)
            (@expm1-%22-loc s20)
            (@expm1-%20-pred s20))))
  :enable (@expm1-%20-expand-rev-as-@expm1-%22-rev @expm1-%22-rev @expm1-%22-loc @expm1-%22-val))
(defruled @expm1-%20-expand-rev-as-fwd
  (equal (@expm1-%20-rev mem loc pred)
         (@expm1-%20-fwd mem loc pred))
  :enable (@expm1-%20-expand-rev-as-@expm1-succ20-rev @expm1-succ20-rev @expm1-succ20-lab @expm1-%20-fwd))

(defund @expm1-%20-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%21 (load-i32 (g '%hx loc) mem) loc))
    (loc (s '%22 (icmp-uge-i32 (g '%21 loc) 1082535490) loc))
    (succ (case (g '%22 loc) (-1 '%23) (0 '%50))))
  (mv succ mem loc)))

(defund @expm1-%23-mem (s23)
  (car s23))
(defund @expm1-%23-loc (s23)
  (cadr s23))
(defund @expm1-%23-pred (s23)
  (caddr s23))
(defund @expm1-%24-val (s23)
  (load-i32 (g '%hx (@expm1-%23-loc s23)) (@expm1-%23-mem s23)))
(defund @expm1-%24-loc (s23)
  (s '%24 (@expm1-%24-val s23) (@expm1-%23-loc s23)))
(defund @expm1-%25-val (s23)
  (icmp-uge-i32 (g '%24 (@expm1-%24-loc s23)) 2146435072))
(defund @expm1-%25-loc (s23)
  (s '%25 (@expm1-%25-val s23) (@expm1-%24-loc s23)))
(defund @expm1-succ23-lab (s23)
  (case (g '%25 (@expm1-%25-loc s23)) (-1 '%26) (0 '%45)))

(defund @expm1-%23-fwd (mem loc pred)
  (let ((s23 (list mem loc pred)))
    (mv (@expm1-succ23-lab s23) (@expm1-%23-mem s23) (@expm1-%25-loc s23))))

(defund @expm1-succ23-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%25 loc) (-1 '%26) (0 '%45)) mem loc))
(defund @expm1-%25-rev (mem loc pred)
  (@expm1-succ23-rev mem (s '%25 (icmp-uge-i32 (g '%24 loc) 2146435072) loc) pred))
(defund @expm1-%24-rev (mem loc pred)
  (@expm1-%25-rev mem (s '%24 (load-i32 (g '%hx loc) mem) loc) pred))

(defund @expm1-%23-rev (mem loc pred)
  (@expm1-%24-rev mem loc pred))

(defruled @expm1-%23-expand-rev-as-@expm1-%24-rev
  (equal (@expm1-%23-rev mem loc pred)
         (let ((s23 (list mem loc pred)))
           (@expm1-%24-rev
            (@expm1-%23-mem s23)
            (@expm1-%23-loc s23)
            (@expm1-%23-pred s23))))
  :enable (@expm1-%23-rev @expm1-%23-mem @expm1-%23-loc @expm1-%23-pred))
(defruled @expm1-%23-expand-rev-as-@expm1-%25-rev
  (equal (@expm1-%23-rev mem loc pred)
         (let ((s23 (list mem loc pred)))
           (@expm1-%25-rev
            (@expm1-%23-mem s23)
            (@expm1-%24-loc s23)
            (@expm1-%23-pred s23))))
  :enable (@expm1-%23-expand-rev-as-@expm1-%24-rev @expm1-%24-rev @expm1-%24-loc @expm1-%24-val))
(defruled @expm1-%23-expand-rev-as-@expm1-succ23-rev
  (equal (@expm1-%23-rev mem loc pred)
         (let ((s23 (list mem loc pred)))
           (@expm1-succ23-rev
            (@expm1-%23-mem s23)
            (@expm1-%25-loc s23)
            (@expm1-%23-pred s23))))
  :enable (@expm1-%23-expand-rev-as-@expm1-%25-rev @expm1-%25-rev @expm1-%25-loc @expm1-%25-val))
(defruled @expm1-%23-expand-rev-as-fwd
  (equal (@expm1-%23-rev mem loc pred)
         (@expm1-%23-fwd mem loc pred))
  :enable (@expm1-%23-expand-rev-as-@expm1-succ23-rev @expm1-succ23-rev @expm1-succ23-lab @expm1-%23-fwd))

(defund @expm1-%23-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%24 (load-i32 (g '%hx loc) mem) loc))
    (loc (s '%25 (icmp-uge-i32 (g '%24 loc) 2146435072) loc))
    (succ (case (g '%25 loc) (-1 '%26) (0 '%45))))
  (mv succ mem loc)))

(defund @expm1-%26-mem (s26)
  (car s26))
(defund @expm1-%26-loc (s26)
  (cadr s26))
(defund @expm1-%26-pred (s26)
  (caddr s26))
(defund @expm1-%27-val (s26)
  (load-i32 (g '%hx (@expm1-%26-loc s26)) (@expm1-%26-mem s26)))
(defund @expm1-%27-loc (s26)
  (s '%27 (@expm1-%27-val s26) (@expm1-%26-loc s26)))
(defund @expm1-%28-val (s26)
  (and-i32 (g '%27 (@expm1-%27-loc s26)) 1048575))
(defund @expm1-%28-loc (s26)
  (s '%28 (@expm1-%28-val s26) (@expm1-%27-loc s26)))
(defund @expm1-%29-val (s26)
  (bitcast-double*-to-i32* (g '%2 (@expm1-%28-loc s26))))
(defund @expm1-%29-loc (s26)
  (s '%29 (@expm1-%29-val s26) (@expm1-%28-loc s26)))
(defund @expm1-%30-val (s26)
  (load-i32 (g '%29 (@expm1-%29-loc s26)) (@expm1-%26-mem s26)))
(defund @expm1-%30-loc (s26)
  (s '%30 (@expm1-%30-val s26) (@expm1-%29-loc s26)))
(defund @expm1-%31-val (s26)
  (or-i32 (g '%28 (@expm1-%30-loc s26)) (g '%30 (@expm1-%30-loc s26))))
(defund @expm1-%31-loc (s26)
  (s '%31 (@expm1-%31-val s26) (@expm1-%30-loc s26)))
(defund @expm1-%32-val (s26)
  (icmp-ne-i32 (g '%31 (@expm1-%31-loc s26)) 0))
(defund @expm1-%32-loc (s26)
  (s '%32 (@expm1-%32-val s26) (@expm1-%31-loc s26)))
(defund @expm1-succ26-lab (s26)
  (case (g '%32 (@expm1-%32-loc s26)) (-1 '%33) (0 '%37)))

(defund @expm1-%26-fwd (mem loc pred)
  (let ((s26 (list mem loc pred)))
    (mv (@expm1-succ26-lab s26) (@expm1-%26-mem s26) (@expm1-%32-loc s26))))

(defund @expm1-succ26-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%32 loc) (-1 '%33) (0 '%37)) mem loc))
(defund @expm1-%32-rev (mem loc pred)
  (@expm1-succ26-rev mem (s '%32 (icmp-ne-i32 (g '%31 loc) 0) loc) pred))
(defund @expm1-%31-rev (mem loc pred)
  (@expm1-%32-rev mem (s '%31 (or-i32 (g '%28 loc) (g '%30 loc)) loc) pred))
(defund @expm1-%30-rev (mem loc pred)
  (@expm1-%31-rev mem (s '%30 (load-i32 (g '%29 loc) mem) loc) pred))
(defund @expm1-%29-rev (mem loc pred)
  (@expm1-%30-rev mem (s '%29 (bitcast-double*-to-i32* (g '%2 loc)) loc) pred))
(defund @expm1-%28-rev (mem loc pred)
  (@expm1-%29-rev mem (s '%28 (and-i32 (g '%27 loc) 1048575) loc) pred))
(defund @expm1-%27-rev (mem loc pred)
  (@expm1-%28-rev mem (s '%27 (load-i32 (g '%hx loc) mem) loc) pred))

(defund @expm1-%26-rev (mem loc pred)
  (@expm1-%27-rev mem loc pred))

(defruled @expm1-%26-expand-rev-as-@expm1-%27-rev
  (equal (@expm1-%26-rev mem loc pred)
         (let ((s26 (list mem loc pred)))
           (@expm1-%27-rev
            (@expm1-%26-mem s26)
            (@expm1-%26-loc s26)
            (@expm1-%26-pred s26))))
  :enable (@expm1-%26-rev @expm1-%26-mem @expm1-%26-loc @expm1-%26-pred))
(defruled @expm1-%26-expand-rev-as-@expm1-%28-rev
  (equal (@expm1-%26-rev mem loc pred)
         (let ((s26 (list mem loc pred)))
           (@expm1-%28-rev
            (@expm1-%26-mem s26)
            (@expm1-%27-loc s26)
            (@expm1-%26-pred s26))))
  :enable (@expm1-%26-expand-rev-as-@expm1-%27-rev @expm1-%27-rev @expm1-%27-loc @expm1-%27-val))
(defruled @expm1-%26-expand-rev-as-@expm1-%29-rev
  (equal (@expm1-%26-rev mem loc pred)
         (let ((s26 (list mem loc pred)))
           (@expm1-%29-rev
            (@expm1-%26-mem s26)
            (@expm1-%28-loc s26)
            (@expm1-%26-pred s26))))
  :enable (@expm1-%26-expand-rev-as-@expm1-%28-rev @expm1-%28-rev @expm1-%28-loc @expm1-%28-val))
(defruled @expm1-%26-expand-rev-as-@expm1-%30-rev
  (equal (@expm1-%26-rev mem loc pred)
         (let ((s26 (list mem loc pred)))
           (@expm1-%30-rev
            (@expm1-%26-mem s26)
            (@expm1-%29-loc s26)
            (@expm1-%26-pred s26))))
  :enable (@expm1-%26-expand-rev-as-@expm1-%29-rev @expm1-%29-rev @expm1-%29-loc @expm1-%29-val))
(defruled @expm1-%26-expand-rev-as-@expm1-%31-rev
  (equal (@expm1-%26-rev mem loc pred)
         (let ((s26 (list mem loc pred)))
           (@expm1-%31-rev
            (@expm1-%26-mem s26)
            (@expm1-%30-loc s26)
            (@expm1-%26-pred s26))))
  :enable (@expm1-%26-expand-rev-as-@expm1-%30-rev @expm1-%30-rev @expm1-%30-loc @expm1-%30-val))
(defruled @expm1-%26-expand-rev-as-@expm1-%32-rev
  (equal (@expm1-%26-rev mem loc pred)
         (let ((s26 (list mem loc pred)))
           (@expm1-%32-rev
            (@expm1-%26-mem s26)
            (@expm1-%31-loc s26)
            (@expm1-%26-pred s26))))
  :enable (@expm1-%26-expand-rev-as-@expm1-%31-rev @expm1-%31-rev @expm1-%31-loc @expm1-%31-val))
(defruled @expm1-%26-expand-rev-as-@expm1-succ26-rev
  (equal (@expm1-%26-rev mem loc pred)
         (let ((s26 (list mem loc pred)))
           (@expm1-succ26-rev
            (@expm1-%26-mem s26)
            (@expm1-%32-loc s26)
            (@expm1-%26-pred s26))))
  :enable (@expm1-%26-expand-rev-as-@expm1-%32-rev @expm1-%32-rev @expm1-%32-loc @expm1-%32-val))
(defruled @expm1-%26-expand-rev-as-fwd
  (equal (@expm1-%26-rev mem loc pred)
         (@expm1-%26-fwd mem loc pred))
  :enable (@expm1-%26-expand-rev-as-@expm1-succ26-rev @expm1-succ26-rev @expm1-succ26-lab @expm1-%26-fwd))

(defund @expm1-%26-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%27 (load-i32 (g '%hx loc) mem) loc))
    (loc (s '%28 (and-i32 (g '%27 loc) 1048575) loc))
    (loc (s '%29 (bitcast-double*-to-i32* (g '%2 loc)) loc))
    (loc (s '%30 (load-i32 (g '%29 loc) mem) loc))
    (loc (s '%31 (or-i32 (g '%28 loc) (g '%30 loc)) loc))
    (loc (s '%32 (icmp-ne-i32 (g '%31 loc) 0) loc))
    (succ (case (g '%32 loc) (-1 '%33) (0 '%37))))
  (mv succ mem loc)))

(defund @expm1-%33-mem (s33)
  (car s33))
(defund @expm1-%33-loc (s33)
  (cadr s33))
(defund @expm1-%33-pred (s33)
  (caddr s33))
(defund @expm1-%34-val (s33)
  (load-double (g '%2 (@expm1-%33-loc s33)) (@expm1-%33-mem s33)))
(defund @expm1-%34-loc (s33)
  (s '%34 (@expm1-%34-val s33) (@expm1-%33-loc s33)))
(defund @expm1-%35-val (s33)
  (load-double (g '%2 (@expm1-%34-loc s33)) (@expm1-%33-mem s33)))
(defund @expm1-%35-loc (s33)
  (s '%35 (@expm1-%35-val s33) (@expm1-%34-loc s33)))
(defund @expm1-%36-val (s33)
  (fadd-double (g '%34 (@expm1-%35-loc s33)) (g '%35 (@expm1-%35-loc s33))))
(defund @expm1-%36-loc (s33)
  (s '%36 (@expm1-%36-val s33) (@expm1-%35-loc s33)))
(defund @expm1-m33.1-mem (s33)
  (store-double (g '%36 (@expm1-%36-loc s33)) (g '%1 (@expm1-%36-loc s33)) (@expm1-%33-mem s33)))
(defund @expm1-succ33-lab (s33)
  (declare (ignore s33))
  '%258)

(defund @expm1-%33-fwd (mem loc pred)
  (let ((s33 (list mem loc pred)))
    (mv (@expm1-succ33-lab s33) (@expm1-m33.1-mem s33) (@expm1-%36-loc s33))))

(defund @expm1-succ33-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%258 mem loc))
(defund @expm1-m33.1-rev (mem loc pred)
  (@expm1-succ33-rev (store-double (g '%36 loc) (g '%1 loc) mem) loc pred))
(defund @expm1-%36-rev (mem loc pred)
  (@expm1-m33.1-rev mem (s '%36 (fadd-double (g '%34 loc) (g '%35 loc)) loc) pred))
(defund @expm1-%35-rev (mem loc pred)
  (@expm1-%36-rev mem (s '%35 (load-double (g '%2 loc) mem) loc) pred))
(defund @expm1-%34-rev (mem loc pred)
  (@expm1-%35-rev mem (s '%34 (load-double (g '%2 loc) mem) loc) pred))

(defund @expm1-%33-rev (mem loc pred)
  (@expm1-%34-rev mem loc pred))

(defruled @expm1-%33-expand-rev-as-@expm1-%34-rev
  (equal (@expm1-%33-rev mem loc pred)
         (let ((s33 (list mem loc pred)))
           (@expm1-%34-rev
            (@expm1-%33-mem s33)
            (@expm1-%33-loc s33)
            (@expm1-%33-pred s33))))
  :enable (@expm1-%33-rev @expm1-%33-mem @expm1-%33-loc @expm1-%33-pred))
(defruled @expm1-%33-expand-rev-as-@expm1-%35-rev
  (equal (@expm1-%33-rev mem loc pred)
         (let ((s33 (list mem loc pred)))
           (@expm1-%35-rev
            (@expm1-%33-mem s33)
            (@expm1-%34-loc s33)
            (@expm1-%33-pred s33))))
  :enable (@expm1-%33-expand-rev-as-@expm1-%34-rev @expm1-%34-rev @expm1-%34-loc @expm1-%34-val))
(defruled @expm1-%33-expand-rev-as-@expm1-%36-rev
  (equal (@expm1-%33-rev mem loc pred)
         (let ((s33 (list mem loc pred)))
           (@expm1-%36-rev
            (@expm1-%33-mem s33)
            (@expm1-%35-loc s33)
            (@expm1-%33-pred s33))))
  :enable (@expm1-%33-expand-rev-as-@expm1-%35-rev @expm1-%35-rev @expm1-%35-loc @expm1-%35-val))
(defruled @expm1-%33-expand-rev-as-@expm1-m33.1-rev
  (equal (@expm1-%33-rev mem loc pred)
         (let ((s33 (list mem loc pred)))
           (@expm1-m33.1-rev
            (@expm1-%33-mem s33)
            (@expm1-%36-loc s33)
            (@expm1-%33-pred s33))))
  :enable (@expm1-%33-expand-rev-as-@expm1-%36-rev @expm1-%36-rev @expm1-%36-loc @expm1-%36-val))
(defruled @expm1-%33-expand-rev-as-@expm1-succ33-rev
  (equal (@expm1-%33-rev mem loc pred)
         (let ((s33 (list mem loc pred)))
           (@expm1-succ33-rev
            (@expm1-m33.1-mem s33)
            (@expm1-%36-loc s33)
            (@expm1-%33-pred s33))))
  :enable (@expm1-%33-expand-rev-as-@expm1-m33.1-rev @expm1-m33.1-rev @expm1-m33.1-mem))
(defruled @expm1-%33-expand-rev-as-fwd
  (equal (@expm1-%33-rev mem loc pred)
         (@expm1-%33-fwd mem loc pred))
  :enable (@expm1-%33-expand-rev-as-@expm1-succ33-rev @expm1-succ33-rev @expm1-succ33-lab @expm1-%33-fwd))

(defund @expm1-%33-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%34 (load-double (g '%2 loc) mem) loc))
    (loc (s '%35 (load-double (g '%2 loc) mem) loc))
    (loc (s '%36 (fadd-double (g '%34 loc) (g '%35 loc)) loc))
    (mem (store-double (g '%36 loc) (g '%1 loc) mem))
    (succ '%258))
  (mv succ mem loc)))

(defund @expm1-%37-mem (s37)
  (car s37))
(defund @expm1-%37-loc (s37)
  (cadr s37))
(defund @expm1-%37-pred (s37)
  (caddr s37))
(defund @expm1-%38-val (s37)
  (load-i32 (g '%xsb (@expm1-%37-loc s37)) (@expm1-%37-mem s37)))
(defund @expm1-%38-loc (s37)
  (s '%38 (@expm1-%38-val s37) (@expm1-%37-loc s37)))
(defund @expm1-%39-val (s37)
  (icmp-eq-i32 (g '%38 (@expm1-%38-loc s37)) 0))
(defund @expm1-%39-loc (s37)
  (s '%39 (@expm1-%39-val s37) (@expm1-%38-loc s37)))
(defund @expm1-succ37-lab (s37)
  (case (g '%39 (@expm1-%39-loc s37)) (-1 '%40) (0 '%42)))

(defund @expm1-%37-fwd (mem loc pred)
  (let ((s37 (list mem loc pred)))
    (mv (@expm1-succ37-lab s37) (@expm1-%37-mem s37) (@expm1-%39-loc s37))))

(defund @expm1-succ37-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%39 loc) (-1 '%40) (0 '%42)) mem loc))
(defund @expm1-%39-rev (mem loc pred)
  (@expm1-succ37-rev mem (s '%39 (icmp-eq-i32 (g '%38 loc) 0) loc) pred))
(defund @expm1-%38-rev (mem loc pred)
  (@expm1-%39-rev mem (s '%38 (load-i32 (g '%xsb loc) mem) loc) pred))

(defund @expm1-%37-rev (mem loc pred)
  (@expm1-%38-rev mem loc pred))

(defruled @expm1-%37-expand-rev-as-@expm1-%38-rev
  (equal (@expm1-%37-rev mem loc pred)
         (let ((s37 (list mem loc pred)))
           (@expm1-%38-rev
            (@expm1-%37-mem s37)
            (@expm1-%37-loc s37)
            (@expm1-%37-pred s37))))
  :enable (@expm1-%37-rev @expm1-%37-mem @expm1-%37-loc @expm1-%37-pred))
(defruled @expm1-%37-expand-rev-as-@expm1-%39-rev
  (equal (@expm1-%37-rev mem loc pred)
         (let ((s37 (list mem loc pred)))
           (@expm1-%39-rev
            (@expm1-%37-mem s37)
            (@expm1-%38-loc s37)
            (@expm1-%37-pred s37))))
  :enable (@expm1-%37-expand-rev-as-@expm1-%38-rev @expm1-%38-rev @expm1-%38-loc @expm1-%38-val))
(defruled @expm1-%37-expand-rev-as-@expm1-succ37-rev
  (equal (@expm1-%37-rev mem loc pred)
         (let ((s37 (list mem loc pred)))
           (@expm1-succ37-rev
            (@expm1-%37-mem s37)
            (@expm1-%39-loc s37)
            (@expm1-%37-pred s37))))
  :enable (@expm1-%37-expand-rev-as-@expm1-%39-rev @expm1-%39-rev @expm1-%39-loc @expm1-%39-val))
(defruled @expm1-%37-expand-rev-as-fwd
  (equal (@expm1-%37-rev mem loc pred)
         (@expm1-%37-fwd mem loc pred))
  :enable (@expm1-%37-expand-rev-as-@expm1-succ37-rev @expm1-succ37-rev @expm1-succ37-lab @expm1-%37-fwd))

(defund @expm1-%37-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%38 (load-i32 (g '%xsb loc) mem) loc))
    (loc (s '%39 (icmp-eq-i32 (g '%38 loc) 0) loc))
    (succ (case (g '%39 loc) (-1 '%40) (0 '%42))))
  (mv succ mem loc)))

(defund @expm1-%40-mem (s40)
  (car s40))
(defund @expm1-%40-loc (s40)
  (cadr s40))
(defund @expm1-%40-pred (s40)
  (caddr s40))
(defund @expm1-%41-val (s40)
  (load-double (g '%2 (@expm1-%40-loc s40)) (@expm1-%40-mem s40)))
(defund @expm1-%41-loc (s40)
  (s '%41 (@expm1-%41-val s40) (@expm1-%40-loc s40)))
(defund @expm1-succ40-lab (s40)
  (declare (ignore s40))
  '%43)

(defund @expm1-%40-fwd (mem loc pred)
  (let ((s40 (list mem loc pred)))
    (mv (@expm1-succ40-lab s40) (@expm1-%40-mem s40) (@expm1-%41-loc s40))))

(defund @expm1-succ40-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%43 mem loc))
(defund @expm1-%41-rev (mem loc pred)
  (@expm1-succ40-rev mem (s '%41 (load-double (g '%2 loc) mem) loc) pred))

(defund @expm1-%40-rev (mem loc pred)
  (@expm1-%41-rev mem loc pred))

(defruled @expm1-%40-expand-rev-as-@expm1-%41-rev
  (equal (@expm1-%40-rev mem loc pred)
         (let ((s40 (list mem loc pred)))
           (@expm1-%41-rev
            (@expm1-%40-mem s40)
            (@expm1-%40-loc s40)
            (@expm1-%40-pred s40))))
  :enable (@expm1-%40-rev @expm1-%40-mem @expm1-%40-loc @expm1-%40-pred))
(defruled @expm1-%40-expand-rev-as-@expm1-succ40-rev
  (equal (@expm1-%40-rev mem loc pred)
         (let ((s40 (list mem loc pred)))
           (@expm1-succ40-rev
            (@expm1-%40-mem s40)
            (@expm1-%41-loc s40)
            (@expm1-%40-pred s40))))
  :enable (@expm1-%40-expand-rev-as-@expm1-%41-rev @expm1-%41-rev @expm1-%41-loc @expm1-%41-val))
(defruled @expm1-%40-expand-rev-as-fwd
  (equal (@expm1-%40-rev mem loc pred)
         (@expm1-%40-fwd mem loc pred))
  :enable (@expm1-%40-expand-rev-as-@expm1-succ40-rev @expm1-succ40-rev @expm1-succ40-lab @expm1-%40-fwd))

(defund @expm1-%40-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%41 (load-double (g '%2 loc) mem) loc))
    (succ '%43))
  (mv succ mem loc)))

(defund @expm1-%42-mem (s42)
  (car s42))
(defund @expm1-%42-loc (s42)
  (cadr s42))
(defund @expm1-%42-pred (s42)
  (caddr s42))
(defund @expm1-succ42-lab (s42)
  (declare (ignore s42))
  '%43)

(defund @expm1-%42-fwd (mem loc pred)
  (let ((s42 (list mem loc pred)))
    (mv (@expm1-succ42-lab s42) (@expm1-%42-mem s42) (@expm1-%42-loc s42))))

(defund @expm1-succ42-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%43 mem loc))

(defund @expm1-%42-rev (mem loc pred)
  (@expm1-succ42-rev mem loc pred))

(defruled @expm1-%42-expand-rev-as-@expm1-succ42-rev
  (equal (@expm1-%42-rev mem loc pred)
         (let ((s42 (list mem loc pred)))
           (@expm1-succ42-rev
            (@expm1-%42-mem s42)
            (@expm1-%42-loc s42)
            (@expm1-%42-pred s42))))
  :enable (@expm1-%42-rev @expm1-%42-mem @expm1-%42-loc @expm1-%42-pred))
(defruled @expm1-%42-expand-rev-as-fwd
  (equal (@expm1-%42-rev mem loc pred)
         (@expm1-%42-fwd mem loc pred))
  :enable (@expm1-%42-expand-rev-as-@expm1-succ42-rev @expm1-succ42-rev @expm1-succ42-lab @expm1-%42-fwd))

(defund @expm1-%42-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (succ '%43))
  (mv succ mem loc)))

(defund @expm1-%43-mem (s43)
  (car s43))
(defund @expm1-%43-loc (s43)
  (cadr s43))
(defund @expm1-%43-pred (s43)
  (caddr s43))
(defund @expm1-%44-val (s43)
  (case (@expm1-%43-pred s43) (%40 (g '%41 (@expm1-%43-loc s43))) (%42 #xbff0000000000000)))
(defund @expm1-%44-loc (s43)
  (s '%44 (@expm1-%44-val s43) (@expm1-%43-loc s43)))
(defund @expm1-m43.1-mem (s43)
  (store-double (g '%44 (@expm1-%44-loc s43)) (g '%1 (@expm1-%44-loc s43)) (@expm1-%43-mem s43)))
(defund @expm1-succ43-lab (s43)
  (declare (ignore s43))
  '%258)

(defund @expm1-%43-fwd (mem loc pred)
  (let ((s43 (list mem loc pred)))
    (mv (@expm1-succ43-lab s43) (@expm1-m43.1-mem s43) (@expm1-%44-loc s43))))

(defund @expm1-succ43-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%258 mem loc))
(defund @expm1-m43.1-rev (mem loc pred)
  (@expm1-succ43-rev (store-double (g '%44 loc) (g '%1 loc) mem) loc pred))
(defund @expm1-%44-rev (mem loc pred)
  (@expm1-m43.1-rev mem (s '%44 (case pred (%40 (g '%41 loc)) (%42 #xbff0000000000000)) loc) pred))

(defund @expm1-%43-rev (mem loc pred)
  (@expm1-%44-rev mem loc pred))

(defruled @expm1-%43-expand-rev-as-@expm1-%44-rev
  (equal (@expm1-%43-rev mem loc pred)
         (let ((s43 (list mem loc pred)))
           (@expm1-%44-rev
            (@expm1-%43-mem s43)
            (@expm1-%43-loc s43)
            (@expm1-%43-pred s43))))
  :enable (@expm1-%43-rev @expm1-%43-mem @expm1-%43-loc @expm1-%43-pred))
(defruled @expm1-%43-expand-rev-as-@expm1-m43.1-rev
  (equal (@expm1-%43-rev mem loc pred)
         (let ((s43 (list mem loc pred)))
           (@expm1-m43.1-rev
            (@expm1-%43-mem s43)
            (@expm1-%44-loc s43)
            (@expm1-%43-pred s43))))
  :enable (@expm1-%43-expand-rev-as-@expm1-%44-rev @expm1-%44-rev @expm1-%44-loc @expm1-%44-val))
(defruled @expm1-%43-expand-rev-as-@expm1-succ43-rev
  (equal (@expm1-%43-rev mem loc pred)
         (let ((s43 (list mem loc pred)))
           (@expm1-succ43-rev
            (@expm1-m43.1-mem s43)
            (@expm1-%44-loc s43)
            (@expm1-%43-pred s43))))
  :enable (@expm1-%43-expand-rev-as-@expm1-m43.1-rev @expm1-m43.1-rev @expm1-m43.1-mem))
(defruled @expm1-%43-expand-rev-as-fwd
  (equal (@expm1-%43-rev mem loc pred)
         (@expm1-%43-fwd mem loc pred))
  :enable (@expm1-%43-expand-rev-as-@expm1-succ43-rev @expm1-succ43-rev @expm1-succ43-lab @expm1-%43-fwd))

(defund @expm1-%43-bb (mem loc pred)
  (b* (
    (loc (s '%44 (case pred (%40 (g '%41 loc)) (%42 #xbff0000000000000)) loc))
    (mem (store-double (g '%44 loc) (g '%1 loc) mem))
    (succ '%258))
  (mv succ mem loc)))

(defund @expm1-%45-mem (s45)
  (car s45))
(defund @expm1-%45-loc (s45)
  (cadr s45))
(defund @expm1-%45-pred (s45)
  (caddr s45))
(defund @expm1-%46-val (s45)
  (load-double (g '%2 (@expm1-%45-loc s45)) (@expm1-%45-mem s45)))
(defund @expm1-%46-loc (s45)
  (s '%46 (@expm1-%46-val s45) (@expm1-%45-loc s45)))
(defund @expm1-%47-val (s45)
  (fcmp-ogt-double (g '%46 (@expm1-%46-loc s45)) #x40862E42FEFA39EF))
(defund @expm1-%47-loc (s45)
  (s '%47 (@expm1-%47-val s45) (@expm1-%46-loc s45)))
(defund @expm1-succ45-lab (s45)
  (case (g '%47 (@expm1-%47-loc s45)) (-1 '%48) (0 '%49)))

(defund @expm1-%45-fwd (mem loc pred)
  (let ((s45 (list mem loc pred)))
    (mv (@expm1-succ45-lab s45) (@expm1-%45-mem s45) (@expm1-%47-loc s45))))

(defund @expm1-succ45-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%47 loc) (-1 '%48) (0 '%49)) mem loc))
(defund @expm1-%47-rev (mem loc pred)
  (@expm1-succ45-rev mem (s '%47 (fcmp-ogt-double (g '%46 loc) #x40862E42FEFA39EF) loc) pred))
(defund @expm1-%46-rev (mem loc pred)
  (@expm1-%47-rev mem (s '%46 (load-double (g '%2 loc) mem) loc) pred))

(defund @expm1-%45-rev (mem loc pred)
  (@expm1-%46-rev mem loc pred))

(defruled @expm1-%45-expand-rev-as-@expm1-%46-rev
  (equal (@expm1-%45-rev mem loc pred)
         (let ((s45 (list mem loc pred)))
           (@expm1-%46-rev
            (@expm1-%45-mem s45)
            (@expm1-%45-loc s45)
            (@expm1-%45-pred s45))))
  :enable (@expm1-%45-rev @expm1-%45-mem @expm1-%45-loc @expm1-%45-pred))
(defruled @expm1-%45-expand-rev-as-@expm1-%47-rev
  (equal (@expm1-%45-rev mem loc pred)
         (let ((s45 (list mem loc pred)))
           (@expm1-%47-rev
            (@expm1-%45-mem s45)
            (@expm1-%46-loc s45)
            (@expm1-%45-pred s45))))
  :enable (@expm1-%45-expand-rev-as-@expm1-%46-rev @expm1-%46-rev @expm1-%46-loc @expm1-%46-val))
(defruled @expm1-%45-expand-rev-as-@expm1-succ45-rev
  (equal (@expm1-%45-rev mem loc pred)
         (let ((s45 (list mem loc pred)))
           (@expm1-succ45-rev
            (@expm1-%45-mem s45)
            (@expm1-%47-loc s45)
            (@expm1-%45-pred s45))))
  :enable (@expm1-%45-expand-rev-as-@expm1-%47-rev @expm1-%47-rev @expm1-%47-loc @expm1-%47-val))
(defruled @expm1-%45-expand-rev-as-fwd
  (equal (@expm1-%45-rev mem loc pred)
         (@expm1-%45-fwd mem loc pred))
  :enable (@expm1-%45-expand-rev-as-@expm1-succ45-rev @expm1-succ45-rev @expm1-succ45-lab @expm1-%45-fwd))

(defund @expm1-%45-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%46 (load-double (g '%2 loc) mem) loc))
    (loc (s '%47 (fcmp-ogt-double (g '%46 loc) #x40862E42FEFA39EF) loc))
    (succ (case (g '%47 loc) (-1 '%48) (0 '%49))))
  (mv succ mem loc)))

(defund @expm1-%48-mem (s48)
  (car s48))
(defund @expm1-%48-loc (s48)
  (cadr s48))
(defund @expm1-%48-pred (s48)
  (caddr s48))
(defund @expm1-m48.1-mem (s48)
  (store-double #x7FF0000000000000 (g '%1 (@expm1-%48-loc s48)) (@expm1-%48-mem s48)))
(defund @expm1-succ48-lab (s48)
  (declare (ignore s48))
  '%258)

(defund @expm1-%48-fwd (mem loc pred)
  (let ((s48 (list mem loc pred)))
    (mv (@expm1-succ48-lab s48) (@expm1-m48.1-mem s48) (@expm1-%48-loc s48))))

(defund @expm1-succ48-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%258 mem loc))
(defund @expm1-m48.1-rev (mem loc pred)
  (@expm1-succ48-rev (store-double #x7FF0000000000000 (g '%1 loc) mem) loc pred))

(defund @expm1-%48-rev (mem loc pred)
  (@expm1-m48.1-rev mem loc pred))

(defruled @expm1-%48-expand-rev-as-@expm1-m48.1-rev
  (equal (@expm1-%48-rev mem loc pred)
         (let ((s48 (list mem loc pred)))
           (@expm1-m48.1-rev
            (@expm1-%48-mem s48)
            (@expm1-%48-loc s48)
            (@expm1-%48-pred s48))))
  :enable (@expm1-%48-rev @expm1-%48-mem @expm1-%48-loc @expm1-%48-pred))
(defruled @expm1-%48-expand-rev-as-@expm1-succ48-rev
  (equal (@expm1-%48-rev mem loc pred)
         (let ((s48 (list mem loc pred)))
           (@expm1-succ48-rev
            (@expm1-m48.1-mem s48)
            (@expm1-%48-loc s48)
            (@expm1-%48-pred s48))))
  :enable (@expm1-%48-expand-rev-as-@expm1-m48.1-rev @expm1-m48.1-rev @expm1-m48.1-mem))
(defruled @expm1-%48-expand-rev-as-fwd
  (equal (@expm1-%48-rev mem loc pred)
         (@expm1-%48-fwd mem loc pred))
  :enable (@expm1-%48-expand-rev-as-@expm1-succ48-rev @expm1-succ48-rev @expm1-succ48-lab @expm1-%48-fwd))

(defund @expm1-%48-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (mem (store-double #x7FF0000000000000 (g '%1 loc) mem))
    (succ '%258))
  (mv succ mem loc)))

(defund @expm1-%49-mem (s49)
  (car s49))
(defund @expm1-%49-loc (s49)
  (cadr s49))
(defund @expm1-%49-pred (s49)
  (caddr s49))
(defund @expm1-succ49-lab (s49)
  (declare (ignore s49))
  '%50)

(defund @expm1-%49-fwd (mem loc pred)
  (let ((s49 (list mem loc pred)))
    (mv (@expm1-succ49-lab s49) (@expm1-%49-mem s49) (@expm1-%49-loc s49))))

(defund @expm1-succ49-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%50 mem loc))

(defund @expm1-%49-rev (mem loc pred)
  (@expm1-succ49-rev mem loc pred))

(defruled @expm1-%49-expand-rev-as-@expm1-succ49-rev
  (equal (@expm1-%49-rev mem loc pred)
         (let ((s49 (list mem loc pred)))
           (@expm1-succ49-rev
            (@expm1-%49-mem s49)
            (@expm1-%49-loc s49)
            (@expm1-%49-pred s49))))
  :enable (@expm1-%49-rev @expm1-%49-mem @expm1-%49-loc @expm1-%49-pred))
(defruled @expm1-%49-expand-rev-as-fwd
  (equal (@expm1-%49-rev mem loc pred)
         (@expm1-%49-fwd mem loc pred))
  :enable (@expm1-%49-expand-rev-as-@expm1-succ49-rev @expm1-succ49-rev @expm1-succ49-lab @expm1-%49-fwd))

(defund @expm1-%49-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (succ '%50))
  (mv succ mem loc)))

(defund @expm1-%50-mem (s50)
  (car s50))
(defund @expm1-%50-loc (s50)
  (cadr s50))
(defund @expm1-%50-pred (s50)
  (caddr s50))
(defund @expm1-%51-val (s50)
  (load-i32 (g '%xsb (@expm1-%50-loc s50)) (@expm1-%50-mem s50)))
(defund @expm1-%51-loc (s50)
  (s '%51 (@expm1-%51-val s50) (@expm1-%50-loc s50)))
(defund @expm1-%52-val (s50)
  (icmp-ne-i32 (g '%51 (@expm1-%51-loc s50)) 0))
(defund @expm1-%52-loc (s50)
  (s '%52 (@expm1-%52-val s50) (@expm1-%51-loc s50)))
(defund @expm1-succ50-lab (s50)
  (case (g '%52 (@expm1-%52-loc s50)) (-1 '%53) (0 '%59)))

(defund @expm1-%50-fwd (mem loc pred)
  (let ((s50 (list mem loc pred)))
    (mv (@expm1-succ50-lab s50) (@expm1-%50-mem s50) (@expm1-%52-loc s50))))

(defund @expm1-succ50-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%52 loc) (-1 '%53) (0 '%59)) mem loc))
(defund @expm1-%52-rev (mem loc pred)
  (@expm1-succ50-rev mem (s '%52 (icmp-ne-i32 (g '%51 loc) 0) loc) pred))
(defund @expm1-%51-rev (mem loc pred)
  (@expm1-%52-rev mem (s '%51 (load-i32 (g '%xsb loc) mem) loc) pred))

(defund @expm1-%50-rev (mem loc pred)
  (@expm1-%51-rev mem loc pred))

(defruled @expm1-%50-expand-rev-as-@expm1-%51-rev
  (equal (@expm1-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@expm1-%51-rev
            (@expm1-%50-mem s50)
            (@expm1-%50-loc s50)
            (@expm1-%50-pred s50))))
  :enable (@expm1-%50-rev @expm1-%50-mem @expm1-%50-loc @expm1-%50-pred))
(defruled @expm1-%50-expand-rev-as-@expm1-%52-rev
  (equal (@expm1-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@expm1-%52-rev
            (@expm1-%50-mem s50)
            (@expm1-%51-loc s50)
            (@expm1-%50-pred s50))))
  :enable (@expm1-%50-expand-rev-as-@expm1-%51-rev @expm1-%51-rev @expm1-%51-loc @expm1-%51-val))
(defruled @expm1-%50-expand-rev-as-@expm1-succ50-rev
  (equal (@expm1-%50-rev mem loc pred)
         (let ((s50 (list mem loc pred)))
           (@expm1-succ50-rev
            (@expm1-%50-mem s50)
            (@expm1-%52-loc s50)
            (@expm1-%50-pred s50))))
  :enable (@expm1-%50-expand-rev-as-@expm1-%52-rev @expm1-%52-rev @expm1-%52-loc @expm1-%52-val))
(defruled @expm1-%50-expand-rev-as-fwd
  (equal (@expm1-%50-rev mem loc pred)
         (@expm1-%50-fwd mem loc pred))
  :enable (@expm1-%50-expand-rev-as-@expm1-succ50-rev @expm1-succ50-rev @expm1-succ50-lab @expm1-%50-fwd))

(defund @expm1-%50-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%51 (load-i32 (g '%xsb loc) mem) loc))
    (loc (s '%52 (icmp-ne-i32 (g '%51 loc) 0) loc))
    (succ (case (g '%52 loc) (-1 '%53) (0 '%59))))
  (mv succ mem loc)))

(defund @expm1-%53-mem (s53)
  (car s53))
(defund @expm1-%53-loc (s53)
  (cadr s53))
(defund @expm1-%53-pred (s53)
  (caddr s53))
(defund @expm1-%54-val (s53)
  (load-double (g '%2 (@expm1-%53-loc s53)) (@expm1-%53-mem s53)))
(defund @expm1-%54-loc (s53)
  (s '%54 (@expm1-%54-val s53) (@expm1-%53-loc s53)))
(defund @expm1-%55-val (s53)
  (fadd-double (g '%54 (@expm1-%54-loc s53)) #x01a56e1fc2f8f359))
(defund @expm1-%55-loc (s53)
  (s '%55 (@expm1-%55-val s53) (@expm1-%54-loc s53)))
(defund @expm1-%56-val (s53)
  (fcmp-olt-double (g '%55 (@expm1-%55-loc s53)) #x0000000000000000))
(defund @expm1-%56-loc (s53)
  (s '%56 (@expm1-%56-val s53) (@expm1-%55-loc s53)))
(defund @expm1-succ53-lab (s53)
  (case (g '%56 (@expm1-%56-loc s53)) (-1 '%57) (0 '%58)))

(defund @expm1-%53-fwd (mem loc pred)
  (let ((s53 (list mem loc pred)))
    (mv (@expm1-succ53-lab s53) (@expm1-%53-mem s53) (@expm1-%56-loc s53))))

(defund @expm1-succ53-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%56 loc) (-1 '%57) (0 '%58)) mem loc))
(defund @expm1-%56-rev (mem loc pred)
  (@expm1-succ53-rev mem (s '%56 (fcmp-olt-double (g '%55 loc) #x0000000000000000) loc) pred))
(defund @expm1-%55-rev (mem loc pred)
  (@expm1-%56-rev mem (s '%55 (fadd-double (g '%54 loc) #x01a56e1fc2f8f359) loc) pred))
(defund @expm1-%54-rev (mem loc pred)
  (@expm1-%55-rev mem (s '%54 (load-double (g '%2 loc) mem) loc) pred))

(defund @expm1-%53-rev (mem loc pred)
  (@expm1-%54-rev mem loc pred))

(defruled @expm1-%53-expand-rev-as-@expm1-%54-rev
  (equal (@expm1-%53-rev mem loc pred)
         (let ((s53 (list mem loc pred)))
           (@expm1-%54-rev
            (@expm1-%53-mem s53)
            (@expm1-%53-loc s53)
            (@expm1-%53-pred s53))))
  :enable (@expm1-%53-rev @expm1-%53-mem @expm1-%53-loc @expm1-%53-pred))
(defruled @expm1-%53-expand-rev-as-@expm1-%55-rev
  (equal (@expm1-%53-rev mem loc pred)
         (let ((s53 (list mem loc pred)))
           (@expm1-%55-rev
            (@expm1-%53-mem s53)
            (@expm1-%54-loc s53)
            (@expm1-%53-pred s53))))
  :enable (@expm1-%53-expand-rev-as-@expm1-%54-rev @expm1-%54-rev @expm1-%54-loc @expm1-%54-val))
(defruled @expm1-%53-expand-rev-as-@expm1-%56-rev
  (equal (@expm1-%53-rev mem loc pred)
         (let ((s53 (list mem loc pred)))
           (@expm1-%56-rev
            (@expm1-%53-mem s53)
            (@expm1-%55-loc s53)
            (@expm1-%53-pred s53))))
  :enable (@expm1-%53-expand-rev-as-@expm1-%55-rev @expm1-%55-rev @expm1-%55-loc @expm1-%55-val))
(defruled @expm1-%53-expand-rev-as-@expm1-succ53-rev
  (equal (@expm1-%53-rev mem loc pred)
         (let ((s53 (list mem loc pred)))
           (@expm1-succ53-rev
            (@expm1-%53-mem s53)
            (@expm1-%56-loc s53)
            (@expm1-%53-pred s53))))
  :enable (@expm1-%53-expand-rev-as-@expm1-%56-rev @expm1-%56-rev @expm1-%56-loc @expm1-%56-val))
(defruled @expm1-%53-expand-rev-as-fwd
  (equal (@expm1-%53-rev mem loc pred)
         (@expm1-%53-fwd mem loc pred))
  :enable (@expm1-%53-expand-rev-as-@expm1-succ53-rev @expm1-succ53-rev @expm1-succ53-lab @expm1-%53-fwd))

(defund @expm1-%53-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%54 (load-double (g '%2 loc) mem) loc))
    (loc (s '%55 (fadd-double (g '%54 loc) #x01a56e1fc2f8f359) loc))
    (loc (s '%56 (fcmp-olt-double (g '%55 loc) #x0000000000000000) loc))
    (succ (case (g '%56 loc) (-1 '%57) (0 '%58))))
  (mv succ mem loc)))

(defund @expm1-%57-mem (s57)
  (car s57))
(defund @expm1-%57-loc (s57)
  (cadr s57))
(defund @expm1-%57-pred (s57)
  (caddr s57))
(defund @expm1-m57.1-mem (s57)
  (store-double #xbff0000000000000 (g '%1 (@expm1-%57-loc s57)) (@expm1-%57-mem s57)))
(defund @expm1-succ57-lab (s57)
  (declare (ignore s57))
  '%258)

(defund @expm1-%57-fwd (mem loc pred)
  (let ((s57 (list mem loc pred)))
    (mv (@expm1-succ57-lab s57) (@expm1-m57.1-mem s57) (@expm1-%57-loc s57))))

(defund @expm1-succ57-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%258 mem loc))
(defund @expm1-m57.1-rev (mem loc pred)
  (@expm1-succ57-rev (store-double #xbff0000000000000 (g '%1 loc) mem) loc pred))

(defund @expm1-%57-rev (mem loc pred)
  (@expm1-m57.1-rev mem loc pred))

(defruled @expm1-%57-expand-rev-as-@expm1-m57.1-rev
  (equal (@expm1-%57-rev mem loc pred)
         (let ((s57 (list mem loc pred)))
           (@expm1-m57.1-rev
            (@expm1-%57-mem s57)
            (@expm1-%57-loc s57)
            (@expm1-%57-pred s57))))
  :enable (@expm1-%57-rev @expm1-%57-mem @expm1-%57-loc @expm1-%57-pred))
(defruled @expm1-%57-expand-rev-as-@expm1-succ57-rev
  (equal (@expm1-%57-rev mem loc pred)
         (let ((s57 (list mem loc pred)))
           (@expm1-succ57-rev
            (@expm1-m57.1-mem s57)
            (@expm1-%57-loc s57)
            (@expm1-%57-pred s57))))
  :enable (@expm1-%57-expand-rev-as-@expm1-m57.1-rev @expm1-m57.1-rev @expm1-m57.1-mem))
(defruled @expm1-%57-expand-rev-as-fwd
  (equal (@expm1-%57-rev mem loc pred)
         (@expm1-%57-fwd mem loc pred))
  :enable (@expm1-%57-expand-rev-as-@expm1-succ57-rev @expm1-succ57-rev @expm1-succ57-lab @expm1-%57-fwd))

(defund @expm1-%57-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (mem (store-double #xbff0000000000000 (g '%1 loc) mem))
    (succ '%258))
  (mv succ mem loc)))

(defund @expm1-%58-mem (s58)
  (car s58))
(defund @expm1-%58-loc (s58)
  (cadr s58))
(defund @expm1-%58-pred (s58)
  (caddr s58))
(defund @expm1-succ58-lab (s58)
  (declare (ignore s58))
  '%59)

(defund @expm1-%58-fwd (mem loc pred)
  (let ((s58 (list mem loc pred)))
    (mv (@expm1-succ58-lab s58) (@expm1-%58-mem s58) (@expm1-%58-loc s58))))

(defund @expm1-succ58-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%59 mem loc))

(defund @expm1-%58-rev (mem loc pred)
  (@expm1-succ58-rev mem loc pred))

(defruled @expm1-%58-expand-rev-as-@expm1-succ58-rev
  (equal (@expm1-%58-rev mem loc pred)
         (let ((s58 (list mem loc pred)))
           (@expm1-succ58-rev
            (@expm1-%58-mem s58)
            (@expm1-%58-loc s58)
            (@expm1-%58-pred s58))))
  :enable (@expm1-%58-rev @expm1-%58-mem @expm1-%58-loc @expm1-%58-pred))
(defruled @expm1-%58-expand-rev-as-fwd
  (equal (@expm1-%58-rev mem loc pred)
         (@expm1-%58-fwd mem loc pred))
  :enable (@expm1-%58-expand-rev-as-@expm1-succ58-rev @expm1-succ58-rev @expm1-succ58-lab @expm1-%58-fwd))

(defund @expm1-%58-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (succ '%59))
  (mv succ mem loc)))

(defund @expm1-%59-mem (s59)
  (car s59))
(defund @expm1-%59-loc (s59)
  (cadr s59))
(defund @expm1-%59-pred (s59)
  (caddr s59))
(defund @expm1-succ59-lab (s59)
  (declare (ignore s59))
  '%60)

(defund @expm1-%59-fwd (mem loc pred)
  (let ((s59 (list mem loc pred)))
    (mv (@expm1-succ59-lab s59) (@expm1-%59-mem s59) (@expm1-%59-loc s59))))

(defund @expm1-succ59-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%60 mem loc))

(defund @expm1-%59-rev (mem loc pred)
  (@expm1-succ59-rev mem loc pred))

(defruled @expm1-%59-expand-rev-as-@expm1-succ59-rev
  (equal (@expm1-%59-rev mem loc pred)
         (let ((s59 (list mem loc pred)))
           (@expm1-succ59-rev
            (@expm1-%59-mem s59)
            (@expm1-%59-loc s59)
            (@expm1-%59-pred s59))))
  :enable (@expm1-%59-rev @expm1-%59-mem @expm1-%59-loc @expm1-%59-pred))
(defruled @expm1-%59-expand-rev-as-fwd
  (equal (@expm1-%59-rev mem loc pred)
         (@expm1-%59-fwd mem loc pred))
  :enable (@expm1-%59-expand-rev-as-@expm1-succ59-rev @expm1-succ59-rev @expm1-succ59-lab @expm1-%59-fwd))

(defund @expm1-%59-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (succ '%60))
  (mv succ mem loc)))

(defund @expm1-%60-mem (s60)
  (car s60))
(defund @expm1-%60-loc (s60)
  (cadr s60))
(defund @expm1-%60-pred (s60)
  (caddr s60))
(defund @expm1-%61-val (s60)
  (load-i32 (g '%hx (@expm1-%60-loc s60)) (@expm1-%60-mem s60)))
(defund @expm1-%61-loc (s60)
  (s '%61 (@expm1-%61-val s60) (@expm1-%60-loc s60)))
(defund @expm1-%62-val (s60)
  (icmp-ugt-i32 (g '%61 (@expm1-%61-loc s60)) 1071001154))
(defund @expm1-%62-loc (s60)
  (s '%62 (@expm1-%62-val s60) (@expm1-%61-loc s60)))
(defund @expm1-succ60-lab (s60)
  (case (g '%62 (@expm1-%62-loc s60)) (-1 '%63) (0 '%101)))

(defund @expm1-%60-fwd (mem loc pred)
  (let ((s60 (list mem loc pred)))
    (mv (@expm1-succ60-lab s60) (@expm1-%60-mem s60) (@expm1-%62-loc s60))))

(defund @expm1-succ60-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%62 loc) (-1 '%63) (0 '%101)) mem loc))
(defund @expm1-%62-rev (mem loc pred)
  (@expm1-succ60-rev mem (s '%62 (icmp-ugt-i32 (g '%61 loc) 1071001154) loc) pred))
(defund @expm1-%61-rev (mem loc pred)
  (@expm1-%62-rev mem (s '%61 (load-i32 (g '%hx loc) mem) loc) pred))

(defund @expm1-%60-rev (mem loc pred)
  (@expm1-%61-rev mem loc pred))

(defruled @expm1-%60-expand-rev-as-@expm1-%61-rev
  (equal (@expm1-%60-rev mem loc pred)
         (let ((s60 (list mem loc pred)))
           (@expm1-%61-rev
            (@expm1-%60-mem s60)
            (@expm1-%60-loc s60)
            (@expm1-%60-pred s60))))
  :enable (@expm1-%60-rev @expm1-%60-mem @expm1-%60-loc @expm1-%60-pred))
(defruled @expm1-%60-expand-rev-as-@expm1-%62-rev
  (equal (@expm1-%60-rev mem loc pred)
         (let ((s60 (list mem loc pred)))
           (@expm1-%62-rev
            (@expm1-%60-mem s60)
            (@expm1-%61-loc s60)
            (@expm1-%60-pred s60))))
  :enable (@expm1-%60-expand-rev-as-@expm1-%61-rev @expm1-%61-rev @expm1-%61-loc @expm1-%61-val))
(defruled @expm1-%60-expand-rev-as-@expm1-succ60-rev
  (equal (@expm1-%60-rev mem loc pred)
         (let ((s60 (list mem loc pred)))
           (@expm1-succ60-rev
            (@expm1-%60-mem s60)
            (@expm1-%62-loc s60)
            (@expm1-%60-pred s60))))
  :enable (@expm1-%60-expand-rev-as-@expm1-%62-rev @expm1-%62-rev @expm1-%62-loc @expm1-%62-val))
(defruled @expm1-%60-expand-rev-as-fwd
  (equal (@expm1-%60-rev mem loc pred)
         (@expm1-%60-fwd mem loc pred))
  :enable (@expm1-%60-expand-rev-as-@expm1-succ60-rev @expm1-succ60-rev @expm1-succ60-lab @expm1-%60-fwd))

(defund @expm1-%60-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%61 (load-i32 (g '%hx loc) mem) loc))
    (loc (s '%62 (icmp-ugt-i32 (g '%61 loc) 1071001154) loc))
    (succ (case (g '%62 loc) (-1 '%63) (0 '%101))))
  (mv succ mem loc)))

(defund @expm1-%63-mem (s63)
  (car s63))
(defund @expm1-%63-loc (s63)
  (cadr s63))
(defund @expm1-%63-pred (s63)
  (caddr s63))
(defund @expm1-%64-val (s63)
  (load-i32 (g '%hx (@expm1-%63-loc s63)) (@expm1-%63-mem s63)))
(defund @expm1-%64-loc (s63)
  (s '%64 (@expm1-%64-val s63) (@expm1-%63-loc s63)))
(defund @expm1-%65-val (s63)
  (icmp-ult-i32 (g '%64 (@expm1-%64-loc s63)) 1072734898))
(defund @expm1-%65-loc (s63)
  (s '%65 (@expm1-%65-val s63) (@expm1-%64-loc s63)))
(defund @expm1-succ63-lab (s63)
  (case (g '%65 (@expm1-%65-loc s63)) (-1 '%66) (0 '%76)))

(defund @expm1-%63-fwd (mem loc pred)
  (let ((s63 (list mem loc pred)))
    (mv (@expm1-succ63-lab s63) (@expm1-%63-mem s63) (@expm1-%65-loc s63))))

(defund @expm1-succ63-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%65 loc) (-1 '%66) (0 '%76)) mem loc))
(defund @expm1-%65-rev (mem loc pred)
  (@expm1-succ63-rev mem (s '%65 (icmp-ult-i32 (g '%64 loc) 1072734898) loc) pred))
(defund @expm1-%64-rev (mem loc pred)
  (@expm1-%65-rev mem (s '%64 (load-i32 (g '%hx loc) mem) loc) pred))

(defund @expm1-%63-rev (mem loc pred)
  (@expm1-%64-rev mem loc pred))

(defruled @expm1-%63-expand-rev-as-@expm1-%64-rev
  (equal (@expm1-%63-rev mem loc pred)
         (let ((s63 (list mem loc pred)))
           (@expm1-%64-rev
            (@expm1-%63-mem s63)
            (@expm1-%63-loc s63)
            (@expm1-%63-pred s63))))
  :enable (@expm1-%63-rev @expm1-%63-mem @expm1-%63-loc @expm1-%63-pred))
(defruled @expm1-%63-expand-rev-as-@expm1-%65-rev
  (equal (@expm1-%63-rev mem loc pred)
         (let ((s63 (list mem loc pred)))
           (@expm1-%65-rev
            (@expm1-%63-mem s63)
            (@expm1-%64-loc s63)
            (@expm1-%63-pred s63))))
  :enable (@expm1-%63-expand-rev-as-@expm1-%64-rev @expm1-%64-rev @expm1-%64-loc @expm1-%64-val))
(defruled @expm1-%63-expand-rev-as-@expm1-succ63-rev
  (equal (@expm1-%63-rev mem loc pred)
         (let ((s63 (list mem loc pred)))
           (@expm1-succ63-rev
            (@expm1-%63-mem s63)
            (@expm1-%65-loc s63)
            (@expm1-%63-pred s63))))
  :enable (@expm1-%63-expand-rev-as-@expm1-%65-rev @expm1-%65-rev @expm1-%65-loc @expm1-%65-val))
(defruled @expm1-%63-expand-rev-as-fwd
  (equal (@expm1-%63-rev mem loc pred)
         (@expm1-%63-fwd mem loc pred))
  :enable (@expm1-%63-expand-rev-as-@expm1-succ63-rev @expm1-succ63-rev @expm1-succ63-lab @expm1-%63-fwd))

(defund @expm1-%63-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%64 (load-i32 (g '%hx loc) mem) loc))
    (loc (s '%65 (icmp-ult-i32 (g '%64 loc) 1072734898) loc))
    (succ (case (g '%65 loc) (-1 '%66) (0 '%76))))
  (mv succ mem loc)))

(defund @expm1-%66-mem (s66)
  (car s66))
(defund @expm1-%66-loc (s66)
  (cadr s66))
(defund @expm1-%66-pred (s66)
  (caddr s66))
(defund @expm1-%67-val (s66)
  (load-i32 (g '%xsb (@expm1-%66-loc s66)) (@expm1-%66-mem s66)))
(defund @expm1-%67-loc (s66)
  (s '%67 (@expm1-%67-val s66) (@expm1-%66-loc s66)))
(defund @expm1-%68-val (s66)
  (icmp-eq-i32 (g '%67 (@expm1-%67-loc s66)) 0))
(defund @expm1-%68-loc (s66)
  (s '%68 (@expm1-%68-val s66) (@expm1-%67-loc s66)))
(defund @expm1-succ66-lab (s66)
  (case (g '%68 (@expm1-%68-loc s66)) (-1 '%69) (0 '%72)))

(defund @expm1-%66-fwd (mem loc pred)
  (let ((s66 (list mem loc pred)))
    (mv (@expm1-succ66-lab s66) (@expm1-%66-mem s66) (@expm1-%68-loc s66))))

(defund @expm1-succ66-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%68 loc) (-1 '%69) (0 '%72)) mem loc))
(defund @expm1-%68-rev (mem loc pred)
  (@expm1-succ66-rev mem (s '%68 (icmp-eq-i32 (g '%67 loc) 0) loc) pred))
(defund @expm1-%67-rev (mem loc pred)
  (@expm1-%68-rev mem (s '%67 (load-i32 (g '%xsb loc) mem) loc) pred))

(defund @expm1-%66-rev (mem loc pred)
  (@expm1-%67-rev mem loc pred))

(defruled @expm1-%66-expand-rev-as-@expm1-%67-rev
  (equal (@expm1-%66-rev mem loc pred)
         (let ((s66 (list mem loc pred)))
           (@expm1-%67-rev
            (@expm1-%66-mem s66)
            (@expm1-%66-loc s66)
            (@expm1-%66-pred s66))))
  :enable (@expm1-%66-rev @expm1-%66-mem @expm1-%66-loc @expm1-%66-pred))
(defruled @expm1-%66-expand-rev-as-@expm1-%68-rev
  (equal (@expm1-%66-rev mem loc pred)
         (let ((s66 (list mem loc pred)))
           (@expm1-%68-rev
            (@expm1-%66-mem s66)
            (@expm1-%67-loc s66)
            (@expm1-%66-pred s66))))
  :enable (@expm1-%66-expand-rev-as-@expm1-%67-rev @expm1-%67-rev @expm1-%67-loc @expm1-%67-val))
(defruled @expm1-%66-expand-rev-as-@expm1-succ66-rev
  (equal (@expm1-%66-rev mem loc pred)
         (let ((s66 (list mem loc pred)))
           (@expm1-succ66-rev
            (@expm1-%66-mem s66)
            (@expm1-%68-loc s66)
            (@expm1-%66-pred s66))))
  :enable (@expm1-%66-expand-rev-as-@expm1-%68-rev @expm1-%68-rev @expm1-%68-loc @expm1-%68-val))
(defruled @expm1-%66-expand-rev-as-fwd
  (equal (@expm1-%66-rev mem loc pred)
         (@expm1-%66-fwd mem loc pred))
  :enable (@expm1-%66-expand-rev-as-@expm1-succ66-rev @expm1-succ66-rev @expm1-succ66-lab @expm1-%66-fwd))

(defund @expm1-%66-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%67 (load-i32 (g '%xsb loc) mem) loc))
    (loc (s '%68 (icmp-eq-i32 (g '%67 loc) 0) loc))
    (succ (case (g '%68 loc) (-1 '%69) (0 '%72))))
  (mv succ mem loc)))

(defund @expm1-%69-mem (s69)
  (car s69))
(defund @expm1-%69-loc (s69)
  (cadr s69))
(defund @expm1-%69-pred (s69)
  (caddr s69))
(defund @expm1-%70-val (s69)
  (load-double (g '%2 (@expm1-%69-loc s69)) (@expm1-%69-mem s69)))
(defund @expm1-%70-loc (s69)
  (s '%70 (@expm1-%70-val s69) (@expm1-%69-loc s69)))
(defund @expm1-%71-val (s69)
  (fsub-double (g '%70 (@expm1-%70-loc s69)) #x3FE62E42FEE00000))
(defund @expm1-%71-loc (s69)
  (s '%71 (@expm1-%71-val s69) (@expm1-%70-loc s69)))
(defund @expm1-m69.1-mem (s69)
  (store-double (g '%71 (@expm1-%71-loc s69)) (g '%hi (@expm1-%71-loc s69)) (@expm1-%69-mem s69)))
(defund @expm1-m69.2-mem (s69)
  (store-double #x3DEA39EF35793C76 (g '%lo (@expm1-%71-loc s69)) (@expm1-m69.1-mem s69)))
(defund @expm1-m69.3-mem (s69)
  (store-i32 1 (g '%k (@expm1-%71-loc s69)) (@expm1-m69.2-mem s69)))
(defund @expm1-succ69-lab (s69)
  (declare (ignore s69))
  '%75)

(defund @expm1-%69-fwd (mem loc pred)
  (let ((s69 (list mem loc pred)))
    (mv (@expm1-succ69-lab s69) (@expm1-m69.3-mem s69) (@expm1-%71-loc s69))))

(defund @expm1-succ69-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%75 mem loc))
(defund @expm1-m69.3-rev (mem loc pred)
  (@expm1-succ69-rev (store-i32 1 (g '%k loc) mem) loc pred))
(defund @expm1-m69.2-rev (mem loc pred)
  (@expm1-m69.3-rev (store-double #x3DEA39EF35793C76 (g '%lo loc) mem) loc pred))
(defund @expm1-m69.1-rev (mem loc pred)
  (@expm1-m69.2-rev (store-double (g '%71 loc) (g '%hi loc) mem) loc pred))
(defund @expm1-%71-rev (mem loc pred)
  (@expm1-m69.1-rev mem (s '%71 (fsub-double (g '%70 loc) #x3FE62E42FEE00000) loc) pred))
(defund @expm1-%70-rev (mem loc pred)
  (@expm1-%71-rev mem (s '%70 (load-double (g '%2 loc) mem) loc) pred))

(defund @expm1-%69-rev (mem loc pred)
  (@expm1-%70-rev mem loc pred))

(defruled @expm1-%69-expand-rev-as-@expm1-%70-rev
  (equal (@expm1-%69-rev mem loc pred)
         (let ((s69 (list mem loc pred)))
           (@expm1-%70-rev
            (@expm1-%69-mem s69)
            (@expm1-%69-loc s69)
            (@expm1-%69-pred s69))))
  :enable (@expm1-%69-rev @expm1-%69-mem @expm1-%69-loc @expm1-%69-pred))
(defruled @expm1-%69-expand-rev-as-@expm1-%71-rev
  (equal (@expm1-%69-rev mem loc pred)
         (let ((s69 (list mem loc pred)))
           (@expm1-%71-rev
            (@expm1-%69-mem s69)
            (@expm1-%70-loc s69)
            (@expm1-%69-pred s69))))
  :enable (@expm1-%69-expand-rev-as-@expm1-%70-rev @expm1-%70-rev @expm1-%70-loc @expm1-%70-val))
(defruled @expm1-%69-expand-rev-as-@expm1-m69.1-rev
  (equal (@expm1-%69-rev mem loc pred)
         (let ((s69 (list mem loc pred)))
           (@expm1-m69.1-rev
            (@expm1-%69-mem s69)
            (@expm1-%71-loc s69)
            (@expm1-%69-pred s69))))
  :enable (@expm1-%69-expand-rev-as-@expm1-%71-rev @expm1-%71-rev @expm1-%71-loc @expm1-%71-val))
(defruled @expm1-%69-expand-rev-as-@expm1-m69.2-rev
  (equal (@expm1-%69-rev mem loc pred)
         (let ((s69 (list mem loc pred)))
           (@expm1-m69.2-rev
            (@expm1-m69.1-mem s69)
            (@expm1-%71-loc s69)
            (@expm1-%69-pred s69))))
  :enable (@expm1-%69-expand-rev-as-@expm1-m69.1-rev @expm1-m69.1-rev @expm1-m69.1-mem))
(defruled @expm1-%69-expand-rev-as-@expm1-m69.3-rev
  (equal (@expm1-%69-rev mem loc pred)
         (let ((s69 (list mem loc pred)))
           (@expm1-m69.3-rev
            (@expm1-m69.2-mem s69)
            (@expm1-%71-loc s69)
            (@expm1-%69-pred s69))))
  :enable (@expm1-%69-expand-rev-as-@expm1-m69.2-rev @expm1-m69.2-rev @expm1-m69.2-mem))
(defruled @expm1-%69-expand-rev-as-@expm1-succ69-rev
  (equal (@expm1-%69-rev mem loc pred)
         (let ((s69 (list mem loc pred)))
           (@expm1-succ69-rev
            (@expm1-m69.3-mem s69)
            (@expm1-%71-loc s69)
            (@expm1-%69-pred s69))))
  :enable (@expm1-%69-expand-rev-as-@expm1-m69.3-rev @expm1-m69.3-rev @expm1-m69.3-mem))
(defruled @expm1-%69-expand-rev-as-fwd
  (equal (@expm1-%69-rev mem loc pred)
         (@expm1-%69-fwd mem loc pred))
  :enable (@expm1-%69-expand-rev-as-@expm1-succ69-rev @expm1-succ69-rev @expm1-succ69-lab @expm1-%69-fwd))

(defund @expm1-%69-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%70 (load-double (g '%2 loc) mem) loc))
    (loc (s '%71 (fsub-double (g '%70 loc) #x3FE62E42FEE00000) loc))
    (mem (store-double (g '%71 loc) (g '%hi loc) mem))
    (mem (store-double #x3DEA39EF35793C76 (g '%lo loc) mem))
    (mem (store-i32 1 (g '%k loc) mem))
    (succ '%75))
  (mv succ mem loc)))

(defund @expm1-%72-mem (s72)
  (car s72))
(defund @expm1-%72-loc (s72)
  (cadr s72))
(defund @expm1-%72-pred (s72)
  (caddr s72))
(defund @expm1-%73-val (s72)
  (load-double (g '%2 (@expm1-%72-loc s72)) (@expm1-%72-mem s72)))
(defund @expm1-%73-loc (s72)
  (s '%73 (@expm1-%73-val s72) (@expm1-%72-loc s72)))
(defund @expm1-%74-val (s72)
  (fadd-double (g '%73 (@expm1-%73-loc s72)) #x3FE62E42FEE00000))
(defund @expm1-%74-loc (s72)
  (s '%74 (@expm1-%74-val s72) (@expm1-%73-loc s72)))
(defund @expm1-m72.1-mem (s72)
  (store-double (g '%74 (@expm1-%74-loc s72)) (g '%hi (@expm1-%74-loc s72)) (@expm1-%72-mem s72)))
(defund @expm1-m72.2-mem (s72)
  (store-double #xBDEA39EF35793C76 (g '%lo (@expm1-%74-loc s72)) (@expm1-m72.1-mem s72)))
(defund @expm1-m72.3-mem (s72)
  (store-i32 -1 (g '%k (@expm1-%74-loc s72)) (@expm1-m72.2-mem s72)))
(defund @expm1-succ72-lab (s72)
  (declare (ignore s72))
  '%75)

(defund @expm1-%72-fwd (mem loc pred)
  (let ((s72 (list mem loc pred)))
    (mv (@expm1-succ72-lab s72) (@expm1-m72.3-mem s72) (@expm1-%74-loc s72))))

(defund @expm1-succ72-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%75 mem loc))
(defund @expm1-m72.3-rev (mem loc pred)
  (@expm1-succ72-rev (store-i32 -1 (g '%k loc) mem) loc pred))
(defund @expm1-m72.2-rev (mem loc pred)
  (@expm1-m72.3-rev (store-double #xBDEA39EF35793C76 (g '%lo loc) mem) loc pred))
(defund @expm1-m72.1-rev (mem loc pred)
  (@expm1-m72.2-rev (store-double (g '%74 loc) (g '%hi loc) mem) loc pred))
(defund @expm1-%74-rev (mem loc pred)
  (@expm1-m72.1-rev mem (s '%74 (fadd-double (g '%73 loc) #x3FE62E42FEE00000) loc) pred))
(defund @expm1-%73-rev (mem loc pred)
  (@expm1-%74-rev mem (s '%73 (load-double (g '%2 loc) mem) loc) pred))

(defund @expm1-%72-rev (mem loc pred)
  (@expm1-%73-rev mem loc pred))

(defruled @expm1-%72-expand-rev-as-@expm1-%73-rev
  (equal (@expm1-%72-rev mem loc pred)
         (let ((s72 (list mem loc pred)))
           (@expm1-%73-rev
            (@expm1-%72-mem s72)
            (@expm1-%72-loc s72)
            (@expm1-%72-pred s72))))
  :enable (@expm1-%72-rev @expm1-%72-mem @expm1-%72-loc @expm1-%72-pred))
(defruled @expm1-%72-expand-rev-as-@expm1-%74-rev
  (equal (@expm1-%72-rev mem loc pred)
         (let ((s72 (list mem loc pred)))
           (@expm1-%74-rev
            (@expm1-%72-mem s72)
            (@expm1-%73-loc s72)
            (@expm1-%72-pred s72))))
  :enable (@expm1-%72-expand-rev-as-@expm1-%73-rev @expm1-%73-rev @expm1-%73-loc @expm1-%73-val))
(defruled @expm1-%72-expand-rev-as-@expm1-m72.1-rev
  (equal (@expm1-%72-rev mem loc pred)
         (let ((s72 (list mem loc pred)))
           (@expm1-m72.1-rev
            (@expm1-%72-mem s72)
            (@expm1-%74-loc s72)
            (@expm1-%72-pred s72))))
  :enable (@expm1-%72-expand-rev-as-@expm1-%74-rev @expm1-%74-rev @expm1-%74-loc @expm1-%74-val))
(defruled @expm1-%72-expand-rev-as-@expm1-m72.2-rev
  (equal (@expm1-%72-rev mem loc pred)
         (let ((s72 (list mem loc pred)))
           (@expm1-m72.2-rev
            (@expm1-m72.1-mem s72)
            (@expm1-%74-loc s72)
            (@expm1-%72-pred s72))))
  :enable (@expm1-%72-expand-rev-as-@expm1-m72.1-rev @expm1-m72.1-rev @expm1-m72.1-mem))
(defruled @expm1-%72-expand-rev-as-@expm1-m72.3-rev
  (equal (@expm1-%72-rev mem loc pred)
         (let ((s72 (list mem loc pred)))
           (@expm1-m72.3-rev
            (@expm1-m72.2-mem s72)
            (@expm1-%74-loc s72)
            (@expm1-%72-pred s72))))
  :enable (@expm1-%72-expand-rev-as-@expm1-m72.2-rev @expm1-m72.2-rev @expm1-m72.2-mem))
(defruled @expm1-%72-expand-rev-as-@expm1-succ72-rev
  (equal (@expm1-%72-rev mem loc pred)
         (let ((s72 (list mem loc pred)))
           (@expm1-succ72-rev
            (@expm1-m72.3-mem s72)
            (@expm1-%74-loc s72)
            (@expm1-%72-pred s72))))
  :enable (@expm1-%72-expand-rev-as-@expm1-m72.3-rev @expm1-m72.3-rev @expm1-m72.3-mem))
(defruled @expm1-%72-expand-rev-as-fwd
  (equal (@expm1-%72-rev mem loc pred)
         (@expm1-%72-fwd mem loc pred))
  :enable (@expm1-%72-expand-rev-as-@expm1-succ72-rev @expm1-succ72-rev @expm1-succ72-lab @expm1-%72-fwd))

(defund @expm1-%72-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%73 (load-double (g '%2 loc) mem) loc))
    (loc (s '%74 (fadd-double (g '%73 loc) #x3FE62E42FEE00000) loc))
    (mem (store-double (g '%74 loc) (g '%hi loc) mem))
    (mem (store-double #xBDEA39EF35793C76 (g '%lo loc) mem))
    (mem (store-i32 -1 (g '%k loc) mem))
    (succ '%75))
  (mv succ mem loc)))

(defund @expm1-%75-mem (s75)
  (car s75))
(defund @expm1-%75-loc (s75)
  (cadr s75))
(defund @expm1-%75-pred (s75)
  (caddr s75))
(defund @expm1-succ75-lab (s75)
  (declare (ignore s75))
  '%92)

(defund @expm1-%75-fwd (mem loc pred)
  (let ((s75 (list mem loc pred)))
    (mv (@expm1-succ75-lab s75) (@expm1-%75-mem s75) (@expm1-%75-loc s75))))

(defund @expm1-succ75-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%92 mem loc))

(defund @expm1-%75-rev (mem loc pred)
  (@expm1-succ75-rev mem loc pred))

(defruled @expm1-%75-expand-rev-as-@expm1-succ75-rev
  (equal (@expm1-%75-rev mem loc pred)
         (let ((s75 (list mem loc pred)))
           (@expm1-succ75-rev
            (@expm1-%75-mem s75)
            (@expm1-%75-loc s75)
            (@expm1-%75-pred s75))))
  :enable (@expm1-%75-rev @expm1-%75-mem @expm1-%75-loc @expm1-%75-pred))
(defruled @expm1-%75-expand-rev-as-fwd
  (equal (@expm1-%75-rev mem loc pred)
         (@expm1-%75-fwd mem loc pred))
  :enable (@expm1-%75-expand-rev-as-@expm1-succ75-rev @expm1-succ75-rev @expm1-succ75-lab @expm1-%75-fwd))

(defund @expm1-%75-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (succ '%92))
  (mv succ mem loc)))

(defund @expm1-%76-mem (s76)
  (car s76))
(defund @expm1-%76-loc (s76)
  (cadr s76))
(defund @expm1-%76-pred (s76)
  (caddr s76))
(defund @expm1-%77-val (s76)
  (load-double (g '%2 (@expm1-%76-loc s76)) (@expm1-%76-mem s76)))
(defund @expm1-%77-loc (s76)
  (s '%77 (@expm1-%77-val s76) (@expm1-%76-loc s76)))
(defund @expm1-%78-val (s76)
  (fmul-double #x3FF71547652B82FE (g '%77 (@expm1-%77-loc s76))))
(defund @expm1-%78-loc (s76)
  (s '%78 (@expm1-%78-val s76) (@expm1-%77-loc s76)))
(defund @expm1-%79-val (s76)
  (load-i32 (g '%xsb (@expm1-%78-loc s76)) (@expm1-%76-mem s76)))
(defund @expm1-%79-loc (s76)
  (s '%79 (@expm1-%79-val s76) (@expm1-%78-loc s76)))
(defund @expm1-%80-val (s76)
  (icmp-eq-i32 (g '%79 (@expm1-%79-loc s76)) 0))
(defund @expm1-%80-loc (s76)
  (s '%80 (@expm1-%80-val s76) (@expm1-%79-loc s76)))
(defund @expm1-%81-val (s76)
  (select-double (g '%80 (@expm1-%80-loc s76)) #x3fe0000000000000 #xbfe0000000000000))
(defund @expm1-%81-loc (s76)
  (s '%81 (@expm1-%81-val s76) (@expm1-%80-loc s76)))
(defund @expm1-%82-val (s76)
  (fadd-double (g '%78 (@expm1-%81-loc s76)) (g '%81 (@expm1-%81-loc s76))))
(defund @expm1-%82-loc (s76)
  (s '%82 (@expm1-%82-val s76) (@expm1-%81-loc s76)))
(defund @expm1-%83-val (s76)
  (fptosi-double-to-i32 (g '%82 (@expm1-%82-loc s76))))
(defund @expm1-%83-loc (s76)
  (s '%83 (@expm1-%83-val s76) (@expm1-%82-loc s76)))
(defund @expm1-m76.1-mem (s76)
  (store-i32 (g '%83 (@expm1-%83-loc s76)) (g '%k (@expm1-%83-loc s76)) (@expm1-%76-mem s76)))
(defund @expm1-%84-val (s76)
  (load-i32 (g '%k (@expm1-%83-loc s76)) (@expm1-m76.1-mem s76)))
(defund @expm1-%84-loc (s76)
  (s '%84 (@expm1-%84-val s76) (@expm1-%83-loc s76)))
(defund @expm1-%85-val (s76)
  (sitofp-i32-to-double (g '%84 (@expm1-%84-loc s76))))
(defund @expm1-%85-loc (s76)
  (s '%85 (@expm1-%85-val s76) (@expm1-%84-loc s76)))
(defund @expm1-m76.2-mem (s76)
  (store-double (g '%85 (@expm1-%85-loc s76)) (g '%t (@expm1-%85-loc s76)) (@expm1-m76.1-mem s76)))
(defund @expm1-%86-val (s76)
  (load-double (g '%2 (@expm1-%85-loc s76)) (@expm1-m76.2-mem s76)))
(defund @expm1-%86-loc (s76)
  (s '%86 (@expm1-%86-val s76) (@expm1-%85-loc s76)))
(defund @expm1-%87-val (s76)
  (load-double (g '%t (@expm1-%86-loc s76)) (@expm1-m76.2-mem s76)))
(defund @expm1-%87-loc (s76)
  (s '%87 (@expm1-%87-val s76) (@expm1-%86-loc s76)))
(defund @expm1-%88-val (s76)
  (fmul-double (g '%87 (@expm1-%87-loc s76)) #x3FE62E42FEE00000))
(defund @expm1-%88-loc (s76)
  (s '%88 (@expm1-%88-val s76) (@expm1-%87-loc s76)))
(defund @expm1-%89-val (s76)
  (fsub-double (g '%86 (@expm1-%88-loc s76)) (g '%88 (@expm1-%88-loc s76))))
(defund @expm1-%89-loc (s76)
  (s '%89 (@expm1-%89-val s76) (@expm1-%88-loc s76)))
(defund @expm1-m76.3-mem (s76)
  (store-double (g '%89 (@expm1-%89-loc s76)) (g '%hi (@expm1-%89-loc s76)) (@expm1-m76.2-mem s76)))
(defund @expm1-%90-val (s76)
  (load-double (g '%t (@expm1-%89-loc s76)) (@expm1-m76.3-mem s76)))
(defund @expm1-%90-loc (s76)
  (s '%90 (@expm1-%90-val s76) (@expm1-%89-loc s76)))
(defund @expm1-%91-val (s76)
  (fmul-double (g '%90 (@expm1-%90-loc s76)) #x3DEA39EF35793C76))
(defund @expm1-%91-loc (s76)
  (s '%91 (@expm1-%91-val s76) (@expm1-%90-loc s76)))
(defund @expm1-m76.4-mem (s76)
  (store-double (g '%91 (@expm1-%91-loc s76)) (g '%lo (@expm1-%91-loc s76)) (@expm1-m76.3-mem s76)))
(defund @expm1-succ76-lab (s76)
  (declare (ignore s76))
  '%92)

(defund @expm1-%76-fwd (mem loc pred)
  (let ((s76 (list mem loc pred)))
    (mv (@expm1-succ76-lab s76) (@expm1-m76.4-mem s76) (@expm1-%91-loc s76))))

(defund @expm1-succ76-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%92 mem loc))
(defund @expm1-m76.4-rev (mem loc pred)
  (@expm1-succ76-rev (store-double (g '%91 loc) (g '%lo loc) mem) loc pred))
(defund @expm1-%91-rev (mem loc pred)
  (@expm1-m76.4-rev mem (s '%91 (fmul-double (g '%90 loc) #x3DEA39EF35793C76) loc) pred))
(defund @expm1-%90-rev (mem loc pred)
  (@expm1-%91-rev mem (s '%90 (load-double (g '%t loc) mem) loc) pred))
(defund @expm1-m76.3-rev (mem loc pred)
  (@expm1-%90-rev (store-double (g '%89 loc) (g '%hi loc) mem) loc pred))
(defund @expm1-%89-rev (mem loc pred)
  (@expm1-m76.3-rev mem (s '%89 (fsub-double (g '%86 loc) (g '%88 loc)) loc) pred))
(defund @expm1-%88-rev (mem loc pred)
  (@expm1-%89-rev mem (s '%88 (fmul-double (g '%87 loc) #x3FE62E42FEE00000) loc) pred))
(defund @expm1-%87-rev (mem loc pred)
  (@expm1-%88-rev mem (s '%87 (load-double (g '%t loc) mem) loc) pred))
(defund @expm1-%86-rev (mem loc pred)
  (@expm1-%87-rev mem (s '%86 (load-double (g '%2 loc) mem) loc) pred))
(defund @expm1-m76.2-rev (mem loc pred)
  (@expm1-%86-rev (store-double (g '%85 loc) (g '%t loc) mem) loc pred))
(defund @expm1-%85-rev (mem loc pred)
  (@expm1-m76.2-rev mem (s '%85 (sitofp-i32-to-double (g '%84 loc)) loc) pred))
(defund @expm1-%84-rev (mem loc pred)
  (@expm1-%85-rev mem (s '%84 (load-i32 (g '%k loc) mem) loc) pred))
(defund @expm1-m76.1-rev (mem loc pred)
  (@expm1-%84-rev (store-i32 (g '%83 loc) (g '%k loc) mem) loc pred))
(defund @expm1-%83-rev (mem loc pred)
  (@expm1-m76.1-rev mem (s '%83 (fptosi-double-to-i32 (g '%82 loc)) loc) pred))
(defund @expm1-%82-rev (mem loc pred)
  (@expm1-%83-rev mem (s '%82 (fadd-double (g '%78 loc) (g '%81 loc)) loc) pred))
(defund @expm1-%81-rev (mem loc pred)
  (@expm1-%82-rev mem (s '%81 (select-double (g '%80 loc) #x3fe0000000000000 #xbfe0000000000000) loc) pred))
(defund @expm1-%80-rev (mem loc pred)
  (@expm1-%81-rev mem (s '%80 (icmp-eq-i32 (g '%79 loc) 0) loc) pred))
(defund @expm1-%79-rev (mem loc pred)
  (@expm1-%80-rev mem (s '%79 (load-i32 (g '%xsb loc) mem) loc) pred))
(defund @expm1-%78-rev (mem loc pred)
  (@expm1-%79-rev mem (s '%78 (fmul-double #x3FF71547652B82FE (g '%77 loc)) loc) pred))
(defund @expm1-%77-rev (mem loc pred)
  (@expm1-%78-rev mem (s '%77 (load-double (g '%2 loc) mem) loc) pred))

(defund @expm1-%76-rev (mem loc pred)
  (@expm1-%77-rev mem loc pred))

(defruled @expm1-%76-expand-rev-as-@expm1-%77-rev
  (equal (@expm1-%76-rev mem loc pred)
         (let ((s76 (list mem loc pred)))
           (@expm1-%77-rev
            (@expm1-%76-mem s76)
            (@expm1-%76-loc s76)
            (@expm1-%76-pred s76))))
  :enable (@expm1-%76-rev @expm1-%76-mem @expm1-%76-loc @expm1-%76-pred))
(defruled @expm1-%76-expand-rev-as-@expm1-%78-rev
  (equal (@expm1-%76-rev mem loc pred)
         (let ((s76 (list mem loc pred)))
           (@expm1-%78-rev
            (@expm1-%76-mem s76)
            (@expm1-%77-loc s76)
            (@expm1-%76-pred s76))))
  :enable (@expm1-%76-expand-rev-as-@expm1-%77-rev @expm1-%77-rev @expm1-%77-loc @expm1-%77-val))
(defruled @expm1-%76-expand-rev-as-@expm1-%79-rev
  (equal (@expm1-%76-rev mem loc pred)
         (let ((s76 (list mem loc pred)))
           (@expm1-%79-rev
            (@expm1-%76-mem s76)
            (@expm1-%78-loc s76)
            (@expm1-%76-pred s76))))
  :enable (@expm1-%76-expand-rev-as-@expm1-%78-rev @expm1-%78-rev @expm1-%78-loc @expm1-%78-val))
(defruled @expm1-%76-expand-rev-as-@expm1-%80-rev
  (equal (@expm1-%76-rev mem loc pred)
         (let ((s76 (list mem loc pred)))
           (@expm1-%80-rev
            (@expm1-%76-mem s76)
            (@expm1-%79-loc s76)
            (@expm1-%76-pred s76))))
  :enable (@expm1-%76-expand-rev-as-@expm1-%79-rev @expm1-%79-rev @expm1-%79-loc @expm1-%79-val))
(defruled @expm1-%76-expand-rev-as-@expm1-%81-rev
  (equal (@expm1-%76-rev mem loc pred)
         (let ((s76 (list mem loc pred)))
           (@expm1-%81-rev
            (@expm1-%76-mem s76)
            (@expm1-%80-loc s76)
            (@expm1-%76-pred s76))))
  :enable (@expm1-%76-expand-rev-as-@expm1-%80-rev @expm1-%80-rev @expm1-%80-loc @expm1-%80-val))
(defruled @expm1-%76-expand-rev-as-@expm1-%82-rev
  (equal (@expm1-%76-rev mem loc pred)
         (let ((s76 (list mem loc pred)))
           (@expm1-%82-rev
            (@expm1-%76-mem s76)
            (@expm1-%81-loc s76)
            (@expm1-%76-pred s76))))
  :enable (@expm1-%76-expand-rev-as-@expm1-%81-rev @expm1-%81-rev @expm1-%81-loc @expm1-%81-val))
(defruled @expm1-%76-expand-rev-as-@expm1-%83-rev
  (equal (@expm1-%76-rev mem loc pred)
         (let ((s76 (list mem loc pred)))
           (@expm1-%83-rev
            (@expm1-%76-mem s76)
            (@expm1-%82-loc s76)
            (@expm1-%76-pred s76))))
  :enable (@expm1-%76-expand-rev-as-@expm1-%82-rev @expm1-%82-rev @expm1-%82-loc @expm1-%82-val))
(defruled @expm1-%76-expand-rev-as-@expm1-m76.1-rev
  (equal (@expm1-%76-rev mem loc pred)
         (let ((s76 (list mem loc pred)))
           (@expm1-m76.1-rev
            (@expm1-%76-mem s76)
            (@expm1-%83-loc s76)
            (@expm1-%76-pred s76))))
  :enable (@expm1-%76-expand-rev-as-@expm1-%83-rev @expm1-%83-rev @expm1-%83-loc @expm1-%83-val))
(defruled @expm1-%76-expand-rev-as-@expm1-%84-rev
  (equal (@expm1-%76-rev mem loc pred)
         (let ((s76 (list mem loc pred)))
           (@expm1-%84-rev
            (@expm1-m76.1-mem s76)
            (@expm1-%83-loc s76)
            (@expm1-%76-pred s76))))
  :enable (@expm1-%76-expand-rev-as-@expm1-m76.1-rev @expm1-m76.1-rev @expm1-m76.1-mem))
(defruled @expm1-%76-expand-rev-as-@expm1-%85-rev
  (equal (@expm1-%76-rev mem loc pred)
         (let ((s76 (list mem loc pred)))
           (@expm1-%85-rev
            (@expm1-m76.1-mem s76)
            (@expm1-%84-loc s76)
            (@expm1-%76-pred s76))))
  :enable (@expm1-%76-expand-rev-as-@expm1-%84-rev @expm1-%84-rev @expm1-%84-loc @expm1-%84-val))
(defruled @expm1-%76-expand-rev-as-@expm1-m76.2-rev
  (equal (@expm1-%76-rev mem loc pred)
         (let ((s76 (list mem loc pred)))
           (@expm1-m76.2-rev
            (@expm1-m76.1-mem s76)
            (@expm1-%85-loc s76)
            (@expm1-%76-pred s76))))
  :enable (@expm1-%76-expand-rev-as-@expm1-%85-rev @expm1-%85-rev @expm1-%85-loc @expm1-%85-val))
(defruled @expm1-%76-expand-rev-as-@expm1-%86-rev
  (equal (@expm1-%76-rev mem loc pred)
         (let ((s76 (list mem loc pred)))
           (@expm1-%86-rev
            (@expm1-m76.2-mem s76)
            (@expm1-%85-loc s76)
            (@expm1-%76-pred s76))))
  :enable (@expm1-%76-expand-rev-as-@expm1-m76.2-rev @expm1-m76.2-rev @expm1-m76.2-mem))
(defruled @expm1-%76-expand-rev-as-@expm1-%87-rev
  (equal (@expm1-%76-rev mem loc pred)
         (let ((s76 (list mem loc pred)))
           (@expm1-%87-rev
            (@expm1-m76.2-mem s76)
            (@expm1-%86-loc s76)
            (@expm1-%76-pred s76))))
  :enable (@expm1-%76-expand-rev-as-@expm1-%86-rev @expm1-%86-rev @expm1-%86-loc @expm1-%86-val))
(defruled @expm1-%76-expand-rev-as-@expm1-%88-rev
  (equal (@expm1-%76-rev mem loc pred)
         (let ((s76 (list mem loc pred)))
           (@expm1-%88-rev
            (@expm1-m76.2-mem s76)
            (@expm1-%87-loc s76)
            (@expm1-%76-pred s76))))
  :enable (@expm1-%76-expand-rev-as-@expm1-%87-rev @expm1-%87-rev @expm1-%87-loc @expm1-%87-val))
(defruled @expm1-%76-expand-rev-as-@expm1-%89-rev
  (equal (@expm1-%76-rev mem loc pred)
         (let ((s76 (list mem loc pred)))
           (@expm1-%89-rev
            (@expm1-m76.2-mem s76)
            (@expm1-%88-loc s76)
            (@expm1-%76-pred s76))))
  :enable (@expm1-%76-expand-rev-as-@expm1-%88-rev @expm1-%88-rev @expm1-%88-loc @expm1-%88-val))
(defruled @expm1-%76-expand-rev-as-@expm1-m76.3-rev
  (equal (@expm1-%76-rev mem loc pred)
         (let ((s76 (list mem loc pred)))
           (@expm1-m76.3-rev
            (@expm1-m76.2-mem s76)
            (@expm1-%89-loc s76)
            (@expm1-%76-pred s76))))
  :enable (@expm1-%76-expand-rev-as-@expm1-%89-rev @expm1-%89-rev @expm1-%89-loc @expm1-%89-val))
(defruled @expm1-%76-expand-rev-as-@expm1-%90-rev
  (equal (@expm1-%76-rev mem loc pred)
         (let ((s76 (list mem loc pred)))
           (@expm1-%90-rev
            (@expm1-m76.3-mem s76)
            (@expm1-%89-loc s76)
            (@expm1-%76-pred s76))))
  :enable (@expm1-%76-expand-rev-as-@expm1-m76.3-rev @expm1-m76.3-rev @expm1-m76.3-mem))
(defruled @expm1-%76-expand-rev-as-@expm1-%91-rev
  (equal (@expm1-%76-rev mem loc pred)
         (let ((s76 (list mem loc pred)))
           (@expm1-%91-rev
            (@expm1-m76.3-mem s76)
            (@expm1-%90-loc s76)
            (@expm1-%76-pred s76))))
  :enable (@expm1-%76-expand-rev-as-@expm1-%90-rev @expm1-%90-rev @expm1-%90-loc @expm1-%90-val))
(defruled @expm1-%76-expand-rev-as-@expm1-m76.4-rev
  (equal (@expm1-%76-rev mem loc pred)
         (let ((s76 (list mem loc pred)))
           (@expm1-m76.4-rev
            (@expm1-m76.3-mem s76)
            (@expm1-%91-loc s76)
            (@expm1-%76-pred s76))))
  :enable (@expm1-%76-expand-rev-as-@expm1-%91-rev @expm1-%91-rev @expm1-%91-loc @expm1-%91-val))
(defruled @expm1-%76-expand-rev-as-@expm1-succ76-rev
  (equal (@expm1-%76-rev mem loc pred)
         (let ((s76 (list mem loc pred)))
           (@expm1-succ76-rev
            (@expm1-m76.4-mem s76)
            (@expm1-%91-loc s76)
            (@expm1-%76-pred s76))))
  :enable (@expm1-%76-expand-rev-as-@expm1-m76.4-rev @expm1-m76.4-rev @expm1-m76.4-mem))
(defruled @expm1-%76-expand-rev-as-fwd
  (equal (@expm1-%76-rev mem loc pred)
         (@expm1-%76-fwd mem loc pred))
  :enable (@expm1-%76-expand-rev-as-@expm1-succ76-rev @expm1-succ76-rev @expm1-succ76-lab @expm1-%76-fwd))

(defund @expm1-%76-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%77 (load-double (g '%2 loc) mem) loc))
    (loc (s '%78 (fmul-double #x3FF71547652B82FE (g '%77 loc)) loc))
    (loc (s '%79 (load-i32 (g '%xsb loc) mem) loc))
    (loc (s '%80 (icmp-eq-i32 (g '%79 loc) 0) loc))
    (loc (s '%81 (select-double (g '%80 loc) #x3fe0000000000000 #xbfe0000000000000) loc))
    (loc (s '%82 (fadd-double (g '%78 loc) (g '%81 loc)) loc))
    (loc (s '%83 (fptosi-double-to-i32 (g '%82 loc)) loc))
    (mem (store-i32 (g '%83 loc) (g '%k loc) mem))
    (loc (s '%84 (load-i32 (g '%k loc) mem) loc))
    (loc (s '%85 (sitofp-i32-to-double (g '%84 loc)) loc))
    (mem (store-double (g '%85 loc) (g '%t loc) mem))
    (loc (s '%86 (load-double (g '%2 loc) mem) loc))
    (loc (s '%87 (load-double (g '%t loc) mem) loc))
    (loc (s '%88 (fmul-double (g '%87 loc) #x3FE62E42FEE00000) loc))
    (loc (s '%89 (fsub-double (g '%86 loc) (g '%88 loc)) loc))
    (mem (store-double (g '%89 loc) (g '%hi loc) mem))
    (loc (s '%90 (load-double (g '%t loc) mem) loc))
    (loc (s '%91 (fmul-double (g '%90 loc) #x3DEA39EF35793C76) loc))
    (mem (store-double (g '%91 loc) (g '%lo loc) mem))
    (succ '%92))
  (mv succ mem loc)))

(defund @expm1-%92-mem (s92)
  (car s92))
(defund @expm1-%92-loc (s92)
  (cadr s92))
(defund @expm1-%92-pred (s92)
  (caddr s92))
(defund @expm1-%93-val (s92)
  (load-double (g '%hi (@expm1-%92-loc s92)) (@expm1-%92-mem s92)))
(defund @expm1-%93-loc (s92)
  (s '%93 (@expm1-%93-val s92) (@expm1-%92-loc s92)))
(defund @expm1-%94-val (s92)
  (load-double (g '%lo (@expm1-%93-loc s92)) (@expm1-%92-mem s92)))
(defund @expm1-%94-loc (s92)
  (s '%94 (@expm1-%94-val s92) (@expm1-%93-loc s92)))
(defund @expm1-%95-val (s92)
  (fsub-double (g '%93 (@expm1-%94-loc s92)) (g '%94 (@expm1-%94-loc s92))))
(defund @expm1-%95-loc (s92)
  (s '%95 (@expm1-%95-val s92) (@expm1-%94-loc s92)))
(defund @expm1-m92.1-mem (s92)
  (store-double (g '%95 (@expm1-%95-loc s92)) (g '%2 (@expm1-%95-loc s92)) (@expm1-%92-mem s92)))
(defund @expm1-%96-val (s92)
  (load-double (g '%hi (@expm1-%95-loc s92)) (@expm1-m92.1-mem s92)))
(defund @expm1-%96-loc (s92)
  (s '%96 (@expm1-%96-val s92) (@expm1-%95-loc s92)))
(defund @expm1-%97-val (s92)
  (load-double (g '%2 (@expm1-%96-loc s92)) (@expm1-m92.1-mem s92)))
(defund @expm1-%97-loc (s92)
  (s '%97 (@expm1-%97-val s92) (@expm1-%96-loc s92)))
(defund @expm1-%98-val (s92)
  (fsub-double (g '%96 (@expm1-%97-loc s92)) (g '%97 (@expm1-%97-loc s92))))
(defund @expm1-%98-loc (s92)
  (s '%98 (@expm1-%98-val s92) (@expm1-%97-loc s92)))
(defund @expm1-%99-val (s92)
  (load-double (g '%lo (@expm1-%98-loc s92)) (@expm1-m92.1-mem s92)))
(defund @expm1-%99-loc (s92)
  (s '%99 (@expm1-%99-val s92) (@expm1-%98-loc s92)))
(defund @expm1-%100-val (s92)
  (fsub-double (g '%98 (@expm1-%99-loc s92)) (g '%99 (@expm1-%99-loc s92))))
(defund @expm1-%100-loc (s92)
  (s '%100 (@expm1-%100-val s92) (@expm1-%99-loc s92)))
(defund @expm1-m92.2-mem (s92)
  (store-double (g '%100 (@expm1-%100-loc s92)) (g '%c (@expm1-%100-loc s92)) (@expm1-m92.1-mem s92)))
(defund @expm1-succ92-lab (s92)
  (declare (ignore s92))
  '%115)

(defund @expm1-%92-fwd (mem loc pred)
  (let ((s92 (list mem loc pred)))
    (mv (@expm1-succ92-lab s92) (@expm1-m92.2-mem s92) (@expm1-%100-loc s92))))

(defund @expm1-succ92-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%115 mem loc))
(defund @expm1-m92.2-rev (mem loc pred)
  (@expm1-succ92-rev (store-double (g '%100 loc) (g '%c loc) mem) loc pred))
(defund @expm1-%100-rev (mem loc pred)
  (@expm1-m92.2-rev mem (s '%100 (fsub-double (g '%98 loc) (g '%99 loc)) loc) pred))
(defund @expm1-%99-rev (mem loc pred)
  (@expm1-%100-rev mem (s '%99 (load-double (g '%lo loc) mem) loc) pred))
(defund @expm1-%98-rev (mem loc pred)
  (@expm1-%99-rev mem (s '%98 (fsub-double (g '%96 loc) (g '%97 loc)) loc) pred))
(defund @expm1-%97-rev (mem loc pred)
  (@expm1-%98-rev mem (s '%97 (load-double (g '%2 loc) mem) loc) pred))
(defund @expm1-%96-rev (mem loc pred)
  (@expm1-%97-rev mem (s '%96 (load-double (g '%hi loc) mem) loc) pred))
(defund @expm1-m92.1-rev (mem loc pred)
  (@expm1-%96-rev (store-double (g '%95 loc) (g '%2 loc) mem) loc pred))
(defund @expm1-%95-rev (mem loc pred)
  (@expm1-m92.1-rev mem (s '%95 (fsub-double (g '%93 loc) (g '%94 loc)) loc) pred))
(defund @expm1-%94-rev (mem loc pred)
  (@expm1-%95-rev mem (s '%94 (load-double (g '%lo loc) mem) loc) pred))
(defund @expm1-%93-rev (mem loc pred)
  (@expm1-%94-rev mem (s '%93 (load-double (g '%hi loc) mem) loc) pred))

(defund @expm1-%92-rev (mem loc pred)
  (@expm1-%93-rev mem loc pred))

(defruled @expm1-%92-expand-rev-as-@expm1-%93-rev
  (equal (@expm1-%92-rev mem loc pred)
         (let ((s92 (list mem loc pred)))
           (@expm1-%93-rev
            (@expm1-%92-mem s92)
            (@expm1-%92-loc s92)
            (@expm1-%92-pred s92))))
  :enable (@expm1-%92-rev @expm1-%92-mem @expm1-%92-loc @expm1-%92-pred))
(defruled @expm1-%92-expand-rev-as-@expm1-%94-rev
  (equal (@expm1-%92-rev mem loc pred)
         (let ((s92 (list mem loc pred)))
           (@expm1-%94-rev
            (@expm1-%92-mem s92)
            (@expm1-%93-loc s92)
            (@expm1-%92-pred s92))))
  :enable (@expm1-%92-expand-rev-as-@expm1-%93-rev @expm1-%93-rev @expm1-%93-loc @expm1-%93-val))
(defruled @expm1-%92-expand-rev-as-@expm1-%95-rev
  (equal (@expm1-%92-rev mem loc pred)
         (let ((s92 (list mem loc pred)))
           (@expm1-%95-rev
            (@expm1-%92-mem s92)
            (@expm1-%94-loc s92)
            (@expm1-%92-pred s92))))
  :enable (@expm1-%92-expand-rev-as-@expm1-%94-rev @expm1-%94-rev @expm1-%94-loc @expm1-%94-val))
(defruled @expm1-%92-expand-rev-as-@expm1-m92.1-rev
  (equal (@expm1-%92-rev mem loc pred)
         (let ((s92 (list mem loc pred)))
           (@expm1-m92.1-rev
            (@expm1-%92-mem s92)
            (@expm1-%95-loc s92)
            (@expm1-%92-pred s92))))
  :enable (@expm1-%92-expand-rev-as-@expm1-%95-rev @expm1-%95-rev @expm1-%95-loc @expm1-%95-val))
(defruled @expm1-%92-expand-rev-as-@expm1-%96-rev
  (equal (@expm1-%92-rev mem loc pred)
         (let ((s92 (list mem loc pred)))
           (@expm1-%96-rev
            (@expm1-m92.1-mem s92)
            (@expm1-%95-loc s92)
            (@expm1-%92-pred s92))))
  :enable (@expm1-%92-expand-rev-as-@expm1-m92.1-rev @expm1-m92.1-rev @expm1-m92.1-mem))
(defruled @expm1-%92-expand-rev-as-@expm1-%97-rev
  (equal (@expm1-%92-rev mem loc pred)
         (let ((s92 (list mem loc pred)))
           (@expm1-%97-rev
            (@expm1-m92.1-mem s92)
            (@expm1-%96-loc s92)
            (@expm1-%92-pred s92))))
  :enable (@expm1-%92-expand-rev-as-@expm1-%96-rev @expm1-%96-rev @expm1-%96-loc @expm1-%96-val))
(defruled @expm1-%92-expand-rev-as-@expm1-%98-rev
  (equal (@expm1-%92-rev mem loc pred)
         (let ((s92 (list mem loc pred)))
           (@expm1-%98-rev
            (@expm1-m92.1-mem s92)
            (@expm1-%97-loc s92)
            (@expm1-%92-pred s92))))
  :enable (@expm1-%92-expand-rev-as-@expm1-%97-rev @expm1-%97-rev @expm1-%97-loc @expm1-%97-val))
(defruled @expm1-%92-expand-rev-as-@expm1-%99-rev
  (equal (@expm1-%92-rev mem loc pred)
         (let ((s92 (list mem loc pred)))
           (@expm1-%99-rev
            (@expm1-m92.1-mem s92)
            (@expm1-%98-loc s92)
            (@expm1-%92-pred s92))))
  :enable (@expm1-%92-expand-rev-as-@expm1-%98-rev @expm1-%98-rev @expm1-%98-loc @expm1-%98-val))
(defruled @expm1-%92-expand-rev-as-@expm1-%100-rev
  (equal (@expm1-%92-rev mem loc pred)
         (let ((s92 (list mem loc pred)))
           (@expm1-%100-rev
            (@expm1-m92.1-mem s92)
            (@expm1-%99-loc s92)
            (@expm1-%92-pred s92))))
  :enable (@expm1-%92-expand-rev-as-@expm1-%99-rev @expm1-%99-rev @expm1-%99-loc @expm1-%99-val))
(defruled @expm1-%92-expand-rev-as-@expm1-m92.2-rev
  (equal (@expm1-%92-rev mem loc pred)
         (let ((s92 (list mem loc pred)))
           (@expm1-m92.2-rev
            (@expm1-m92.1-mem s92)
            (@expm1-%100-loc s92)
            (@expm1-%92-pred s92))))
  :enable (@expm1-%92-expand-rev-as-@expm1-%100-rev @expm1-%100-rev @expm1-%100-loc @expm1-%100-val))
(defruled @expm1-%92-expand-rev-as-@expm1-succ92-rev
  (equal (@expm1-%92-rev mem loc pred)
         (let ((s92 (list mem loc pred)))
           (@expm1-succ92-rev
            (@expm1-m92.2-mem s92)
            (@expm1-%100-loc s92)
            (@expm1-%92-pred s92))))
  :enable (@expm1-%92-expand-rev-as-@expm1-m92.2-rev @expm1-m92.2-rev @expm1-m92.2-mem))
(defruled @expm1-%92-expand-rev-as-fwd
  (equal (@expm1-%92-rev mem loc pred)
         (@expm1-%92-fwd mem loc pred))
  :enable (@expm1-%92-expand-rev-as-@expm1-succ92-rev @expm1-succ92-rev @expm1-succ92-lab @expm1-%92-fwd))

(defund @expm1-%92-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%93 (load-double (g '%hi loc) mem) loc))
    (loc (s '%94 (load-double (g '%lo loc) mem) loc))
    (loc (s '%95 (fsub-double (g '%93 loc) (g '%94 loc)) loc))
    (mem (store-double (g '%95 loc) (g '%2 loc) mem))
    (loc (s '%96 (load-double (g '%hi loc) mem) loc))
    (loc (s '%97 (load-double (g '%2 loc) mem) loc))
    (loc (s '%98 (fsub-double (g '%96 loc) (g '%97 loc)) loc))
    (loc (s '%99 (load-double (g '%lo loc) mem) loc))
    (loc (s '%100 (fsub-double (g '%98 loc) (g '%99 loc)) loc))
    (mem (store-double (g '%100 loc) (g '%c loc) mem))
    (succ '%115))
  (mv succ mem loc)))

(defund @expm1-%101-mem (s101)
  (car s101))
(defund @expm1-%101-loc (s101)
  (cadr s101))
(defund @expm1-%101-pred (s101)
  (caddr s101))
(defund @expm1-%102-val (s101)
  (load-i32 (g '%hx (@expm1-%101-loc s101)) (@expm1-%101-mem s101)))
(defund @expm1-%102-loc (s101)
  (s '%102 (@expm1-%102-val s101) (@expm1-%101-loc s101)))
(defund @expm1-%103-val (s101)
  (icmp-ult-i32 (g '%102 (@expm1-%102-loc s101)) 1016070144))
(defund @expm1-%103-loc (s101)
  (s '%103 (@expm1-%103-val s101) (@expm1-%102-loc s101)))
(defund @expm1-succ101-lab (s101)
  (case (g '%103 (@expm1-%103-loc s101)) (-1 '%104) (0 '%113)))

(defund @expm1-%101-fwd (mem loc pred)
  (let ((s101 (list mem loc pred)))
    (mv (@expm1-succ101-lab s101) (@expm1-%101-mem s101) (@expm1-%103-loc s101))))

(defund @expm1-succ101-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%103 loc) (-1 '%104) (0 '%113)) mem loc))
(defund @expm1-%103-rev (mem loc pred)
  (@expm1-succ101-rev mem (s '%103 (icmp-ult-i32 (g '%102 loc) 1016070144) loc) pred))
(defund @expm1-%102-rev (mem loc pred)
  (@expm1-%103-rev mem (s '%102 (load-i32 (g '%hx loc) mem) loc) pred))

(defund @expm1-%101-rev (mem loc pred)
  (@expm1-%102-rev mem loc pred))

(defruled @expm1-%101-expand-rev-as-@expm1-%102-rev
  (equal (@expm1-%101-rev mem loc pred)
         (let ((s101 (list mem loc pred)))
           (@expm1-%102-rev
            (@expm1-%101-mem s101)
            (@expm1-%101-loc s101)
            (@expm1-%101-pred s101))))
  :enable (@expm1-%101-rev @expm1-%101-mem @expm1-%101-loc @expm1-%101-pred))
(defruled @expm1-%101-expand-rev-as-@expm1-%103-rev
  (equal (@expm1-%101-rev mem loc pred)
         (let ((s101 (list mem loc pred)))
           (@expm1-%103-rev
            (@expm1-%101-mem s101)
            (@expm1-%102-loc s101)
            (@expm1-%101-pred s101))))
  :enable (@expm1-%101-expand-rev-as-@expm1-%102-rev @expm1-%102-rev @expm1-%102-loc @expm1-%102-val))
(defruled @expm1-%101-expand-rev-as-@expm1-succ101-rev
  (equal (@expm1-%101-rev mem loc pred)
         (let ((s101 (list mem loc pred)))
           (@expm1-succ101-rev
            (@expm1-%101-mem s101)
            (@expm1-%103-loc s101)
            (@expm1-%101-pred s101))))
  :enable (@expm1-%101-expand-rev-as-@expm1-%103-rev @expm1-%103-rev @expm1-%103-loc @expm1-%103-val))
(defruled @expm1-%101-expand-rev-as-fwd
  (equal (@expm1-%101-rev mem loc pred)
         (@expm1-%101-fwd mem loc pred))
  :enable (@expm1-%101-expand-rev-as-@expm1-succ101-rev @expm1-succ101-rev @expm1-succ101-lab @expm1-%101-fwd))

(defund @expm1-%101-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%102 (load-i32 (g '%hx loc) mem) loc))
    (loc (s '%103 (icmp-ult-i32 (g '%102 loc) 1016070144) loc))
    (succ (case (g '%103 loc) (-1 '%104) (0 '%113))))
  (mv succ mem loc)))

(defund @expm1-%104-mem (s104)
  (car s104))
(defund @expm1-%104-loc (s104)
  (cadr s104))
(defund @expm1-%104-pred (s104)
  (caddr s104))
(defund @expm1-%105-val (s104)
  (load-double (g '%2 (@expm1-%104-loc s104)) (@expm1-%104-mem s104)))
(defund @expm1-%105-loc (s104)
  (s '%105 (@expm1-%105-val s104) (@expm1-%104-loc s104)))
(defund @expm1-%106-val (s104)
  (fadd-double #x7e37e43c8800759c (g '%105 (@expm1-%105-loc s104))))
(defund @expm1-%106-loc (s104)
  (s '%106 (@expm1-%106-val s104) (@expm1-%105-loc s104)))
(defund @expm1-m104.1-mem (s104)
  (store-double (g '%106 (@expm1-%106-loc s104)) (g '%t (@expm1-%106-loc s104)) (@expm1-%104-mem s104)))
(defund @expm1-%107-val (s104)
  (load-double (g '%2 (@expm1-%106-loc s104)) (@expm1-m104.1-mem s104)))
(defund @expm1-%107-loc (s104)
  (s '%107 (@expm1-%107-val s104) (@expm1-%106-loc s104)))
(defund @expm1-%108-val (s104)
  (load-double (g '%t (@expm1-%107-loc s104)) (@expm1-m104.1-mem s104)))
(defund @expm1-%108-loc (s104)
  (s '%108 (@expm1-%108-val s104) (@expm1-%107-loc s104)))
(defund @expm1-%109-val (s104)
  (load-double (g '%2 (@expm1-%108-loc s104)) (@expm1-m104.1-mem s104)))
(defund @expm1-%109-loc (s104)
  (s '%109 (@expm1-%109-val s104) (@expm1-%108-loc s104)))
(defund @expm1-%110-val (s104)
  (fadd-double #x7e37e43c8800759c (g '%109 (@expm1-%109-loc s104))))
(defund @expm1-%110-loc (s104)
  (s '%110 (@expm1-%110-val s104) (@expm1-%109-loc s104)))
(defund @expm1-%111-val (s104)
  (fsub-double (g '%108 (@expm1-%110-loc s104)) (g '%110 (@expm1-%110-loc s104))))
(defund @expm1-%111-loc (s104)
  (s '%111 (@expm1-%111-val s104) (@expm1-%110-loc s104)))
(defund @expm1-%112-val (s104)
  (fsub-double (g '%107 (@expm1-%111-loc s104)) (g '%111 (@expm1-%111-loc s104))))
(defund @expm1-%112-loc (s104)
  (s '%112 (@expm1-%112-val s104) (@expm1-%111-loc s104)))
(defund @expm1-m104.2-mem (s104)
  (store-double (g '%112 (@expm1-%112-loc s104)) (g '%1 (@expm1-%112-loc s104)) (@expm1-m104.1-mem s104)))
(defund @expm1-succ104-lab (s104)
  (declare (ignore s104))
  '%258)

(defund @expm1-%104-fwd (mem loc pred)
  (let ((s104 (list mem loc pred)))
    (mv (@expm1-succ104-lab s104) (@expm1-m104.2-mem s104) (@expm1-%112-loc s104))))

(defund @expm1-succ104-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%258 mem loc))
(defund @expm1-m104.2-rev (mem loc pred)
  (@expm1-succ104-rev (store-double (g '%112 loc) (g '%1 loc) mem) loc pred))
(defund @expm1-%112-rev (mem loc pred)
  (@expm1-m104.2-rev mem (s '%112 (fsub-double (g '%107 loc) (g '%111 loc)) loc) pred))
(defund @expm1-%111-rev (mem loc pred)
  (@expm1-%112-rev mem (s '%111 (fsub-double (g '%108 loc) (g '%110 loc)) loc) pred))
(defund @expm1-%110-rev (mem loc pred)
  (@expm1-%111-rev mem (s '%110 (fadd-double #x7e37e43c8800759c (g '%109 loc)) loc) pred))
(defund @expm1-%109-rev (mem loc pred)
  (@expm1-%110-rev mem (s '%109 (load-double (g '%2 loc) mem) loc) pred))
(defund @expm1-%108-rev (mem loc pred)
  (@expm1-%109-rev mem (s '%108 (load-double (g '%t loc) mem) loc) pred))
(defund @expm1-%107-rev (mem loc pred)
  (@expm1-%108-rev mem (s '%107 (load-double (g '%2 loc) mem) loc) pred))
(defund @expm1-m104.1-rev (mem loc pred)
  (@expm1-%107-rev (store-double (g '%106 loc) (g '%t loc) mem) loc pred))
(defund @expm1-%106-rev (mem loc pred)
  (@expm1-m104.1-rev mem (s '%106 (fadd-double #x7e37e43c8800759c (g '%105 loc)) loc) pred))
(defund @expm1-%105-rev (mem loc pred)
  (@expm1-%106-rev mem (s '%105 (load-double (g '%2 loc) mem) loc) pred))

(defund @expm1-%104-rev (mem loc pred)
  (@expm1-%105-rev mem loc pred))

(defruled @expm1-%104-expand-rev-as-@expm1-%105-rev
  (equal (@expm1-%104-rev mem loc pred)
         (let ((s104 (list mem loc pred)))
           (@expm1-%105-rev
            (@expm1-%104-mem s104)
            (@expm1-%104-loc s104)
            (@expm1-%104-pred s104))))
  :enable (@expm1-%104-rev @expm1-%104-mem @expm1-%104-loc @expm1-%104-pred))
(defruled @expm1-%104-expand-rev-as-@expm1-%106-rev
  (equal (@expm1-%104-rev mem loc pred)
         (let ((s104 (list mem loc pred)))
           (@expm1-%106-rev
            (@expm1-%104-mem s104)
            (@expm1-%105-loc s104)
            (@expm1-%104-pred s104))))
  :enable (@expm1-%104-expand-rev-as-@expm1-%105-rev @expm1-%105-rev @expm1-%105-loc @expm1-%105-val))
(defruled @expm1-%104-expand-rev-as-@expm1-m104.1-rev
  (equal (@expm1-%104-rev mem loc pred)
         (let ((s104 (list mem loc pred)))
           (@expm1-m104.1-rev
            (@expm1-%104-mem s104)
            (@expm1-%106-loc s104)
            (@expm1-%104-pred s104))))
  :enable (@expm1-%104-expand-rev-as-@expm1-%106-rev @expm1-%106-rev @expm1-%106-loc @expm1-%106-val))
(defruled @expm1-%104-expand-rev-as-@expm1-%107-rev
  (equal (@expm1-%104-rev mem loc pred)
         (let ((s104 (list mem loc pred)))
           (@expm1-%107-rev
            (@expm1-m104.1-mem s104)
            (@expm1-%106-loc s104)
            (@expm1-%104-pred s104))))
  :enable (@expm1-%104-expand-rev-as-@expm1-m104.1-rev @expm1-m104.1-rev @expm1-m104.1-mem))
(defruled @expm1-%104-expand-rev-as-@expm1-%108-rev
  (equal (@expm1-%104-rev mem loc pred)
         (let ((s104 (list mem loc pred)))
           (@expm1-%108-rev
            (@expm1-m104.1-mem s104)
            (@expm1-%107-loc s104)
            (@expm1-%104-pred s104))))
  :enable (@expm1-%104-expand-rev-as-@expm1-%107-rev @expm1-%107-rev @expm1-%107-loc @expm1-%107-val))
(defruled @expm1-%104-expand-rev-as-@expm1-%109-rev
  (equal (@expm1-%104-rev mem loc pred)
         (let ((s104 (list mem loc pred)))
           (@expm1-%109-rev
            (@expm1-m104.1-mem s104)
            (@expm1-%108-loc s104)
            (@expm1-%104-pred s104))))
  :enable (@expm1-%104-expand-rev-as-@expm1-%108-rev @expm1-%108-rev @expm1-%108-loc @expm1-%108-val))
(defruled @expm1-%104-expand-rev-as-@expm1-%110-rev
  (equal (@expm1-%104-rev mem loc pred)
         (let ((s104 (list mem loc pred)))
           (@expm1-%110-rev
            (@expm1-m104.1-mem s104)
            (@expm1-%109-loc s104)
            (@expm1-%104-pred s104))))
  :enable (@expm1-%104-expand-rev-as-@expm1-%109-rev @expm1-%109-rev @expm1-%109-loc @expm1-%109-val))
(defruled @expm1-%104-expand-rev-as-@expm1-%111-rev
  (equal (@expm1-%104-rev mem loc pred)
         (let ((s104 (list mem loc pred)))
           (@expm1-%111-rev
            (@expm1-m104.1-mem s104)
            (@expm1-%110-loc s104)
            (@expm1-%104-pred s104))))
  :enable (@expm1-%104-expand-rev-as-@expm1-%110-rev @expm1-%110-rev @expm1-%110-loc @expm1-%110-val))
(defruled @expm1-%104-expand-rev-as-@expm1-%112-rev
  (equal (@expm1-%104-rev mem loc pred)
         (let ((s104 (list mem loc pred)))
           (@expm1-%112-rev
            (@expm1-m104.1-mem s104)
            (@expm1-%111-loc s104)
            (@expm1-%104-pred s104))))
  :enable (@expm1-%104-expand-rev-as-@expm1-%111-rev @expm1-%111-rev @expm1-%111-loc @expm1-%111-val))
(defruled @expm1-%104-expand-rev-as-@expm1-m104.2-rev
  (equal (@expm1-%104-rev mem loc pred)
         (let ((s104 (list mem loc pred)))
           (@expm1-m104.2-rev
            (@expm1-m104.1-mem s104)
            (@expm1-%112-loc s104)
            (@expm1-%104-pred s104))))
  :enable (@expm1-%104-expand-rev-as-@expm1-%112-rev @expm1-%112-rev @expm1-%112-loc @expm1-%112-val))
(defruled @expm1-%104-expand-rev-as-@expm1-succ104-rev
  (equal (@expm1-%104-rev mem loc pred)
         (let ((s104 (list mem loc pred)))
           (@expm1-succ104-rev
            (@expm1-m104.2-mem s104)
            (@expm1-%112-loc s104)
            (@expm1-%104-pred s104))))
  :enable (@expm1-%104-expand-rev-as-@expm1-m104.2-rev @expm1-m104.2-rev @expm1-m104.2-mem))
(defruled @expm1-%104-expand-rev-as-fwd
  (equal (@expm1-%104-rev mem loc pred)
         (@expm1-%104-fwd mem loc pred))
  :enable (@expm1-%104-expand-rev-as-@expm1-succ104-rev @expm1-succ104-rev @expm1-succ104-lab @expm1-%104-fwd))

(defund @expm1-%104-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%105 (load-double (g '%2 loc) mem) loc))
    (loc (s '%106 (fadd-double #x7e37e43c8800759c (g '%105 loc)) loc))
    (mem (store-double (g '%106 loc) (g '%t loc) mem))
    (loc (s '%107 (load-double (g '%2 loc) mem) loc))
    (loc (s '%108 (load-double (g '%t loc) mem) loc))
    (loc (s '%109 (load-double (g '%2 loc) mem) loc))
    (loc (s '%110 (fadd-double #x7e37e43c8800759c (g '%109 loc)) loc))
    (loc (s '%111 (fsub-double (g '%108 loc) (g '%110 loc)) loc))
    (loc (s '%112 (fsub-double (g '%107 loc) (g '%111 loc)) loc))
    (mem (store-double (g '%112 loc) (g '%1 loc) mem))
    (succ '%258))
  (mv succ mem loc)))

(defund @expm1-%113-mem (s113)
  (car s113))
(defund @expm1-%113-loc (s113)
  (cadr s113))
(defund @expm1-%113-pred (s113)
  (caddr s113))
(defund @expm1-m113.1-mem (s113)
  (store-i32 0 (g '%k (@expm1-%113-loc s113)) (@expm1-%113-mem s113)))
(defund @expm1-succ113-lab (s113)
  (declare (ignore s113))
  '%114)

(defund @expm1-%113-fwd (mem loc pred)
  (let ((s113 (list mem loc pred)))
    (mv (@expm1-succ113-lab s113) (@expm1-m113.1-mem s113) (@expm1-%113-loc s113))))

(defund @expm1-succ113-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%114 mem loc))
(defund @expm1-m113.1-rev (mem loc pred)
  (@expm1-succ113-rev (store-i32 0 (g '%k loc) mem) loc pred))

(defund @expm1-%113-rev (mem loc pred)
  (@expm1-m113.1-rev mem loc pred))

(defruled @expm1-%113-expand-rev-as-@expm1-m113.1-rev
  (equal (@expm1-%113-rev mem loc pred)
         (let ((s113 (list mem loc pred)))
           (@expm1-m113.1-rev
            (@expm1-%113-mem s113)
            (@expm1-%113-loc s113)
            (@expm1-%113-pred s113))))
  :enable (@expm1-%113-rev @expm1-%113-mem @expm1-%113-loc @expm1-%113-pred))
(defruled @expm1-%113-expand-rev-as-@expm1-succ113-rev
  (equal (@expm1-%113-rev mem loc pred)
         (let ((s113 (list mem loc pred)))
           (@expm1-succ113-rev
            (@expm1-m113.1-mem s113)
            (@expm1-%113-loc s113)
            (@expm1-%113-pred s113))))
  :enable (@expm1-%113-expand-rev-as-@expm1-m113.1-rev @expm1-m113.1-rev @expm1-m113.1-mem))
(defruled @expm1-%113-expand-rev-as-fwd
  (equal (@expm1-%113-rev mem loc pred)
         (@expm1-%113-fwd mem loc pred))
  :enable (@expm1-%113-expand-rev-as-@expm1-succ113-rev @expm1-succ113-rev @expm1-succ113-lab @expm1-%113-fwd))

(defund @expm1-%113-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (mem (store-i32 0 (g '%k loc) mem))
    (succ '%114))
  (mv succ mem loc)))

(defund @expm1-%114-mem (s114)
  (car s114))
(defund @expm1-%114-loc (s114)
  (cadr s114))
(defund @expm1-%114-pred (s114)
  (caddr s114))
(defund @expm1-succ114-lab (s114)
  (declare (ignore s114))
  '%115)

(defund @expm1-%114-fwd (mem loc pred)
  (let ((s114 (list mem loc pred)))
    (mv (@expm1-succ114-lab s114) (@expm1-%114-mem s114) (@expm1-%114-loc s114))))

(defund @expm1-succ114-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%115 mem loc))

(defund @expm1-%114-rev (mem loc pred)
  (@expm1-succ114-rev mem loc pred))

(defruled @expm1-%114-expand-rev-as-@expm1-succ114-rev
  (equal (@expm1-%114-rev mem loc pred)
         (let ((s114 (list mem loc pred)))
           (@expm1-succ114-rev
            (@expm1-%114-mem s114)
            (@expm1-%114-loc s114)
            (@expm1-%114-pred s114))))
  :enable (@expm1-%114-rev @expm1-%114-mem @expm1-%114-loc @expm1-%114-pred))
(defruled @expm1-%114-expand-rev-as-fwd
  (equal (@expm1-%114-rev mem loc pred)
         (@expm1-%114-fwd mem loc pred))
  :enable (@expm1-%114-expand-rev-as-@expm1-succ114-rev @expm1-succ114-rev @expm1-succ114-lab @expm1-%114-fwd))

(defund @expm1-%114-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (succ '%115))
  (mv succ mem loc)))

(defund @expm1-%115-mem (s115)
  (car s115))
(defund @expm1-%115-loc (s115)
  (cadr s115))
(defund @expm1-%115-pred (s115)
  (caddr s115))
(defund @expm1-%116-val (s115)
  (load-double (g '%2 (@expm1-%115-loc s115)) (@expm1-%115-mem s115)))
(defund @expm1-%116-loc (s115)
  (s '%116 (@expm1-%116-val s115) (@expm1-%115-loc s115)))
(defund @expm1-%117-val (s115)
  (fmul-double #x3fe0000000000000 (g '%116 (@expm1-%116-loc s115))))
(defund @expm1-%117-loc (s115)
  (s '%117 (@expm1-%117-val s115) (@expm1-%116-loc s115)))
(defund @expm1-m115.1-mem (s115)
  (store-double (g '%117 (@expm1-%117-loc s115)) (g '%hfx (@expm1-%117-loc s115)) (@expm1-%115-mem s115)))
(defund @expm1-%118-val (s115)
  (load-double (g '%2 (@expm1-%117-loc s115)) (@expm1-m115.1-mem s115)))
(defund @expm1-%118-loc (s115)
  (s '%118 (@expm1-%118-val s115) (@expm1-%117-loc s115)))
(defund @expm1-%119-val (s115)
  (load-double (g '%hfx (@expm1-%118-loc s115)) (@expm1-m115.1-mem s115)))
(defund @expm1-%119-loc (s115)
  (s '%119 (@expm1-%119-val s115) (@expm1-%118-loc s115)))
(defund @expm1-%120-val (s115)
  (fmul-double (g '%118 (@expm1-%119-loc s115)) (g '%119 (@expm1-%119-loc s115))))
(defund @expm1-%120-loc (s115)
  (s '%120 (@expm1-%120-val s115) (@expm1-%119-loc s115)))
(defund @expm1-m115.2-mem (s115)
  (store-double (g '%120 (@expm1-%120-loc s115)) (g '%hxs (@expm1-%120-loc s115)) (@expm1-m115.1-mem s115)))
(defund @expm1-%121-val (s115)
  (load-double (g '%hxs (@expm1-%120-loc s115)) (@expm1-m115.2-mem s115)))
(defund @expm1-%121-loc (s115)
  (s '%121 (@expm1-%121-val s115) (@expm1-%120-loc s115)))
(defund @expm1-%122-val (s115)
  (load-double (g '%hxs (@expm1-%121-loc s115)) (@expm1-m115.2-mem s115)))
(defund @expm1-%122-loc (s115)
  (s '%122 (@expm1-%122-val s115) (@expm1-%121-loc s115)))
(defund @expm1-%123-val (s115)
  (load-double (g '%hxs (@expm1-%122-loc s115)) (@expm1-m115.2-mem s115)))
(defund @expm1-%123-loc (s115)
  (s '%123 (@expm1-%123-val s115) (@expm1-%122-loc s115)))
(defund @expm1-%124-val (s115)
  (load-double (g '%hxs (@expm1-%123-loc s115)) (@expm1-m115.2-mem s115)))
(defund @expm1-%124-loc (s115)
  (s '%124 (@expm1-%124-val s115) (@expm1-%123-loc s115)))
(defund @expm1-%125-val (s115)
  (load-double (g '%hxs (@expm1-%124-loc s115)) (@expm1-m115.2-mem s115)))
(defund @expm1-%125-loc (s115)
  (s '%125 (@expm1-%125-val s115) (@expm1-%124-loc s115)))
(defund @expm1-%126-val (s115)
  (fmul-double (g '%125 (@expm1-%125-loc s115)) #xBE8AFDB76E09C32D))
(defund @expm1-%126-loc (s115)
  (s '%126 (@expm1-%126-val s115) (@expm1-%125-loc s115)))
(defund @expm1-%127-val (s115)
  (fadd-double #x3ED0CFCA86E65239 (g '%126 (@expm1-%126-loc s115))))
(defund @expm1-%127-loc (s115)
  (s '%127 (@expm1-%127-val s115) (@expm1-%126-loc s115)))
(defund @expm1-%128-val (s115)
  (fmul-double (g '%124 (@expm1-%127-loc s115)) (g '%127 (@expm1-%127-loc s115))))
(defund @expm1-%128-loc (s115)
  (s '%128 (@expm1-%128-val s115) (@expm1-%127-loc s115)))
(defund @expm1-%129-val (s115)
  (fadd-double #xBF14CE199EAADBB7 (g '%128 (@expm1-%128-loc s115))))
(defund @expm1-%129-loc (s115)
  (s '%129 (@expm1-%129-val s115) (@expm1-%128-loc s115)))
(defund @expm1-%130-val (s115)
  (fmul-double (g '%123 (@expm1-%129-loc s115)) (g '%129 (@expm1-%129-loc s115))))
(defund @expm1-%130-loc (s115)
  (s '%130 (@expm1-%130-val s115) (@expm1-%129-loc s115)))
(defund @expm1-%131-val (s115)
  (fadd-double #x3F5A01A019FE5585 (g '%130 (@expm1-%130-loc s115))))
(defund @expm1-%131-loc (s115)
  (s '%131 (@expm1-%131-val s115) (@expm1-%130-loc s115)))
(defund @expm1-%132-val (s115)
  (fmul-double (g '%122 (@expm1-%131-loc s115)) (g '%131 (@expm1-%131-loc s115))))
(defund @expm1-%132-loc (s115)
  (s '%132 (@expm1-%132-val s115) (@expm1-%131-loc s115)))
(defund @expm1-%133-val (s115)
  (fadd-double #xBFA11111111110F4 (g '%132 (@expm1-%132-loc s115))))
(defund @expm1-%133-loc (s115)
  (s '%133 (@expm1-%133-val s115) (@expm1-%132-loc s115)))
(defund @expm1-%134-val (s115)
  (fmul-double (g '%121 (@expm1-%133-loc s115)) (g '%133 (@expm1-%133-loc s115))))
(defund @expm1-%134-loc (s115)
  (s '%134 (@expm1-%134-val s115) (@expm1-%133-loc s115)))
(defund @expm1-%135-val (s115)
  (fadd-double #x3ff0000000000000 (g '%134 (@expm1-%134-loc s115))))
(defund @expm1-%135-loc (s115)
  (s '%135 (@expm1-%135-val s115) (@expm1-%134-loc s115)))
(defund @expm1-m115.3-mem (s115)
  (store-double (g '%135 (@expm1-%135-loc s115)) (g '%r1 (@expm1-%135-loc s115)) (@expm1-m115.2-mem s115)))
(defund @expm1-%136-val (s115)
  (load-double (g '%r1 (@expm1-%135-loc s115)) (@expm1-m115.3-mem s115)))
(defund @expm1-%136-loc (s115)
  (s '%136 (@expm1-%136-val s115) (@expm1-%135-loc s115)))
(defund @expm1-%137-val (s115)
  (load-double (g '%hfx (@expm1-%136-loc s115)) (@expm1-m115.3-mem s115)))
(defund @expm1-%137-loc (s115)
  (s '%137 (@expm1-%137-val s115) (@expm1-%136-loc s115)))
(defund @expm1-%138-val (s115)
  (fmul-double (g '%136 (@expm1-%137-loc s115)) (g '%137 (@expm1-%137-loc s115))))
(defund @expm1-%138-loc (s115)
  (s '%138 (@expm1-%138-val s115) (@expm1-%137-loc s115)))
(defund @expm1-%139-val (s115)
  (fsub-double #x4008000000000000 (g '%138 (@expm1-%138-loc s115))))
(defund @expm1-%139-loc (s115)
  (s '%139 (@expm1-%139-val s115) (@expm1-%138-loc s115)))
(defund @expm1-m115.4-mem (s115)
  (store-double (g '%139 (@expm1-%139-loc s115)) (g '%t (@expm1-%139-loc s115)) (@expm1-m115.3-mem s115)))
(defund @expm1-%140-val (s115)
  (load-double (g '%hxs (@expm1-%139-loc s115)) (@expm1-m115.4-mem s115)))
(defund @expm1-%140-loc (s115)
  (s '%140 (@expm1-%140-val s115) (@expm1-%139-loc s115)))
(defund @expm1-%141-val (s115)
  (load-double (g '%r1 (@expm1-%140-loc s115)) (@expm1-m115.4-mem s115)))
(defund @expm1-%141-loc (s115)
  (s '%141 (@expm1-%141-val s115) (@expm1-%140-loc s115)))
(defund @expm1-%142-val (s115)
  (load-double (g '%t (@expm1-%141-loc s115)) (@expm1-m115.4-mem s115)))
(defund @expm1-%142-loc (s115)
  (s '%142 (@expm1-%142-val s115) (@expm1-%141-loc s115)))
(defund @expm1-%143-val (s115)
  (fsub-double (g '%141 (@expm1-%142-loc s115)) (g '%142 (@expm1-%142-loc s115))))
(defund @expm1-%143-loc (s115)
  (s '%143 (@expm1-%143-val s115) (@expm1-%142-loc s115)))
(defund @expm1-%144-val (s115)
  (load-double (g '%2 (@expm1-%143-loc s115)) (@expm1-m115.4-mem s115)))
(defund @expm1-%144-loc (s115)
  (s '%144 (@expm1-%144-val s115) (@expm1-%143-loc s115)))
(defund @expm1-%145-val (s115)
  (load-double (g '%t (@expm1-%144-loc s115)) (@expm1-m115.4-mem s115)))
(defund @expm1-%145-loc (s115)
  (s '%145 (@expm1-%145-val s115) (@expm1-%144-loc s115)))
(defund @expm1-%146-val (s115)
  (fmul-double (g '%144 (@expm1-%145-loc s115)) (g '%145 (@expm1-%145-loc s115))))
(defund @expm1-%146-loc (s115)
  (s '%146 (@expm1-%146-val s115) (@expm1-%145-loc s115)))
(defund @expm1-%147-val (s115)
  (fsub-double #x4018000000000000 (g '%146 (@expm1-%146-loc s115))))
(defund @expm1-%147-loc (s115)
  (s '%147 (@expm1-%147-val s115) (@expm1-%146-loc s115)))
(defund @expm1-%148-val (s115)
  (fdiv-double (g '%143 (@expm1-%147-loc s115)) (g '%147 (@expm1-%147-loc s115))))
(defund @expm1-%148-loc (s115)
  (s '%148 (@expm1-%148-val s115) (@expm1-%147-loc s115)))
(defund @expm1-%149-val (s115)
  (fmul-double (g '%140 (@expm1-%148-loc s115)) (g '%148 (@expm1-%148-loc s115))))
(defund @expm1-%149-loc (s115)
  (s '%149 (@expm1-%149-val s115) (@expm1-%148-loc s115)))
(defund @expm1-m115.5-mem (s115)
  (store-double (g '%149 (@expm1-%149-loc s115)) (g '%e (@expm1-%149-loc s115)) (@expm1-m115.4-mem s115)))
(defund @expm1-%150-val (s115)
  (load-i32 (g '%k (@expm1-%149-loc s115)) (@expm1-m115.5-mem s115)))
(defund @expm1-%150-loc (s115)
  (s '%150 (@expm1-%150-val s115) (@expm1-%149-loc s115)))
(defund @expm1-%151-val (s115)
  (icmp-eq-i32 (g '%150 (@expm1-%150-loc s115)) 0))
(defund @expm1-%151-loc (s115)
  (s '%151 (@expm1-%151-val s115) (@expm1-%150-loc s115)))
(defund @expm1-succ115-lab (s115)
  (case (g '%151 (@expm1-%151-loc s115)) (-1 '%152) (0 '%160)))

(defund @expm1-%115-fwd (mem loc pred)
  (let ((s115 (list mem loc pred)))
    (mv (@expm1-succ115-lab s115) (@expm1-m115.5-mem s115) (@expm1-%151-loc s115))))

(defund @expm1-succ115-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%151 loc) (-1 '%152) (0 '%160)) mem loc))
(defund @expm1-%151-rev (mem loc pred)
  (@expm1-succ115-rev mem (s '%151 (icmp-eq-i32 (g '%150 loc) 0) loc) pred))
(defund @expm1-%150-rev (mem loc pred)
  (@expm1-%151-rev mem (s '%150 (load-i32 (g '%k loc) mem) loc) pred))
(defund @expm1-m115.5-rev (mem loc pred)
  (@expm1-%150-rev (store-double (g '%149 loc) (g '%e loc) mem) loc pred))
(defund @expm1-%149-rev (mem loc pred)
  (@expm1-m115.5-rev mem (s '%149 (fmul-double (g '%140 loc) (g '%148 loc)) loc) pred))
(defund @expm1-%148-rev (mem loc pred)
  (@expm1-%149-rev mem (s '%148 (fdiv-double (g '%143 loc) (g '%147 loc)) loc) pred))
(defund @expm1-%147-rev (mem loc pred)
  (@expm1-%148-rev mem (s '%147 (fsub-double #x4018000000000000 (g '%146 loc)) loc) pred))
(defund @expm1-%146-rev (mem loc pred)
  (@expm1-%147-rev mem (s '%146 (fmul-double (g '%144 loc) (g '%145 loc)) loc) pred))
(defund @expm1-%145-rev (mem loc pred)
  (@expm1-%146-rev mem (s '%145 (load-double (g '%t loc) mem) loc) pred))
(defund @expm1-%144-rev (mem loc pred)
  (@expm1-%145-rev mem (s '%144 (load-double (g '%2 loc) mem) loc) pred))
(defund @expm1-%143-rev (mem loc pred)
  (@expm1-%144-rev mem (s '%143 (fsub-double (g '%141 loc) (g '%142 loc)) loc) pred))
(defund @expm1-%142-rev (mem loc pred)
  (@expm1-%143-rev mem (s '%142 (load-double (g '%t loc) mem) loc) pred))
(defund @expm1-%141-rev (mem loc pred)
  (@expm1-%142-rev mem (s '%141 (load-double (g '%r1 loc) mem) loc) pred))
(defund @expm1-%140-rev (mem loc pred)
  (@expm1-%141-rev mem (s '%140 (load-double (g '%hxs loc) mem) loc) pred))
(defund @expm1-m115.4-rev (mem loc pred)
  (@expm1-%140-rev (store-double (g '%139 loc) (g '%t loc) mem) loc pred))
(defund @expm1-%139-rev (mem loc pred)
  (@expm1-m115.4-rev mem (s '%139 (fsub-double #x4008000000000000 (g '%138 loc)) loc) pred))
(defund @expm1-%138-rev (mem loc pred)
  (@expm1-%139-rev mem (s '%138 (fmul-double (g '%136 loc) (g '%137 loc)) loc) pred))
(defund @expm1-%137-rev (mem loc pred)
  (@expm1-%138-rev mem (s '%137 (load-double (g '%hfx loc) mem) loc) pred))
(defund @expm1-%136-rev (mem loc pred)
  (@expm1-%137-rev mem (s '%136 (load-double (g '%r1 loc) mem) loc) pred))
(defund @expm1-m115.3-rev (mem loc pred)
  (@expm1-%136-rev (store-double (g '%135 loc) (g '%r1 loc) mem) loc pred))
(defund @expm1-%135-rev (mem loc pred)
  (@expm1-m115.3-rev mem (s '%135 (fadd-double #x3ff0000000000000 (g '%134 loc)) loc) pred))
(defund @expm1-%134-rev (mem loc pred)
  (@expm1-%135-rev mem (s '%134 (fmul-double (g '%121 loc) (g '%133 loc)) loc) pred))
(defund @expm1-%133-rev (mem loc pred)
  (@expm1-%134-rev mem (s '%133 (fadd-double #xBFA11111111110F4 (g '%132 loc)) loc) pred))
(defund @expm1-%132-rev (mem loc pred)
  (@expm1-%133-rev mem (s '%132 (fmul-double (g '%122 loc) (g '%131 loc)) loc) pred))
(defund @expm1-%131-rev (mem loc pred)
  (@expm1-%132-rev mem (s '%131 (fadd-double #x3F5A01A019FE5585 (g '%130 loc)) loc) pred))
(defund @expm1-%130-rev (mem loc pred)
  (@expm1-%131-rev mem (s '%130 (fmul-double (g '%123 loc) (g '%129 loc)) loc) pred))
(defund @expm1-%129-rev (mem loc pred)
  (@expm1-%130-rev mem (s '%129 (fadd-double #xBF14CE199EAADBB7 (g '%128 loc)) loc) pred))
(defund @expm1-%128-rev (mem loc pred)
  (@expm1-%129-rev mem (s '%128 (fmul-double (g '%124 loc) (g '%127 loc)) loc) pred))
(defund @expm1-%127-rev (mem loc pred)
  (@expm1-%128-rev mem (s '%127 (fadd-double #x3ED0CFCA86E65239 (g '%126 loc)) loc) pred))
(defund @expm1-%126-rev (mem loc pred)
  (@expm1-%127-rev mem (s '%126 (fmul-double (g '%125 loc) #xBE8AFDB76E09C32D) loc) pred))
(defund @expm1-%125-rev (mem loc pred)
  (@expm1-%126-rev mem (s '%125 (load-double (g '%hxs loc) mem) loc) pred))
(defund @expm1-%124-rev (mem loc pred)
  (@expm1-%125-rev mem (s '%124 (load-double (g '%hxs loc) mem) loc) pred))
(defund @expm1-%123-rev (mem loc pred)
  (@expm1-%124-rev mem (s '%123 (load-double (g '%hxs loc) mem) loc) pred))
(defund @expm1-%122-rev (mem loc pred)
  (@expm1-%123-rev mem (s '%122 (load-double (g '%hxs loc) mem) loc) pred))
(defund @expm1-%121-rev (mem loc pred)
  (@expm1-%122-rev mem (s '%121 (load-double (g '%hxs loc) mem) loc) pred))
(defund @expm1-m115.2-rev (mem loc pred)
  (@expm1-%121-rev (store-double (g '%120 loc) (g '%hxs loc) mem) loc pred))
(defund @expm1-%120-rev (mem loc pred)
  (@expm1-m115.2-rev mem (s '%120 (fmul-double (g '%118 loc) (g '%119 loc)) loc) pred))
(defund @expm1-%119-rev (mem loc pred)
  (@expm1-%120-rev mem (s '%119 (load-double (g '%hfx loc) mem) loc) pred))
(defund @expm1-%118-rev (mem loc pred)
  (@expm1-%119-rev mem (s '%118 (load-double (g '%2 loc) mem) loc) pred))
(defund @expm1-m115.1-rev (mem loc pred)
  (@expm1-%118-rev (store-double (g '%117 loc) (g '%hfx loc) mem) loc pred))
(defund @expm1-%117-rev (mem loc pred)
  (@expm1-m115.1-rev mem (s '%117 (fmul-double #x3fe0000000000000 (g '%116 loc)) loc) pred))
(defund @expm1-%116-rev (mem loc pred)
  (@expm1-%117-rev mem (s '%116 (load-double (g '%2 loc) mem) loc) pred))

(defund @expm1-%115-rev (mem loc pred)
  (@expm1-%116-rev mem loc pred))

(defruled @expm1-%115-expand-rev-as-@expm1-%116-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%116-rev
            (@expm1-%115-mem s115)
            (@expm1-%115-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-rev @expm1-%115-mem @expm1-%115-loc @expm1-%115-pred))
(defruled @expm1-%115-expand-rev-as-@expm1-%117-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%117-rev
            (@expm1-%115-mem s115)
            (@expm1-%116-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%116-rev @expm1-%116-rev @expm1-%116-loc @expm1-%116-val))
(defruled @expm1-%115-expand-rev-as-@expm1-m115.1-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-m115.1-rev
            (@expm1-%115-mem s115)
            (@expm1-%117-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%117-rev @expm1-%117-rev @expm1-%117-loc @expm1-%117-val))
(defruled @expm1-%115-expand-rev-as-@expm1-%118-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%118-rev
            (@expm1-m115.1-mem s115)
            (@expm1-%117-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-m115.1-rev @expm1-m115.1-rev @expm1-m115.1-mem))
(defruled @expm1-%115-expand-rev-as-@expm1-%119-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%119-rev
            (@expm1-m115.1-mem s115)
            (@expm1-%118-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%118-rev @expm1-%118-rev @expm1-%118-loc @expm1-%118-val))
(defruled @expm1-%115-expand-rev-as-@expm1-%120-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%120-rev
            (@expm1-m115.1-mem s115)
            (@expm1-%119-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%119-rev @expm1-%119-rev @expm1-%119-loc @expm1-%119-val))
(defruled @expm1-%115-expand-rev-as-@expm1-m115.2-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-m115.2-rev
            (@expm1-m115.1-mem s115)
            (@expm1-%120-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%120-rev @expm1-%120-rev @expm1-%120-loc @expm1-%120-val))
(defruled @expm1-%115-expand-rev-as-@expm1-%121-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%121-rev
            (@expm1-m115.2-mem s115)
            (@expm1-%120-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-m115.2-rev @expm1-m115.2-rev @expm1-m115.2-mem))
(defruled @expm1-%115-expand-rev-as-@expm1-%122-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%122-rev
            (@expm1-m115.2-mem s115)
            (@expm1-%121-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%121-rev @expm1-%121-rev @expm1-%121-loc @expm1-%121-val))
(defruled @expm1-%115-expand-rev-as-@expm1-%123-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%123-rev
            (@expm1-m115.2-mem s115)
            (@expm1-%122-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%122-rev @expm1-%122-rev @expm1-%122-loc @expm1-%122-val))
(defruled @expm1-%115-expand-rev-as-@expm1-%124-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%124-rev
            (@expm1-m115.2-mem s115)
            (@expm1-%123-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%123-rev @expm1-%123-rev @expm1-%123-loc @expm1-%123-val))
(defruled @expm1-%115-expand-rev-as-@expm1-%125-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%125-rev
            (@expm1-m115.2-mem s115)
            (@expm1-%124-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%124-rev @expm1-%124-rev @expm1-%124-loc @expm1-%124-val))
(defruled @expm1-%115-expand-rev-as-@expm1-%126-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%126-rev
            (@expm1-m115.2-mem s115)
            (@expm1-%125-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%125-rev @expm1-%125-rev @expm1-%125-loc @expm1-%125-val))
(defruled @expm1-%115-expand-rev-as-@expm1-%127-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%127-rev
            (@expm1-m115.2-mem s115)
            (@expm1-%126-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%126-rev @expm1-%126-rev @expm1-%126-loc @expm1-%126-val))
(defruled @expm1-%115-expand-rev-as-@expm1-%128-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%128-rev
            (@expm1-m115.2-mem s115)
            (@expm1-%127-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%127-rev @expm1-%127-rev @expm1-%127-loc @expm1-%127-val))
(defruled @expm1-%115-expand-rev-as-@expm1-%129-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%129-rev
            (@expm1-m115.2-mem s115)
            (@expm1-%128-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%128-rev @expm1-%128-rev @expm1-%128-loc @expm1-%128-val))
(defruled @expm1-%115-expand-rev-as-@expm1-%130-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%130-rev
            (@expm1-m115.2-mem s115)
            (@expm1-%129-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%129-rev @expm1-%129-rev @expm1-%129-loc @expm1-%129-val))
(defruled @expm1-%115-expand-rev-as-@expm1-%131-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%131-rev
            (@expm1-m115.2-mem s115)
            (@expm1-%130-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%130-rev @expm1-%130-rev @expm1-%130-loc @expm1-%130-val))
(defruled @expm1-%115-expand-rev-as-@expm1-%132-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%132-rev
            (@expm1-m115.2-mem s115)
            (@expm1-%131-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%131-rev @expm1-%131-rev @expm1-%131-loc @expm1-%131-val))
(defruled @expm1-%115-expand-rev-as-@expm1-%133-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%133-rev
            (@expm1-m115.2-mem s115)
            (@expm1-%132-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%132-rev @expm1-%132-rev @expm1-%132-loc @expm1-%132-val))
(defruled @expm1-%115-expand-rev-as-@expm1-%134-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%134-rev
            (@expm1-m115.2-mem s115)
            (@expm1-%133-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%133-rev @expm1-%133-rev @expm1-%133-loc @expm1-%133-val))
(defruled @expm1-%115-expand-rev-as-@expm1-%135-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%135-rev
            (@expm1-m115.2-mem s115)
            (@expm1-%134-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%134-rev @expm1-%134-rev @expm1-%134-loc @expm1-%134-val))
(defruled @expm1-%115-expand-rev-as-@expm1-m115.3-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-m115.3-rev
            (@expm1-m115.2-mem s115)
            (@expm1-%135-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%135-rev @expm1-%135-rev @expm1-%135-loc @expm1-%135-val))
(defruled @expm1-%115-expand-rev-as-@expm1-%136-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%136-rev
            (@expm1-m115.3-mem s115)
            (@expm1-%135-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-m115.3-rev @expm1-m115.3-rev @expm1-m115.3-mem))
(defruled @expm1-%115-expand-rev-as-@expm1-%137-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%137-rev
            (@expm1-m115.3-mem s115)
            (@expm1-%136-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%136-rev @expm1-%136-rev @expm1-%136-loc @expm1-%136-val))
(defruled @expm1-%115-expand-rev-as-@expm1-%138-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%138-rev
            (@expm1-m115.3-mem s115)
            (@expm1-%137-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%137-rev @expm1-%137-rev @expm1-%137-loc @expm1-%137-val))
(defruled @expm1-%115-expand-rev-as-@expm1-%139-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%139-rev
            (@expm1-m115.3-mem s115)
            (@expm1-%138-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%138-rev @expm1-%138-rev @expm1-%138-loc @expm1-%138-val))
(defruled @expm1-%115-expand-rev-as-@expm1-m115.4-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-m115.4-rev
            (@expm1-m115.3-mem s115)
            (@expm1-%139-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%139-rev @expm1-%139-rev @expm1-%139-loc @expm1-%139-val))
(defruled @expm1-%115-expand-rev-as-@expm1-%140-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%140-rev
            (@expm1-m115.4-mem s115)
            (@expm1-%139-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-m115.4-rev @expm1-m115.4-rev @expm1-m115.4-mem))
(defruled @expm1-%115-expand-rev-as-@expm1-%141-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%141-rev
            (@expm1-m115.4-mem s115)
            (@expm1-%140-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%140-rev @expm1-%140-rev @expm1-%140-loc @expm1-%140-val))
(defruled @expm1-%115-expand-rev-as-@expm1-%142-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%142-rev
            (@expm1-m115.4-mem s115)
            (@expm1-%141-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%141-rev @expm1-%141-rev @expm1-%141-loc @expm1-%141-val))
(defruled @expm1-%115-expand-rev-as-@expm1-%143-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%143-rev
            (@expm1-m115.4-mem s115)
            (@expm1-%142-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%142-rev @expm1-%142-rev @expm1-%142-loc @expm1-%142-val))
(defruled @expm1-%115-expand-rev-as-@expm1-%144-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%144-rev
            (@expm1-m115.4-mem s115)
            (@expm1-%143-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%143-rev @expm1-%143-rev @expm1-%143-loc @expm1-%143-val))
(defruled @expm1-%115-expand-rev-as-@expm1-%145-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%145-rev
            (@expm1-m115.4-mem s115)
            (@expm1-%144-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%144-rev @expm1-%144-rev @expm1-%144-loc @expm1-%144-val))
(defruled @expm1-%115-expand-rev-as-@expm1-%146-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%146-rev
            (@expm1-m115.4-mem s115)
            (@expm1-%145-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%145-rev @expm1-%145-rev @expm1-%145-loc @expm1-%145-val))
(defruled @expm1-%115-expand-rev-as-@expm1-%147-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%147-rev
            (@expm1-m115.4-mem s115)
            (@expm1-%146-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%146-rev @expm1-%146-rev @expm1-%146-loc @expm1-%146-val))
(defruled @expm1-%115-expand-rev-as-@expm1-%148-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%148-rev
            (@expm1-m115.4-mem s115)
            (@expm1-%147-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%147-rev @expm1-%147-rev @expm1-%147-loc @expm1-%147-val))
(defruled @expm1-%115-expand-rev-as-@expm1-%149-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%149-rev
            (@expm1-m115.4-mem s115)
            (@expm1-%148-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%148-rev @expm1-%148-rev @expm1-%148-loc @expm1-%148-val))
(defruled @expm1-%115-expand-rev-as-@expm1-m115.5-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-m115.5-rev
            (@expm1-m115.4-mem s115)
            (@expm1-%149-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%149-rev @expm1-%149-rev @expm1-%149-loc @expm1-%149-val))
(defruled @expm1-%115-expand-rev-as-@expm1-%150-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%150-rev
            (@expm1-m115.5-mem s115)
            (@expm1-%149-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-m115.5-rev @expm1-m115.5-rev @expm1-m115.5-mem))
(defruled @expm1-%115-expand-rev-as-@expm1-%151-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-%151-rev
            (@expm1-m115.5-mem s115)
            (@expm1-%150-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%150-rev @expm1-%150-rev @expm1-%150-loc @expm1-%150-val))
(defruled @expm1-%115-expand-rev-as-@expm1-succ115-rev
  (equal (@expm1-%115-rev mem loc pred)
         (let ((s115 (list mem loc pred)))
           (@expm1-succ115-rev
            (@expm1-m115.5-mem s115)
            (@expm1-%151-loc s115)
            (@expm1-%115-pred s115))))
  :enable (@expm1-%115-expand-rev-as-@expm1-%151-rev @expm1-%151-rev @expm1-%151-loc @expm1-%151-val))
(defruled @expm1-%115-expand-rev-as-fwd
  (equal (@expm1-%115-rev mem loc pred)
         (@expm1-%115-fwd mem loc pred))
  :enable (@expm1-%115-expand-rev-as-@expm1-succ115-rev @expm1-succ115-rev @expm1-succ115-lab @expm1-%115-fwd))

(defund @expm1-%115-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%116 (load-double (g '%2 loc) mem) loc))
    (loc (s '%117 (fmul-double #x3fe0000000000000 (g '%116 loc)) loc))
    (mem (store-double (g '%117 loc) (g '%hfx loc) mem))
    (loc (s '%118 (load-double (g '%2 loc) mem) loc))
    (loc (s '%119 (load-double (g '%hfx loc) mem) loc))
    (loc (s '%120 (fmul-double (g '%118 loc) (g '%119 loc)) loc))
    (mem (store-double (g '%120 loc) (g '%hxs loc) mem))
    (loc (s '%121 (load-double (g '%hxs loc) mem) loc))
    (loc (s '%122 (load-double (g '%hxs loc) mem) loc))
    (loc (s '%123 (load-double (g '%hxs loc) mem) loc))
    (loc (s '%124 (load-double (g '%hxs loc) mem) loc))
    (loc (s '%125 (load-double (g '%hxs loc) mem) loc))
    (loc (s '%126 (fmul-double (g '%125 loc) #xBE8AFDB76E09C32D) loc))
    (loc (s '%127 (fadd-double #x3ED0CFCA86E65239 (g '%126 loc)) loc))
    (loc (s '%128 (fmul-double (g '%124 loc) (g '%127 loc)) loc))
    (loc (s '%129 (fadd-double #xBF14CE199EAADBB7 (g '%128 loc)) loc))
    (loc (s '%130 (fmul-double (g '%123 loc) (g '%129 loc)) loc))
    (loc (s '%131 (fadd-double #x3F5A01A019FE5585 (g '%130 loc)) loc))
    (loc (s '%132 (fmul-double (g '%122 loc) (g '%131 loc)) loc))
    (loc (s '%133 (fadd-double #xBFA11111111110F4 (g '%132 loc)) loc))
    (loc (s '%134 (fmul-double (g '%121 loc) (g '%133 loc)) loc))
    (loc (s '%135 (fadd-double #x3ff0000000000000 (g '%134 loc)) loc))
    (mem (store-double (g '%135 loc) (g '%r1 loc) mem))
    (loc (s '%136 (load-double (g '%r1 loc) mem) loc))
    (loc (s '%137 (load-double (g '%hfx loc) mem) loc))
    (loc (s '%138 (fmul-double (g '%136 loc) (g '%137 loc)) loc))
    (loc (s '%139 (fsub-double #x4008000000000000 (g '%138 loc)) loc))
    (mem (store-double (g '%139 loc) (g '%t loc) mem))
    (loc (s '%140 (load-double (g '%hxs loc) mem) loc))
    (loc (s '%141 (load-double (g '%r1 loc) mem) loc))
    (loc (s '%142 (load-double (g '%t loc) mem) loc))
    (loc (s '%143 (fsub-double (g '%141 loc) (g '%142 loc)) loc))
    (loc (s '%144 (load-double (g '%2 loc) mem) loc))
    (loc (s '%145 (load-double (g '%t loc) mem) loc))
    (loc (s '%146 (fmul-double (g '%144 loc) (g '%145 loc)) loc))
    (loc (s '%147 (fsub-double #x4018000000000000 (g '%146 loc)) loc))
    (loc (s '%148 (fdiv-double (g '%143 loc) (g '%147 loc)) loc))
    (loc (s '%149 (fmul-double (g '%140 loc) (g '%148 loc)) loc))
    (mem (store-double (g '%149 loc) (g '%e loc) mem))
    (loc (s '%150 (load-i32 (g '%k loc) mem) loc))
    (loc (s '%151 (icmp-eq-i32 (g '%150 loc) 0) loc))
    (succ (case (g '%151 loc) (-1 '%152) (0 '%160))))
  (mv succ mem loc)))

(defund @expm1-%152-mem (s152)
  (car s152))
(defund @expm1-%152-loc (s152)
  (cadr s152))
(defund @expm1-%152-pred (s152)
  (caddr s152))
(defund @expm1-%153-val (s152)
  (load-double (g '%2 (@expm1-%152-loc s152)) (@expm1-%152-mem s152)))
(defund @expm1-%153-loc (s152)
  (s '%153 (@expm1-%153-val s152) (@expm1-%152-loc s152)))
(defund @expm1-%154-val (s152)
  (load-double (g '%2 (@expm1-%153-loc s152)) (@expm1-%152-mem s152)))
(defund @expm1-%154-loc (s152)
  (s '%154 (@expm1-%154-val s152) (@expm1-%153-loc s152)))
(defund @expm1-%155-val (s152)
  (load-double (g '%e (@expm1-%154-loc s152)) (@expm1-%152-mem s152)))
(defund @expm1-%155-loc (s152)
  (s '%155 (@expm1-%155-val s152) (@expm1-%154-loc s152)))
(defund @expm1-%156-val (s152)
  (fmul-double (g '%154 (@expm1-%155-loc s152)) (g '%155 (@expm1-%155-loc s152))))
(defund @expm1-%156-loc (s152)
  (s '%156 (@expm1-%156-val s152) (@expm1-%155-loc s152)))
(defund @expm1-%157-val (s152)
  (load-double (g '%hxs (@expm1-%156-loc s152)) (@expm1-%152-mem s152)))
(defund @expm1-%157-loc (s152)
  (s '%157 (@expm1-%157-val s152) (@expm1-%156-loc s152)))
(defund @expm1-%158-val (s152)
  (fsub-double (g '%156 (@expm1-%157-loc s152)) (g '%157 (@expm1-%157-loc s152))))
(defund @expm1-%158-loc (s152)
  (s '%158 (@expm1-%158-val s152) (@expm1-%157-loc s152)))
(defund @expm1-%159-val (s152)
  (fsub-double (g '%153 (@expm1-%158-loc s152)) (g '%158 (@expm1-%158-loc s152))))
(defund @expm1-%159-loc (s152)
  (s '%159 (@expm1-%159-val s152) (@expm1-%158-loc s152)))
(defund @expm1-m152.1-mem (s152)
  (store-double (g '%159 (@expm1-%159-loc s152)) (g '%1 (@expm1-%159-loc s152)) (@expm1-%152-mem s152)))
(defund @expm1-succ152-lab (s152)
  (declare (ignore s152))
  '%258)

(defund @expm1-%152-fwd (mem loc pred)
  (let ((s152 (list mem loc pred)))
    (mv (@expm1-succ152-lab s152) (@expm1-m152.1-mem s152) (@expm1-%159-loc s152))))

(defund @expm1-succ152-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%258 mem loc))
(defund @expm1-m152.1-rev (mem loc pred)
  (@expm1-succ152-rev (store-double (g '%159 loc) (g '%1 loc) mem) loc pred))
(defund @expm1-%159-rev (mem loc pred)
  (@expm1-m152.1-rev mem (s '%159 (fsub-double (g '%153 loc) (g '%158 loc)) loc) pred))
(defund @expm1-%158-rev (mem loc pred)
  (@expm1-%159-rev mem (s '%158 (fsub-double (g '%156 loc) (g '%157 loc)) loc) pred))
(defund @expm1-%157-rev (mem loc pred)
  (@expm1-%158-rev mem (s '%157 (load-double (g '%hxs loc) mem) loc) pred))
(defund @expm1-%156-rev (mem loc pred)
  (@expm1-%157-rev mem (s '%156 (fmul-double (g '%154 loc) (g '%155 loc)) loc) pred))
(defund @expm1-%155-rev (mem loc pred)
  (@expm1-%156-rev mem (s '%155 (load-double (g '%e loc) mem) loc) pred))
(defund @expm1-%154-rev (mem loc pred)
  (@expm1-%155-rev mem (s '%154 (load-double (g '%2 loc) mem) loc) pred))
(defund @expm1-%153-rev (mem loc pred)
  (@expm1-%154-rev mem (s '%153 (load-double (g '%2 loc) mem) loc) pred))

(defund @expm1-%152-rev (mem loc pred)
  (@expm1-%153-rev mem loc pred))

(defruled @expm1-%152-expand-rev-as-@expm1-%153-rev
  (equal (@expm1-%152-rev mem loc pred)
         (let ((s152 (list mem loc pred)))
           (@expm1-%153-rev
            (@expm1-%152-mem s152)
            (@expm1-%152-loc s152)
            (@expm1-%152-pred s152))))
  :enable (@expm1-%152-rev @expm1-%152-mem @expm1-%152-loc @expm1-%152-pred))
(defruled @expm1-%152-expand-rev-as-@expm1-%154-rev
  (equal (@expm1-%152-rev mem loc pred)
         (let ((s152 (list mem loc pred)))
           (@expm1-%154-rev
            (@expm1-%152-mem s152)
            (@expm1-%153-loc s152)
            (@expm1-%152-pred s152))))
  :enable (@expm1-%152-expand-rev-as-@expm1-%153-rev @expm1-%153-rev @expm1-%153-loc @expm1-%153-val))
(defruled @expm1-%152-expand-rev-as-@expm1-%155-rev
  (equal (@expm1-%152-rev mem loc pred)
         (let ((s152 (list mem loc pred)))
           (@expm1-%155-rev
            (@expm1-%152-mem s152)
            (@expm1-%154-loc s152)
            (@expm1-%152-pred s152))))
  :enable (@expm1-%152-expand-rev-as-@expm1-%154-rev @expm1-%154-rev @expm1-%154-loc @expm1-%154-val))
(defruled @expm1-%152-expand-rev-as-@expm1-%156-rev
  (equal (@expm1-%152-rev mem loc pred)
         (let ((s152 (list mem loc pred)))
           (@expm1-%156-rev
            (@expm1-%152-mem s152)
            (@expm1-%155-loc s152)
            (@expm1-%152-pred s152))))
  :enable (@expm1-%152-expand-rev-as-@expm1-%155-rev @expm1-%155-rev @expm1-%155-loc @expm1-%155-val))
(defruled @expm1-%152-expand-rev-as-@expm1-%157-rev
  (equal (@expm1-%152-rev mem loc pred)
         (let ((s152 (list mem loc pred)))
           (@expm1-%157-rev
            (@expm1-%152-mem s152)
            (@expm1-%156-loc s152)
            (@expm1-%152-pred s152))))
  :enable (@expm1-%152-expand-rev-as-@expm1-%156-rev @expm1-%156-rev @expm1-%156-loc @expm1-%156-val))
(defruled @expm1-%152-expand-rev-as-@expm1-%158-rev
  (equal (@expm1-%152-rev mem loc pred)
         (let ((s152 (list mem loc pred)))
           (@expm1-%158-rev
            (@expm1-%152-mem s152)
            (@expm1-%157-loc s152)
            (@expm1-%152-pred s152))))
  :enable (@expm1-%152-expand-rev-as-@expm1-%157-rev @expm1-%157-rev @expm1-%157-loc @expm1-%157-val))
(defruled @expm1-%152-expand-rev-as-@expm1-%159-rev
  (equal (@expm1-%152-rev mem loc pred)
         (let ((s152 (list mem loc pred)))
           (@expm1-%159-rev
            (@expm1-%152-mem s152)
            (@expm1-%158-loc s152)
            (@expm1-%152-pred s152))))
  :enable (@expm1-%152-expand-rev-as-@expm1-%158-rev @expm1-%158-rev @expm1-%158-loc @expm1-%158-val))
(defruled @expm1-%152-expand-rev-as-@expm1-m152.1-rev
  (equal (@expm1-%152-rev mem loc pred)
         (let ((s152 (list mem loc pred)))
           (@expm1-m152.1-rev
            (@expm1-%152-mem s152)
            (@expm1-%159-loc s152)
            (@expm1-%152-pred s152))))
  :enable (@expm1-%152-expand-rev-as-@expm1-%159-rev @expm1-%159-rev @expm1-%159-loc @expm1-%159-val))
(defruled @expm1-%152-expand-rev-as-@expm1-succ152-rev
  (equal (@expm1-%152-rev mem loc pred)
         (let ((s152 (list mem loc pred)))
           (@expm1-succ152-rev
            (@expm1-m152.1-mem s152)
            (@expm1-%159-loc s152)
            (@expm1-%152-pred s152))))
  :enable (@expm1-%152-expand-rev-as-@expm1-m152.1-rev @expm1-m152.1-rev @expm1-m152.1-mem))
(defruled @expm1-%152-expand-rev-as-fwd
  (equal (@expm1-%152-rev mem loc pred)
         (@expm1-%152-fwd mem loc pred))
  :enable (@expm1-%152-expand-rev-as-@expm1-succ152-rev @expm1-succ152-rev @expm1-succ152-lab @expm1-%152-fwd))

(defund @expm1-%152-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%153 (load-double (g '%2 loc) mem) loc))
    (loc (s '%154 (load-double (g '%2 loc) mem) loc))
    (loc (s '%155 (load-double (g '%e loc) mem) loc))
    (loc (s '%156 (fmul-double (g '%154 loc) (g '%155 loc)) loc))
    (loc (s '%157 (load-double (g '%hxs loc) mem) loc))
    (loc (s '%158 (fsub-double (g '%156 loc) (g '%157 loc)) loc))
    (loc (s '%159 (fsub-double (g '%153 loc) (g '%158 loc)) loc))
    (mem (store-double (g '%159 loc) (g '%1 loc) mem))
    (succ '%258))
  (mv succ mem loc)))

(defund @expm1-%160-mem (s160)
  (car s160))
(defund @expm1-%160-loc (s160)
  (cadr s160))
(defund @expm1-%160-pred (s160)
  (caddr s160))
(defund @expm1-%161-val (s160)
  (load-double (g '%2 (@expm1-%160-loc s160)) (@expm1-%160-mem s160)))
(defund @expm1-%161-loc (s160)
  (s '%161 (@expm1-%161-val s160) (@expm1-%160-loc s160)))
(defund @expm1-%162-val (s160)
  (load-double (g '%e (@expm1-%161-loc s160)) (@expm1-%160-mem s160)))
(defund @expm1-%162-loc (s160)
  (s '%162 (@expm1-%162-val s160) (@expm1-%161-loc s160)))
(defund @expm1-%163-val (s160)
  (load-double (g '%c (@expm1-%162-loc s160)) (@expm1-%160-mem s160)))
(defund @expm1-%163-loc (s160)
  (s '%163 (@expm1-%163-val s160) (@expm1-%162-loc s160)))
(defund @expm1-%164-val (s160)
  (fsub-double (g '%162 (@expm1-%163-loc s160)) (g '%163 (@expm1-%163-loc s160))))
(defund @expm1-%164-loc (s160)
  (s '%164 (@expm1-%164-val s160) (@expm1-%163-loc s160)))
(defund @expm1-%165-val (s160)
  (fmul-double (g '%161 (@expm1-%164-loc s160)) (g '%164 (@expm1-%164-loc s160))))
(defund @expm1-%165-loc (s160)
  (s '%165 (@expm1-%165-val s160) (@expm1-%164-loc s160)))
(defund @expm1-%166-val (s160)
  (load-double (g '%c (@expm1-%165-loc s160)) (@expm1-%160-mem s160)))
(defund @expm1-%166-loc (s160)
  (s '%166 (@expm1-%166-val s160) (@expm1-%165-loc s160)))
(defund @expm1-%167-val (s160)
  (fsub-double (g '%165 (@expm1-%166-loc s160)) (g '%166 (@expm1-%166-loc s160))))
(defund @expm1-%167-loc (s160)
  (s '%167 (@expm1-%167-val s160) (@expm1-%166-loc s160)))
(defund @expm1-m160.1-mem (s160)
  (store-double (g '%167 (@expm1-%167-loc s160)) (g '%e (@expm1-%167-loc s160)) (@expm1-%160-mem s160)))
(defund @expm1-%168-val (s160)
  (load-double (g '%hxs (@expm1-%167-loc s160)) (@expm1-m160.1-mem s160)))
(defund @expm1-%168-loc (s160)
  (s '%168 (@expm1-%168-val s160) (@expm1-%167-loc s160)))
(defund @expm1-%169-val (s160)
  (load-double (g '%e (@expm1-%168-loc s160)) (@expm1-m160.1-mem s160)))
(defund @expm1-%169-loc (s160)
  (s '%169 (@expm1-%169-val s160) (@expm1-%168-loc s160)))
(defund @expm1-%170-val (s160)
  (fsub-double (g '%169 (@expm1-%169-loc s160)) (g '%168 (@expm1-%169-loc s160))))
(defund @expm1-%170-loc (s160)
  (s '%170 (@expm1-%170-val s160) (@expm1-%169-loc s160)))
(defund @expm1-m160.2-mem (s160)
  (store-double (g '%170 (@expm1-%170-loc s160)) (g '%e (@expm1-%170-loc s160)) (@expm1-m160.1-mem s160)))
(defund @expm1-%171-val (s160)
  (load-i32 (g '%k (@expm1-%170-loc s160)) (@expm1-m160.2-mem s160)))
(defund @expm1-%171-loc (s160)
  (s '%171 (@expm1-%171-val s160) (@expm1-%170-loc s160)))
(defund @expm1-%172-val (s160)
  (icmp-eq-i32 (g '%171 (@expm1-%171-loc s160)) -1))
(defund @expm1-%172-loc (s160)
  (s '%172 (@expm1-%172-val s160) (@expm1-%171-loc s160)))
(defund @expm1-succ160-lab (s160)
  (case (g '%172 (@expm1-%172-loc s160)) (-1 '%173) (0 '%179)))

(defund @expm1-%160-fwd (mem loc pred)
  (let ((s160 (list mem loc pred)))
    (mv (@expm1-succ160-lab s160) (@expm1-m160.2-mem s160) (@expm1-%172-loc s160))))

(defund @expm1-succ160-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%172 loc) (-1 '%173) (0 '%179)) mem loc))
(defund @expm1-%172-rev (mem loc pred)
  (@expm1-succ160-rev mem (s '%172 (icmp-eq-i32 (g '%171 loc) -1) loc) pred))
(defund @expm1-%171-rev (mem loc pred)
  (@expm1-%172-rev mem (s '%171 (load-i32 (g '%k loc) mem) loc) pred))
(defund @expm1-m160.2-rev (mem loc pred)
  (@expm1-%171-rev (store-double (g '%170 loc) (g '%e loc) mem) loc pred))
(defund @expm1-%170-rev (mem loc pred)
  (@expm1-m160.2-rev mem (s '%170 (fsub-double (g '%169 loc) (g '%168 loc)) loc) pred))
(defund @expm1-%169-rev (mem loc pred)
  (@expm1-%170-rev mem (s '%169 (load-double (g '%e loc) mem) loc) pred))
(defund @expm1-%168-rev (mem loc pred)
  (@expm1-%169-rev mem (s '%168 (load-double (g '%hxs loc) mem) loc) pred))
(defund @expm1-m160.1-rev (mem loc pred)
  (@expm1-%168-rev (store-double (g '%167 loc) (g '%e loc) mem) loc pred))
(defund @expm1-%167-rev (mem loc pred)
  (@expm1-m160.1-rev mem (s '%167 (fsub-double (g '%165 loc) (g '%166 loc)) loc) pred))
(defund @expm1-%166-rev (mem loc pred)
  (@expm1-%167-rev mem (s '%166 (load-double (g '%c loc) mem) loc) pred))
(defund @expm1-%165-rev (mem loc pred)
  (@expm1-%166-rev mem (s '%165 (fmul-double (g '%161 loc) (g '%164 loc)) loc) pred))
(defund @expm1-%164-rev (mem loc pred)
  (@expm1-%165-rev mem (s '%164 (fsub-double (g '%162 loc) (g '%163 loc)) loc) pred))
(defund @expm1-%163-rev (mem loc pred)
  (@expm1-%164-rev mem (s '%163 (load-double (g '%c loc) mem) loc) pred))
(defund @expm1-%162-rev (mem loc pred)
  (@expm1-%163-rev mem (s '%162 (load-double (g '%e loc) mem) loc) pred))
(defund @expm1-%161-rev (mem loc pred)
  (@expm1-%162-rev mem (s '%161 (load-double (g '%2 loc) mem) loc) pred))

(defund @expm1-%160-rev (mem loc pred)
  (@expm1-%161-rev mem loc pred))

(defruled @expm1-%160-expand-rev-as-@expm1-%161-rev
  (equal (@expm1-%160-rev mem loc pred)
         (let ((s160 (list mem loc pred)))
           (@expm1-%161-rev
            (@expm1-%160-mem s160)
            (@expm1-%160-loc s160)
            (@expm1-%160-pred s160))))
  :enable (@expm1-%160-rev @expm1-%160-mem @expm1-%160-loc @expm1-%160-pred))
(defruled @expm1-%160-expand-rev-as-@expm1-%162-rev
  (equal (@expm1-%160-rev mem loc pred)
         (let ((s160 (list mem loc pred)))
           (@expm1-%162-rev
            (@expm1-%160-mem s160)
            (@expm1-%161-loc s160)
            (@expm1-%160-pred s160))))
  :enable (@expm1-%160-expand-rev-as-@expm1-%161-rev @expm1-%161-rev @expm1-%161-loc @expm1-%161-val))
(defruled @expm1-%160-expand-rev-as-@expm1-%163-rev
  (equal (@expm1-%160-rev mem loc pred)
         (let ((s160 (list mem loc pred)))
           (@expm1-%163-rev
            (@expm1-%160-mem s160)
            (@expm1-%162-loc s160)
            (@expm1-%160-pred s160))))
  :enable (@expm1-%160-expand-rev-as-@expm1-%162-rev @expm1-%162-rev @expm1-%162-loc @expm1-%162-val))
(defruled @expm1-%160-expand-rev-as-@expm1-%164-rev
  (equal (@expm1-%160-rev mem loc pred)
         (let ((s160 (list mem loc pred)))
           (@expm1-%164-rev
            (@expm1-%160-mem s160)
            (@expm1-%163-loc s160)
            (@expm1-%160-pred s160))))
  :enable (@expm1-%160-expand-rev-as-@expm1-%163-rev @expm1-%163-rev @expm1-%163-loc @expm1-%163-val))
(defruled @expm1-%160-expand-rev-as-@expm1-%165-rev
  (equal (@expm1-%160-rev mem loc pred)
         (let ((s160 (list mem loc pred)))
           (@expm1-%165-rev
            (@expm1-%160-mem s160)
            (@expm1-%164-loc s160)
            (@expm1-%160-pred s160))))
  :enable (@expm1-%160-expand-rev-as-@expm1-%164-rev @expm1-%164-rev @expm1-%164-loc @expm1-%164-val))
(defruled @expm1-%160-expand-rev-as-@expm1-%166-rev
  (equal (@expm1-%160-rev mem loc pred)
         (let ((s160 (list mem loc pred)))
           (@expm1-%166-rev
            (@expm1-%160-mem s160)
            (@expm1-%165-loc s160)
            (@expm1-%160-pred s160))))
  :enable (@expm1-%160-expand-rev-as-@expm1-%165-rev @expm1-%165-rev @expm1-%165-loc @expm1-%165-val))
(defruled @expm1-%160-expand-rev-as-@expm1-%167-rev
  (equal (@expm1-%160-rev mem loc pred)
         (let ((s160 (list mem loc pred)))
           (@expm1-%167-rev
            (@expm1-%160-mem s160)
            (@expm1-%166-loc s160)
            (@expm1-%160-pred s160))))
  :enable (@expm1-%160-expand-rev-as-@expm1-%166-rev @expm1-%166-rev @expm1-%166-loc @expm1-%166-val))
(defruled @expm1-%160-expand-rev-as-@expm1-m160.1-rev
  (equal (@expm1-%160-rev mem loc pred)
         (let ((s160 (list mem loc pred)))
           (@expm1-m160.1-rev
            (@expm1-%160-mem s160)
            (@expm1-%167-loc s160)
            (@expm1-%160-pred s160))))
  :enable (@expm1-%160-expand-rev-as-@expm1-%167-rev @expm1-%167-rev @expm1-%167-loc @expm1-%167-val))
(defruled @expm1-%160-expand-rev-as-@expm1-%168-rev
  (equal (@expm1-%160-rev mem loc pred)
         (let ((s160 (list mem loc pred)))
           (@expm1-%168-rev
            (@expm1-m160.1-mem s160)
            (@expm1-%167-loc s160)
            (@expm1-%160-pred s160))))
  :enable (@expm1-%160-expand-rev-as-@expm1-m160.1-rev @expm1-m160.1-rev @expm1-m160.1-mem))
(defruled @expm1-%160-expand-rev-as-@expm1-%169-rev
  (equal (@expm1-%160-rev mem loc pred)
         (let ((s160 (list mem loc pred)))
           (@expm1-%169-rev
            (@expm1-m160.1-mem s160)
            (@expm1-%168-loc s160)
            (@expm1-%160-pred s160))))
  :enable (@expm1-%160-expand-rev-as-@expm1-%168-rev @expm1-%168-rev @expm1-%168-loc @expm1-%168-val))
(defruled @expm1-%160-expand-rev-as-@expm1-%170-rev
  (equal (@expm1-%160-rev mem loc pred)
         (let ((s160 (list mem loc pred)))
           (@expm1-%170-rev
            (@expm1-m160.1-mem s160)
            (@expm1-%169-loc s160)
            (@expm1-%160-pred s160))))
  :enable (@expm1-%160-expand-rev-as-@expm1-%169-rev @expm1-%169-rev @expm1-%169-loc @expm1-%169-val))
(defruled @expm1-%160-expand-rev-as-@expm1-m160.2-rev
  (equal (@expm1-%160-rev mem loc pred)
         (let ((s160 (list mem loc pred)))
           (@expm1-m160.2-rev
            (@expm1-m160.1-mem s160)
            (@expm1-%170-loc s160)
            (@expm1-%160-pred s160))))
  :enable (@expm1-%160-expand-rev-as-@expm1-%170-rev @expm1-%170-rev @expm1-%170-loc @expm1-%170-val))
(defruled @expm1-%160-expand-rev-as-@expm1-%171-rev
  (equal (@expm1-%160-rev mem loc pred)
         (let ((s160 (list mem loc pred)))
           (@expm1-%171-rev
            (@expm1-m160.2-mem s160)
            (@expm1-%170-loc s160)
            (@expm1-%160-pred s160))))
  :enable (@expm1-%160-expand-rev-as-@expm1-m160.2-rev @expm1-m160.2-rev @expm1-m160.2-mem))
(defruled @expm1-%160-expand-rev-as-@expm1-%172-rev
  (equal (@expm1-%160-rev mem loc pred)
         (let ((s160 (list mem loc pred)))
           (@expm1-%172-rev
            (@expm1-m160.2-mem s160)
            (@expm1-%171-loc s160)
            (@expm1-%160-pred s160))))
  :enable (@expm1-%160-expand-rev-as-@expm1-%171-rev @expm1-%171-rev @expm1-%171-loc @expm1-%171-val))
(defruled @expm1-%160-expand-rev-as-@expm1-succ160-rev
  (equal (@expm1-%160-rev mem loc pred)
         (let ((s160 (list mem loc pred)))
           (@expm1-succ160-rev
            (@expm1-m160.2-mem s160)
            (@expm1-%172-loc s160)
            (@expm1-%160-pred s160))))
  :enable (@expm1-%160-expand-rev-as-@expm1-%172-rev @expm1-%172-rev @expm1-%172-loc @expm1-%172-val))
(defruled @expm1-%160-expand-rev-as-fwd
  (equal (@expm1-%160-rev mem loc pred)
         (@expm1-%160-fwd mem loc pred))
  :enable (@expm1-%160-expand-rev-as-@expm1-succ160-rev @expm1-succ160-rev @expm1-succ160-lab @expm1-%160-fwd))

(defund @expm1-%160-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%161 (load-double (g '%2 loc) mem) loc))
    (loc (s '%162 (load-double (g '%e loc) mem) loc))
    (loc (s '%163 (load-double (g '%c loc) mem) loc))
    (loc (s '%164 (fsub-double (g '%162 loc) (g '%163 loc)) loc))
    (loc (s '%165 (fmul-double (g '%161 loc) (g '%164 loc)) loc))
    (loc (s '%166 (load-double (g '%c loc) mem) loc))
    (loc (s '%167 (fsub-double (g '%165 loc) (g '%166 loc)) loc))
    (mem (store-double (g '%167 loc) (g '%e loc) mem))
    (loc (s '%168 (load-double (g '%hxs loc) mem) loc))
    (loc (s '%169 (load-double (g '%e loc) mem) loc))
    (loc (s '%170 (fsub-double (g '%169 loc) (g '%168 loc)) loc))
    (mem (store-double (g '%170 loc) (g '%e loc) mem))
    (loc (s '%171 (load-i32 (g '%k loc) mem) loc))
    (loc (s '%172 (icmp-eq-i32 (g '%171 loc) -1) loc))
    (succ (case (g '%172 loc) (-1 '%173) (0 '%179))))
  (mv succ mem loc)))

(defund @expm1-%173-mem (s173)
  (car s173))
(defund @expm1-%173-loc (s173)
  (cadr s173))
(defund @expm1-%173-pred (s173)
  (caddr s173))
(defund @expm1-%174-val (s173)
  (load-double (g '%2 (@expm1-%173-loc s173)) (@expm1-%173-mem s173)))
(defund @expm1-%174-loc (s173)
  (s '%174 (@expm1-%174-val s173) (@expm1-%173-loc s173)))
(defund @expm1-%175-val (s173)
  (load-double (g '%e (@expm1-%174-loc s173)) (@expm1-%173-mem s173)))
(defund @expm1-%175-loc (s173)
  (s '%175 (@expm1-%175-val s173) (@expm1-%174-loc s173)))
(defund @expm1-%176-val (s173)
  (fsub-double (g '%174 (@expm1-%175-loc s173)) (g '%175 (@expm1-%175-loc s173))))
(defund @expm1-%176-loc (s173)
  (s '%176 (@expm1-%176-val s173) (@expm1-%175-loc s173)))
(defund @expm1-%177-val (s173)
  (fmul-double #x3fe0000000000000 (g '%176 (@expm1-%176-loc s173))))
(defund @expm1-%177-loc (s173)
  (s '%177 (@expm1-%177-val s173) (@expm1-%176-loc s173)))
(defund @expm1-%178-val (s173)
  (fsub-double (g '%177 (@expm1-%177-loc s173)) #x3fe0000000000000))
(defund @expm1-%178-loc (s173)
  (s '%178 (@expm1-%178-val s173) (@expm1-%177-loc s173)))
(defund @expm1-m173.1-mem (s173)
  (store-double (g '%178 (@expm1-%178-loc s173)) (g '%1 (@expm1-%178-loc s173)) (@expm1-%173-mem s173)))
(defund @expm1-succ173-lab (s173)
  (declare (ignore s173))
  '%258)

(defund @expm1-%173-fwd (mem loc pred)
  (let ((s173 (list mem loc pred)))
    (mv (@expm1-succ173-lab s173) (@expm1-m173.1-mem s173) (@expm1-%178-loc s173))))

(defund @expm1-succ173-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%258 mem loc))
(defund @expm1-m173.1-rev (mem loc pred)
  (@expm1-succ173-rev (store-double (g '%178 loc) (g '%1 loc) mem) loc pred))
(defund @expm1-%178-rev (mem loc pred)
  (@expm1-m173.1-rev mem (s '%178 (fsub-double (g '%177 loc) #x3fe0000000000000) loc) pred))
(defund @expm1-%177-rev (mem loc pred)
  (@expm1-%178-rev mem (s '%177 (fmul-double #x3fe0000000000000 (g '%176 loc)) loc) pred))
(defund @expm1-%176-rev (mem loc pred)
  (@expm1-%177-rev mem (s '%176 (fsub-double (g '%174 loc) (g '%175 loc)) loc) pred))
(defund @expm1-%175-rev (mem loc pred)
  (@expm1-%176-rev mem (s '%175 (load-double (g '%e loc) mem) loc) pred))
(defund @expm1-%174-rev (mem loc pred)
  (@expm1-%175-rev mem (s '%174 (load-double (g '%2 loc) mem) loc) pred))

(defund @expm1-%173-rev (mem loc pred)
  (@expm1-%174-rev mem loc pred))

(defruled @expm1-%173-expand-rev-as-@expm1-%174-rev
  (equal (@expm1-%173-rev mem loc pred)
         (let ((s173 (list mem loc pred)))
           (@expm1-%174-rev
            (@expm1-%173-mem s173)
            (@expm1-%173-loc s173)
            (@expm1-%173-pred s173))))
  :enable (@expm1-%173-rev @expm1-%173-mem @expm1-%173-loc @expm1-%173-pred))
(defruled @expm1-%173-expand-rev-as-@expm1-%175-rev
  (equal (@expm1-%173-rev mem loc pred)
         (let ((s173 (list mem loc pred)))
           (@expm1-%175-rev
            (@expm1-%173-mem s173)
            (@expm1-%174-loc s173)
            (@expm1-%173-pred s173))))
  :enable (@expm1-%173-expand-rev-as-@expm1-%174-rev @expm1-%174-rev @expm1-%174-loc @expm1-%174-val))
(defruled @expm1-%173-expand-rev-as-@expm1-%176-rev
  (equal (@expm1-%173-rev mem loc pred)
         (let ((s173 (list mem loc pred)))
           (@expm1-%176-rev
            (@expm1-%173-mem s173)
            (@expm1-%175-loc s173)
            (@expm1-%173-pred s173))))
  :enable (@expm1-%173-expand-rev-as-@expm1-%175-rev @expm1-%175-rev @expm1-%175-loc @expm1-%175-val))
(defruled @expm1-%173-expand-rev-as-@expm1-%177-rev
  (equal (@expm1-%173-rev mem loc pred)
         (let ((s173 (list mem loc pred)))
           (@expm1-%177-rev
            (@expm1-%173-mem s173)
            (@expm1-%176-loc s173)
            (@expm1-%173-pred s173))))
  :enable (@expm1-%173-expand-rev-as-@expm1-%176-rev @expm1-%176-rev @expm1-%176-loc @expm1-%176-val))
(defruled @expm1-%173-expand-rev-as-@expm1-%178-rev
  (equal (@expm1-%173-rev mem loc pred)
         (let ((s173 (list mem loc pred)))
           (@expm1-%178-rev
            (@expm1-%173-mem s173)
            (@expm1-%177-loc s173)
            (@expm1-%173-pred s173))))
  :enable (@expm1-%173-expand-rev-as-@expm1-%177-rev @expm1-%177-rev @expm1-%177-loc @expm1-%177-val))
(defruled @expm1-%173-expand-rev-as-@expm1-m173.1-rev
  (equal (@expm1-%173-rev mem loc pred)
         (let ((s173 (list mem loc pred)))
           (@expm1-m173.1-rev
            (@expm1-%173-mem s173)
            (@expm1-%178-loc s173)
            (@expm1-%173-pred s173))))
  :enable (@expm1-%173-expand-rev-as-@expm1-%178-rev @expm1-%178-rev @expm1-%178-loc @expm1-%178-val))
(defruled @expm1-%173-expand-rev-as-@expm1-succ173-rev
  (equal (@expm1-%173-rev mem loc pred)
         (let ((s173 (list mem loc pred)))
           (@expm1-succ173-rev
            (@expm1-m173.1-mem s173)
            (@expm1-%178-loc s173)
            (@expm1-%173-pred s173))))
  :enable (@expm1-%173-expand-rev-as-@expm1-m173.1-rev @expm1-m173.1-rev @expm1-m173.1-mem))
(defruled @expm1-%173-expand-rev-as-fwd
  (equal (@expm1-%173-rev mem loc pred)
         (@expm1-%173-fwd mem loc pred))
  :enable (@expm1-%173-expand-rev-as-@expm1-succ173-rev @expm1-succ173-rev @expm1-succ173-lab @expm1-%173-fwd))

(defund @expm1-%173-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%174 (load-double (g '%2 loc) mem) loc))
    (loc (s '%175 (load-double (g '%e loc) mem) loc))
    (loc (s '%176 (fsub-double (g '%174 loc) (g '%175 loc)) loc))
    (loc (s '%177 (fmul-double #x3fe0000000000000 (g '%176 loc)) loc))
    (loc (s '%178 (fsub-double (g '%177 loc) #x3fe0000000000000) loc))
    (mem (store-double (g '%178 loc) (g '%1 loc) mem))
    (succ '%258))
  (mv succ mem loc)))

(defund @expm1-%179-mem (s179)
  (car s179))
(defund @expm1-%179-loc (s179)
  (cadr s179))
(defund @expm1-%179-pred (s179)
  (caddr s179))
(defund @expm1-%180-val (s179)
  (load-i32 (g '%k (@expm1-%179-loc s179)) (@expm1-%179-mem s179)))
(defund @expm1-%180-loc (s179)
  (s '%180 (@expm1-%180-val s179) (@expm1-%179-loc s179)))
(defund @expm1-%181-val (s179)
  (icmp-eq-i32 (g '%180 (@expm1-%180-loc s179)) 1))
(defund @expm1-%181-loc (s179)
  (s '%181 (@expm1-%181-val s179) (@expm1-%180-loc s179)))
(defund @expm1-succ179-lab (s179)
  (case (g '%181 (@expm1-%181-loc s179)) (-1 '%182) (0 '%197)))

(defund @expm1-%179-fwd (mem loc pred)
  (let ((s179 (list mem loc pred)))
    (mv (@expm1-succ179-lab s179) (@expm1-%179-mem s179) (@expm1-%181-loc s179))))

(defund @expm1-succ179-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%181 loc) (-1 '%182) (0 '%197)) mem loc))
(defund @expm1-%181-rev (mem loc pred)
  (@expm1-succ179-rev mem (s '%181 (icmp-eq-i32 (g '%180 loc) 1) loc) pred))
(defund @expm1-%180-rev (mem loc pred)
  (@expm1-%181-rev mem (s '%180 (load-i32 (g '%k loc) mem) loc) pred))

(defund @expm1-%179-rev (mem loc pred)
  (@expm1-%180-rev mem loc pred))

(defruled @expm1-%179-expand-rev-as-@expm1-%180-rev
  (equal (@expm1-%179-rev mem loc pred)
         (let ((s179 (list mem loc pred)))
           (@expm1-%180-rev
            (@expm1-%179-mem s179)
            (@expm1-%179-loc s179)
            (@expm1-%179-pred s179))))
  :enable (@expm1-%179-rev @expm1-%179-mem @expm1-%179-loc @expm1-%179-pred))
(defruled @expm1-%179-expand-rev-as-@expm1-%181-rev
  (equal (@expm1-%179-rev mem loc pred)
         (let ((s179 (list mem loc pred)))
           (@expm1-%181-rev
            (@expm1-%179-mem s179)
            (@expm1-%180-loc s179)
            (@expm1-%179-pred s179))))
  :enable (@expm1-%179-expand-rev-as-@expm1-%180-rev @expm1-%180-rev @expm1-%180-loc @expm1-%180-val))
(defruled @expm1-%179-expand-rev-as-@expm1-succ179-rev
  (equal (@expm1-%179-rev mem loc pred)
         (let ((s179 (list mem loc pred)))
           (@expm1-succ179-rev
            (@expm1-%179-mem s179)
            (@expm1-%181-loc s179)
            (@expm1-%179-pred s179))))
  :enable (@expm1-%179-expand-rev-as-@expm1-%181-rev @expm1-%181-rev @expm1-%181-loc @expm1-%181-val))
(defruled @expm1-%179-expand-rev-as-fwd
  (equal (@expm1-%179-rev mem loc pred)
         (@expm1-%179-fwd mem loc pred))
  :enable (@expm1-%179-expand-rev-as-@expm1-succ179-rev @expm1-succ179-rev @expm1-succ179-lab @expm1-%179-fwd))

(defund @expm1-%179-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%180 (load-i32 (g '%k loc) mem) loc))
    (loc (s '%181 (icmp-eq-i32 (g '%180 loc) 1) loc))
    (succ (case (g '%181 loc) (-1 '%182) (0 '%197))))
  (mv succ mem loc)))

(defund @expm1-%182-mem (s182)
  (car s182))
(defund @expm1-%182-loc (s182)
  (cadr s182))
(defund @expm1-%182-pred (s182)
  (caddr s182))
(defund @expm1-%183-val (s182)
  (load-double (g '%2 (@expm1-%182-loc s182)) (@expm1-%182-mem s182)))
(defund @expm1-%183-loc (s182)
  (s '%183 (@expm1-%183-val s182) (@expm1-%182-loc s182)))
(defund @expm1-%184-val (s182)
  (fcmp-olt-double (g '%183 (@expm1-%183-loc s182)) #xbfd0000000000000))
(defund @expm1-%184-loc (s182)
  (s '%184 (@expm1-%184-val s182) (@expm1-%183-loc s182)))
(defund @expm1-succ182-lab (s182)
  (case (g '%184 (@expm1-%184-loc s182)) (-1 '%185) (0 '%191)))

(defund @expm1-%182-fwd (mem loc pred)
  (let ((s182 (list mem loc pred)))
    (mv (@expm1-succ182-lab s182) (@expm1-%182-mem s182) (@expm1-%184-loc s182))))

(defund @expm1-succ182-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%184 loc) (-1 '%185) (0 '%191)) mem loc))
(defund @expm1-%184-rev (mem loc pred)
  (@expm1-succ182-rev mem (s '%184 (fcmp-olt-double (g '%183 loc) #xbfd0000000000000) loc) pred))
(defund @expm1-%183-rev (mem loc pred)
  (@expm1-%184-rev mem (s '%183 (load-double (g '%2 loc) mem) loc) pred))

(defund @expm1-%182-rev (mem loc pred)
  (@expm1-%183-rev mem loc pred))

(defruled @expm1-%182-expand-rev-as-@expm1-%183-rev
  (equal (@expm1-%182-rev mem loc pred)
         (let ((s182 (list mem loc pred)))
           (@expm1-%183-rev
            (@expm1-%182-mem s182)
            (@expm1-%182-loc s182)
            (@expm1-%182-pred s182))))
  :enable (@expm1-%182-rev @expm1-%182-mem @expm1-%182-loc @expm1-%182-pred))
(defruled @expm1-%182-expand-rev-as-@expm1-%184-rev
  (equal (@expm1-%182-rev mem loc pred)
         (let ((s182 (list mem loc pred)))
           (@expm1-%184-rev
            (@expm1-%182-mem s182)
            (@expm1-%183-loc s182)
            (@expm1-%182-pred s182))))
  :enable (@expm1-%182-expand-rev-as-@expm1-%183-rev @expm1-%183-rev @expm1-%183-loc @expm1-%183-val))
(defruled @expm1-%182-expand-rev-as-@expm1-succ182-rev
  (equal (@expm1-%182-rev mem loc pred)
         (let ((s182 (list mem loc pred)))
           (@expm1-succ182-rev
            (@expm1-%182-mem s182)
            (@expm1-%184-loc s182)
            (@expm1-%182-pred s182))))
  :enable (@expm1-%182-expand-rev-as-@expm1-%184-rev @expm1-%184-rev @expm1-%184-loc @expm1-%184-val))
(defruled @expm1-%182-expand-rev-as-fwd
  (equal (@expm1-%182-rev mem loc pred)
         (@expm1-%182-fwd mem loc pred))
  :enable (@expm1-%182-expand-rev-as-@expm1-succ182-rev @expm1-succ182-rev @expm1-succ182-lab @expm1-%182-fwd))

(defund @expm1-%182-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%183 (load-double (g '%2 loc) mem) loc))
    (loc (s '%184 (fcmp-olt-double (g '%183 loc) #xbfd0000000000000) loc))
    (succ (case (g '%184 loc) (-1 '%185) (0 '%191))))
  (mv succ mem loc)))

(defund @expm1-%185-mem (s185)
  (car s185))
(defund @expm1-%185-loc (s185)
  (cadr s185))
(defund @expm1-%185-pred (s185)
  (caddr s185))
(defund @expm1-%186-val (s185)
  (load-double (g '%e (@expm1-%185-loc s185)) (@expm1-%185-mem s185)))
(defund @expm1-%186-loc (s185)
  (s '%186 (@expm1-%186-val s185) (@expm1-%185-loc s185)))
(defund @expm1-%187-val (s185)
  (load-double (g '%2 (@expm1-%186-loc s185)) (@expm1-%185-mem s185)))
(defund @expm1-%187-loc (s185)
  (s '%187 (@expm1-%187-val s185) (@expm1-%186-loc s185)))
(defund @expm1-%188-val (s185)
  (fadd-double (g '%187 (@expm1-%187-loc s185)) #x3fe0000000000000))
(defund @expm1-%188-loc (s185)
  (s '%188 (@expm1-%188-val s185) (@expm1-%187-loc s185)))
(defund @expm1-%189-val (s185)
  (fsub-double (g '%186 (@expm1-%188-loc s185)) (g '%188 (@expm1-%188-loc s185))))
(defund @expm1-%189-loc (s185)
  (s '%189 (@expm1-%189-val s185) (@expm1-%188-loc s185)))
(defund @expm1-%190-val (s185)
  (fmul-double #xc000000000000000 (g '%189 (@expm1-%189-loc s185))))
(defund @expm1-%190-loc (s185)
  (s '%190 (@expm1-%190-val s185) (@expm1-%189-loc s185)))
(defund @expm1-m185.1-mem (s185)
  (store-double (g '%190 (@expm1-%190-loc s185)) (g '%1 (@expm1-%190-loc s185)) (@expm1-%185-mem s185)))
(defund @expm1-succ185-lab (s185)
  (declare (ignore s185))
  '%258)

(defund @expm1-%185-fwd (mem loc pred)
  (let ((s185 (list mem loc pred)))
    (mv (@expm1-succ185-lab s185) (@expm1-m185.1-mem s185) (@expm1-%190-loc s185))))

(defund @expm1-succ185-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%258 mem loc))
(defund @expm1-m185.1-rev (mem loc pred)
  (@expm1-succ185-rev (store-double (g '%190 loc) (g '%1 loc) mem) loc pred))
(defund @expm1-%190-rev (mem loc pred)
  (@expm1-m185.1-rev mem (s '%190 (fmul-double #xc000000000000000 (g '%189 loc)) loc) pred))
(defund @expm1-%189-rev (mem loc pred)
  (@expm1-%190-rev mem (s '%189 (fsub-double (g '%186 loc) (g '%188 loc)) loc) pred))
(defund @expm1-%188-rev (mem loc pred)
  (@expm1-%189-rev mem (s '%188 (fadd-double (g '%187 loc) #x3fe0000000000000) loc) pred))
(defund @expm1-%187-rev (mem loc pred)
  (@expm1-%188-rev mem (s '%187 (load-double (g '%2 loc) mem) loc) pred))
(defund @expm1-%186-rev (mem loc pred)
  (@expm1-%187-rev mem (s '%186 (load-double (g '%e loc) mem) loc) pred))

(defund @expm1-%185-rev (mem loc pred)
  (@expm1-%186-rev mem loc pred))

(defruled @expm1-%185-expand-rev-as-@expm1-%186-rev
  (equal (@expm1-%185-rev mem loc pred)
         (let ((s185 (list mem loc pred)))
           (@expm1-%186-rev
            (@expm1-%185-mem s185)
            (@expm1-%185-loc s185)
            (@expm1-%185-pred s185))))
  :enable (@expm1-%185-rev @expm1-%185-mem @expm1-%185-loc @expm1-%185-pred))
(defruled @expm1-%185-expand-rev-as-@expm1-%187-rev
  (equal (@expm1-%185-rev mem loc pred)
         (let ((s185 (list mem loc pred)))
           (@expm1-%187-rev
            (@expm1-%185-mem s185)
            (@expm1-%186-loc s185)
            (@expm1-%185-pred s185))))
  :enable (@expm1-%185-expand-rev-as-@expm1-%186-rev @expm1-%186-rev @expm1-%186-loc @expm1-%186-val))
(defruled @expm1-%185-expand-rev-as-@expm1-%188-rev
  (equal (@expm1-%185-rev mem loc pred)
         (let ((s185 (list mem loc pred)))
           (@expm1-%188-rev
            (@expm1-%185-mem s185)
            (@expm1-%187-loc s185)
            (@expm1-%185-pred s185))))
  :enable (@expm1-%185-expand-rev-as-@expm1-%187-rev @expm1-%187-rev @expm1-%187-loc @expm1-%187-val))
(defruled @expm1-%185-expand-rev-as-@expm1-%189-rev
  (equal (@expm1-%185-rev mem loc pred)
         (let ((s185 (list mem loc pred)))
           (@expm1-%189-rev
            (@expm1-%185-mem s185)
            (@expm1-%188-loc s185)
            (@expm1-%185-pred s185))))
  :enable (@expm1-%185-expand-rev-as-@expm1-%188-rev @expm1-%188-rev @expm1-%188-loc @expm1-%188-val))
(defruled @expm1-%185-expand-rev-as-@expm1-%190-rev
  (equal (@expm1-%185-rev mem loc pred)
         (let ((s185 (list mem loc pred)))
           (@expm1-%190-rev
            (@expm1-%185-mem s185)
            (@expm1-%189-loc s185)
            (@expm1-%185-pred s185))))
  :enable (@expm1-%185-expand-rev-as-@expm1-%189-rev @expm1-%189-rev @expm1-%189-loc @expm1-%189-val))
(defruled @expm1-%185-expand-rev-as-@expm1-m185.1-rev
  (equal (@expm1-%185-rev mem loc pred)
         (let ((s185 (list mem loc pred)))
           (@expm1-m185.1-rev
            (@expm1-%185-mem s185)
            (@expm1-%190-loc s185)
            (@expm1-%185-pred s185))))
  :enable (@expm1-%185-expand-rev-as-@expm1-%190-rev @expm1-%190-rev @expm1-%190-loc @expm1-%190-val))
(defruled @expm1-%185-expand-rev-as-@expm1-succ185-rev
  (equal (@expm1-%185-rev mem loc pred)
         (let ((s185 (list mem loc pred)))
           (@expm1-succ185-rev
            (@expm1-m185.1-mem s185)
            (@expm1-%190-loc s185)
            (@expm1-%185-pred s185))))
  :enable (@expm1-%185-expand-rev-as-@expm1-m185.1-rev @expm1-m185.1-rev @expm1-m185.1-mem))
(defruled @expm1-%185-expand-rev-as-fwd
  (equal (@expm1-%185-rev mem loc pred)
         (@expm1-%185-fwd mem loc pred))
  :enable (@expm1-%185-expand-rev-as-@expm1-succ185-rev @expm1-succ185-rev @expm1-succ185-lab @expm1-%185-fwd))

(defund @expm1-%185-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%186 (load-double (g '%e loc) mem) loc))
    (loc (s '%187 (load-double (g '%2 loc) mem) loc))
    (loc (s '%188 (fadd-double (g '%187 loc) #x3fe0000000000000) loc))
    (loc (s '%189 (fsub-double (g '%186 loc) (g '%188 loc)) loc))
    (loc (s '%190 (fmul-double #xc000000000000000 (g '%189 loc)) loc))
    (mem (store-double (g '%190 loc) (g '%1 loc) mem))
    (succ '%258))
  (mv succ mem loc)))

(defund @expm1-%191-mem (s191)
  (car s191))
(defund @expm1-%191-loc (s191)
  (cadr s191))
(defund @expm1-%191-pred (s191)
  (caddr s191))
(defund @expm1-%192-val (s191)
  (load-double (g '%2 (@expm1-%191-loc s191)) (@expm1-%191-mem s191)))
(defund @expm1-%192-loc (s191)
  (s '%192 (@expm1-%192-val s191) (@expm1-%191-loc s191)))
(defund @expm1-%193-val (s191)
  (load-double (g '%e (@expm1-%192-loc s191)) (@expm1-%191-mem s191)))
(defund @expm1-%193-loc (s191)
  (s '%193 (@expm1-%193-val s191) (@expm1-%192-loc s191)))
(defund @expm1-%194-val (s191)
  (fsub-double (g '%192 (@expm1-%193-loc s191)) (g '%193 (@expm1-%193-loc s191))))
(defund @expm1-%194-loc (s191)
  (s '%194 (@expm1-%194-val s191) (@expm1-%193-loc s191)))
(defund @expm1-%195-val (s191)
  (fmul-double #x4000000000000000 (g '%194 (@expm1-%194-loc s191))))
(defund @expm1-%195-loc (s191)
  (s '%195 (@expm1-%195-val s191) (@expm1-%194-loc s191)))
(defund @expm1-%196-val (s191)
  (fadd-double #x3ff0000000000000 (g '%195 (@expm1-%195-loc s191))))
(defund @expm1-%196-loc (s191)
  (s '%196 (@expm1-%196-val s191) (@expm1-%195-loc s191)))
(defund @expm1-m191.1-mem (s191)
  (store-double (g '%196 (@expm1-%196-loc s191)) (g '%1 (@expm1-%196-loc s191)) (@expm1-%191-mem s191)))
(defund @expm1-succ191-lab (s191)
  (declare (ignore s191))
  '%258)

(defund @expm1-%191-fwd (mem loc pred)
  (let ((s191 (list mem loc pred)))
    (mv (@expm1-succ191-lab s191) (@expm1-m191.1-mem s191) (@expm1-%196-loc s191))))

(defund @expm1-succ191-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%258 mem loc))
(defund @expm1-m191.1-rev (mem loc pred)
  (@expm1-succ191-rev (store-double (g '%196 loc) (g '%1 loc) mem) loc pred))
(defund @expm1-%196-rev (mem loc pred)
  (@expm1-m191.1-rev mem (s '%196 (fadd-double #x3ff0000000000000 (g '%195 loc)) loc) pred))
(defund @expm1-%195-rev (mem loc pred)
  (@expm1-%196-rev mem (s '%195 (fmul-double #x4000000000000000 (g '%194 loc)) loc) pred))
(defund @expm1-%194-rev (mem loc pred)
  (@expm1-%195-rev mem (s '%194 (fsub-double (g '%192 loc) (g '%193 loc)) loc) pred))
(defund @expm1-%193-rev (mem loc pred)
  (@expm1-%194-rev mem (s '%193 (load-double (g '%e loc) mem) loc) pred))
(defund @expm1-%192-rev (mem loc pred)
  (@expm1-%193-rev mem (s '%192 (load-double (g '%2 loc) mem) loc) pred))

(defund @expm1-%191-rev (mem loc pred)
  (@expm1-%192-rev mem loc pred))

(defruled @expm1-%191-expand-rev-as-@expm1-%192-rev
  (equal (@expm1-%191-rev mem loc pred)
         (let ((s191 (list mem loc pred)))
           (@expm1-%192-rev
            (@expm1-%191-mem s191)
            (@expm1-%191-loc s191)
            (@expm1-%191-pred s191))))
  :enable (@expm1-%191-rev @expm1-%191-mem @expm1-%191-loc @expm1-%191-pred))
(defruled @expm1-%191-expand-rev-as-@expm1-%193-rev
  (equal (@expm1-%191-rev mem loc pred)
         (let ((s191 (list mem loc pred)))
           (@expm1-%193-rev
            (@expm1-%191-mem s191)
            (@expm1-%192-loc s191)
            (@expm1-%191-pred s191))))
  :enable (@expm1-%191-expand-rev-as-@expm1-%192-rev @expm1-%192-rev @expm1-%192-loc @expm1-%192-val))
(defruled @expm1-%191-expand-rev-as-@expm1-%194-rev
  (equal (@expm1-%191-rev mem loc pred)
         (let ((s191 (list mem loc pred)))
           (@expm1-%194-rev
            (@expm1-%191-mem s191)
            (@expm1-%193-loc s191)
            (@expm1-%191-pred s191))))
  :enable (@expm1-%191-expand-rev-as-@expm1-%193-rev @expm1-%193-rev @expm1-%193-loc @expm1-%193-val))
(defruled @expm1-%191-expand-rev-as-@expm1-%195-rev
  (equal (@expm1-%191-rev mem loc pred)
         (let ((s191 (list mem loc pred)))
           (@expm1-%195-rev
            (@expm1-%191-mem s191)
            (@expm1-%194-loc s191)
            (@expm1-%191-pred s191))))
  :enable (@expm1-%191-expand-rev-as-@expm1-%194-rev @expm1-%194-rev @expm1-%194-loc @expm1-%194-val))
(defruled @expm1-%191-expand-rev-as-@expm1-%196-rev
  (equal (@expm1-%191-rev mem loc pred)
         (let ((s191 (list mem loc pred)))
           (@expm1-%196-rev
            (@expm1-%191-mem s191)
            (@expm1-%195-loc s191)
            (@expm1-%191-pred s191))))
  :enable (@expm1-%191-expand-rev-as-@expm1-%195-rev @expm1-%195-rev @expm1-%195-loc @expm1-%195-val))
(defruled @expm1-%191-expand-rev-as-@expm1-m191.1-rev
  (equal (@expm1-%191-rev mem loc pred)
         (let ((s191 (list mem loc pred)))
           (@expm1-m191.1-rev
            (@expm1-%191-mem s191)
            (@expm1-%196-loc s191)
            (@expm1-%191-pred s191))))
  :enable (@expm1-%191-expand-rev-as-@expm1-%196-rev @expm1-%196-rev @expm1-%196-loc @expm1-%196-val))
(defruled @expm1-%191-expand-rev-as-@expm1-succ191-rev
  (equal (@expm1-%191-rev mem loc pred)
         (let ((s191 (list mem loc pred)))
           (@expm1-succ191-rev
            (@expm1-m191.1-mem s191)
            (@expm1-%196-loc s191)
            (@expm1-%191-pred s191))))
  :enable (@expm1-%191-expand-rev-as-@expm1-m191.1-rev @expm1-m191.1-rev @expm1-m191.1-mem))
(defruled @expm1-%191-expand-rev-as-fwd
  (equal (@expm1-%191-rev mem loc pred)
         (@expm1-%191-fwd mem loc pred))
  :enable (@expm1-%191-expand-rev-as-@expm1-succ191-rev @expm1-succ191-rev @expm1-succ191-lab @expm1-%191-fwd))

(defund @expm1-%191-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%192 (load-double (g '%2 loc) mem) loc))
    (loc (s '%193 (load-double (g '%e loc) mem) loc))
    (loc (s '%194 (fsub-double (g '%192 loc) (g '%193 loc)) loc))
    (loc (s '%195 (fmul-double #x4000000000000000 (g '%194 loc)) loc))
    (loc (s '%196 (fadd-double #x3ff0000000000000 (g '%195 loc)) loc))
    (mem (store-double (g '%196 loc) (g '%1 loc) mem))
    (succ '%258))
  (mv succ mem loc)))

(defund @expm1-%197-mem (s197)
  (car s197))
(defund @expm1-%197-loc (s197)
  (cadr s197))
(defund @expm1-%197-pred (s197)
  (caddr s197))
(defund @expm1-%198-val (s197)
  (load-i32 (g '%k (@expm1-%197-loc s197)) (@expm1-%197-mem s197)))
(defund @expm1-%198-loc (s197)
  (s '%198 (@expm1-%198-val s197) (@expm1-%197-loc s197)))
(defund @expm1-%199-val (s197)
  (icmp-sle-i32 (g '%198 (@expm1-%198-loc s197)) -2))
(defund @expm1-%199-loc (s197)
  (s '%199 (@expm1-%199-val s197) (@expm1-%198-loc s197)))
(defund @expm1-succ197-lab (s197)
  (case (g '%199 (@expm1-%199-loc s197)) (-1 '%203) (0 '%200)))

(defund @expm1-%197-fwd (mem loc pred)
  (let ((s197 (list mem loc pred)))
    (mv (@expm1-succ197-lab s197) (@expm1-%197-mem s197) (@expm1-%199-loc s197))))

(defund @expm1-succ197-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%199 loc) (-1 '%203) (0 '%200)) mem loc))
(defund @expm1-%199-rev (mem loc pred)
  (@expm1-succ197-rev mem (s '%199 (icmp-sle-i32 (g '%198 loc) -2) loc) pred))
(defund @expm1-%198-rev (mem loc pred)
  (@expm1-%199-rev mem (s '%198 (load-i32 (g '%k loc) mem) loc) pred))

(defund @expm1-%197-rev (mem loc pred)
  (@expm1-%198-rev mem loc pred))

(defruled @expm1-%197-expand-rev-as-@expm1-%198-rev
  (equal (@expm1-%197-rev mem loc pred)
         (let ((s197 (list mem loc pred)))
           (@expm1-%198-rev
            (@expm1-%197-mem s197)
            (@expm1-%197-loc s197)
            (@expm1-%197-pred s197))))
  :enable (@expm1-%197-rev @expm1-%197-mem @expm1-%197-loc @expm1-%197-pred))
(defruled @expm1-%197-expand-rev-as-@expm1-%199-rev
  (equal (@expm1-%197-rev mem loc pred)
         (let ((s197 (list mem loc pred)))
           (@expm1-%199-rev
            (@expm1-%197-mem s197)
            (@expm1-%198-loc s197)
            (@expm1-%197-pred s197))))
  :enable (@expm1-%197-expand-rev-as-@expm1-%198-rev @expm1-%198-rev @expm1-%198-loc @expm1-%198-val))
(defruled @expm1-%197-expand-rev-as-@expm1-succ197-rev
  (equal (@expm1-%197-rev mem loc pred)
         (let ((s197 (list mem loc pred)))
           (@expm1-succ197-rev
            (@expm1-%197-mem s197)
            (@expm1-%199-loc s197)
            (@expm1-%197-pred s197))))
  :enable (@expm1-%197-expand-rev-as-@expm1-%199-rev @expm1-%199-rev @expm1-%199-loc @expm1-%199-val))
(defruled @expm1-%197-expand-rev-as-fwd
  (equal (@expm1-%197-rev mem loc pred)
         (@expm1-%197-fwd mem loc pred))
  :enable (@expm1-%197-expand-rev-as-@expm1-succ197-rev @expm1-succ197-rev @expm1-succ197-lab @expm1-%197-fwd))

(defund @expm1-%197-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%198 (load-i32 (g '%k loc) mem) loc))
    (loc (s '%199 (icmp-sle-i32 (g '%198 loc) -2) loc))
    (succ (case (g '%199 loc) (-1 '%203) (0 '%200))))
  (mv succ mem loc)))

(defund @expm1-%200-mem (s200)
  (car s200))
(defund @expm1-%200-loc (s200)
  (cadr s200))
(defund @expm1-%200-pred (s200)
  (caddr s200))
(defund @expm1-%201-val (s200)
  (load-i32 (g '%k (@expm1-%200-loc s200)) (@expm1-%200-mem s200)))
(defund @expm1-%201-loc (s200)
  (s '%201 (@expm1-%201-val s200) (@expm1-%200-loc s200)))
(defund @expm1-%202-val (s200)
  (icmp-sgt-i32 (g '%201 (@expm1-%201-loc s200)) 56))
(defund @expm1-%202-loc (s200)
  (s '%202 (@expm1-%202-val s200) (@expm1-%201-loc s200)))
(defund @expm1-succ200-lab (s200)
  (case (g '%202 (@expm1-%202-loc s200)) (-1 '%203) (0 '%216)))

(defund @expm1-%200-fwd (mem loc pred)
  (let ((s200 (list mem loc pred)))
    (mv (@expm1-succ200-lab s200) (@expm1-%200-mem s200) (@expm1-%202-loc s200))))

(defund @expm1-succ200-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%202 loc) (-1 '%203) (0 '%216)) mem loc))
(defund @expm1-%202-rev (mem loc pred)
  (@expm1-succ200-rev mem (s '%202 (icmp-sgt-i32 (g '%201 loc) 56) loc) pred))
(defund @expm1-%201-rev (mem loc pred)
  (@expm1-%202-rev mem (s '%201 (load-i32 (g '%k loc) mem) loc) pred))

(defund @expm1-%200-rev (mem loc pred)
  (@expm1-%201-rev mem loc pred))

(defruled @expm1-%200-expand-rev-as-@expm1-%201-rev
  (equal (@expm1-%200-rev mem loc pred)
         (let ((s200 (list mem loc pred)))
           (@expm1-%201-rev
            (@expm1-%200-mem s200)
            (@expm1-%200-loc s200)
            (@expm1-%200-pred s200))))
  :enable (@expm1-%200-rev @expm1-%200-mem @expm1-%200-loc @expm1-%200-pred))
(defruled @expm1-%200-expand-rev-as-@expm1-%202-rev
  (equal (@expm1-%200-rev mem loc pred)
         (let ((s200 (list mem loc pred)))
           (@expm1-%202-rev
            (@expm1-%200-mem s200)
            (@expm1-%201-loc s200)
            (@expm1-%200-pred s200))))
  :enable (@expm1-%200-expand-rev-as-@expm1-%201-rev @expm1-%201-rev @expm1-%201-loc @expm1-%201-val))
(defruled @expm1-%200-expand-rev-as-@expm1-succ200-rev
  (equal (@expm1-%200-rev mem loc pred)
         (let ((s200 (list mem loc pred)))
           (@expm1-succ200-rev
            (@expm1-%200-mem s200)
            (@expm1-%202-loc s200)
            (@expm1-%200-pred s200))))
  :enable (@expm1-%200-expand-rev-as-@expm1-%202-rev @expm1-%202-rev @expm1-%202-loc @expm1-%202-val))
(defruled @expm1-%200-expand-rev-as-fwd
  (equal (@expm1-%200-rev mem loc pred)
         (@expm1-%200-fwd mem loc pred))
  :enable (@expm1-%200-expand-rev-as-@expm1-succ200-rev @expm1-succ200-rev @expm1-succ200-lab @expm1-%200-fwd))

(defund @expm1-%200-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%201 (load-i32 (g '%k loc) mem) loc))
    (loc (s '%202 (icmp-sgt-i32 (g '%201 loc) 56) loc))
    (succ (case (g '%202 loc) (-1 '%203) (0 '%216))))
  (mv succ mem loc)))

(defund @expm1-%203-mem (s203)
  (car s203))
(defund @expm1-%203-loc (s203)
  (cadr s203))
(defund @expm1-%203-pred (s203)
  (caddr s203))
(defund @expm1-%204-val (s203)
  (load-double (g '%e (@expm1-%203-loc s203)) (@expm1-%203-mem s203)))
(defund @expm1-%204-loc (s203)
  (s '%204 (@expm1-%204-val s203) (@expm1-%203-loc s203)))
(defund @expm1-%205-val (s203)
  (load-double (g '%2 (@expm1-%204-loc s203)) (@expm1-%203-mem s203)))
(defund @expm1-%205-loc (s203)
  (s '%205 (@expm1-%205-val s203) (@expm1-%204-loc s203)))
(defund @expm1-%206-val (s203)
  (fsub-double (g '%204 (@expm1-%205-loc s203)) (g '%205 (@expm1-%205-loc s203))))
(defund @expm1-%206-loc (s203)
  (s '%206 (@expm1-%206-val s203) (@expm1-%205-loc s203)))
(defund @expm1-%207-val (s203)
  (fsub-double #x3ff0000000000000 (g '%206 (@expm1-%206-loc s203))))
(defund @expm1-%207-loc (s203)
  (s '%207 (@expm1-%207-val s203) (@expm1-%206-loc s203)))
(defund @expm1-m203.1-mem (s203)
  (store-double (g '%207 (@expm1-%207-loc s203)) (g '%y (@expm1-%207-loc s203)) (@expm1-%203-mem s203)))
(defund @expm1-%208-val (s203)
  (load-i32 (g '%k (@expm1-%207-loc s203)) (@expm1-m203.1-mem s203)))
(defund @expm1-%208-loc (s203)
  (s '%208 (@expm1-%208-val s203) (@expm1-%207-loc s203)))
(defund @expm1-%209-val (s203)
  (shl-i32 (g '%208 (@expm1-%208-loc s203)) 20))
(defund @expm1-%209-loc (s203)
  (s '%209 (@expm1-%209-val s203) (@expm1-%208-loc s203)))
(defund @expm1-%210-val (s203)
  (bitcast-double*-to-i32* (g '%y (@expm1-%209-loc s203))))
(defund @expm1-%210-loc (s203)
  (s '%210 (@expm1-%210-val s203) (@expm1-%209-loc s203)))
(defund @expm1-%211-val (s203)
  (getelementptr-i32 (g '%210 (@expm1-%210-loc s203)) 1))
(defund @expm1-%211-loc (s203)
  (s '%211 (@expm1-%211-val s203) (@expm1-%210-loc s203)))
(defund @expm1-%212-val (s203)
  (load-i32 (g '%211 (@expm1-%211-loc s203)) (@expm1-m203.1-mem s203)))
(defund @expm1-%212-loc (s203)
  (s '%212 (@expm1-%212-val s203) (@expm1-%211-loc s203)))
(defund @expm1-%213-val (s203)
  (add-i32 (g '%212 (@expm1-%212-loc s203)) (g '%209 (@expm1-%212-loc s203))))
(defund @expm1-%213-loc (s203)
  (s '%213 (@expm1-%213-val s203) (@expm1-%212-loc s203)))
(defund @expm1-m203.2-mem (s203)
  (store-i32 (g '%213 (@expm1-%213-loc s203)) (g '%211 (@expm1-%213-loc s203)) (@expm1-m203.1-mem s203)))
(defund @expm1-%214-val (s203)
  (load-double (g '%y (@expm1-%213-loc s203)) (@expm1-m203.2-mem s203)))
(defund @expm1-%214-loc (s203)
  (s '%214 (@expm1-%214-val s203) (@expm1-%213-loc s203)))
(defund @expm1-%215-val (s203)
  (fsub-double (g '%214 (@expm1-%214-loc s203)) #x3ff0000000000000))
(defund @expm1-%215-loc (s203)
  (s '%215 (@expm1-%215-val s203) (@expm1-%214-loc s203)))
(defund @expm1-m203.3-mem (s203)
  (store-double (g '%215 (@expm1-%215-loc s203)) (g '%1 (@expm1-%215-loc s203)) (@expm1-m203.2-mem s203)))
(defund @expm1-succ203-lab (s203)
  (declare (ignore s203))
  '%258)

(defund @expm1-%203-fwd (mem loc pred)
  (let ((s203 (list mem loc pred)))
    (mv (@expm1-succ203-lab s203) (@expm1-m203.3-mem s203) (@expm1-%215-loc s203))))

(defund @expm1-succ203-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%258 mem loc))
(defund @expm1-m203.3-rev (mem loc pred)
  (@expm1-succ203-rev (store-double (g '%215 loc) (g '%1 loc) mem) loc pred))
(defund @expm1-%215-rev (mem loc pred)
  (@expm1-m203.3-rev mem (s '%215 (fsub-double (g '%214 loc) #x3ff0000000000000) loc) pred))
(defund @expm1-%214-rev (mem loc pred)
  (@expm1-%215-rev mem (s '%214 (load-double (g '%y loc) mem) loc) pred))
(defund @expm1-m203.2-rev (mem loc pred)
  (@expm1-%214-rev (store-i32 (g '%213 loc) (g '%211 loc) mem) loc pred))
(defund @expm1-%213-rev (mem loc pred)
  (@expm1-m203.2-rev mem (s '%213 (add-i32 (g '%212 loc) (g '%209 loc)) loc) pred))
(defund @expm1-%212-rev (mem loc pred)
  (@expm1-%213-rev mem (s '%212 (load-i32 (g '%211 loc) mem) loc) pred))
(defund @expm1-%211-rev (mem loc pred)
  (@expm1-%212-rev mem (s '%211 (getelementptr-i32 (g '%210 loc) 1) loc) pred))
(defund @expm1-%210-rev (mem loc pred)
  (@expm1-%211-rev mem (s '%210 (bitcast-double*-to-i32* (g '%y loc)) loc) pred))
(defund @expm1-%209-rev (mem loc pred)
  (@expm1-%210-rev mem (s '%209 (shl-i32 (g '%208 loc) 20) loc) pred))
(defund @expm1-%208-rev (mem loc pred)
  (@expm1-%209-rev mem (s '%208 (load-i32 (g '%k loc) mem) loc) pred))
(defund @expm1-m203.1-rev (mem loc pred)
  (@expm1-%208-rev (store-double (g '%207 loc) (g '%y loc) mem) loc pred))
(defund @expm1-%207-rev (mem loc pred)
  (@expm1-m203.1-rev mem (s '%207 (fsub-double #x3ff0000000000000 (g '%206 loc)) loc) pred))
(defund @expm1-%206-rev (mem loc pred)
  (@expm1-%207-rev mem (s '%206 (fsub-double (g '%204 loc) (g '%205 loc)) loc) pred))
(defund @expm1-%205-rev (mem loc pred)
  (@expm1-%206-rev mem (s '%205 (load-double (g '%2 loc) mem) loc) pred))
(defund @expm1-%204-rev (mem loc pred)
  (@expm1-%205-rev mem (s '%204 (load-double (g '%e loc) mem) loc) pred))

(defund @expm1-%203-rev (mem loc pred)
  (@expm1-%204-rev mem loc pred))

(defruled @expm1-%203-expand-rev-as-@expm1-%204-rev
  (equal (@expm1-%203-rev mem loc pred)
         (let ((s203 (list mem loc pred)))
           (@expm1-%204-rev
            (@expm1-%203-mem s203)
            (@expm1-%203-loc s203)
            (@expm1-%203-pred s203))))
  :enable (@expm1-%203-rev @expm1-%203-mem @expm1-%203-loc @expm1-%203-pred))
(defruled @expm1-%203-expand-rev-as-@expm1-%205-rev
  (equal (@expm1-%203-rev mem loc pred)
         (let ((s203 (list mem loc pred)))
           (@expm1-%205-rev
            (@expm1-%203-mem s203)
            (@expm1-%204-loc s203)
            (@expm1-%203-pred s203))))
  :enable (@expm1-%203-expand-rev-as-@expm1-%204-rev @expm1-%204-rev @expm1-%204-loc @expm1-%204-val))
(defruled @expm1-%203-expand-rev-as-@expm1-%206-rev
  (equal (@expm1-%203-rev mem loc pred)
         (let ((s203 (list mem loc pred)))
           (@expm1-%206-rev
            (@expm1-%203-mem s203)
            (@expm1-%205-loc s203)
            (@expm1-%203-pred s203))))
  :enable (@expm1-%203-expand-rev-as-@expm1-%205-rev @expm1-%205-rev @expm1-%205-loc @expm1-%205-val))
(defruled @expm1-%203-expand-rev-as-@expm1-%207-rev
  (equal (@expm1-%203-rev mem loc pred)
         (let ((s203 (list mem loc pred)))
           (@expm1-%207-rev
            (@expm1-%203-mem s203)
            (@expm1-%206-loc s203)
            (@expm1-%203-pred s203))))
  :enable (@expm1-%203-expand-rev-as-@expm1-%206-rev @expm1-%206-rev @expm1-%206-loc @expm1-%206-val))
(defruled @expm1-%203-expand-rev-as-@expm1-m203.1-rev
  (equal (@expm1-%203-rev mem loc pred)
         (let ((s203 (list mem loc pred)))
           (@expm1-m203.1-rev
            (@expm1-%203-mem s203)
            (@expm1-%207-loc s203)
            (@expm1-%203-pred s203))))
  :enable (@expm1-%203-expand-rev-as-@expm1-%207-rev @expm1-%207-rev @expm1-%207-loc @expm1-%207-val))
(defruled @expm1-%203-expand-rev-as-@expm1-%208-rev
  (equal (@expm1-%203-rev mem loc pred)
         (let ((s203 (list mem loc pred)))
           (@expm1-%208-rev
            (@expm1-m203.1-mem s203)
            (@expm1-%207-loc s203)
            (@expm1-%203-pred s203))))
  :enable (@expm1-%203-expand-rev-as-@expm1-m203.1-rev @expm1-m203.1-rev @expm1-m203.1-mem))
(defruled @expm1-%203-expand-rev-as-@expm1-%209-rev
  (equal (@expm1-%203-rev mem loc pred)
         (let ((s203 (list mem loc pred)))
           (@expm1-%209-rev
            (@expm1-m203.1-mem s203)
            (@expm1-%208-loc s203)
            (@expm1-%203-pred s203))))
  :enable (@expm1-%203-expand-rev-as-@expm1-%208-rev @expm1-%208-rev @expm1-%208-loc @expm1-%208-val))
(defruled @expm1-%203-expand-rev-as-@expm1-%210-rev
  (equal (@expm1-%203-rev mem loc pred)
         (let ((s203 (list mem loc pred)))
           (@expm1-%210-rev
            (@expm1-m203.1-mem s203)
            (@expm1-%209-loc s203)
            (@expm1-%203-pred s203))))
  :enable (@expm1-%203-expand-rev-as-@expm1-%209-rev @expm1-%209-rev @expm1-%209-loc @expm1-%209-val))
(defruled @expm1-%203-expand-rev-as-@expm1-%211-rev
  (equal (@expm1-%203-rev mem loc pred)
         (let ((s203 (list mem loc pred)))
           (@expm1-%211-rev
            (@expm1-m203.1-mem s203)
            (@expm1-%210-loc s203)
            (@expm1-%203-pred s203))))
  :enable (@expm1-%203-expand-rev-as-@expm1-%210-rev @expm1-%210-rev @expm1-%210-loc @expm1-%210-val))
(defruled @expm1-%203-expand-rev-as-@expm1-%212-rev
  (equal (@expm1-%203-rev mem loc pred)
         (let ((s203 (list mem loc pred)))
           (@expm1-%212-rev
            (@expm1-m203.1-mem s203)
            (@expm1-%211-loc s203)
            (@expm1-%203-pred s203))))
  :enable (@expm1-%203-expand-rev-as-@expm1-%211-rev @expm1-%211-rev @expm1-%211-loc @expm1-%211-val))
(defruled @expm1-%203-expand-rev-as-@expm1-%213-rev
  (equal (@expm1-%203-rev mem loc pred)
         (let ((s203 (list mem loc pred)))
           (@expm1-%213-rev
            (@expm1-m203.1-mem s203)
            (@expm1-%212-loc s203)
            (@expm1-%203-pred s203))))
  :enable (@expm1-%203-expand-rev-as-@expm1-%212-rev @expm1-%212-rev @expm1-%212-loc @expm1-%212-val))
(defruled @expm1-%203-expand-rev-as-@expm1-m203.2-rev
  (equal (@expm1-%203-rev mem loc pred)
         (let ((s203 (list mem loc pred)))
           (@expm1-m203.2-rev
            (@expm1-m203.1-mem s203)
            (@expm1-%213-loc s203)
            (@expm1-%203-pred s203))))
  :enable (@expm1-%203-expand-rev-as-@expm1-%213-rev @expm1-%213-rev @expm1-%213-loc @expm1-%213-val))
(defruled @expm1-%203-expand-rev-as-@expm1-%214-rev
  (equal (@expm1-%203-rev mem loc pred)
         (let ((s203 (list mem loc pred)))
           (@expm1-%214-rev
            (@expm1-m203.2-mem s203)
            (@expm1-%213-loc s203)
            (@expm1-%203-pred s203))))
  :enable (@expm1-%203-expand-rev-as-@expm1-m203.2-rev @expm1-m203.2-rev @expm1-m203.2-mem))
(defruled @expm1-%203-expand-rev-as-@expm1-%215-rev
  (equal (@expm1-%203-rev mem loc pred)
         (let ((s203 (list mem loc pred)))
           (@expm1-%215-rev
            (@expm1-m203.2-mem s203)
            (@expm1-%214-loc s203)
            (@expm1-%203-pred s203))))
  :enable (@expm1-%203-expand-rev-as-@expm1-%214-rev @expm1-%214-rev @expm1-%214-loc @expm1-%214-val))
(defruled @expm1-%203-expand-rev-as-@expm1-m203.3-rev
  (equal (@expm1-%203-rev mem loc pred)
         (let ((s203 (list mem loc pred)))
           (@expm1-m203.3-rev
            (@expm1-m203.2-mem s203)
            (@expm1-%215-loc s203)
            (@expm1-%203-pred s203))))
  :enable (@expm1-%203-expand-rev-as-@expm1-%215-rev @expm1-%215-rev @expm1-%215-loc @expm1-%215-val))
(defruled @expm1-%203-expand-rev-as-@expm1-succ203-rev
  (equal (@expm1-%203-rev mem loc pred)
         (let ((s203 (list mem loc pred)))
           (@expm1-succ203-rev
            (@expm1-m203.3-mem s203)
            (@expm1-%215-loc s203)
            (@expm1-%203-pred s203))))
  :enable (@expm1-%203-expand-rev-as-@expm1-m203.3-rev @expm1-m203.3-rev @expm1-m203.3-mem))
(defruled @expm1-%203-expand-rev-as-fwd
  (equal (@expm1-%203-rev mem loc pred)
         (@expm1-%203-fwd mem loc pred))
  :enable (@expm1-%203-expand-rev-as-@expm1-succ203-rev @expm1-succ203-rev @expm1-succ203-lab @expm1-%203-fwd))

(defund @expm1-%203-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%204 (load-double (g '%e loc) mem) loc))
    (loc (s '%205 (load-double (g '%2 loc) mem) loc))
    (loc (s '%206 (fsub-double (g '%204 loc) (g '%205 loc)) loc))
    (loc (s '%207 (fsub-double #x3ff0000000000000 (g '%206 loc)) loc))
    (mem (store-double (g '%207 loc) (g '%y loc) mem))
    (loc (s '%208 (load-i32 (g '%k loc) mem) loc))
    (loc (s '%209 (shl-i32 (g '%208 loc) 20) loc))
    (loc (s '%210 (bitcast-double*-to-i32* (g '%y loc)) loc))
    (loc (s '%211 (getelementptr-i32 (g '%210 loc) 1) loc))
    (loc (s '%212 (load-i32 (g '%211 loc) mem) loc))
    (loc (s '%213 (add-i32 (g '%212 loc) (g '%209 loc)) loc))
    (mem (store-i32 (g '%213 loc) (g '%211 loc) mem))
    (loc (s '%214 (load-double (g '%y loc) mem) loc))
    (loc (s '%215 (fsub-double (g '%214 loc) #x3ff0000000000000) loc))
    (mem (store-double (g '%215 loc) (g '%1 loc) mem))
    (succ '%258))
  (mv succ mem loc)))

(defund @expm1-%216-mem (s216)
  (car s216))
(defund @expm1-%216-loc (s216)
  (cadr s216))
(defund @expm1-%216-pred (s216)
  (caddr s216))
(defund @expm1-m216.1-mem (s216)
  (store-double #x3ff0000000000000 (g '%t (@expm1-%216-loc s216)) (@expm1-%216-mem s216)))
(defund @expm1-%217-val (s216)
  (load-i32 (g '%k (@expm1-%216-loc s216)) (@expm1-m216.1-mem s216)))
(defund @expm1-%217-loc (s216)
  (s '%217 (@expm1-%217-val s216) (@expm1-%216-loc s216)))
(defund @expm1-%218-val (s216)
  (icmp-slt-i32 (g '%217 (@expm1-%217-loc s216)) 20))
(defund @expm1-%218-loc (s216)
  (s '%218 (@expm1-%218-val s216) (@expm1-%217-loc s216)))
(defund @expm1-succ216-lab (s216)
  (case (g '%218 (@expm1-%218-loc s216)) (-1 '%219) (0 '%236)))

(defund @expm1-%216-fwd (mem loc pred)
  (let ((s216 (list mem loc pred)))
    (mv (@expm1-succ216-lab s216) (@expm1-m216.1-mem s216) (@expm1-%218-loc s216))))

(defund @expm1-succ216-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%218 loc) (-1 '%219) (0 '%236)) mem loc))
(defund @expm1-%218-rev (mem loc pred)
  (@expm1-succ216-rev mem (s '%218 (icmp-slt-i32 (g '%217 loc) 20) loc) pred))
(defund @expm1-%217-rev (mem loc pred)
  (@expm1-%218-rev mem (s '%217 (load-i32 (g '%k loc) mem) loc) pred))
(defund @expm1-m216.1-rev (mem loc pred)
  (@expm1-%217-rev (store-double #x3ff0000000000000 (g '%t loc) mem) loc pred))

(defund @expm1-%216-rev (mem loc pred)
  (@expm1-m216.1-rev mem loc pred))

(defruled @expm1-%216-expand-rev-as-@expm1-m216.1-rev
  (equal (@expm1-%216-rev mem loc pred)
         (let ((s216 (list mem loc pred)))
           (@expm1-m216.1-rev
            (@expm1-%216-mem s216)
            (@expm1-%216-loc s216)
            (@expm1-%216-pred s216))))
  :enable (@expm1-%216-rev @expm1-%216-mem @expm1-%216-loc @expm1-%216-pred))
(defruled @expm1-%216-expand-rev-as-@expm1-%217-rev
  (equal (@expm1-%216-rev mem loc pred)
         (let ((s216 (list mem loc pred)))
           (@expm1-%217-rev
            (@expm1-m216.1-mem s216)
            (@expm1-%216-loc s216)
            (@expm1-%216-pred s216))))
  :enable (@expm1-%216-expand-rev-as-@expm1-m216.1-rev @expm1-m216.1-rev @expm1-m216.1-mem))
(defruled @expm1-%216-expand-rev-as-@expm1-%218-rev
  (equal (@expm1-%216-rev mem loc pred)
         (let ((s216 (list mem loc pred)))
           (@expm1-%218-rev
            (@expm1-m216.1-mem s216)
            (@expm1-%217-loc s216)
            (@expm1-%216-pred s216))))
  :enable (@expm1-%216-expand-rev-as-@expm1-%217-rev @expm1-%217-rev @expm1-%217-loc @expm1-%217-val))
(defruled @expm1-%216-expand-rev-as-@expm1-succ216-rev
  (equal (@expm1-%216-rev mem loc pred)
         (let ((s216 (list mem loc pred)))
           (@expm1-succ216-rev
            (@expm1-m216.1-mem s216)
            (@expm1-%218-loc s216)
            (@expm1-%216-pred s216))))
  :enable (@expm1-%216-expand-rev-as-@expm1-%218-rev @expm1-%218-rev @expm1-%218-loc @expm1-%218-val))
(defruled @expm1-%216-expand-rev-as-fwd
  (equal (@expm1-%216-rev mem loc pred)
         (@expm1-%216-fwd mem loc pred))
  :enable (@expm1-%216-expand-rev-as-@expm1-succ216-rev @expm1-succ216-rev @expm1-succ216-lab @expm1-%216-fwd))

(defund @expm1-%216-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (mem (store-double #x3ff0000000000000 (g '%t loc) mem))
    (loc (s '%217 (load-i32 (g '%k loc) mem) loc))
    (loc (s '%218 (icmp-slt-i32 (g '%217 loc) 20) loc))
    (succ (case (g '%218 loc) (-1 '%219) (0 '%236))))
  (mv succ mem loc)))

(defund @expm1-%219-mem (s219)
  (car s219))
(defund @expm1-%219-loc (s219)
  (cadr s219))
(defund @expm1-%219-pred (s219)
  (caddr s219))
(defund @expm1-%220-val (s219)
  (load-i32 (g '%k (@expm1-%219-loc s219)) (@expm1-%219-mem s219)))
(defund @expm1-%220-loc (s219)
  (s '%220 (@expm1-%220-val s219) (@expm1-%219-loc s219)))
(defund @expm1-%221-val (s219)
  (ashr-i32 2097152 (g '%220 (@expm1-%220-loc s219))))
(defund @expm1-%221-loc (s219)
  (s '%221 (@expm1-%221-val s219) (@expm1-%220-loc s219)))
(defund @expm1-%222-val (s219)
  (sub-i32 1072693248 (g '%221 (@expm1-%221-loc s219))))
(defund @expm1-%222-loc (s219)
  (s '%222 (@expm1-%222-val s219) (@expm1-%221-loc s219)))
(defund @expm1-%223-val (s219)
  (bitcast-double*-to-i32* (g '%t (@expm1-%222-loc s219))))
(defund @expm1-%223-loc (s219)
  (s '%223 (@expm1-%223-val s219) (@expm1-%222-loc s219)))
(defund @expm1-%224-val (s219)
  (getelementptr-i32 (g '%223 (@expm1-%223-loc s219)) 1))
(defund @expm1-%224-loc (s219)
  (s '%224 (@expm1-%224-val s219) (@expm1-%223-loc s219)))
(defund @expm1-m219.1-mem (s219)
  (store-i32 (g '%222 (@expm1-%224-loc s219)) (g '%224 (@expm1-%224-loc s219)) (@expm1-%219-mem s219)))
(defund @expm1-%225-val (s219)
  (load-double (g '%t (@expm1-%224-loc s219)) (@expm1-m219.1-mem s219)))
(defund @expm1-%225-loc (s219)
  (s '%225 (@expm1-%225-val s219) (@expm1-%224-loc s219)))
(defund @expm1-%226-val (s219)
  (load-double (g '%e (@expm1-%225-loc s219)) (@expm1-m219.1-mem s219)))
(defund @expm1-%226-loc (s219)
  (s '%226 (@expm1-%226-val s219) (@expm1-%225-loc s219)))
(defund @expm1-%227-val (s219)
  (load-double (g '%2 (@expm1-%226-loc s219)) (@expm1-m219.1-mem s219)))
(defund @expm1-%227-loc (s219)
  (s '%227 (@expm1-%227-val s219) (@expm1-%226-loc s219)))
(defund @expm1-%228-val (s219)
  (fsub-double (g '%226 (@expm1-%227-loc s219)) (g '%227 (@expm1-%227-loc s219))))
(defund @expm1-%228-loc (s219)
  (s '%228 (@expm1-%228-val s219) (@expm1-%227-loc s219)))
(defund @expm1-%229-val (s219)
  (fsub-double (g '%225 (@expm1-%228-loc s219)) (g '%228 (@expm1-%228-loc s219))))
(defund @expm1-%229-loc (s219)
  (s '%229 (@expm1-%229-val s219) (@expm1-%228-loc s219)))
(defund @expm1-m219.2-mem (s219)
  (store-double (g '%229 (@expm1-%229-loc s219)) (g '%y (@expm1-%229-loc s219)) (@expm1-m219.1-mem s219)))
(defund @expm1-%230-val (s219)
  (load-i32 (g '%k (@expm1-%229-loc s219)) (@expm1-m219.2-mem s219)))
(defund @expm1-%230-loc (s219)
  (s '%230 (@expm1-%230-val s219) (@expm1-%229-loc s219)))
(defund @expm1-%231-val (s219)
  (shl-i32 (g '%230 (@expm1-%230-loc s219)) 20))
(defund @expm1-%231-loc (s219)
  (s '%231 (@expm1-%231-val s219) (@expm1-%230-loc s219)))
(defund @expm1-%232-val (s219)
  (bitcast-double*-to-i32* (g '%y (@expm1-%231-loc s219))))
(defund @expm1-%232-loc (s219)
  (s '%232 (@expm1-%232-val s219) (@expm1-%231-loc s219)))
(defund @expm1-%233-val (s219)
  (getelementptr-i32 (g '%232 (@expm1-%232-loc s219)) 1))
(defund @expm1-%233-loc (s219)
  (s '%233 (@expm1-%233-val s219) (@expm1-%232-loc s219)))
(defund @expm1-%234-val (s219)
  (load-i32 (g '%233 (@expm1-%233-loc s219)) (@expm1-m219.2-mem s219)))
(defund @expm1-%234-loc (s219)
  (s '%234 (@expm1-%234-val s219) (@expm1-%233-loc s219)))
(defund @expm1-%235-val (s219)
  (add-i32 (g '%234 (@expm1-%234-loc s219)) (g '%231 (@expm1-%234-loc s219))))
(defund @expm1-%235-loc (s219)
  (s '%235 (@expm1-%235-val s219) (@expm1-%234-loc s219)))
(defund @expm1-m219.3-mem (s219)
  (store-i32 (g '%235 (@expm1-%235-loc s219)) (g '%233 (@expm1-%235-loc s219)) (@expm1-m219.2-mem s219)))
(defund @expm1-succ219-lab (s219)
  (declare (ignore s219))
  '%255)

(defund @expm1-%219-fwd (mem loc pred)
  (let ((s219 (list mem loc pred)))
    (mv (@expm1-succ219-lab s219) (@expm1-m219.3-mem s219) (@expm1-%235-loc s219))))

(defund @expm1-succ219-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%255 mem loc))
(defund @expm1-m219.3-rev (mem loc pred)
  (@expm1-succ219-rev (store-i32 (g '%235 loc) (g '%233 loc) mem) loc pred))
(defund @expm1-%235-rev (mem loc pred)
  (@expm1-m219.3-rev mem (s '%235 (add-i32 (g '%234 loc) (g '%231 loc)) loc) pred))
(defund @expm1-%234-rev (mem loc pred)
  (@expm1-%235-rev mem (s '%234 (load-i32 (g '%233 loc) mem) loc) pred))
(defund @expm1-%233-rev (mem loc pred)
  (@expm1-%234-rev mem (s '%233 (getelementptr-i32 (g '%232 loc) 1) loc) pred))
(defund @expm1-%232-rev (mem loc pred)
  (@expm1-%233-rev mem (s '%232 (bitcast-double*-to-i32* (g '%y loc)) loc) pred))
(defund @expm1-%231-rev (mem loc pred)
  (@expm1-%232-rev mem (s '%231 (shl-i32 (g '%230 loc) 20) loc) pred))
(defund @expm1-%230-rev (mem loc pred)
  (@expm1-%231-rev mem (s '%230 (load-i32 (g '%k loc) mem) loc) pred))
(defund @expm1-m219.2-rev (mem loc pred)
  (@expm1-%230-rev (store-double (g '%229 loc) (g '%y loc) mem) loc pred))
(defund @expm1-%229-rev (mem loc pred)
  (@expm1-m219.2-rev mem (s '%229 (fsub-double (g '%225 loc) (g '%228 loc)) loc) pred))
(defund @expm1-%228-rev (mem loc pred)
  (@expm1-%229-rev mem (s '%228 (fsub-double (g '%226 loc) (g '%227 loc)) loc) pred))
(defund @expm1-%227-rev (mem loc pred)
  (@expm1-%228-rev mem (s '%227 (load-double (g '%2 loc) mem) loc) pred))
(defund @expm1-%226-rev (mem loc pred)
  (@expm1-%227-rev mem (s '%226 (load-double (g '%e loc) mem) loc) pred))
(defund @expm1-%225-rev (mem loc pred)
  (@expm1-%226-rev mem (s '%225 (load-double (g '%t loc) mem) loc) pred))
(defund @expm1-m219.1-rev (mem loc pred)
  (@expm1-%225-rev (store-i32 (g '%222 loc) (g '%224 loc) mem) loc pred))
(defund @expm1-%224-rev (mem loc pred)
  (@expm1-m219.1-rev mem (s '%224 (getelementptr-i32 (g '%223 loc) 1) loc) pred))
(defund @expm1-%223-rev (mem loc pred)
  (@expm1-%224-rev mem (s '%223 (bitcast-double*-to-i32* (g '%t loc)) loc) pred))
(defund @expm1-%222-rev (mem loc pred)
  (@expm1-%223-rev mem (s '%222 (sub-i32 1072693248 (g '%221 loc)) loc) pred))
(defund @expm1-%221-rev (mem loc pred)
  (@expm1-%222-rev mem (s '%221 (ashr-i32 2097152 (g '%220 loc)) loc) pred))
(defund @expm1-%220-rev (mem loc pred)
  (@expm1-%221-rev mem (s '%220 (load-i32 (g '%k loc) mem) loc) pred))

(defund @expm1-%219-rev (mem loc pred)
  (@expm1-%220-rev mem loc pred))

(defruled @expm1-%219-expand-rev-as-@expm1-%220-rev
  (equal (@expm1-%219-rev mem loc pred)
         (let ((s219 (list mem loc pred)))
           (@expm1-%220-rev
            (@expm1-%219-mem s219)
            (@expm1-%219-loc s219)
            (@expm1-%219-pred s219))))
  :enable (@expm1-%219-rev @expm1-%219-mem @expm1-%219-loc @expm1-%219-pred))
(defruled @expm1-%219-expand-rev-as-@expm1-%221-rev
  (equal (@expm1-%219-rev mem loc pred)
         (let ((s219 (list mem loc pred)))
           (@expm1-%221-rev
            (@expm1-%219-mem s219)
            (@expm1-%220-loc s219)
            (@expm1-%219-pred s219))))
  :enable (@expm1-%219-expand-rev-as-@expm1-%220-rev @expm1-%220-rev @expm1-%220-loc @expm1-%220-val))
(defruled @expm1-%219-expand-rev-as-@expm1-%222-rev
  (equal (@expm1-%219-rev mem loc pred)
         (let ((s219 (list mem loc pred)))
           (@expm1-%222-rev
            (@expm1-%219-mem s219)
            (@expm1-%221-loc s219)
            (@expm1-%219-pred s219))))
  :enable (@expm1-%219-expand-rev-as-@expm1-%221-rev @expm1-%221-rev @expm1-%221-loc @expm1-%221-val))
(defruled @expm1-%219-expand-rev-as-@expm1-%223-rev
  (equal (@expm1-%219-rev mem loc pred)
         (let ((s219 (list mem loc pred)))
           (@expm1-%223-rev
            (@expm1-%219-mem s219)
            (@expm1-%222-loc s219)
            (@expm1-%219-pred s219))))
  :enable (@expm1-%219-expand-rev-as-@expm1-%222-rev @expm1-%222-rev @expm1-%222-loc @expm1-%222-val))
(defruled @expm1-%219-expand-rev-as-@expm1-%224-rev
  (equal (@expm1-%219-rev mem loc pred)
         (let ((s219 (list mem loc pred)))
           (@expm1-%224-rev
            (@expm1-%219-mem s219)
            (@expm1-%223-loc s219)
            (@expm1-%219-pred s219))))
  :enable (@expm1-%219-expand-rev-as-@expm1-%223-rev @expm1-%223-rev @expm1-%223-loc @expm1-%223-val))
(defruled @expm1-%219-expand-rev-as-@expm1-m219.1-rev
  (equal (@expm1-%219-rev mem loc pred)
         (let ((s219 (list mem loc pred)))
           (@expm1-m219.1-rev
            (@expm1-%219-mem s219)
            (@expm1-%224-loc s219)
            (@expm1-%219-pred s219))))
  :enable (@expm1-%219-expand-rev-as-@expm1-%224-rev @expm1-%224-rev @expm1-%224-loc @expm1-%224-val))
(defruled @expm1-%219-expand-rev-as-@expm1-%225-rev
  (equal (@expm1-%219-rev mem loc pred)
         (let ((s219 (list mem loc pred)))
           (@expm1-%225-rev
            (@expm1-m219.1-mem s219)
            (@expm1-%224-loc s219)
            (@expm1-%219-pred s219))))
  :enable (@expm1-%219-expand-rev-as-@expm1-m219.1-rev @expm1-m219.1-rev @expm1-m219.1-mem))
(defruled @expm1-%219-expand-rev-as-@expm1-%226-rev
  (equal (@expm1-%219-rev mem loc pred)
         (let ((s219 (list mem loc pred)))
           (@expm1-%226-rev
            (@expm1-m219.1-mem s219)
            (@expm1-%225-loc s219)
            (@expm1-%219-pred s219))))
  :enable (@expm1-%219-expand-rev-as-@expm1-%225-rev @expm1-%225-rev @expm1-%225-loc @expm1-%225-val))
(defruled @expm1-%219-expand-rev-as-@expm1-%227-rev
  (equal (@expm1-%219-rev mem loc pred)
         (let ((s219 (list mem loc pred)))
           (@expm1-%227-rev
            (@expm1-m219.1-mem s219)
            (@expm1-%226-loc s219)
            (@expm1-%219-pred s219))))
  :enable (@expm1-%219-expand-rev-as-@expm1-%226-rev @expm1-%226-rev @expm1-%226-loc @expm1-%226-val))
(defruled @expm1-%219-expand-rev-as-@expm1-%228-rev
  (equal (@expm1-%219-rev mem loc pred)
         (let ((s219 (list mem loc pred)))
           (@expm1-%228-rev
            (@expm1-m219.1-mem s219)
            (@expm1-%227-loc s219)
            (@expm1-%219-pred s219))))
  :enable (@expm1-%219-expand-rev-as-@expm1-%227-rev @expm1-%227-rev @expm1-%227-loc @expm1-%227-val))
(defruled @expm1-%219-expand-rev-as-@expm1-%229-rev
  (equal (@expm1-%219-rev mem loc pred)
         (let ((s219 (list mem loc pred)))
           (@expm1-%229-rev
            (@expm1-m219.1-mem s219)
            (@expm1-%228-loc s219)
            (@expm1-%219-pred s219))))
  :enable (@expm1-%219-expand-rev-as-@expm1-%228-rev @expm1-%228-rev @expm1-%228-loc @expm1-%228-val))
(defruled @expm1-%219-expand-rev-as-@expm1-m219.2-rev
  (equal (@expm1-%219-rev mem loc pred)
         (let ((s219 (list mem loc pred)))
           (@expm1-m219.2-rev
            (@expm1-m219.1-mem s219)
            (@expm1-%229-loc s219)
            (@expm1-%219-pred s219))))
  :enable (@expm1-%219-expand-rev-as-@expm1-%229-rev @expm1-%229-rev @expm1-%229-loc @expm1-%229-val))
(defruled @expm1-%219-expand-rev-as-@expm1-%230-rev
  (equal (@expm1-%219-rev mem loc pred)
         (let ((s219 (list mem loc pred)))
           (@expm1-%230-rev
            (@expm1-m219.2-mem s219)
            (@expm1-%229-loc s219)
            (@expm1-%219-pred s219))))
  :enable (@expm1-%219-expand-rev-as-@expm1-m219.2-rev @expm1-m219.2-rev @expm1-m219.2-mem))
(defruled @expm1-%219-expand-rev-as-@expm1-%231-rev
  (equal (@expm1-%219-rev mem loc pred)
         (let ((s219 (list mem loc pred)))
           (@expm1-%231-rev
            (@expm1-m219.2-mem s219)
            (@expm1-%230-loc s219)
            (@expm1-%219-pred s219))))
  :enable (@expm1-%219-expand-rev-as-@expm1-%230-rev @expm1-%230-rev @expm1-%230-loc @expm1-%230-val))
(defruled @expm1-%219-expand-rev-as-@expm1-%232-rev
  (equal (@expm1-%219-rev mem loc pred)
         (let ((s219 (list mem loc pred)))
           (@expm1-%232-rev
            (@expm1-m219.2-mem s219)
            (@expm1-%231-loc s219)
            (@expm1-%219-pred s219))))
  :enable (@expm1-%219-expand-rev-as-@expm1-%231-rev @expm1-%231-rev @expm1-%231-loc @expm1-%231-val))
(defruled @expm1-%219-expand-rev-as-@expm1-%233-rev
  (equal (@expm1-%219-rev mem loc pred)
         (let ((s219 (list mem loc pred)))
           (@expm1-%233-rev
            (@expm1-m219.2-mem s219)
            (@expm1-%232-loc s219)
            (@expm1-%219-pred s219))))
  :enable (@expm1-%219-expand-rev-as-@expm1-%232-rev @expm1-%232-rev @expm1-%232-loc @expm1-%232-val))
(defruled @expm1-%219-expand-rev-as-@expm1-%234-rev
  (equal (@expm1-%219-rev mem loc pred)
         (let ((s219 (list mem loc pred)))
           (@expm1-%234-rev
            (@expm1-m219.2-mem s219)
            (@expm1-%233-loc s219)
            (@expm1-%219-pred s219))))
  :enable (@expm1-%219-expand-rev-as-@expm1-%233-rev @expm1-%233-rev @expm1-%233-loc @expm1-%233-val))
(defruled @expm1-%219-expand-rev-as-@expm1-%235-rev
  (equal (@expm1-%219-rev mem loc pred)
         (let ((s219 (list mem loc pred)))
           (@expm1-%235-rev
            (@expm1-m219.2-mem s219)
            (@expm1-%234-loc s219)
            (@expm1-%219-pred s219))))
  :enable (@expm1-%219-expand-rev-as-@expm1-%234-rev @expm1-%234-rev @expm1-%234-loc @expm1-%234-val))
(defruled @expm1-%219-expand-rev-as-@expm1-m219.3-rev
  (equal (@expm1-%219-rev mem loc pred)
         (let ((s219 (list mem loc pred)))
           (@expm1-m219.3-rev
            (@expm1-m219.2-mem s219)
            (@expm1-%235-loc s219)
            (@expm1-%219-pred s219))))
  :enable (@expm1-%219-expand-rev-as-@expm1-%235-rev @expm1-%235-rev @expm1-%235-loc @expm1-%235-val))
(defruled @expm1-%219-expand-rev-as-@expm1-succ219-rev
  (equal (@expm1-%219-rev mem loc pred)
         (let ((s219 (list mem loc pred)))
           (@expm1-succ219-rev
            (@expm1-m219.3-mem s219)
            (@expm1-%235-loc s219)
            (@expm1-%219-pred s219))))
  :enable (@expm1-%219-expand-rev-as-@expm1-m219.3-rev @expm1-m219.3-rev @expm1-m219.3-mem))
(defruled @expm1-%219-expand-rev-as-fwd
  (equal (@expm1-%219-rev mem loc pred)
         (@expm1-%219-fwd mem loc pred))
  :enable (@expm1-%219-expand-rev-as-@expm1-succ219-rev @expm1-succ219-rev @expm1-succ219-lab @expm1-%219-fwd))

(defund @expm1-%219-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%220 (load-i32 (g '%k loc) mem) loc))
    (loc (s '%221 (ashr-i32 2097152 (g '%220 loc)) loc))
    (loc (s '%222 (sub-i32 1072693248 (g '%221 loc)) loc))
    (loc (s '%223 (bitcast-double*-to-i32* (g '%t loc)) loc))
    (loc (s '%224 (getelementptr-i32 (g '%223 loc) 1) loc))
    (mem (store-i32 (g '%222 loc) (g '%224 loc) mem))
    (loc (s '%225 (load-double (g '%t loc) mem) loc))
    (loc (s '%226 (load-double (g '%e loc) mem) loc))
    (loc (s '%227 (load-double (g '%2 loc) mem) loc))
    (loc (s '%228 (fsub-double (g '%226 loc) (g '%227 loc)) loc))
    (loc (s '%229 (fsub-double (g '%225 loc) (g '%228 loc)) loc))
    (mem (store-double (g '%229 loc) (g '%y loc) mem))
    (loc (s '%230 (load-i32 (g '%k loc) mem) loc))
    (loc (s '%231 (shl-i32 (g '%230 loc) 20) loc))
    (loc (s '%232 (bitcast-double*-to-i32* (g '%y loc)) loc))
    (loc (s '%233 (getelementptr-i32 (g '%232 loc) 1) loc))
    (loc (s '%234 (load-i32 (g '%233 loc) mem) loc))
    (loc (s '%235 (add-i32 (g '%234 loc) (g '%231 loc)) loc))
    (mem (store-i32 (g '%235 loc) (g '%233 loc) mem))
    (succ '%255))
  (mv succ mem loc)))

(defund @expm1-%236-mem (s236)
  (car s236))
(defund @expm1-%236-loc (s236)
  (cadr s236))
(defund @expm1-%236-pred (s236)
  (caddr s236))
(defund @expm1-%237-val (s236)
  (load-i32 (g '%k (@expm1-%236-loc s236)) (@expm1-%236-mem s236)))
(defund @expm1-%237-loc (s236)
  (s '%237 (@expm1-%237-val s236) (@expm1-%236-loc s236)))
(defund @expm1-%238-val (s236)
  (sub-i32 1023 (g '%237 (@expm1-%237-loc s236))))
(defund @expm1-%238-loc (s236)
  (s '%238 (@expm1-%238-val s236) (@expm1-%237-loc s236)))
(defund @expm1-%239-val (s236)
  (shl-i32 (g '%238 (@expm1-%238-loc s236)) 20))
(defund @expm1-%239-loc (s236)
  (s '%239 (@expm1-%239-val s236) (@expm1-%238-loc s236)))
(defund @expm1-%240-val (s236)
  (bitcast-double*-to-i32* (g '%t (@expm1-%239-loc s236))))
(defund @expm1-%240-loc (s236)
  (s '%240 (@expm1-%240-val s236) (@expm1-%239-loc s236)))
(defund @expm1-%241-val (s236)
  (getelementptr-i32 (g '%240 (@expm1-%240-loc s236)) 1))
(defund @expm1-%241-loc (s236)
  (s '%241 (@expm1-%241-val s236) (@expm1-%240-loc s236)))
(defund @expm1-m236.1-mem (s236)
  (store-i32 (g '%239 (@expm1-%241-loc s236)) (g '%241 (@expm1-%241-loc s236)) (@expm1-%236-mem s236)))
(defund @expm1-%242-val (s236)
  (load-double (g '%2 (@expm1-%241-loc s236)) (@expm1-m236.1-mem s236)))
(defund @expm1-%242-loc (s236)
  (s '%242 (@expm1-%242-val s236) (@expm1-%241-loc s236)))
(defund @expm1-%243-val (s236)
  (load-double (g '%e (@expm1-%242-loc s236)) (@expm1-m236.1-mem s236)))
(defund @expm1-%243-loc (s236)
  (s '%243 (@expm1-%243-val s236) (@expm1-%242-loc s236)))
(defund @expm1-%244-val (s236)
  (load-double (g '%t (@expm1-%243-loc s236)) (@expm1-m236.1-mem s236)))
(defund @expm1-%244-loc (s236)
  (s '%244 (@expm1-%244-val s236) (@expm1-%243-loc s236)))
(defund @expm1-%245-val (s236)
  (fadd-double (g '%243 (@expm1-%244-loc s236)) (g '%244 (@expm1-%244-loc s236))))
(defund @expm1-%245-loc (s236)
  (s '%245 (@expm1-%245-val s236) (@expm1-%244-loc s236)))
(defund @expm1-%246-val (s236)
  (fsub-double (g '%242 (@expm1-%245-loc s236)) (g '%245 (@expm1-%245-loc s236))))
(defund @expm1-%246-loc (s236)
  (s '%246 (@expm1-%246-val s236) (@expm1-%245-loc s236)))
(defund @expm1-m236.2-mem (s236)
  (store-double (g '%246 (@expm1-%246-loc s236)) (g '%y (@expm1-%246-loc s236)) (@expm1-m236.1-mem s236)))
(defund @expm1-%247-val (s236)
  (load-double (g '%y (@expm1-%246-loc s236)) (@expm1-m236.2-mem s236)))
(defund @expm1-%247-loc (s236)
  (s '%247 (@expm1-%247-val s236) (@expm1-%246-loc s236)))
(defund @expm1-%248-val (s236)
  (fadd-double (g '%247 (@expm1-%247-loc s236)) #x3ff0000000000000))
(defund @expm1-%248-loc (s236)
  (s '%248 (@expm1-%248-val s236) (@expm1-%247-loc s236)))
(defund @expm1-m236.3-mem (s236)
  (store-double (g '%248 (@expm1-%248-loc s236)) (g '%y (@expm1-%248-loc s236)) (@expm1-m236.2-mem s236)))
(defund @expm1-%249-val (s236)
  (load-i32 (g '%k (@expm1-%248-loc s236)) (@expm1-m236.3-mem s236)))
(defund @expm1-%249-loc (s236)
  (s '%249 (@expm1-%249-val s236) (@expm1-%248-loc s236)))
(defund @expm1-%250-val (s236)
  (shl-i32 (g '%249 (@expm1-%249-loc s236)) 20))
(defund @expm1-%250-loc (s236)
  (s '%250 (@expm1-%250-val s236) (@expm1-%249-loc s236)))
(defund @expm1-%251-val (s236)
  (bitcast-double*-to-i32* (g '%y (@expm1-%250-loc s236))))
(defund @expm1-%251-loc (s236)
  (s '%251 (@expm1-%251-val s236) (@expm1-%250-loc s236)))
(defund @expm1-%252-val (s236)
  (getelementptr-i32 (g '%251 (@expm1-%251-loc s236)) 1))
(defund @expm1-%252-loc (s236)
  (s '%252 (@expm1-%252-val s236) (@expm1-%251-loc s236)))
(defund @expm1-%253-val (s236)
  (load-i32 (g '%252 (@expm1-%252-loc s236)) (@expm1-m236.3-mem s236)))
(defund @expm1-%253-loc (s236)
  (s '%253 (@expm1-%253-val s236) (@expm1-%252-loc s236)))
(defund @expm1-%254-val (s236)
  (add-i32 (g '%253 (@expm1-%253-loc s236)) (g '%250 (@expm1-%253-loc s236))))
(defund @expm1-%254-loc (s236)
  (s '%254 (@expm1-%254-val s236) (@expm1-%253-loc s236)))
(defund @expm1-m236.4-mem (s236)
  (store-i32 (g '%254 (@expm1-%254-loc s236)) (g '%252 (@expm1-%254-loc s236)) (@expm1-m236.3-mem s236)))
(defund @expm1-succ236-lab (s236)
  (declare (ignore s236))
  '%255)

(defund @expm1-%236-fwd (mem loc pred)
  (let ((s236 (list mem loc pred)))
    (mv (@expm1-succ236-lab s236) (@expm1-m236.4-mem s236) (@expm1-%254-loc s236))))

(defund @expm1-succ236-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%255 mem loc))
(defund @expm1-m236.4-rev (mem loc pred)
  (@expm1-succ236-rev (store-i32 (g '%254 loc) (g '%252 loc) mem) loc pred))
(defund @expm1-%254-rev (mem loc pred)
  (@expm1-m236.4-rev mem (s '%254 (add-i32 (g '%253 loc) (g '%250 loc)) loc) pred))
(defund @expm1-%253-rev (mem loc pred)
  (@expm1-%254-rev mem (s '%253 (load-i32 (g '%252 loc) mem) loc) pred))
(defund @expm1-%252-rev (mem loc pred)
  (@expm1-%253-rev mem (s '%252 (getelementptr-i32 (g '%251 loc) 1) loc) pred))
(defund @expm1-%251-rev (mem loc pred)
  (@expm1-%252-rev mem (s '%251 (bitcast-double*-to-i32* (g '%y loc)) loc) pred))
(defund @expm1-%250-rev (mem loc pred)
  (@expm1-%251-rev mem (s '%250 (shl-i32 (g '%249 loc) 20) loc) pred))
(defund @expm1-%249-rev (mem loc pred)
  (@expm1-%250-rev mem (s '%249 (load-i32 (g '%k loc) mem) loc) pred))
(defund @expm1-m236.3-rev (mem loc pred)
  (@expm1-%249-rev (store-double (g '%248 loc) (g '%y loc) mem) loc pred))
(defund @expm1-%248-rev (mem loc pred)
  (@expm1-m236.3-rev mem (s '%248 (fadd-double (g '%247 loc) #x3ff0000000000000) loc) pred))
(defund @expm1-%247-rev (mem loc pred)
  (@expm1-%248-rev mem (s '%247 (load-double (g '%y loc) mem) loc) pred))
(defund @expm1-m236.2-rev (mem loc pred)
  (@expm1-%247-rev (store-double (g '%246 loc) (g '%y loc) mem) loc pred))
(defund @expm1-%246-rev (mem loc pred)
  (@expm1-m236.2-rev mem (s '%246 (fsub-double (g '%242 loc) (g '%245 loc)) loc) pred))
(defund @expm1-%245-rev (mem loc pred)
  (@expm1-%246-rev mem (s '%245 (fadd-double (g '%243 loc) (g '%244 loc)) loc) pred))
(defund @expm1-%244-rev (mem loc pred)
  (@expm1-%245-rev mem (s '%244 (load-double (g '%t loc) mem) loc) pred))
(defund @expm1-%243-rev (mem loc pred)
  (@expm1-%244-rev mem (s '%243 (load-double (g '%e loc) mem) loc) pred))
(defund @expm1-%242-rev (mem loc pred)
  (@expm1-%243-rev mem (s '%242 (load-double (g '%2 loc) mem) loc) pred))
(defund @expm1-m236.1-rev (mem loc pred)
  (@expm1-%242-rev (store-i32 (g '%239 loc) (g '%241 loc) mem) loc pred))
(defund @expm1-%241-rev (mem loc pred)
  (@expm1-m236.1-rev mem (s '%241 (getelementptr-i32 (g '%240 loc) 1) loc) pred))
(defund @expm1-%240-rev (mem loc pred)
  (@expm1-%241-rev mem (s '%240 (bitcast-double*-to-i32* (g '%t loc)) loc) pred))
(defund @expm1-%239-rev (mem loc pred)
  (@expm1-%240-rev mem (s '%239 (shl-i32 (g '%238 loc) 20) loc) pred))
(defund @expm1-%238-rev (mem loc pred)
  (@expm1-%239-rev mem (s '%238 (sub-i32 1023 (g '%237 loc)) loc) pred))
(defund @expm1-%237-rev (mem loc pred)
  (@expm1-%238-rev mem (s '%237 (load-i32 (g '%k loc) mem) loc) pred))

(defund @expm1-%236-rev (mem loc pred)
  (@expm1-%237-rev mem loc pred))

(defruled @expm1-%236-expand-rev-as-@expm1-%237-rev
  (equal (@expm1-%236-rev mem loc pred)
         (let ((s236 (list mem loc pred)))
           (@expm1-%237-rev
            (@expm1-%236-mem s236)
            (@expm1-%236-loc s236)
            (@expm1-%236-pred s236))))
  :enable (@expm1-%236-rev @expm1-%236-mem @expm1-%236-loc @expm1-%236-pred))
(defruled @expm1-%236-expand-rev-as-@expm1-%238-rev
  (equal (@expm1-%236-rev mem loc pred)
         (let ((s236 (list mem loc pred)))
           (@expm1-%238-rev
            (@expm1-%236-mem s236)
            (@expm1-%237-loc s236)
            (@expm1-%236-pred s236))))
  :enable (@expm1-%236-expand-rev-as-@expm1-%237-rev @expm1-%237-rev @expm1-%237-loc @expm1-%237-val))
(defruled @expm1-%236-expand-rev-as-@expm1-%239-rev
  (equal (@expm1-%236-rev mem loc pred)
         (let ((s236 (list mem loc pred)))
           (@expm1-%239-rev
            (@expm1-%236-mem s236)
            (@expm1-%238-loc s236)
            (@expm1-%236-pred s236))))
  :enable (@expm1-%236-expand-rev-as-@expm1-%238-rev @expm1-%238-rev @expm1-%238-loc @expm1-%238-val))
(defruled @expm1-%236-expand-rev-as-@expm1-%240-rev
  (equal (@expm1-%236-rev mem loc pred)
         (let ((s236 (list mem loc pred)))
           (@expm1-%240-rev
            (@expm1-%236-mem s236)
            (@expm1-%239-loc s236)
            (@expm1-%236-pred s236))))
  :enable (@expm1-%236-expand-rev-as-@expm1-%239-rev @expm1-%239-rev @expm1-%239-loc @expm1-%239-val))
(defruled @expm1-%236-expand-rev-as-@expm1-%241-rev
  (equal (@expm1-%236-rev mem loc pred)
         (let ((s236 (list mem loc pred)))
           (@expm1-%241-rev
            (@expm1-%236-mem s236)
            (@expm1-%240-loc s236)
            (@expm1-%236-pred s236))))
  :enable (@expm1-%236-expand-rev-as-@expm1-%240-rev @expm1-%240-rev @expm1-%240-loc @expm1-%240-val))
(defruled @expm1-%236-expand-rev-as-@expm1-m236.1-rev
  (equal (@expm1-%236-rev mem loc pred)
         (let ((s236 (list mem loc pred)))
           (@expm1-m236.1-rev
            (@expm1-%236-mem s236)
            (@expm1-%241-loc s236)
            (@expm1-%236-pred s236))))
  :enable (@expm1-%236-expand-rev-as-@expm1-%241-rev @expm1-%241-rev @expm1-%241-loc @expm1-%241-val))
(defruled @expm1-%236-expand-rev-as-@expm1-%242-rev
  (equal (@expm1-%236-rev mem loc pred)
         (let ((s236 (list mem loc pred)))
           (@expm1-%242-rev
            (@expm1-m236.1-mem s236)
            (@expm1-%241-loc s236)
            (@expm1-%236-pred s236))))
  :enable (@expm1-%236-expand-rev-as-@expm1-m236.1-rev @expm1-m236.1-rev @expm1-m236.1-mem))
(defruled @expm1-%236-expand-rev-as-@expm1-%243-rev
  (equal (@expm1-%236-rev mem loc pred)
         (let ((s236 (list mem loc pred)))
           (@expm1-%243-rev
            (@expm1-m236.1-mem s236)
            (@expm1-%242-loc s236)
            (@expm1-%236-pred s236))))
  :enable (@expm1-%236-expand-rev-as-@expm1-%242-rev @expm1-%242-rev @expm1-%242-loc @expm1-%242-val))
(defruled @expm1-%236-expand-rev-as-@expm1-%244-rev
  (equal (@expm1-%236-rev mem loc pred)
         (let ((s236 (list mem loc pred)))
           (@expm1-%244-rev
            (@expm1-m236.1-mem s236)
            (@expm1-%243-loc s236)
            (@expm1-%236-pred s236))))
  :enable (@expm1-%236-expand-rev-as-@expm1-%243-rev @expm1-%243-rev @expm1-%243-loc @expm1-%243-val))
(defruled @expm1-%236-expand-rev-as-@expm1-%245-rev
  (equal (@expm1-%236-rev mem loc pred)
         (let ((s236 (list mem loc pred)))
           (@expm1-%245-rev
            (@expm1-m236.1-mem s236)
            (@expm1-%244-loc s236)
            (@expm1-%236-pred s236))))
  :enable (@expm1-%236-expand-rev-as-@expm1-%244-rev @expm1-%244-rev @expm1-%244-loc @expm1-%244-val))
(defruled @expm1-%236-expand-rev-as-@expm1-%246-rev
  (equal (@expm1-%236-rev mem loc pred)
         (let ((s236 (list mem loc pred)))
           (@expm1-%246-rev
            (@expm1-m236.1-mem s236)
            (@expm1-%245-loc s236)
            (@expm1-%236-pred s236))))
  :enable (@expm1-%236-expand-rev-as-@expm1-%245-rev @expm1-%245-rev @expm1-%245-loc @expm1-%245-val))
(defruled @expm1-%236-expand-rev-as-@expm1-m236.2-rev
  (equal (@expm1-%236-rev mem loc pred)
         (let ((s236 (list mem loc pred)))
           (@expm1-m236.2-rev
            (@expm1-m236.1-mem s236)
            (@expm1-%246-loc s236)
            (@expm1-%236-pred s236))))
  :enable (@expm1-%236-expand-rev-as-@expm1-%246-rev @expm1-%246-rev @expm1-%246-loc @expm1-%246-val))
(defruled @expm1-%236-expand-rev-as-@expm1-%247-rev
  (equal (@expm1-%236-rev mem loc pred)
         (let ((s236 (list mem loc pred)))
           (@expm1-%247-rev
            (@expm1-m236.2-mem s236)
            (@expm1-%246-loc s236)
            (@expm1-%236-pred s236))))
  :enable (@expm1-%236-expand-rev-as-@expm1-m236.2-rev @expm1-m236.2-rev @expm1-m236.2-mem))
(defruled @expm1-%236-expand-rev-as-@expm1-%248-rev
  (equal (@expm1-%236-rev mem loc pred)
         (let ((s236 (list mem loc pred)))
           (@expm1-%248-rev
            (@expm1-m236.2-mem s236)
            (@expm1-%247-loc s236)
            (@expm1-%236-pred s236))))
  :enable (@expm1-%236-expand-rev-as-@expm1-%247-rev @expm1-%247-rev @expm1-%247-loc @expm1-%247-val))
(defruled @expm1-%236-expand-rev-as-@expm1-m236.3-rev
  (equal (@expm1-%236-rev mem loc pred)
         (let ((s236 (list mem loc pred)))
           (@expm1-m236.3-rev
            (@expm1-m236.2-mem s236)
            (@expm1-%248-loc s236)
            (@expm1-%236-pred s236))))
  :enable (@expm1-%236-expand-rev-as-@expm1-%248-rev @expm1-%248-rev @expm1-%248-loc @expm1-%248-val))
(defruled @expm1-%236-expand-rev-as-@expm1-%249-rev
  (equal (@expm1-%236-rev mem loc pred)
         (let ((s236 (list mem loc pred)))
           (@expm1-%249-rev
            (@expm1-m236.3-mem s236)
            (@expm1-%248-loc s236)
            (@expm1-%236-pred s236))))
  :enable (@expm1-%236-expand-rev-as-@expm1-m236.3-rev @expm1-m236.3-rev @expm1-m236.3-mem))
(defruled @expm1-%236-expand-rev-as-@expm1-%250-rev
  (equal (@expm1-%236-rev mem loc pred)
         (let ((s236 (list mem loc pred)))
           (@expm1-%250-rev
            (@expm1-m236.3-mem s236)
            (@expm1-%249-loc s236)
            (@expm1-%236-pred s236))))
  :enable (@expm1-%236-expand-rev-as-@expm1-%249-rev @expm1-%249-rev @expm1-%249-loc @expm1-%249-val))
(defruled @expm1-%236-expand-rev-as-@expm1-%251-rev
  (equal (@expm1-%236-rev mem loc pred)
         (let ((s236 (list mem loc pred)))
           (@expm1-%251-rev
            (@expm1-m236.3-mem s236)
            (@expm1-%250-loc s236)
            (@expm1-%236-pred s236))))
  :enable (@expm1-%236-expand-rev-as-@expm1-%250-rev @expm1-%250-rev @expm1-%250-loc @expm1-%250-val))
(defruled @expm1-%236-expand-rev-as-@expm1-%252-rev
  (equal (@expm1-%236-rev mem loc pred)
         (let ((s236 (list mem loc pred)))
           (@expm1-%252-rev
            (@expm1-m236.3-mem s236)
            (@expm1-%251-loc s236)
            (@expm1-%236-pred s236))))
  :enable (@expm1-%236-expand-rev-as-@expm1-%251-rev @expm1-%251-rev @expm1-%251-loc @expm1-%251-val))
(defruled @expm1-%236-expand-rev-as-@expm1-%253-rev
  (equal (@expm1-%236-rev mem loc pred)
         (let ((s236 (list mem loc pred)))
           (@expm1-%253-rev
            (@expm1-m236.3-mem s236)
            (@expm1-%252-loc s236)
            (@expm1-%236-pred s236))))
  :enable (@expm1-%236-expand-rev-as-@expm1-%252-rev @expm1-%252-rev @expm1-%252-loc @expm1-%252-val))
(defruled @expm1-%236-expand-rev-as-@expm1-%254-rev
  (equal (@expm1-%236-rev mem loc pred)
         (let ((s236 (list mem loc pred)))
           (@expm1-%254-rev
            (@expm1-m236.3-mem s236)
            (@expm1-%253-loc s236)
            (@expm1-%236-pred s236))))
  :enable (@expm1-%236-expand-rev-as-@expm1-%253-rev @expm1-%253-rev @expm1-%253-loc @expm1-%253-val))
(defruled @expm1-%236-expand-rev-as-@expm1-m236.4-rev
  (equal (@expm1-%236-rev mem loc pred)
         (let ((s236 (list mem loc pred)))
           (@expm1-m236.4-rev
            (@expm1-m236.3-mem s236)
            (@expm1-%254-loc s236)
            (@expm1-%236-pred s236))))
  :enable (@expm1-%236-expand-rev-as-@expm1-%254-rev @expm1-%254-rev @expm1-%254-loc @expm1-%254-val))
(defruled @expm1-%236-expand-rev-as-@expm1-succ236-rev
  (equal (@expm1-%236-rev mem loc pred)
         (let ((s236 (list mem loc pred)))
           (@expm1-succ236-rev
            (@expm1-m236.4-mem s236)
            (@expm1-%254-loc s236)
            (@expm1-%236-pred s236))))
  :enable (@expm1-%236-expand-rev-as-@expm1-m236.4-rev @expm1-m236.4-rev @expm1-m236.4-mem))
(defruled @expm1-%236-expand-rev-as-fwd
  (equal (@expm1-%236-rev mem loc pred)
         (@expm1-%236-fwd mem loc pred))
  :enable (@expm1-%236-expand-rev-as-@expm1-succ236-rev @expm1-succ236-rev @expm1-succ236-lab @expm1-%236-fwd))

(defund @expm1-%236-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%237 (load-i32 (g '%k loc) mem) loc))
    (loc (s '%238 (sub-i32 1023 (g '%237 loc)) loc))
    (loc (s '%239 (shl-i32 (g '%238 loc) 20) loc))
    (loc (s '%240 (bitcast-double*-to-i32* (g '%t loc)) loc))
    (loc (s '%241 (getelementptr-i32 (g '%240 loc) 1) loc))
    (mem (store-i32 (g '%239 loc) (g '%241 loc) mem))
    (loc (s '%242 (load-double (g '%2 loc) mem) loc))
    (loc (s '%243 (load-double (g '%e loc) mem) loc))
    (loc (s '%244 (load-double (g '%t loc) mem) loc))
    (loc (s '%245 (fadd-double (g '%243 loc) (g '%244 loc)) loc))
    (loc (s '%246 (fsub-double (g '%242 loc) (g '%245 loc)) loc))
    (mem (store-double (g '%246 loc) (g '%y loc) mem))
    (loc (s '%247 (load-double (g '%y loc) mem) loc))
    (loc (s '%248 (fadd-double (g '%247 loc) #x3ff0000000000000) loc))
    (mem (store-double (g '%248 loc) (g '%y loc) mem))
    (loc (s '%249 (load-i32 (g '%k loc) mem) loc))
    (loc (s '%250 (shl-i32 (g '%249 loc) 20) loc))
    (loc (s '%251 (bitcast-double*-to-i32* (g '%y loc)) loc))
    (loc (s '%252 (getelementptr-i32 (g '%251 loc) 1) loc))
    (loc (s '%253 (load-i32 (g '%252 loc) mem) loc))
    (loc (s '%254 (add-i32 (g '%253 loc) (g '%250 loc)) loc))
    (mem (store-i32 (g '%254 loc) (g '%252 loc) mem))
    (succ '%255))
  (mv succ mem loc)))

(defund @expm1-%255-mem (s255)
  (car s255))
(defund @expm1-%255-loc (s255)
  (cadr s255))
(defund @expm1-%255-pred (s255)
  (caddr s255))
(defund @expm1-succ255-lab (s255)
  (declare (ignore s255))
  '%256)

(defund @expm1-%255-fwd (mem loc pred)
  (let ((s255 (list mem loc pred)))
    (mv (@expm1-succ255-lab s255) (@expm1-%255-mem s255) (@expm1-%255-loc s255))))

(defund @expm1-succ255-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%256 mem loc))

(defund @expm1-%255-rev (mem loc pred)
  (@expm1-succ255-rev mem loc pred))

(defruled @expm1-%255-expand-rev-as-@expm1-succ255-rev
  (equal (@expm1-%255-rev mem loc pred)
         (let ((s255 (list mem loc pred)))
           (@expm1-succ255-rev
            (@expm1-%255-mem s255)
            (@expm1-%255-loc s255)
            (@expm1-%255-pred s255))))
  :enable (@expm1-%255-rev @expm1-%255-mem @expm1-%255-loc @expm1-%255-pred))
(defruled @expm1-%255-expand-rev-as-fwd
  (equal (@expm1-%255-rev mem loc pred)
         (@expm1-%255-fwd mem loc pred))
  :enable (@expm1-%255-expand-rev-as-@expm1-succ255-rev @expm1-succ255-rev @expm1-succ255-lab @expm1-%255-fwd))

(defund @expm1-%255-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (succ '%256))
  (mv succ mem loc)))

(defund @expm1-%256-mem (s256)
  (car s256))
(defund @expm1-%256-loc (s256)
  (cadr s256))
(defund @expm1-%256-pred (s256)
  (caddr s256))
(defund @expm1-%257-val (s256)
  (load-double (g '%y (@expm1-%256-loc s256)) (@expm1-%256-mem s256)))
(defund @expm1-%257-loc (s256)
  (s '%257 (@expm1-%257-val s256) (@expm1-%256-loc s256)))
(defund @expm1-m256.1-mem (s256)
  (store-double (g '%257 (@expm1-%257-loc s256)) (g '%1 (@expm1-%257-loc s256)) (@expm1-%256-mem s256)))
(defund @expm1-succ256-lab (s256)
  (declare (ignore s256))
  '%258)

(defund @expm1-%256-fwd (mem loc pred)
  (let ((s256 (list mem loc pred)))
    (mv (@expm1-succ256-lab s256) (@expm1-m256.1-mem s256) (@expm1-%257-loc s256))))

(defund @expm1-succ256-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%258 mem loc))
(defund @expm1-m256.1-rev (mem loc pred)
  (@expm1-succ256-rev (store-double (g '%257 loc) (g '%1 loc) mem) loc pred))
(defund @expm1-%257-rev (mem loc pred)
  (@expm1-m256.1-rev mem (s '%257 (load-double (g '%y loc) mem) loc) pred))

(defund @expm1-%256-rev (mem loc pred)
  (@expm1-%257-rev mem loc pred))

(defruled @expm1-%256-expand-rev-as-@expm1-%257-rev
  (equal (@expm1-%256-rev mem loc pred)
         (let ((s256 (list mem loc pred)))
           (@expm1-%257-rev
            (@expm1-%256-mem s256)
            (@expm1-%256-loc s256)
            (@expm1-%256-pred s256))))
  :enable (@expm1-%256-rev @expm1-%256-mem @expm1-%256-loc @expm1-%256-pred))
(defruled @expm1-%256-expand-rev-as-@expm1-m256.1-rev
  (equal (@expm1-%256-rev mem loc pred)
         (let ((s256 (list mem loc pred)))
           (@expm1-m256.1-rev
            (@expm1-%256-mem s256)
            (@expm1-%257-loc s256)
            (@expm1-%256-pred s256))))
  :enable (@expm1-%256-expand-rev-as-@expm1-%257-rev @expm1-%257-rev @expm1-%257-loc @expm1-%257-val))
(defruled @expm1-%256-expand-rev-as-@expm1-succ256-rev
  (equal (@expm1-%256-rev mem loc pred)
         (let ((s256 (list mem loc pred)))
           (@expm1-succ256-rev
            (@expm1-m256.1-mem s256)
            (@expm1-%257-loc s256)
            (@expm1-%256-pred s256))))
  :enable (@expm1-%256-expand-rev-as-@expm1-m256.1-rev @expm1-m256.1-rev @expm1-m256.1-mem))
(defruled @expm1-%256-expand-rev-as-fwd
  (equal (@expm1-%256-rev mem loc pred)
         (@expm1-%256-fwd mem loc pred))
  :enable (@expm1-%256-expand-rev-as-@expm1-succ256-rev @expm1-succ256-rev @expm1-succ256-lab @expm1-%256-fwd))

(defund @expm1-%256-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%257 (load-double (g '%y loc) mem) loc))
    (mem (store-double (g '%257 loc) (g '%1 loc) mem))
    (succ '%258))
  (mv succ mem loc)))

(defund @expm1-%258-mem (s258)
  (car s258))
(defund @expm1-%258-loc (s258)
  (cadr s258))
(defund @expm1-%258-pred (s258)
  (caddr s258))
(defund @expm1-%259-val (s258)
  (load-double (g '%1 (@expm1-%258-loc s258)) (@expm1-%258-mem s258)))
(defund @expm1-%259-loc (s258)
  (s '%259 (@expm1-%259-val s258) (@expm1-%258-loc s258)))
(defund @expm1-succ258-lab (s258)
  (declare (ignore s258))
  'ret)

(defund @expm1-%258-fwd (mem loc pred)
  (let ((s258 (list mem loc pred)))
    (mv (@expm1-succ258-lab s258) (@expm1-%258-mem s258) (@expm1-%259-loc s258))))

(defund @expm1-succ258-rev (mem loc pred)
  (declare (ignore pred))
  (mv 'ret mem loc))
(defund @expm1-%259-rev (mem loc pred)
  (@expm1-succ258-rev mem (s '%259 (load-double (g '%1 loc) mem) loc) pred))

(defund @expm1-%258-rev (mem loc pred)
  (@expm1-%259-rev mem loc pred))

(defruled @expm1-%258-expand-rev-as-@expm1-%259-rev
  (equal (@expm1-%258-rev mem loc pred)
         (let ((s258 (list mem loc pred)))
           (@expm1-%259-rev
            (@expm1-%258-mem s258)
            (@expm1-%258-loc s258)
            (@expm1-%258-pred s258))))
  :enable (@expm1-%258-rev @expm1-%258-mem @expm1-%258-loc @expm1-%258-pred))
(defruled @expm1-%258-expand-rev-as-@expm1-succ258-rev
  (equal (@expm1-%258-rev mem loc pred)
         (let ((s258 (list mem loc pred)))
           (@expm1-succ258-rev
            (@expm1-%258-mem s258)
            (@expm1-%259-loc s258)
            (@expm1-%258-pred s258))))
  :enable (@expm1-%258-expand-rev-as-@expm1-%259-rev @expm1-%259-rev @expm1-%259-loc @expm1-%259-val))
(defruled @expm1-%258-expand-rev-as-fwd
  (equal (@expm1-%258-rev mem loc pred)
         (@expm1-%258-fwd mem loc pred))
  :enable (@expm1-%258-expand-rev-as-@expm1-succ258-rev @expm1-succ258-rev @expm1-succ258-lab @expm1-%258-fwd))

(defund @expm1-%258-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%259 (load-double (g '%1 loc) mem) loc))
    (succ 'ret))
  (mv succ mem loc)))

(defund @expm1-step (label mem loc pred)
  (case label
    (%0 (@expm1-%0-bb mem loc pred))
    (%10 (@expm1-%10-bb mem loc pred))
    (%12 (@expm1-%12-bb mem loc pred))
    (%15 (@expm1-%15-bb mem loc pred))
    (%20 (@expm1-%20-bb mem loc pred))
    (%23 (@expm1-%23-bb mem loc pred))
    (%26 (@expm1-%26-bb mem loc pred))
    (%33 (@expm1-%33-bb mem loc pred))
    (%37 (@expm1-%37-bb mem loc pred))
    (%40 (@expm1-%40-bb mem loc pred))
    (%42 (@expm1-%42-bb mem loc pred))
    (%43 (@expm1-%43-bb mem loc pred))
    (%45 (@expm1-%45-bb mem loc pred))
    (%48 (@expm1-%48-bb mem loc pred))
    (%49 (@expm1-%49-bb mem loc pred))
    (%50 (@expm1-%50-bb mem loc pred))
    (%53 (@expm1-%53-bb mem loc pred))
    (%57 (@expm1-%57-bb mem loc pred))
    (%58 (@expm1-%58-bb mem loc pred))
    (%59 (@expm1-%59-bb mem loc pred))
    (%60 (@expm1-%60-bb mem loc pred))
    (%63 (@expm1-%63-bb mem loc pred))
    (%66 (@expm1-%66-bb mem loc pred))
    (%69 (@expm1-%69-bb mem loc pred))
    (%72 (@expm1-%72-bb mem loc pred))
    (%75 (@expm1-%75-bb mem loc pred))
    (%76 (@expm1-%76-bb mem loc pred))
    (%92 (@expm1-%92-bb mem loc pred))
    (%101 (@expm1-%101-bb mem loc pred))
    (%104 (@expm1-%104-bb mem loc pred))
    (%113 (@expm1-%113-bb mem loc pred))
    (%114 (@expm1-%114-bb mem loc pred))
    (%115 (@expm1-%115-bb mem loc pred))
    (%152 (@expm1-%152-bb mem loc pred))
    (%160 (@expm1-%160-bb mem loc pred))
    (%173 (@expm1-%173-bb mem loc pred))
    (%179 (@expm1-%179-bb mem loc pred))
    (%182 (@expm1-%182-bb mem loc pred))
    (%185 (@expm1-%185-bb mem loc pred))
    (%191 (@expm1-%191-bb mem loc pred))
    (%197 (@expm1-%197-bb mem loc pred))
    (%200 (@expm1-%200-bb mem loc pred))
    (%203 (@expm1-%203-bb mem loc pred))
    (%216 (@expm1-%216-bb mem loc pred))
    (%219 (@expm1-%219-bb mem loc pred))
    (%236 (@expm1-%236-bb mem loc pred))
    (%255 (@expm1-%255-bb mem loc pred))
    (%256 (@expm1-%256-bb mem loc pred))
    (%258 (@expm1-%258-bb mem loc pred))
    (otherwise (mv nil mem loc))))

(defund @expm1-steps (label mem loc pred n)
  (declare (xargs :measure (nfix n)))
  (if (equal label 'ret)
      (g '%259 loc)
    (if (zp n) nil
      (mv-let
        (new-label new-mem new-loc)
        (@expm1-step label mem loc pred)
        (@expm1-steps new-label new-mem new-loc label (1- n))))))

(defund @expm1 (%x)
  (declare (ignore %x))
   nil)
