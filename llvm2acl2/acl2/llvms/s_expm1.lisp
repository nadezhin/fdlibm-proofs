(in-package "ACL2")
(include-book "../llvm")

(defconst *expm1-globals* '())

(defund @expm1-%0-bb (mem loc)
  (b* (
    (mem (alloca-double 'ret 1 mem))
    (mem (alloca-double 'x 1 mem))
    (mem (alloca-double 'y 1 mem))
    (mem (alloca-double 'hi 1 mem))
    (mem (alloca-double 'lo 1 mem))
    (mem (alloca-double 'c 1 mem))
    (mem (alloca-double 't 1 mem))
    (mem (alloca-double 'e 1 mem))
    (mem (alloca-double 'hxs 1 mem))
    (mem (alloca-double 'hfx 1 mem))
    (mem (alloca-double 'r1 1 mem))
    (mem (alloca-i32 'k 1 mem))
    (mem (alloca-i32 'xsb 1 mem))
    (mem (alloca-i32 'hx 1 mem))
    (mem (store-double (g '%x loc) '(x . 0) mem))
    (loc (s '%3 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%4 (getelementptr-i32 (g '%3 loc) 1) loc))
    (loc (s '%5 (load-i32 (g '%4 loc) mem) loc))
    (mem (store-i32 (g '%5 loc) '(hx . 0) mem))
    (loc (s '%6 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%7 (and-i32 (g '%6 loc) -2147483648) loc))
    (mem (store-i32 (g '%7 loc) '(xsb . 0) mem))
    (loc (s '%8 (load-i32 '(xsb . 0) mem) loc))
    (loc (s '%9 (icmp-eq-i32 (g '%8 loc) 0) loc)))
  (case (g '%9 loc)
    (-1 (mv '@expm1-%10-bb mem loc))
    ( 0 (mv '@expm1-%12-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @expm1-%10-bb (mem loc)
  (b* (
    (loc (s '%11 (load-double '(x . 0) mem) loc))
    (mem (store-double (g '%11 loc) '(y . 0) mem)))
  (mv '@expm1-%15-bb mem loc)))

(defund @expm1-%12-bb (mem loc)
  (b* (
    (loc (s '%13 (load-double '(x . 0) mem) loc))
    (loc (s '%14 (fsub-double #x8000000000000000 (g '%13 loc)) loc))
    (mem (store-double (g '%14 loc) '(y . 0) mem)))
  (mv '@expm1-%15-bb mem loc)))

(defund @expm1-%15-bb (mem loc)
  (b* (
    (loc (s '%16 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%17 (and-i32 (g '%16 loc) 2147483647) loc))
    (mem (store-i32 (g '%17 loc) '(hx . 0) mem))
    (loc (s '%18 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%19 (icmp-uge-i32 (g '%18 loc) 1078159482) loc)))
  (case (g '%19 loc)
    (-1 (mv '@expm1-%20-bb mem loc))
    ( 0 (mv '@expm1-%60-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @expm1-%20-bb (mem loc)
  (b* (
    (loc (s '%21 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%22 (icmp-uge-i32 (g '%21 loc) 1082535490) loc)))
  (case (g '%22 loc)
    (-1 (mv '@expm1-%23-bb mem loc))
    ( 0 (mv '@expm1-%50-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @expm1-%23-bb (mem loc)
  (b* (
    (loc (s '%24 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%25 (icmp-uge-i32 (g '%24 loc) 2146435072) loc)))
  (case (g '%25 loc)
    (-1 (mv '@expm1-%26-bb mem loc))
    ( 0 (mv '@expm1-%45-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @expm1-%26-bb (mem loc)
  (b* (
    (loc (s '%27 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%28 (and-i32 (g '%27 loc) 1048575) loc))
    (loc (s '%29 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%30 (load-i32 (g '%29 loc) mem) loc))
    (loc (s '%31 (or-i32 (g '%28 loc) (g '%30 loc)) loc))
    (loc (s '%32 (icmp-ne-i32 (g '%31 loc) 0) loc)))
  (case (g '%32 loc)
    (-1 (mv '@expm1-%33-bb mem loc))
    ( 0 (mv '@expm1-%37-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @expm1-%33-bb (mem loc)
  (b* (
    (loc (s '%34 (load-double '(x . 0) mem) loc))
    (loc (s '%35 (load-double '(x . 0) mem) loc))
    (loc (s '%36 (fadd-double (g '%34 loc) (g '%35 loc)) loc))
    (mem (store-double (g '%36 loc) '(ret . 0) mem)))
  (mv '@expm1-%258-bb mem loc)))

(defund @expm1-%37-bb (mem loc)
  (b* (
    (loc (s '%38 (load-i32 '(xsb . 0) mem) loc))
    (loc (s '%39 (icmp-eq-i32 (g '%38 loc) 0) loc)))
  (case (g '%39 loc)
    (-1 (mv '@expm1-%40-bb mem loc))
    ( 0 (mv '@expm1-%42-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @expm1-%40-bb (mem loc)
  (b* (
    (loc (s '%41 (load-double '(x . 0) mem) loc)))
  (let* ((loc (s '%44 (g '%41 loc) loc))) (mv '@expm1-%43-bb mem loc))))

(defund @expm1-%42-bb (mem loc)
  (b* ()
  (let* ((loc (s '%44 #xbff0000000000000 loc))) (mv '@expm1-%43-bb mem loc))))

(defund @expm1-%43-bb (mem loc)
  ; %44 = phi double [ (g '%41 loc), %40 ], [ #xbff0000000000000, %42 ]
  (b* (
    (mem (store-double (g '%44 loc) '(ret . 0) mem)))
  (mv '@expm1-%258-bb mem loc)))

(defund @expm1-%45-bb (mem loc)
  (b* (
    (loc (s '%46 (load-double '(x . 0) mem) loc))
    (loc (s '%47 (fcmp-ogt-double (g '%46 loc) #x40862E42FEFA39EF) loc)))
  (case (g '%47 loc)
    (-1 (mv '@expm1-%48-bb mem loc))
    ( 0 (mv '@expm1-%49-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @expm1-%48-bb (mem loc)
  (b* (
    (mem (store-double #x7FF0000000000000 '(ret . 0) mem)))
  (mv '@expm1-%258-bb mem loc)))

(defund @expm1-%49-bb (mem loc)
  (b* ()
  (mv '@expm1-%50-bb mem loc)))

(defund @expm1-%50-bb (mem loc)
  (b* (
    (loc (s '%51 (load-i32 '(xsb . 0) mem) loc))
    (loc (s '%52 (icmp-ne-i32 (g '%51 loc) 0) loc)))
  (case (g '%52 loc)
    (-1 (mv '@expm1-%53-bb mem loc))
    ( 0 (mv '@expm1-%59-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @expm1-%53-bb (mem loc)
  (b* (
    (loc (s '%54 (load-double '(x . 0) mem) loc))
    (loc (s '%55 (fadd-double (g '%54 loc) #x01a56e1fc2f8f359) loc))
    (loc (s '%56 (fcmp-olt-double (g '%55 loc) #x0000000000000000) loc)))
  (case (g '%56 loc)
    (-1 (mv '@expm1-%57-bb mem loc))
    ( 0 (mv '@expm1-%58-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @expm1-%57-bb (mem loc)
  (b* (
    (mem (store-double #xbff0000000000000 '(ret . 0) mem)))
  (mv '@expm1-%258-bb mem loc)))

(defund @expm1-%58-bb (mem loc)
  (b* ()
  (mv '@expm1-%59-bb mem loc)))

(defund @expm1-%59-bb (mem loc)
  (b* ()
  (mv '@expm1-%60-bb mem loc)))

(defund @expm1-%60-bb (mem loc)
  (b* (
    (loc (s '%61 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%62 (icmp-ugt-i32 (g '%61 loc) 1071001154) loc)))
  (case (g '%62 loc)
    (-1 (mv '@expm1-%63-bb mem loc))
    ( 0 (mv '@expm1-%101-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @expm1-%63-bb (mem loc)
  (b* (
    (loc (s '%64 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%65 (icmp-ult-i32 (g '%64 loc) 1072734898) loc)))
  (case (g '%65 loc)
    (-1 (mv '@expm1-%66-bb mem loc))
    ( 0 (mv '@expm1-%76-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @expm1-%66-bb (mem loc)
  (b* (
    (loc (s '%67 (load-i32 '(xsb . 0) mem) loc))
    (loc (s '%68 (icmp-eq-i32 (g '%67 loc) 0) loc)))
  (case (g '%68 loc)
    (-1 (mv '@expm1-%69-bb mem loc))
    ( 0 (mv '@expm1-%72-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @expm1-%69-bb (mem loc)
  (b* (
    (loc (s '%70 (load-double '(x . 0) mem) loc))
    (loc (s '%71 (fsub-double (g '%70 loc) #x3FE62E42FEE00000) loc))
    (mem (store-double (g '%71 loc) '(hi . 0) mem))
    (mem (store-double #x3DEA39EF35793C76 '(lo . 0) mem))
    (mem (store-i32 1 '(k . 0) mem)))
  (mv '@expm1-%75-bb mem loc)))

(defund @expm1-%72-bb (mem loc)
  (b* (
    (loc (s '%73 (load-double '(x . 0) mem) loc))
    (loc (s '%74 (fadd-double (g '%73 loc) #x3FE62E42FEE00000) loc))
    (mem (store-double (g '%74 loc) '(hi . 0) mem))
    (mem (store-double #xBDEA39EF35793C76 '(lo . 0) mem))
    (mem (store-i32 -1 '(k . 0) mem)))
  (mv '@expm1-%75-bb mem loc)))

(defund @expm1-%75-bb (mem loc)
  (b* ()
  (mv '@expm1-%92-bb mem loc)))

(defund @expm1-%76-bb (mem loc)
  (b* (
    (loc (s '%77 (load-double '(x . 0) mem) loc))
    (loc (s '%78 (fmul-double #x3FF71547652B82FE (g '%77 loc)) loc))
    (loc (s '%79 (load-i32 '(xsb . 0) mem) loc))
    (loc (s '%80 (icmp-eq-i32 (g '%79 loc) 0) loc))
    (loc (s '%81 (select-double (g '%80 loc) #x3fe0000000000000 #xbfe0000000000000) loc))
    (loc (s '%82 (fadd-double (g '%78 loc) (g '%81 loc)) loc))
    (loc (s '%83 (fptosi-double-to-i32 (g '%82 loc)) loc))
    (mem (store-i32 (g '%83 loc) '(k . 0) mem))
    (loc (s '%84 (load-i32 '(k . 0) mem) loc))
    (loc (s '%85 (sitofp-i32-to-double (g '%84 loc)) loc))
    (mem (store-double (g '%85 loc) '(t . 0) mem))
    (loc (s '%86 (load-double '(x . 0) mem) loc))
    (loc (s '%87 (load-double '(t . 0) mem) loc))
    (loc (s '%88 (fmul-double (g '%87 loc) #x3FE62E42FEE00000) loc))
    (loc (s '%89 (fsub-double (g '%86 loc) (g '%88 loc)) loc))
    (mem (store-double (g '%89 loc) '(hi . 0) mem))
    (loc (s '%90 (load-double '(t . 0) mem) loc))
    (loc (s '%91 (fmul-double (g '%90 loc) #x3DEA39EF35793C76) loc))
    (mem (store-double (g '%91 loc) '(lo . 0) mem)))
  (mv '@expm1-%92-bb mem loc)))

(defund @expm1-%92-bb (mem loc)
  (b* (
    (loc (s '%93 (load-double '(hi . 0) mem) loc))
    (loc (s '%94 (load-double '(lo . 0) mem) loc))
    (loc (s '%95 (fsub-double (g '%93 loc) (g '%94 loc)) loc))
    (mem (store-double (g '%95 loc) '(x . 0) mem))
    (loc (s '%96 (load-double '(hi . 0) mem) loc))
    (loc (s '%97 (load-double '(x . 0) mem) loc))
    (loc (s '%98 (fsub-double (g '%96 loc) (g '%97 loc)) loc))
    (loc (s '%99 (load-double '(lo . 0) mem) loc))
    (loc (s '%100 (fsub-double (g '%98 loc) (g '%99 loc)) loc))
    (mem (store-double (g '%100 loc) '(c . 0) mem)))
  (mv '@expm1-%115-bb mem loc)))

(defund @expm1-%101-bb (mem loc)
  (b* (
    (loc (s '%102 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%103 (icmp-ult-i32 (g '%102 loc) 1016070144) loc)))
  (case (g '%103 loc)
    (-1 (mv '@expm1-%104-bb mem loc))
    ( 0 (mv '@expm1-%113-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @expm1-%104-bb (mem loc)
  (b* (
    (loc (s '%105 (load-double '(x . 0) mem) loc))
    (loc (s '%106 (fadd-double #x7e37e43c8800759c (g '%105 loc)) loc))
    (mem (store-double (g '%106 loc) '(t . 0) mem))
    (loc (s '%107 (load-double '(x . 0) mem) loc))
    (loc (s '%108 (load-double '(t . 0) mem) loc))
    (loc (s '%109 (load-double '(x . 0) mem) loc))
    (loc (s '%110 (fadd-double #x7e37e43c8800759c (g '%109 loc)) loc))
    (loc (s '%111 (fsub-double (g '%108 loc) (g '%110 loc)) loc))
    (loc (s '%112 (fsub-double (g '%107 loc) (g '%111 loc)) loc))
    (mem (store-double (g '%112 loc) '(ret . 0) mem)))
  (mv '@expm1-%258-bb mem loc)))

(defund @expm1-%113-bb (mem loc)
  (b* (
    (mem (store-i32 0 '(k . 0) mem)))
  (mv '@expm1-%114-bb mem loc)))

(defund @expm1-%114-bb (mem loc)
  (b* ()
  (mv '@expm1-%115-bb mem loc)))

(defund @expm1-%115-bb (mem loc)
  (b* (
    (loc (s '%116 (load-double '(x . 0) mem) loc))
    (loc (s '%117 (fmul-double #x3fe0000000000000 (g '%116 loc)) loc))
    (mem (store-double (g '%117 loc) '(hfx . 0) mem))
    (loc (s '%118 (load-double '(x . 0) mem) loc))
    (loc (s '%119 (load-double '(hfx . 0) mem) loc))
    (loc (s '%120 (fmul-double (g '%118 loc) (g '%119 loc)) loc))
    (mem (store-double (g '%120 loc) '(hxs . 0) mem))
    (loc (s '%121 (load-double '(hxs . 0) mem) loc))
    (loc (s '%122 (load-double '(hxs . 0) mem) loc))
    (loc (s '%123 (load-double '(hxs . 0) mem) loc))
    (loc (s '%124 (load-double '(hxs . 0) mem) loc))
    (loc (s '%125 (load-double '(hxs . 0) mem) loc))
    (loc (s '%126 (fmul-double (g '%125 loc) #xBE8AFDB76E09C32D) loc))
    (loc (s '%127 (fadd-double #x3ED0CFCA86E65239 (g '%126 loc)) loc))
    (loc (s '%128 (fmul-double (g '%124 loc) (g '%127 loc)) loc))
    (loc (s '%129 (fadd-double #xBF14CE199EAADBB7 (g '%128 loc)) loc))
    (loc (s '%130 (fmul-double (g '%123 loc) (g '%129 loc)) loc))
    (loc (s '%131 (fadd-double #x3F5A01A019FE5585 (g '%130 loc)) loc))
    (loc (s '%132 (fmul-double (g '%122 loc) (g '%131 loc)) loc))
    (loc (s '%133 (fadd-double #xBFA11111111110F4 (g '%132 loc)) loc))
    (loc (s '%134 (fmul-double (g '%121 loc) (g '%133 loc)) loc))
    (loc (s '%135 (fadd-double #x3ff0000000000000 (g '%134 loc)) loc))
    (mem (store-double (g '%135 loc) '(r1 . 0) mem))
    (loc (s '%136 (load-double '(r1 . 0) mem) loc))
    (loc (s '%137 (load-double '(hfx . 0) mem) loc))
    (loc (s '%138 (fmul-double (g '%136 loc) (g '%137 loc)) loc))
    (loc (s '%139 (fsub-double #x4008000000000000 (g '%138 loc)) loc))
    (mem (store-double (g '%139 loc) '(t . 0) mem))
    (loc (s '%140 (load-double '(hxs . 0) mem) loc))
    (loc (s '%141 (load-double '(r1 . 0) mem) loc))
    (loc (s '%142 (load-double '(t . 0) mem) loc))
    (loc (s '%143 (fsub-double (g '%141 loc) (g '%142 loc)) loc))
    (loc (s '%144 (load-double '(x . 0) mem) loc))
    (loc (s '%145 (load-double '(t . 0) mem) loc))
    (loc (s '%146 (fmul-double (g '%144 loc) (g '%145 loc)) loc))
    (loc (s '%147 (fsub-double #x4018000000000000 (g '%146 loc)) loc))
    (loc (s '%148 (fdiv-double (g '%143 loc) (g '%147 loc)) loc))
    (loc (s '%149 (fmul-double (g '%140 loc) (g '%148 loc)) loc))
    (mem (store-double (g '%149 loc) '(e . 0) mem))
    (loc (s '%150 (load-i32 '(k . 0) mem) loc))
    (loc (s '%151 (icmp-eq-i32 (g '%150 loc) 0) loc)))
  (case (g '%151 loc)
    (-1 (mv '@expm1-%152-bb mem loc))
    ( 0 (mv '@expm1-%160-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @expm1-%152-bb (mem loc)
  (b* (
    (loc (s '%153 (load-double '(x . 0) mem) loc))
    (loc (s '%154 (load-double '(x . 0) mem) loc))
    (loc (s '%155 (load-double '(e . 0) mem) loc))
    (loc (s '%156 (fmul-double (g '%154 loc) (g '%155 loc)) loc))
    (loc (s '%157 (load-double '(hxs . 0) mem) loc))
    (loc (s '%158 (fsub-double (g '%156 loc) (g '%157 loc)) loc))
    (loc (s '%159 (fsub-double (g '%153 loc) (g '%158 loc)) loc))
    (mem (store-double (g '%159 loc) '(ret . 0) mem)))
  (mv '@expm1-%258-bb mem loc)))

(defund @expm1-%160-bb (mem loc)
  (b* (
    (loc (s '%161 (load-double '(x . 0) mem) loc))
    (loc (s '%162 (load-double '(e . 0) mem) loc))
    (loc (s '%163 (load-double '(c . 0) mem) loc))
    (loc (s '%164 (fsub-double (g '%162 loc) (g '%163 loc)) loc))
    (loc (s '%165 (fmul-double (g '%161 loc) (g '%164 loc)) loc))
    (loc (s '%166 (load-double '(c . 0) mem) loc))
    (loc (s '%167 (fsub-double (g '%165 loc) (g '%166 loc)) loc))
    (mem (store-double (g '%167 loc) '(e . 0) mem))
    (loc (s '%168 (load-double '(hxs . 0) mem) loc))
    (loc (s '%169 (load-double '(e . 0) mem) loc))
    (loc (s '%170 (fsub-double (g '%169 loc) (g '%168 loc)) loc))
    (mem (store-double (g '%170 loc) '(e . 0) mem))
    (loc (s '%171 (load-i32 '(k . 0) mem) loc))
    (loc (s '%172 (icmp-eq-i32 (g '%171 loc) -1) loc)))
  (case (g '%172 loc)
    (-1 (mv '@expm1-%173-bb mem loc))
    ( 0 (mv '@expm1-%179-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @expm1-%173-bb (mem loc)
  (b* (
    (loc (s '%174 (load-double '(x . 0) mem) loc))
    (loc (s '%175 (load-double '(e . 0) mem) loc))
    (loc (s '%176 (fsub-double (g '%174 loc) (g '%175 loc)) loc))
    (loc (s '%177 (fmul-double #x3fe0000000000000 (g '%176 loc)) loc))
    (loc (s '%178 (fsub-double (g '%177 loc) #x3fe0000000000000) loc))
    (mem (store-double (g '%178 loc) '(ret . 0) mem)))
  (mv '@expm1-%258-bb mem loc)))

(defund @expm1-%179-bb (mem loc)
  (b* (
    (loc (s '%180 (load-i32 '(k . 0) mem) loc))
    (loc (s '%181 (icmp-eq-i32 (g '%180 loc) 1) loc)))
  (case (g '%181 loc)
    (-1 (mv '@expm1-%182-bb mem loc))
    ( 0 (mv '@expm1-%197-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @expm1-%182-bb (mem loc)
  (b* (
    (loc (s '%183 (load-double '(x . 0) mem) loc))
    (loc (s '%184 (fcmp-olt-double (g '%183 loc) #xbfd0000000000000) loc)))
  (case (g '%184 loc)
    (-1 (mv '@expm1-%185-bb mem loc))
    ( 0 (mv '@expm1-%191-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @expm1-%185-bb (mem loc)
  (b* (
    (loc (s '%186 (load-double '(e . 0) mem) loc))
    (loc (s '%187 (load-double '(x . 0) mem) loc))
    (loc (s '%188 (fadd-double (g '%187 loc) #x3fe0000000000000) loc))
    (loc (s '%189 (fsub-double (g '%186 loc) (g '%188 loc)) loc))
    (loc (s '%190 (fmul-double #xc000000000000000 (g '%189 loc)) loc))
    (mem (store-double (g '%190 loc) '(ret . 0) mem)))
  (mv '@expm1-%258-bb mem loc)))

(defund @expm1-%191-bb (mem loc)
  (b* (
    (loc (s '%192 (load-double '(x . 0) mem) loc))
    (loc (s '%193 (load-double '(e . 0) mem) loc))
    (loc (s '%194 (fsub-double (g '%192 loc) (g '%193 loc)) loc))
    (loc (s '%195 (fmul-double #x4000000000000000 (g '%194 loc)) loc))
    (loc (s '%196 (fadd-double #x3ff0000000000000 (g '%195 loc)) loc))
    (mem (store-double (g '%196 loc) '(ret . 0) mem)))
  (mv '@expm1-%258-bb mem loc)))

(defund @expm1-%197-bb (mem loc)
  (b* (
    (loc (s '%198 (load-i32 '(k . 0) mem) loc))
    (loc (s '%199 (icmp-sle-i32 (g '%198 loc) -2) loc)))
  (case (g '%199 loc)
    (-1 (mv '@expm1-%203-bb mem loc))
    ( 0 (mv '@expm1-%200-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @expm1-%200-bb (mem loc)
  (b* (
    (loc (s '%201 (load-i32 '(k . 0) mem) loc))
    (loc (s '%202 (icmp-sgt-i32 (g '%201 loc) 56) loc)))
  (case (g '%202 loc)
    (-1 (mv '@expm1-%203-bb mem loc))
    ( 0 (mv '@expm1-%216-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @expm1-%203-bb (mem loc)
  (b* (
    (loc (s '%204 (load-double '(e . 0) mem) loc))
    (loc (s '%205 (load-double '(x . 0) mem) loc))
    (loc (s '%206 (fsub-double (g '%204 loc) (g '%205 loc)) loc))
    (loc (s '%207 (fsub-double #x3ff0000000000000 (g '%206 loc)) loc))
    (mem (store-double (g '%207 loc) '(y . 0) mem))
    (loc (s '%208 (load-i32 '(k . 0) mem) loc))
    (loc (s '%209 (shl-i32 (g '%208 loc) 20) loc))
    (loc (s '%210 (bitcast-double*-to-i32* '(y . 0)) loc))
    (loc (s '%211 (getelementptr-i32 (g '%210 loc) 1) loc))
    (loc (s '%212 (load-i32 (g '%211 loc) mem) loc))
    (loc (s '%213 (add-i32 (g '%212 loc) (g '%209 loc)) loc))
    (mem (store-i32 (g '%213 loc) (g '%211 loc) mem))
    (loc (s '%214 (load-double '(y . 0) mem) loc))
    (loc (s '%215 (fsub-double (g '%214 loc) #x3ff0000000000000) loc))
    (mem (store-double (g '%215 loc) '(ret . 0) mem)))
  (mv '@expm1-%258-bb mem loc)))

(defund @expm1-%216-bb (mem loc)
  (b* (
    (mem (store-double #x3ff0000000000000 '(t . 0) mem))
    (loc (s '%217 (load-i32 '(k . 0) mem) loc))
    (loc (s '%218 (icmp-slt-i32 (g '%217 loc) 20) loc)))
  (case (g '%218 loc)
    (-1 (mv '@expm1-%219-bb mem loc))
    ( 0 (mv '@expm1-%236-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @expm1-%219-bb (mem loc)
  (b* (
    (loc (s '%220 (load-i32 '(k . 0) mem) loc))
    (loc (s '%221 (ashr-i32 2097152 (g '%220 loc)) loc))
    (loc (s '%222 (sub-i32 1072693248 (g '%221 loc)) loc))
    (loc (s '%223 (bitcast-double*-to-i32* '(t . 0)) loc))
    (loc (s '%224 (getelementptr-i32 (g '%223 loc) 1) loc))
    (mem (store-i32 (g '%222 loc) (g '%224 loc) mem))
    (loc (s '%225 (load-double '(t . 0) mem) loc))
    (loc (s '%226 (load-double '(e . 0) mem) loc))
    (loc (s '%227 (load-double '(x . 0) mem) loc))
    (loc (s '%228 (fsub-double (g '%226 loc) (g '%227 loc)) loc))
    (loc (s '%229 (fsub-double (g '%225 loc) (g '%228 loc)) loc))
    (mem (store-double (g '%229 loc) '(y . 0) mem))
    (loc (s '%230 (load-i32 '(k . 0) mem) loc))
    (loc (s '%231 (shl-i32 (g '%230 loc) 20) loc))
    (loc (s '%232 (bitcast-double*-to-i32* '(y . 0)) loc))
    (loc (s '%233 (getelementptr-i32 (g '%232 loc) 1) loc))
    (loc (s '%234 (load-i32 (g '%233 loc) mem) loc))
    (loc (s '%235 (add-i32 (g '%234 loc) (g '%231 loc)) loc))
    (mem (store-i32 (g '%235 loc) (g '%233 loc) mem)))
  (mv '@expm1-%255-bb mem loc)))

(defund @expm1-%236-bb (mem loc)
  (b* (
    (loc (s '%237 (load-i32 '(k . 0) mem) loc))
    (loc (s '%238 (sub-i32 1023 (g '%237 loc)) loc))
    (loc (s '%239 (shl-i32 (g '%238 loc) 20) loc))
    (loc (s '%240 (bitcast-double*-to-i32* '(t . 0)) loc))
    (loc (s '%241 (getelementptr-i32 (g '%240 loc) 1) loc))
    (mem (store-i32 (g '%239 loc) (g '%241 loc) mem))
    (loc (s '%242 (load-double '(x . 0) mem) loc))
    (loc (s '%243 (load-double '(e . 0) mem) loc))
    (loc (s '%244 (load-double '(t . 0) mem) loc))
    (loc (s '%245 (fadd-double (g '%243 loc) (g '%244 loc)) loc))
    (loc (s '%246 (fsub-double (g '%242 loc) (g '%245 loc)) loc))
    (mem (store-double (g '%246 loc) '(y . 0) mem))
    (loc (s '%247 (load-double '(y . 0) mem) loc))
    (loc (s '%248 (fadd-double (g '%247 loc) #x3ff0000000000000) loc))
    (mem (store-double (g '%248 loc) '(y . 0) mem))
    (loc (s '%249 (load-i32 '(k . 0) mem) loc))
    (loc (s '%250 (shl-i32 (g '%249 loc) 20) loc))
    (loc (s '%251 (bitcast-double*-to-i32* '(y . 0)) loc))
    (loc (s '%252 (getelementptr-i32 (g '%251 loc) 1) loc))
    (loc (s '%253 (load-i32 (g '%252 loc) mem) loc))
    (loc (s '%254 (add-i32 (g '%253 loc) (g '%250 loc)) loc))
    (mem (store-i32 (g '%254 loc) (g '%252 loc) mem)))
  (mv '@expm1-%255-bb mem loc)))

(defund @expm1-%255-bb (mem loc)
  (b* ()
  (mv '@expm1-%256-bb mem loc)))

(defund @expm1-%256-bb (mem loc)
  (b* (
    (loc (s '%257 (load-double '(y . 0) mem) loc))
    (mem (store-double (g '%257 loc) '(ret . 0) mem)))
  (mv '@expm1-%258-bb mem loc)))

(defund @expm1-%258-bb (mem loc)
  (b* (
    (loc (s '%259 (load-double '(ret . 0) mem) loc)))
  (mv 'ret mem loc)))

(defund @expm1-step (label mem loc)
  (case label
    (%-0 (@expm1-%0-bb mem loc))
    (%-10 (@expm1-%10-bb mem loc))
    (%-12 (@expm1-%12-bb mem loc))
    (%-15 (@expm1-%15-bb mem loc))
    (%-20 (@expm1-%20-bb mem loc))
    (%-23 (@expm1-%23-bb mem loc))
    (%-26 (@expm1-%26-bb mem loc))
    (%-33 (@expm1-%33-bb mem loc))
    (%-37 (@expm1-%37-bb mem loc))
    (%-40 (@expm1-%40-bb mem loc))
    (%-42 (@expm1-%42-bb mem loc))
    (%-43 (@expm1-%43-bb mem loc))
    (%-45 (@expm1-%45-bb mem loc))
    (%-48 (@expm1-%48-bb mem loc))
    (%-49 (@expm1-%49-bb mem loc))
    (%-50 (@expm1-%50-bb mem loc))
    (%-53 (@expm1-%53-bb mem loc))
    (%-57 (@expm1-%57-bb mem loc))
    (%-58 (@expm1-%58-bb mem loc))
    (%-59 (@expm1-%59-bb mem loc))
    (%-60 (@expm1-%60-bb mem loc))
    (%-63 (@expm1-%63-bb mem loc))
    (%-66 (@expm1-%66-bb mem loc))
    (%-69 (@expm1-%69-bb mem loc))
    (%-72 (@expm1-%72-bb mem loc))
    (%-75 (@expm1-%75-bb mem loc))
    (%-76 (@expm1-%76-bb mem loc))
    (%-92 (@expm1-%92-bb mem loc))
    (%-101 (@expm1-%101-bb mem loc))
    (%-104 (@expm1-%104-bb mem loc))
    (%-113 (@expm1-%113-bb mem loc))
    (%-114 (@expm1-%114-bb mem loc))
    (%-115 (@expm1-%115-bb mem loc))
    (%-152 (@expm1-%152-bb mem loc))
    (%-160 (@expm1-%160-bb mem loc))
    (%-173 (@expm1-%173-bb mem loc))
    (%-179 (@expm1-%179-bb mem loc))
    (%-182 (@expm1-%182-bb mem loc))
    (%-185 (@expm1-%185-bb mem loc))
    (%-191 (@expm1-%191-bb mem loc))
    (%-197 (@expm1-%197-bb mem loc))
    (%-200 (@expm1-%200-bb mem loc))
    (%-203 (@expm1-%203-bb mem loc))
    (%-216 (@expm1-%216-bb mem loc))
    (%-219 (@expm1-%219-bb mem loc))
    (%-236 (@expm1-%236-bb mem loc))
    (%-255 (@expm1-%255-bb mem loc))
    (%-256 (@expm1-%256-bb mem loc))
    (%-258 (@expm1-%258-bb mem loc))
    (otherwise (mv nil mem loc))))

(defund @expm1-steps (label mem loc n)
  (declare (xargs :measure (nfix n)))
  (if (equal label 'ret)
      (g '%259 loc)
    (if (zp n) nil
      (mv-let
        (label mem loc)
        (@expm1-step label mem loc)
        (@expm1-steps label mem loc (1- n))))))

(defund @expm1 (%x)
  (declare (ignore %x))
   nil)
