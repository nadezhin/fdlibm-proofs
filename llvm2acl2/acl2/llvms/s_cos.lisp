(in-package "ACL2")
(include-book "std/util/defrule" :dir :system)
(include-book "../llvm")
(include-book "k_cos")
(include-book "k_sin")
(include-book "e_rem_pio2")

(defconst *cos-globals* '())

(defconst *cos-labels* '(%0 %10 %14 %17 %21 %27 %33 %40 %47 %53))

(defund @cos-%0-mem (s0)
  (car s0))
(defund @cos-%0-loc (s0)
  (cadr s0))
(defund @cos-%0-pred (s0)
  (caddr s0))
(defund @cos-%1-mem (s0)
  (alloca-double 'ret 1 (@cos-%0-mem s0)))
(defund @cos-%1-loc (s0)
  (s '%1 '(ret . 0) (@cos-%0-loc s0)))
(defund @cos-%2-mem (s0)
  (alloca-double 'x 1 (@cos-%1-mem s0)))
(defund @cos-%2-loc (s0)
  (s '%2 '(x . 0) (@cos-%1-loc s0)))
(defund @cos-%y-mem (s0)
  (alloca-double 'y 2 (@cos-%2-mem s0)))
(defund @cos-%y-loc (s0)
  (s '%y '(y . 0) (@cos-%2-loc s0)))
(defund @cos-%z-mem (s0)
  (alloca-double 'z 1 (@cos-%y-mem s0)))
(defund @cos-%z-loc (s0)
  (s '%z '(z . 0) (@cos-%y-loc s0)))
(defund @cos-%n-mem (s0)
  (alloca-i32 'n 1 (@cos-%z-mem s0)))
(defund @cos-%n-loc (s0)
  (s '%n '(n . 0) (@cos-%z-loc s0)))
(defund @cos-%ix-mem (s0)
  (alloca-i32 'ix 1 (@cos-%n-mem s0)))
(defund @cos-%ix-loc (s0)
  (s '%ix '(ix . 0) (@cos-%n-loc s0)))
(defund @cos-m0.1-mem (s0)
  (store-double (g '%x (@cos-%ix-loc s0)) (g '%2 (@cos-%ix-loc s0)) (@cos-%ix-mem s0)))
(defund @cos-m0.2-mem (s0)
  (store-double #x0000000000000000 (g '%z (@cos-%ix-loc s0)) (@cos-m0.1-mem s0)))
(defund @cos-%3-val (s0)
  (bitcast-double*-to-i32* (g '%2 (@cos-%ix-loc s0))))
(defund @cos-%3-loc (s0)
  (s '%3 (@cos-%3-val s0) (@cos-%ix-loc s0)))
(defund @cos-%4-val (s0)
  (getelementptr-i32 (g '%3 (@cos-%3-loc s0)) 1))
(defund @cos-%4-loc (s0)
  (s '%4 (@cos-%4-val s0) (@cos-%3-loc s0)))
(defund @cos-%5-val (s0)
  (load-i32 (g '%4 (@cos-%4-loc s0)) (@cos-m0.2-mem s0)))
(defund @cos-%5-loc (s0)
  (s '%5 (@cos-%5-val s0) (@cos-%4-loc s0)))
(defund @cos-m0.3-mem (s0)
  (store-i32 (g '%5 (@cos-%5-loc s0)) (g '%ix (@cos-%5-loc s0)) (@cos-m0.2-mem s0)))
(defund @cos-%6-val (s0)
  (load-i32 (g '%ix (@cos-%5-loc s0)) (@cos-m0.3-mem s0)))
(defund @cos-%6-loc (s0)
  (s '%6 (@cos-%6-val s0) (@cos-%5-loc s0)))
(defund @cos-%7-val (s0)
  (and-i32 (g '%6 (@cos-%6-loc s0)) 2147483647))
(defund @cos-%7-loc (s0)
  (s '%7 (@cos-%7-val s0) (@cos-%6-loc s0)))
(defund @cos-m0.4-mem (s0)
  (store-i32 (g '%7 (@cos-%7-loc s0)) (g '%ix (@cos-%7-loc s0)) (@cos-m0.3-mem s0)))
(defund @cos-%8-val (s0)
  (load-i32 (g '%ix (@cos-%7-loc s0)) (@cos-m0.4-mem s0)))
(defund @cos-%8-loc (s0)
  (s '%8 (@cos-%8-val s0) (@cos-%7-loc s0)))
(defund @cos-%9-val (s0)
  (icmp-sle-i32 (g '%8 (@cos-%8-loc s0)) 1072243195))
(defund @cos-%9-loc (s0)
  (s '%9 (@cos-%9-val s0) (@cos-%8-loc s0)))
(defund @cos-succ0-lab (s0)
  (case (g '%9 (@cos-%9-loc s0)) (-1 '%10) (0 '%14)))

(defund @cos-succ0-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%9 loc) (-1 '%10) (0 '%14)) mem loc))
(defund @cos-%9-rev (mem loc pred)
  (@cos-succ0-rev mem (s '%9 (icmp-sle-i32 (g '%8 loc) 1072243195) loc) pred))
(defund @cos-%8-rev (mem loc pred)
  (@cos-%9-rev mem (s '%8 (load-i32 (g '%ix loc) mem) loc) pred))
(defund @cos-m0.4-rev (mem loc pred)
  (@cos-%8-rev (store-i32 (g '%7 loc) (g '%ix loc) mem) loc pred))
(defund @cos-%7-rev (mem loc pred)
  (@cos-m0.4-rev mem (s '%7 (and-i32 (g '%6 loc) 2147483647) loc) pred))
(defund @cos-%6-rev (mem loc pred)
  (@cos-%7-rev mem (s '%6 (load-i32 (g '%ix loc) mem) loc) pred))
(defund @cos-m0.3-rev (mem loc pred)
  (@cos-%6-rev (store-i32 (g '%5 loc) (g '%ix loc) mem) loc pred))
(defund @cos-%5-rev (mem loc pred)
  (@cos-m0.3-rev mem (s '%5 (load-i32 (g '%4 loc) mem) loc) pred))
(defund @cos-%4-rev (mem loc pred)
  (@cos-%5-rev mem (s '%4 (getelementptr-i32 (g '%3 loc) 1) loc) pred))
(defund @cos-%3-rev (mem loc pred)
  (@cos-%4-rev mem (s '%3 (bitcast-double*-to-i32* (g '%2 loc)) loc) pred))
(defund @cos-m0.2-rev (mem loc pred)
  (@cos-%3-rev (store-double #x0000000000000000 (g '%z loc) mem) loc pred))
(defund @cos-m0.1-rev (mem loc pred)
  (@cos-m0.2-rev (store-double (g '%x loc) (g '%2 loc) mem) loc pred))
(defund @cos-%ix-rev (mem loc pred)
  (@cos-m0.1-rev (alloca-i32 'ix 1 mem) (s '%ix '(ix . 0) loc) pred))
(defund @cos-%n-rev (mem loc pred)
  (@cos-%ix-rev (alloca-i32 'n 1 mem) (s '%n '(n . 0) loc) pred))
(defund @cos-%z-rev (mem loc pred)
  (@cos-%n-rev (alloca-double 'z 1 mem) (s '%z '(z . 0) loc) pred))
(defund @cos-%y-rev (mem loc pred)
  (@cos-%z-rev (alloca-double 'y 2 mem) (s '%y '(y . 0) loc) pred))
(defund @cos-%2-rev (mem loc pred)
  (@cos-%y-rev (alloca-double 'x 1 mem) (s '%2 '(x . 0) loc) pred))
(defund @cos-%1-rev (mem loc pred)
  (@cos-%2-rev (alloca-double 'ret 1 mem) (s '%1 '(ret . 0) loc) pred))

(defund @cos-%0-rev (mem loc pred)
  (@cos-%1-rev mem loc pred))

(defund @cos-%0-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (mem (alloca-double 'ret 1 mem))
    (loc (s '%1 '(ret . 0) loc))
    (mem (alloca-double 'x 1 mem))
    (loc (s '%2 '(x . 0) loc))
    (mem (alloca-double 'y 2 mem))
    (loc (s '%y '(y . 0) loc))
    (mem (alloca-double 'z 1 mem))
    (loc (s '%z '(z . 0) loc))
    (mem (alloca-i32 'n 1 mem))
    (loc (s '%n '(n . 0) loc))
    (mem (alloca-i32 'ix 1 mem))
    (loc (s '%ix '(ix . 0) loc))
    (mem (store-double (g '%x loc) (g '%2 loc) mem))
    (mem (store-double #x0000000000000000 (g '%z loc) mem))
    (loc (s '%3 (bitcast-double*-to-i32* (g '%2 loc)) loc))
    (loc (s '%4 (getelementptr-i32 (g '%3 loc) 1) loc))
    (loc (s '%5 (load-i32 (g '%4 loc) mem) loc))
    (mem (store-i32 (g '%5 loc) (g '%ix loc) mem))
    (loc (s '%6 (load-i32 (g '%ix loc) mem) loc))
    (loc (s '%7 (and-i32 (g '%6 loc) 2147483647) loc))
    (mem (store-i32 (g '%7 loc) (g '%ix loc) mem))
    (loc (s '%8 (load-i32 (g '%ix loc) mem) loc))
    (loc (s '%9 (icmp-sle-i32 (g '%8 loc) 1072243195) loc))
    (succ (case (g '%9 loc) (-1 '%10) (0 '%14))))
  (mv succ mem loc)))

(defruled @cos-%0-expand-bb
  (equal (@cos-%0-bb mem loc pred)
         (@cos-%0-rev mem loc pred))
  :enable (@cos-%0-bb @cos-%0-rev
    @cos-%1-rev
    @cos-%2-rev
    @cos-%y-rev
    @cos-%z-rev
    @cos-%n-rev
    @cos-%ix-rev
    @cos-m0.1-rev
    @cos-m0.2-rev
    @cos-%3-rev
    @cos-%4-rev
    @cos-%5-rev
    @cos-m0.3-rev
    @cos-%6-rev
    @cos-%7-rev
    @cos-m0.4-rev
    @cos-%8-rev
    @cos-%9-rev
    @cos-succ0-rev)
  :disable s-diff-s)

(defund @cos-%10-mem (s10)
  (car s10))
(defund @cos-%10-loc (s10)
  (cadr s10))
(defund @cos-%10-pred (s10)
  (caddr s10))
(defund @cos-%11-val (s10)
  (load-double (g '%2 (@cos-%10-loc s10)) (@cos-%10-mem s10)))
(defund @cos-%11-loc (s10)
  (s '%11 (@cos-%11-val s10) (@cos-%10-loc s10)))
(defund @cos-%12-val (s10)
  (load-double (g '%z (@cos-%11-loc s10)) (@cos-%10-mem s10)))
(defund @cos-%12-loc (s10)
  (s '%12 (@cos-%12-val s10) (@cos-%11-loc s10)))
(defund @cos-%13-val (s10)
  (@__kernel_cos (g '%11 (@cos-%12-loc s10)) (g '%12 (@cos-%12-loc s10))))
(defund @cos-%13-loc (s10)
  (s '%13 (@cos-%13-val s10) (@cos-%12-loc s10)))
(defund @cos-m10.1-mem (s10)
  (store-double (g '%13 (@cos-%13-loc s10)) (g '%1 (@cos-%13-loc s10)) (@cos-%10-mem s10)))
(defund @cos-succ10-lab (s10)
  (declare (ignore s10))
  '%53)

(defund @cos-succ10-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%53 mem loc))
(defund @cos-m10.1-rev (mem loc pred)
  (@cos-succ10-rev (store-double (g '%13 loc) (g '%1 loc) mem) loc pred))
(defund @cos-%13-rev (mem loc pred)
  (@cos-m10.1-rev mem (s '%13 (@__kernel_cos (g '%11 loc) (g '%12 loc)) loc) pred))
(defund @cos-%12-rev (mem loc pred)
  (@cos-%13-rev mem (s '%12 (load-double (g '%z loc) mem) loc) pred))
(defund @cos-%11-rev (mem loc pred)
  (@cos-%12-rev mem (s '%11 (load-double (g '%2 loc) mem) loc) pred))

(defund @cos-%10-rev (mem loc pred)
  (@cos-%11-rev mem loc pred))

(defund @cos-%10-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%11 (load-double (g '%2 loc) mem) loc))
    (loc (s '%12 (load-double (g '%z loc) mem) loc))
    (loc (s '%13 (@__kernel_cos (g '%11 loc) (g '%12 loc)) loc))
    (mem (store-double (g '%13 loc) (g '%1 loc) mem))
    (succ '%53))
  (mv succ mem loc)))

(defruled @cos-%10-expand-bb
  (equal (@cos-%10-bb mem loc pred)
         (@cos-%10-rev mem loc pred))
  :enable (@cos-%10-bb @cos-%10-rev
    @cos-%11-rev
    @cos-%12-rev
    @cos-%13-rev
    @cos-m10.1-rev
    @cos-succ10-rev)
  :disable s-diff-s)

(defund @cos-%14-mem (s14)
  (car s14))
(defund @cos-%14-loc (s14)
  (cadr s14))
(defund @cos-%14-pred (s14)
  (caddr s14))
(defund @cos-%15-val (s14)
  (load-i32 (g '%ix (@cos-%14-loc s14)) (@cos-%14-mem s14)))
(defund @cos-%15-loc (s14)
  (s '%15 (@cos-%15-val s14) (@cos-%14-loc s14)))
(defund @cos-%16-val (s14)
  (icmp-sge-i32 (g '%15 (@cos-%15-loc s14)) 2146435072))
(defund @cos-%16-loc (s14)
  (s '%16 (@cos-%16-val s14) (@cos-%15-loc s14)))
(defund @cos-succ14-lab (s14)
  (case (g '%16 (@cos-%16-loc s14)) (-1 '%17) (0 '%21)))

(defund @cos-succ14-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%16 loc) (-1 '%17) (0 '%21)) mem loc))
(defund @cos-%16-rev (mem loc pred)
  (@cos-succ14-rev mem (s '%16 (icmp-sge-i32 (g '%15 loc) 2146435072) loc) pred))
(defund @cos-%15-rev (mem loc pred)
  (@cos-%16-rev mem (s '%15 (load-i32 (g '%ix loc) mem) loc) pred))

(defund @cos-%14-rev (mem loc pred)
  (@cos-%15-rev mem loc pred))

(defund @cos-%14-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%15 (load-i32 (g '%ix loc) mem) loc))
    (loc (s '%16 (icmp-sge-i32 (g '%15 loc) 2146435072) loc))
    (succ (case (g '%16 loc) (-1 '%17) (0 '%21))))
  (mv succ mem loc)))

(defruled @cos-%14-expand-bb
  (equal (@cos-%14-bb mem loc pred)
         (@cos-%14-rev mem loc pred))
  :enable (@cos-%14-bb @cos-%14-rev
    @cos-%15-rev
    @cos-%16-rev
    @cos-succ14-rev)
  :disable s-diff-s)

(defund @cos-%17-mem (s17)
  (car s17))
(defund @cos-%17-loc (s17)
  (cadr s17))
(defund @cos-%17-pred (s17)
  (caddr s17))
(defund @cos-%18-val (s17)
  (load-double (g '%2 (@cos-%17-loc s17)) (@cos-%17-mem s17)))
(defund @cos-%18-loc (s17)
  (s '%18 (@cos-%18-val s17) (@cos-%17-loc s17)))
(defund @cos-%19-val (s17)
  (load-double (g '%2 (@cos-%18-loc s17)) (@cos-%17-mem s17)))
(defund @cos-%19-loc (s17)
  (s '%19 (@cos-%19-val s17) (@cos-%18-loc s17)))
(defund @cos-%20-val (s17)
  (fsub-double (g '%18 (@cos-%19-loc s17)) (g '%19 (@cos-%19-loc s17))))
(defund @cos-%20-loc (s17)
  (s '%20 (@cos-%20-val s17) (@cos-%19-loc s17)))
(defund @cos-m17.1-mem (s17)
  (store-double (g '%20 (@cos-%20-loc s17)) (g '%1 (@cos-%20-loc s17)) (@cos-%17-mem s17)))
(defund @cos-succ17-lab (s17)
  (declare (ignore s17))
  '%53)

(defund @cos-succ17-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%53 mem loc))
(defund @cos-m17.1-rev (mem loc pred)
  (@cos-succ17-rev (store-double (g '%20 loc) (g '%1 loc) mem) loc pred))
(defund @cos-%20-rev (mem loc pred)
  (@cos-m17.1-rev mem (s '%20 (fsub-double (g '%18 loc) (g '%19 loc)) loc) pred))
(defund @cos-%19-rev (mem loc pred)
  (@cos-%20-rev mem (s '%19 (load-double (g '%2 loc) mem) loc) pred))
(defund @cos-%18-rev (mem loc pred)
  (@cos-%19-rev mem (s '%18 (load-double (g '%2 loc) mem) loc) pred))

(defund @cos-%17-rev (mem loc pred)
  (@cos-%18-rev mem loc pred))

(defund @cos-%17-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%18 (load-double (g '%2 loc) mem) loc))
    (loc (s '%19 (load-double (g '%2 loc) mem) loc))
    (loc (s '%20 (fsub-double (g '%18 loc) (g '%19 loc)) loc))
    (mem (store-double (g '%20 loc) (g '%1 loc) mem))
    (succ '%53))
  (mv succ mem loc)))

(defruled @cos-%17-expand-bb
  (equal (@cos-%17-bb mem loc pred)
         (@cos-%17-rev mem loc pred))
  :enable (@cos-%17-bb @cos-%17-rev
    @cos-%18-rev
    @cos-%19-rev
    @cos-%20-rev
    @cos-m17.1-rev
    @cos-succ17-rev)
  :disable s-diff-s)

(defund @cos-%21-mem (s21)
  (car s21))
(defund @cos-%21-loc (s21)
  (cadr s21))
(defund @cos-%21-pred (s21)
  (caddr s21))
(defund @cos-%22-val (s21)
  (load-double (g '%2 (@cos-%21-loc s21)) (@cos-%21-mem s21)))
(defund @cos-%22-loc (s21)
  (s '%22 (@cos-%22-val s21) (@cos-%21-loc s21)))
(defund @cos-%23-val (s21)
  (getelementptr-double (g '%y (@cos-%22-loc s21)) 0))
(defund @cos-%23-loc (s21)
  (s '%23 (@cos-%23-val s21) (@cos-%22-loc s21)))
(defund @cos-%24-val (s21)
  (@__ieee754_rem_pio2 (g '%22 (@cos-%23-loc s21)) (g '%23 (@cos-%23-loc s21))))
(defund @cos-%24-loc (s21)
  (s '%24 (@cos-%24-val s21) (@cos-%23-loc s21)))
(defund @cos-m21.1-mem (s21)
  (store-i32 (g '%24 (@cos-%24-loc s21)) (g '%n (@cos-%24-loc s21)) (@cos-%21-mem s21)))
(defund @cos-%25-val (s21)
  (load-i32 (g '%n (@cos-%24-loc s21)) (@cos-m21.1-mem s21)))
(defund @cos-%25-loc (s21)
  (s '%25 (@cos-%25-val s21) (@cos-%24-loc s21)))
(defund @cos-%26-val (s21)
  (and-i32 (g '%25 (@cos-%25-loc s21)) 3))
(defund @cos-%26-loc (s21)
  (s '%26 (@cos-%26-val s21) (@cos-%25-loc s21)))
(defund @cos-succ21-lab (s21)
  (case (g '%26 (@cos-%26-loc s21))(0 '%27)(1 '%33)(2 '%40) (otherwise '%47)))

(defund @cos-succ21-rev (mem loc pred)
  (declare (ignore pred))
  (mv (case (g '%26 loc)(0 '%27)(1 '%33)(2 '%40) (otherwise '%47)) mem loc))
(defund @cos-%26-rev (mem loc pred)
  (@cos-succ21-rev mem (s '%26 (and-i32 (g '%25 loc) 3) loc) pred))
(defund @cos-%25-rev (mem loc pred)
  (@cos-%26-rev mem (s '%25 (load-i32 (g '%n loc) mem) loc) pred))
(defund @cos-m21.1-rev (mem loc pred)
  (@cos-%25-rev (store-i32 (g '%24 loc) (g '%n loc) mem) loc pred))
(defund @cos-%24-rev (mem loc pred)
  (@cos-m21.1-rev mem (s '%24 (@__ieee754_rem_pio2 (g '%22 loc) (g '%23 loc)) loc) pred))
(defund @cos-%23-rev (mem loc pred)
  (@cos-%24-rev mem (s '%23 (getelementptr-double (g '%y loc) 0) loc) pred))
(defund @cos-%22-rev (mem loc pred)
  (@cos-%23-rev mem (s '%22 (load-double (g '%2 loc) mem) loc) pred))

(defund @cos-%21-rev (mem loc pred)
  (@cos-%22-rev mem loc pred))

(defund @cos-%21-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%22 (load-double (g '%2 loc) mem) loc))
    (loc (s '%23 (getelementptr-double (g '%y loc) 0) loc))
    (loc (s '%24 (@__ieee754_rem_pio2 (g '%22 loc) (g '%23 loc)) loc))
    (mem (store-i32 (g '%24 loc) (g '%n loc) mem))
    (loc (s '%25 (load-i32 (g '%n loc) mem) loc))
    (loc (s '%26 (and-i32 (g '%25 loc) 3) loc))
    (succ (case (g '%26 loc)(0 '%27)(1 '%33)(2 '%40) (otherwise '%47))))
  (mv succ mem loc)))

(defruled @cos-%21-expand-bb
  (equal (@cos-%21-bb mem loc pred)
         (@cos-%21-rev mem loc pred))
  :enable (@cos-%21-bb @cos-%21-rev
    @cos-%22-rev
    @cos-%23-rev
    @cos-%24-rev
    @cos-m21.1-rev
    @cos-%25-rev
    @cos-%26-rev
    @cos-succ21-rev)
  :disable s-diff-s)

(defund @cos-%27-mem (s27)
  (car s27))
(defund @cos-%27-loc (s27)
  (cadr s27))
(defund @cos-%27-pred (s27)
  (caddr s27))
(defund @cos-%28-val (s27)
  (getelementptr-double (g '%y (@cos-%27-loc s27)) 0))
(defund @cos-%28-loc (s27)
  (s '%28 (@cos-%28-val s27) (@cos-%27-loc s27)))
(defund @cos-%29-val (s27)
  (load-double (g '%28 (@cos-%28-loc s27)) (@cos-%27-mem s27)))
(defund @cos-%29-loc (s27)
  (s '%29 (@cos-%29-val s27) (@cos-%28-loc s27)))
(defund @cos-%30-val (s27)
  (getelementptr-double (g '%y (@cos-%29-loc s27)) 1))
(defund @cos-%30-loc (s27)
  (s '%30 (@cos-%30-val s27) (@cos-%29-loc s27)))
(defund @cos-%31-val (s27)
  (load-double (g '%30 (@cos-%30-loc s27)) (@cos-%27-mem s27)))
(defund @cos-%31-loc (s27)
  (s '%31 (@cos-%31-val s27) (@cos-%30-loc s27)))
(defund @cos-%32-val (s27)
  (@__kernel_cos (g '%29 (@cos-%31-loc s27)) (g '%31 (@cos-%31-loc s27))))
(defund @cos-%32-loc (s27)
  (s '%32 (@cos-%32-val s27) (@cos-%31-loc s27)))
(defund @cos-m27.1-mem (s27)
  (store-double (g '%32 (@cos-%32-loc s27)) (g '%1 (@cos-%32-loc s27)) (@cos-%27-mem s27)))
(defund @cos-succ27-lab (s27)
  (declare (ignore s27))
  '%53)

(defund @cos-succ27-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%53 mem loc))
(defund @cos-m27.1-rev (mem loc pred)
  (@cos-succ27-rev (store-double (g '%32 loc) (g '%1 loc) mem) loc pred))
(defund @cos-%32-rev (mem loc pred)
  (@cos-m27.1-rev mem (s '%32 (@__kernel_cos (g '%29 loc) (g '%31 loc)) loc) pred))
(defund @cos-%31-rev (mem loc pred)
  (@cos-%32-rev mem (s '%31 (load-double (g '%30 loc) mem) loc) pred))
(defund @cos-%30-rev (mem loc pred)
  (@cos-%31-rev mem (s '%30 (getelementptr-double (g '%y loc) 1) loc) pred))
(defund @cos-%29-rev (mem loc pred)
  (@cos-%30-rev mem (s '%29 (load-double (g '%28 loc) mem) loc) pred))
(defund @cos-%28-rev (mem loc pred)
  (@cos-%29-rev mem (s '%28 (getelementptr-double (g '%y loc) 0) loc) pred))

(defund @cos-%27-rev (mem loc pred)
  (@cos-%28-rev mem loc pred))

(defund @cos-%27-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%28 (getelementptr-double (g '%y loc) 0) loc))
    (loc (s '%29 (load-double (g '%28 loc) mem) loc))
    (loc (s '%30 (getelementptr-double (g '%y loc) 1) loc))
    (loc (s '%31 (load-double (g '%30 loc) mem) loc))
    (loc (s '%32 (@__kernel_cos (g '%29 loc) (g '%31 loc)) loc))
    (mem (store-double (g '%32 loc) (g '%1 loc) mem))
    (succ '%53))
  (mv succ mem loc)))

(defruled @cos-%27-expand-bb
  (equal (@cos-%27-bb mem loc pred)
         (@cos-%27-rev mem loc pred))
  :enable (@cos-%27-bb @cos-%27-rev
    @cos-%28-rev
    @cos-%29-rev
    @cos-%30-rev
    @cos-%31-rev
    @cos-%32-rev
    @cos-m27.1-rev
    @cos-succ27-rev)
  :disable s-diff-s)

(defund @cos-%33-mem (s33)
  (car s33))
(defund @cos-%33-loc (s33)
  (cadr s33))
(defund @cos-%33-pred (s33)
  (caddr s33))
(defund @cos-%34-val (s33)
  (getelementptr-double (g '%y (@cos-%33-loc s33)) 0))
(defund @cos-%34-loc (s33)
  (s '%34 (@cos-%34-val s33) (@cos-%33-loc s33)))
(defund @cos-%35-val (s33)
  (load-double (g '%34 (@cos-%34-loc s33)) (@cos-%33-mem s33)))
(defund @cos-%35-loc (s33)
  (s '%35 (@cos-%35-val s33) (@cos-%34-loc s33)))
(defund @cos-%36-val (s33)
  (getelementptr-double (g '%y (@cos-%35-loc s33)) 1))
(defund @cos-%36-loc (s33)
  (s '%36 (@cos-%36-val s33) (@cos-%35-loc s33)))
(defund @cos-%37-val (s33)
  (load-double (g '%36 (@cos-%36-loc s33)) (@cos-%33-mem s33)))
(defund @cos-%37-loc (s33)
  (s '%37 (@cos-%37-val s33) (@cos-%36-loc s33)))
(defund @cos-%38-val (s33)
  (@__kernel_sin (g '%35 (@cos-%37-loc s33)) (g '%37 (@cos-%37-loc s33)) 1))
(defund @cos-%38-loc (s33)
  (s '%38 (@cos-%38-val s33) (@cos-%37-loc s33)))
(defund @cos-%39-val (s33)
  (fsub-double #x8000000000000000 (g '%38 (@cos-%38-loc s33))))
(defund @cos-%39-loc (s33)
  (s '%39 (@cos-%39-val s33) (@cos-%38-loc s33)))
(defund @cos-m33.1-mem (s33)
  (store-double (g '%39 (@cos-%39-loc s33)) (g '%1 (@cos-%39-loc s33)) (@cos-%33-mem s33)))
(defund @cos-succ33-lab (s33)
  (declare (ignore s33))
  '%53)

(defund @cos-succ33-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%53 mem loc))
(defund @cos-m33.1-rev (mem loc pred)
  (@cos-succ33-rev (store-double (g '%39 loc) (g '%1 loc) mem) loc pred))
(defund @cos-%39-rev (mem loc pred)
  (@cos-m33.1-rev mem (s '%39 (fsub-double #x8000000000000000 (g '%38 loc)) loc) pred))
(defund @cos-%38-rev (mem loc pred)
  (@cos-%39-rev mem (s '%38 (@__kernel_sin (g '%35 loc) (g '%37 loc) 1) loc) pred))
(defund @cos-%37-rev (mem loc pred)
  (@cos-%38-rev mem (s '%37 (load-double (g '%36 loc) mem) loc) pred))
(defund @cos-%36-rev (mem loc pred)
  (@cos-%37-rev mem (s '%36 (getelementptr-double (g '%y loc) 1) loc) pred))
(defund @cos-%35-rev (mem loc pred)
  (@cos-%36-rev mem (s '%35 (load-double (g '%34 loc) mem) loc) pred))
(defund @cos-%34-rev (mem loc pred)
  (@cos-%35-rev mem (s '%34 (getelementptr-double (g '%y loc) 0) loc) pred))

(defund @cos-%33-rev (mem loc pred)
  (@cos-%34-rev mem loc pred))

(defund @cos-%33-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%34 (getelementptr-double (g '%y loc) 0) loc))
    (loc (s '%35 (load-double (g '%34 loc) mem) loc))
    (loc (s '%36 (getelementptr-double (g '%y loc) 1) loc))
    (loc (s '%37 (load-double (g '%36 loc) mem) loc))
    (loc (s '%38 (@__kernel_sin (g '%35 loc) (g '%37 loc) 1) loc))
    (loc (s '%39 (fsub-double #x8000000000000000 (g '%38 loc)) loc))
    (mem (store-double (g '%39 loc) (g '%1 loc) mem))
    (succ '%53))
  (mv succ mem loc)))

(defruled @cos-%33-expand-bb
  (equal (@cos-%33-bb mem loc pred)
         (@cos-%33-rev mem loc pred))
  :enable (@cos-%33-bb @cos-%33-rev
    @cos-%34-rev
    @cos-%35-rev
    @cos-%36-rev
    @cos-%37-rev
    @cos-%38-rev
    @cos-%39-rev
    @cos-m33.1-rev
    @cos-succ33-rev)
  :disable s-diff-s)

(defund @cos-%40-mem (s40)
  (car s40))
(defund @cos-%40-loc (s40)
  (cadr s40))
(defund @cos-%40-pred (s40)
  (caddr s40))
(defund @cos-%41-val (s40)
  (getelementptr-double (g '%y (@cos-%40-loc s40)) 0))
(defund @cos-%41-loc (s40)
  (s '%41 (@cos-%41-val s40) (@cos-%40-loc s40)))
(defund @cos-%42-val (s40)
  (load-double (g '%41 (@cos-%41-loc s40)) (@cos-%40-mem s40)))
(defund @cos-%42-loc (s40)
  (s '%42 (@cos-%42-val s40) (@cos-%41-loc s40)))
(defund @cos-%43-val (s40)
  (getelementptr-double (g '%y (@cos-%42-loc s40)) 1))
(defund @cos-%43-loc (s40)
  (s '%43 (@cos-%43-val s40) (@cos-%42-loc s40)))
(defund @cos-%44-val (s40)
  (load-double (g '%43 (@cos-%43-loc s40)) (@cos-%40-mem s40)))
(defund @cos-%44-loc (s40)
  (s '%44 (@cos-%44-val s40) (@cos-%43-loc s40)))
(defund @cos-%45-val (s40)
  (@__kernel_cos (g '%42 (@cos-%44-loc s40)) (g '%44 (@cos-%44-loc s40))))
(defund @cos-%45-loc (s40)
  (s '%45 (@cos-%45-val s40) (@cos-%44-loc s40)))
(defund @cos-%46-val (s40)
  (fsub-double #x8000000000000000 (g '%45 (@cos-%45-loc s40))))
(defund @cos-%46-loc (s40)
  (s '%46 (@cos-%46-val s40) (@cos-%45-loc s40)))
(defund @cos-m40.1-mem (s40)
  (store-double (g '%46 (@cos-%46-loc s40)) (g '%1 (@cos-%46-loc s40)) (@cos-%40-mem s40)))
(defund @cos-succ40-lab (s40)
  (declare (ignore s40))
  '%53)

(defund @cos-succ40-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%53 mem loc))
(defund @cos-m40.1-rev (mem loc pred)
  (@cos-succ40-rev (store-double (g '%46 loc) (g '%1 loc) mem) loc pred))
(defund @cos-%46-rev (mem loc pred)
  (@cos-m40.1-rev mem (s '%46 (fsub-double #x8000000000000000 (g '%45 loc)) loc) pred))
(defund @cos-%45-rev (mem loc pred)
  (@cos-%46-rev mem (s '%45 (@__kernel_cos (g '%42 loc) (g '%44 loc)) loc) pred))
(defund @cos-%44-rev (mem loc pred)
  (@cos-%45-rev mem (s '%44 (load-double (g '%43 loc) mem) loc) pred))
(defund @cos-%43-rev (mem loc pred)
  (@cos-%44-rev mem (s '%43 (getelementptr-double (g '%y loc) 1) loc) pred))
(defund @cos-%42-rev (mem loc pred)
  (@cos-%43-rev mem (s '%42 (load-double (g '%41 loc) mem) loc) pred))
(defund @cos-%41-rev (mem loc pred)
  (@cos-%42-rev mem (s '%41 (getelementptr-double (g '%y loc) 0) loc) pred))

(defund @cos-%40-rev (mem loc pred)
  (@cos-%41-rev mem loc pred))

(defund @cos-%40-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%41 (getelementptr-double (g '%y loc) 0) loc))
    (loc (s '%42 (load-double (g '%41 loc) mem) loc))
    (loc (s '%43 (getelementptr-double (g '%y loc) 1) loc))
    (loc (s '%44 (load-double (g '%43 loc) mem) loc))
    (loc (s '%45 (@__kernel_cos (g '%42 loc) (g '%44 loc)) loc))
    (loc (s '%46 (fsub-double #x8000000000000000 (g '%45 loc)) loc))
    (mem (store-double (g '%46 loc) (g '%1 loc) mem))
    (succ '%53))
  (mv succ mem loc)))

(defruled @cos-%40-expand-bb
  (equal (@cos-%40-bb mem loc pred)
         (@cos-%40-rev mem loc pred))
  :enable (@cos-%40-bb @cos-%40-rev
    @cos-%41-rev
    @cos-%42-rev
    @cos-%43-rev
    @cos-%44-rev
    @cos-%45-rev
    @cos-%46-rev
    @cos-m40.1-rev
    @cos-succ40-rev)
  :disable s-diff-s)

(defund @cos-%47-mem (s47)
  (car s47))
(defund @cos-%47-loc (s47)
  (cadr s47))
(defund @cos-%47-pred (s47)
  (caddr s47))
(defund @cos-%48-val (s47)
  (getelementptr-double (g '%y (@cos-%47-loc s47)) 0))
(defund @cos-%48-loc (s47)
  (s '%48 (@cos-%48-val s47) (@cos-%47-loc s47)))
(defund @cos-%49-val (s47)
  (load-double (g '%48 (@cos-%48-loc s47)) (@cos-%47-mem s47)))
(defund @cos-%49-loc (s47)
  (s '%49 (@cos-%49-val s47) (@cos-%48-loc s47)))
(defund @cos-%50-val (s47)
  (getelementptr-double (g '%y (@cos-%49-loc s47)) 1))
(defund @cos-%50-loc (s47)
  (s '%50 (@cos-%50-val s47) (@cos-%49-loc s47)))
(defund @cos-%51-val (s47)
  (load-double (g '%50 (@cos-%50-loc s47)) (@cos-%47-mem s47)))
(defund @cos-%51-loc (s47)
  (s '%51 (@cos-%51-val s47) (@cos-%50-loc s47)))
(defund @cos-%52-val (s47)
  (@__kernel_sin (g '%49 (@cos-%51-loc s47)) (g '%51 (@cos-%51-loc s47)) 1))
(defund @cos-%52-loc (s47)
  (s '%52 (@cos-%52-val s47) (@cos-%51-loc s47)))
(defund @cos-m47.1-mem (s47)
  (store-double (g '%52 (@cos-%52-loc s47)) (g '%1 (@cos-%52-loc s47)) (@cos-%47-mem s47)))
(defund @cos-succ47-lab (s47)
  (declare (ignore s47))
  '%53)

(defund @cos-succ47-rev (mem loc pred)
  (declare (ignore pred))
  (mv '%53 mem loc))
(defund @cos-m47.1-rev (mem loc pred)
  (@cos-succ47-rev (store-double (g '%52 loc) (g '%1 loc) mem) loc pred))
(defund @cos-%52-rev (mem loc pred)
  (@cos-m47.1-rev mem (s '%52 (@__kernel_sin (g '%49 loc) (g '%51 loc) 1) loc) pred))
(defund @cos-%51-rev (mem loc pred)
  (@cos-%52-rev mem (s '%51 (load-double (g '%50 loc) mem) loc) pred))
(defund @cos-%50-rev (mem loc pred)
  (@cos-%51-rev mem (s '%50 (getelementptr-double (g '%y loc) 1) loc) pred))
(defund @cos-%49-rev (mem loc pred)
  (@cos-%50-rev mem (s '%49 (load-double (g '%48 loc) mem) loc) pred))
(defund @cos-%48-rev (mem loc pred)
  (@cos-%49-rev mem (s '%48 (getelementptr-double (g '%y loc) 0) loc) pred))

(defund @cos-%47-rev (mem loc pred)
  (@cos-%48-rev mem loc pred))

(defund @cos-%47-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%48 (getelementptr-double (g '%y loc) 0) loc))
    (loc (s '%49 (load-double (g '%48 loc) mem) loc))
    (loc (s '%50 (getelementptr-double (g '%y loc) 1) loc))
    (loc (s '%51 (load-double (g '%50 loc) mem) loc))
    (loc (s '%52 (@__kernel_sin (g '%49 loc) (g '%51 loc) 1) loc))
    (mem (store-double (g '%52 loc) (g '%1 loc) mem))
    (succ '%53))
  (mv succ mem loc)))

(defruled @cos-%47-expand-bb
  (equal (@cos-%47-bb mem loc pred)
         (@cos-%47-rev mem loc pred))
  :enable (@cos-%47-bb @cos-%47-rev
    @cos-%48-rev
    @cos-%49-rev
    @cos-%50-rev
    @cos-%51-rev
    @cos-%52-rev
    @cos-m47.1-rev
    @cos-succ47-rev)
  :disable s-diff-s)

(defund @cos-%53-mem (s53)
  (car s53))
(defund @cos-%53-loc (s53)
  (cadr s53))
(defund @cos-%53-pred (s53)
  (caddr s53))
(defund @cos-%54-val (s53)
  (load-double (g '%1 (@cos-%53-loc s53)) (@cos-%53-mem s53)))
(defund @cos-%54-loc (s53)
  (s '%54 (@cos-%54-val s53) (@cos-%53-loc s53)))
(defund @cos-succ53-lab (s53)
  (declare (ignore s53))
  'ret)

(defund @cos-succ53-rev (mem loc pred)
  (declare (ignore pred))
  (mv 'ret mem loc))
(defund @cos-%54-rev (mem loc pred)
  (@cos-succ53-rev mem (s '%54 (load-double (g '%1 loc) mem) loc) pred))

(defund @cos-%53-rev (mem loc pred)
  (@cos-%54-rev mem loc pred))

(defund @cos-%53-bb (mem loc pred)
  (declare (ignore pred))
  (b* (
    (loc (s '%54 (load-double (g '%1 loc) mem) loc))
    (succ 'ret))
  (mv succ mem loc)))

(defruled @cos-%53-expand-bb
  (equal (@cos-%53-bb mem loc pred)
         (@cos-%53-rev mem loc pred))
  :enable (@cos-%53-bb @cos-%53-rev
    @cos-%54-rev
    @cos-succ53-rev)
  :disable s-diff-s)

(defund @cos-step (label mem loc pred)
  (case label
    (%0 (@cos-%0-bb mem loc pred))
    (%10 (@cos-%10-bb mem loc pred))
    (%14 (@cos-%14-bb mem loc pred))
    (%17 (@cos-%17-bb mem loc pred))
    (%21 (@cos-%21-bb mem loc pred))
    (%27 (@cos-%27-bb mem loc pred))
    (%33 (@cos-%33-bb mem loc pred))
    (%40 (@cos-%40-bb mem loc pred))
    (%47 (@cos-%47-bb mem loc pred))
    (%53 (@cos-%53-bb mem loc pred))
    (otherwise (mv nil mem loc))))

(defund @cos-steps (label mem loc pred n)
  (declare (xargs :measure (nfix n)))
  (if (equal label 'ret)
      (g '%54 loc)
    (if (zp n) nil
      (mv-let
        (new-label new-mem new-loc)
        (@cos-step label mem loc pred)
        (@cos-steps new-label new-mem new-loc label (1- n))))))

(defund @cos (%x)
  (declare (ignore %x))
   nil)
