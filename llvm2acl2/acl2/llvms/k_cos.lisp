(in-package "ACL2")
(include-book "../llvm")

(defconst *__kernel_cos-globals* '())

(defund @__kernel_cos-%0-bb (mem loc)
  (b* (
    (mem (alloca-double 'ret 1 mem))
    (mem (alloca-double 'x 1 mem))
    (mem (alloca-double 'y 1 mem))
    (mem (alloca-double 'a 1 mem))
    (mem (alloca-double 'hz 1 mem))
    (mem (alloca-double 'z 1 mem))
    (mem (alloca-double 'r 1 mem))
    (mem (alloca-double 'qx 1 mem))
    (mem (alloca-i32 'ix 1 mem))
    (mem (store-double (g '%x loc) '(x . 0) mem))
    (mem (store-double (g '%y loc) '(y . 0) mem))
    (loc (s '%4 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%5 (getelementptr-i32 (g '%4 loc) 1) loc))
    (loc (s '%6 (load-i32 (g '%5 loc) mem) loc))
    (loc (s '%7 (and-i32 (g '%6 loc) 2147483647) loc))
    (mem (store-i32 (g '%7 loc) '(ix . 0) mem))
    (loc (s '%8 (load-i32 '(ix . 0) mem) loc))
    (loc (s '%9 (icmp-slt-i32 (g '%8 loc) 1044381696) loc)))
  (case (g '%9 loc)
    (-1 (mv '@__kernel_cos-%10-bb mem loc))
    ( 0 (mv '@__kernel_cos-%16-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__kernel_cos-%10-bb (mem loc)
  (b* (
    (loc (s '%11 (load-double '(x . 0) mem) loc))
    (loc (s '%12 (fptosi-double-to-i32 (g '%11 loc)) loc))
    (loc (s '%13 (icmp-eq-i32 (g '%12 loc) 0) loc)))
  (case (g '%13 loc)
    (-1 (mv '@__kernel_cos-%14-bb mem loc))
    ( 0 (mv '@__kernel_cos-%15-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__kernel_cos-%14-bb (mem loc)
  (b* (
    (mem (store-double #x3ff0000000000000 '(ret . 0) mem)))
  (mv '@__kernel_cos-%79-bb mem loc)))

(defund @__kernel_cos-%15-bb (mem loc)
  (b* ()
  (mv '@__kernel_cos-%16-bb mem loc)))

(defund @__kernel_cos-%16-bb (mem loc)
  (b* (
    (loc (s '%17 (load-double '(x . 0) mem) loc))
    (loc (s '%18 (load-double '(x . 0) mem) loc))
    (loc (s '%19 (fmul-double (g '%17 loc) (g '%18 loc)) loc))
    (mem (store-double (g '%19 loc) '(z . 0) mem))
    (loc (s '%20 (load-double '(z . 0) mem) loc))
    (loc (s '%21 (load-double '(z . 0) mem) loc))
    (loc (s '%22 (load-double '(z . 0) mem) loc))
    (loc (s '%23 (load-double '(z . 0) mem) loc))
    (loc (s '%24 (load-double '(z . 0) mem) loc))
    (loc (s '%25 (load-double '(z . 0) mem) loc))
    (loc (s '%26 (fmul-double (g '%25 loc) #xBDA8FAE9BE8838D4) loc))
    (loc (s '%27 (fadd-double #x3E21EE9EBDB4B1C4 (g '%26 loc)) loc))
    (loc (s '%28 (fmul-double (g '%24 loc) (g '%27 loc)) loc))
    (loc (s '%29 (fadd-double #xBE927E4F809C52AD (g '%28 loc)) loc))
    (loc (s '%30 (fmul-double (g '%23 loc) (g '%29 loc)) loc))
    (loc (s '%31 (fadd-double #x3EFA01A019CB1590 (g '%30 loc)) loc))
    (loc (s '%32 (fmul-double (g '%22 loc) (g '%31 loc)) loc))
    (loc (s '%33 (fadd-double #xBF56C16C16C15177 (g '%32 loc)) loc))
    (loc (s '%34 (fmul-double (g '%21 loc) (g '%33 loc)) loc))
    (loc (s '%35 (fadd-double #x3FA555555555554C (g '%34 loc)) loc))
    (loc (s '%36 (fmul-double (g '%20 loc) (g '%35 loc)) loc))
    (mem (store-double (g '%36 loc) '(r . 0) mem))
    (loc (s '%37 (load-i32 '(ix . 0) mem) loc))
    (loc (s '%38 (icmp-slt-i32 (g '%37 loc) 1070805811) loc)))
  (case (g '%38 loc)
    (-1 (mv '@__kernel_cos-%39-bb mem loc))
    ( 0 (mv '@__kernel_cos-%51-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__kernel_cos-%39-bb (mem loc)
  (b* (
    (loc (s '%40 (load-double '(z . 0) mem) loc))
    (loc (s '%41 (fmul-double #x3fe0000000000000 (g '%40 loc)) loc))
    (loc (s '%42 (load-double '(z . 0) mem) loc))
    (loc (s '%43 (load-double '(r . 0) mem) loc))
    (loc (s '%44 (fmul-double (g '%42 loc) (g '%43 loc)) loc))
    (loc (s '%45 (load-double '(x . 0) mem) loc))
    (loc (s '%46 (load-double '(y . 0) mem) loc))
    (loc (s '%47 (fmul-double (g '%45 loc) (g '%46 loc)) loc))
    (loc (s '%48 (fsub-double (g '%44 loc) (g '%47 loc)) loc))
    (loc (s '%49 (fsub-double (g '%41 loc) (g '%48 loc)) loc))
    (loc (s '%50 (fsub-double #x3ff0000000000000 (g '%49 loc)) loc))
    (mem (store-double (g '%50 loc) '(ret . 0) mem)))
  (mv '@__kernel_cos-%79-bb mem loc)))

(defund @__kernel_cos-%51-bb (mem loc)
  (b* (
    (loc (s '%52 (load-i32 '(ix . 0) mem) loc))
    (loc (s '%53 (icmp-sgt-i32 (g '%52 loc) 1072234496) loc)))
  (case (g '%53 loc)
    (-1 (mv '@__kernel_cos-%54-bb mem loc))
    ( 0 (mv '@__kernel_cos-%55-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__kernel_cos-%54-bb (mem loc)
  (b* (
    (mem (store-double #x3fd2000000000000 '(qx . 0) mem)))
  (mv '@__kernel_cos-%61-bb mem loc)))

(defund @__kernel_cos-%55-bb (mem loc)
  (b* (
    (loc (s '%56 (load-i32 '(ix . 0) mem) loc))
    (loc (s '%57 (sub-i32 (g '%56 loc) 2097152) loc))
    (loc (s '%58 (bitcast-double*-to-i32* '(qx . 0)) loc))
    (loc (s '%59 (getelementptr-i32 (g '%58 loc) 1) loc))
    (mem (store-i32 (g '%57 loc) (g '%59 loc) mem))
    (loc (s '%60 (bitcast-double*-to-i32* '(qx . 0)) loc))
    (mem (store-i32 0 (g '%60 loc) mem)))
  (mv '@__kernel_cos-%61-bb mem loc)))

(defund @__kernel_cos-%61-bb (mem loc)
  (b* (
    (loc (s '%62 (load-double '(z . 0) mem) loc))
    (loc (s '%63 (fmul-double #x3fe0000000000000 (g '%62 loc)) loc))
    (loc (s '%64 (load-double '(qx . 0) mem) loc))
    (loc (s '%65 (fsub-double (g '%63 loc) (g '%64 loc)) loc))
    (mem (store-double (g '%65 loc) '(hz . 0) mem))
    (loc (s '%66 (load-double '(qx . 0) mem) loc))
    (loc (s '%67 (fsub-double #x3ff0000000000000 (g '%66 loc)) loc))
    (mem (store-double (g '%67 loc) '(a . 0) mem))
    (loc (s '%68 (load-double '(a . 0) mem) loc))
    (loc (s '%69 (load-double '(hz . 0) mem) loc))
    (loc (s '%70 (load-double '(z . 0) mem) loc))
    (loc (s '%71 (load-double '(r . 0) mem) loc))
    (loc (s '%72 (fmul-double (g '%70 loc) (g '%71 loc)) loc))
    (loc (s '%73 (load-double '(x . 0) mem) loc))
    (loc (s '%74 (load-double '(y . 0) mem) loc))
    (loc (s '%75 (fmul-double (g '%73 loc) (g '%74 loc)) loc))
    (loc (s '%76 (fsub-double (g '%72 loc) (g '%75 loc)) loc))
    (loc (s '%77 (fsub-double (g '%69 loc) (g '%76 loc)) loc))
    (loc (s '%78 (fsub-double (g '%68 loc) (g '%77 loc)) loc))
    (mem (store-double (g '%78 loc) '(ret . 0) mem)))
  (mv '@__kernel_cos-%79-bb mem loc)))

(defund @__kernel_cos-%79-bb (mem loc)
  (b* (
    (loc (s '%80 (load-double '(ret . 0) mem) loc)))
  (mv 'ret mem loc)))

(defund @__kernel_cos-step (label mem loc)
  (case label
    (%-0 (@__kernel_cos-%0-bb mem loc))
    (%-10 (@__kernel_cos-%10-bb mem loc))
    (%-14 (@__kernel_cos-%14-bb mem loc))
    (%-15 (@__kernel_cos-%15-bb mem loc))
    (%-16 (@__kernel_cos-%16-bb mem loc))
    (%-39 (@__kernel_cos-%39-bb mem loc))
    (%-51 (@__kernel_cos-%51-bb mem loc))
    (%-54 (@__kernel_cos-%54-bb mem loc))
    (%-55 (@__kernel_cos-%55-bb mem loc))
    (%-61 (@__kernel_cos-%61-bb mem loc))
    (%-79 (@__kernel_cos-%79-bb mem loc))
    (otherwise (mv nil mem loc))))

(defund @__kernel_cos-steps (label mem loc n)
  (declare (xargs :measure (nfix n)))
  (if (equal label 'ret)
      (g '%80 loc)
    (if (zp n) nil
      (mv-let
        (label mem loc)
        (@__kernel_cos-step label mem loc)
        (@__kernel_cos-steps label mem loc (1- n))))))

(defund @__kernel_cos (%x %y)
  (declare (ignore %x %y))
   nil)
