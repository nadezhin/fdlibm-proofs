(in-package "ACL2")
(include-book "../llvm")
(include-book "s_fabs")

(defconst *__kernel_tan-globals* '(
  (xxx #x55555563 #x3fd55555 #x1110fe7a #x3fc11111 #x1bb341fe #x3faba1ba #x8406d637 #x3f9664f4 #xe96e8493 #x3f8226e3 #xc9560328 #x3f6d6d22 #xfee08315 #x3f57dbc8 #xf2f26501 #x3f4344d8 #x1a8d1068 #x3f3026f7 #xa03792a6 #x3f147e88 #x32f0a7e9 #x3f12b80f #xdb605373 #xbef375cb #x74bf7ad4 #x3efb2a70 #x00000000 #x3ff00000 #x54442d18 #x3fe921fb #x33145c07 #x3c81a626)))

(defund @__kernel_tan-%0-bb (mem loc)
  (b* (
    (mem (alloca-double 'ret 1 mem))
    (mem (alloca-double 'x 1 mem))
    (mem (alloca-double 'y 1 mem))
    (mem (alloca-i32 'iy 1 mem))
    (mem (alloca-double 'z 1 mem))
    (mem (alloca-double 'r 1 mem))
    (mem (alloca-double 'v 1 mem))
    (mem (alloca-double 'w 1 mem))
    (mem (alloca-double 's 1 mem))
    (mem (alloca-i32 'ix 1 mem))
    (mem (alloca-i32 'hx 1 mem))
    (mem (alloca-double 'a 1 mem))
    (mem (alloca-double 't 1 mem))
    (mem (alloca-double 'a1 1 mem))
    (mem (alloca-double 't2 1 mem))
    (mem (store-double (g '%x loc) '(x . 0) mem))
    (mem (store-double (g '%y loc) '(y . 0) mem))
    (mem (store-i32 (g '%iy loc) '(iy . 0) mem))
    (loc (s '%5 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%6 (getelementptr-i32 (g '%5 loc) 1) loc))
    (loc (s '%7 (load-i32 (g '%6 loc) mem) loc))
    (mem (store-i32 (g '%7 loc) '(hx . 0) mem))
    (loc (s '%8 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%9 (and-i32 (g '%8 loc) 2147483647) loc))
    (mem (store-i32 (g '%9 loc) '(ix . 0) mem))
    (loc (s '%10 (load-i32 '(ix . 0) mem) loc))
    (loc (s '%11 (icmp-slt-i32 (g '%10 loc) 1043333120) loc)))
  (case (g '%11 loc)
    (-1 (mv '@__kernel_tan-%12-bb mem loc))
    ( 0 (mv '@__kernel_tan-%65-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__kernel_tan-%12-bb (mem loc)
  (b* (
    (loc (s '%13 (load-double '(x . 0) mem) loc))
    (loc (s '%14 (fptosi-double-to-i32 (g '%13 loc)) loc))
    (loc (s '%15 (icmp-eq-i32 (g '%14 loc) 0) loc)))
  (case (g '%15 loc)
    (-1 (mv '@__kernel_tan-%16-bb mem loc))
    ( 0 (mv '@__kernel_tan-%64-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__kernel_tan-%16-bb (mem loc)
  (b* (
    (loc (s '%17 (load-i32 '(ix . 0) mem) loc))
    (loc (s '%18 (bitcast-double*-to-i32* '(x . 0)) loc))
    (loc (s '%19 (load-i32 (g '%18 loc) mem) loc))
    (loc (s '%20 (or-i32 (g '%17 loc) (g '%19 loc)) loc))
    (loc (s '%21 (load-i32 '(iy . 0) mem) loc))
    (loc (s '%22 (add-i32 (g '%21 loc) 1) loc))
    (loc (s '%23 (or-i32 (g '%20 loc) (g '%22 loc)) loc))
    (loc (s '%24 (icmp-eq-i32 (g '%23 loc) 0) loc)))
  (case (g '%24 loc)
    (-1 (mv '@__kernel_tan-%25-bb mem loc))
    ( 0 (mv '@__kernel_tan-%30-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__kernel_tan-%25-bb (mem loc)
  (b* (
    (loc (s '%26 (load-double (getelementptr-double '(xxx . 0) 13) mem) loc))
    (loc (s '%27 (load-double '(x . 0) mem) loc))
    (loc (s '%28 (@fabs (g '%27 loc)) loc))
    (loc (s '%29 (fdiv-double (g '%26 loc) (g '%28 loc)) loc))
    (mem (store-double (g '%29 loc) '(ret . 0) mem)))
  (mv '@__kernel_tan-%213-bb mem loc)))

(defund @__kernel_tan-%30-bb (mem loc)
  (b* (
    (loc (s '%31 (load-i32 '(iy . 0) mem) loc))
    (loc (s '%32 (icmp-eq-i32 (g '%31 loc) 1) loc)))
  (case (g '%32 loc)
    (-1 (mv '@__kernel_tan-%33-bb mem loc))
    ( 0 (mv '@__kernel_tan-%35-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__kernel_tan-%33-bb (mem loc)
  (b* (
    (loc (s '%34 (load-double '(x . 0) mem) loc))
    (mem (store-double (g '%34 loc) '(ret . 0) mem)))
  (mv '@__kernel_tan-%213-bb mem loc)))

(defund @__kernel_tan-%35-bb (mem loc)
  (b* (
    (loc (s '%36 (load-double '(x . 0) mem) loc))
    (loc (s '%37 (load-double '(y . 0) mem) loc))
    (loc (s '%38 (fadd-double (g '%36 loc) (g '%37 loc)) loc))
    (mem (store-double (g '%38 loc) '(w . 0) mem))
    (mem (store-double (g '%38 loc) '(z . 0) mem))
    (loc (s '%39 (bitcast-double*-to-i32* '(z . 0)) loc))
    (mem (store-i32 0 (g '%39 loc) mem))
    (loc (s '%40 (load-double '(y . 0) mem) loc))
    (loc (s '%41 (load-double '(z . 0) mem) loc))
    (loc (s '%42 (load-double '(x . 0) mem) loc))
    (loc (s '%43 (fsub-double (g '%41 loc) (g '%42 loc)) loc))
    (loc (s '%44 (fsub-double (g '%40 loc) (g '%43 loc)) loc))
    (mem (store-double (g '%44 loc) '(v . 0) mem))
    (loc (s '%45 (load-double (getelementptr-double '(xxx . 0) 13) mem) loc))
    (loc (s '%46 (fsub-double #x8000000000000000 (g '%45 loc)) loc))
    (loc (s '%47 (load-double '(w . 0) mem) loc))
    (loc (s '%48 (fdiv-double (g '%46 loc) (g '%47 loc)) loc))
    (mem (store-double (g '%48 loc) '(a . 0) mem))
    (mem (store-double (g '%48 loc) '(t . 0) mem))
    (loc (s '%49 (bitcast-double*-to-i32* '(t . 0)) loc))
    (mem (store-i32 0 (g '%49 loc) mem))
    (loc (s '%50 (load-double (getelementptr-double '(xxx . 0) 13) mem) loc))
    (loc (s '%51 (load-double '(t . 0) mem) loc))
    (loc (s '%52 (load-double '(z . 0) mem) loc))
    (loc (s '%53 (fmul-double (g '%51 loc) (g '%52 loc)) loc))
    (loc (s '%54 (fadd-double (g '%50 loc) (g '%53 loc)) loc))
    (mem (store-double (g '%54 loc) '(s . 0) mem))
    (loc (s '%55 (load-double '(t . 0) mem) loc))
    (loc (s '%56 (load-double '(a . 0) mem) loc))
    (loc (s '%57 (load-double '(s . 0) mem) loc))
    (loc (s '%58 (load-double '(t . 0) mem) loc))
    (loc (s '%59 (load-double '(v . 0) mem) loc))
    (loc (s '%60 (fmul-double (g '%58 loc) (g '%59 loc)) loc))
    (loc (s '%61 (fadd-double (g '%57 loc) (g '%60 loc)) loc))
    (loc (s '%62 (fmul-double (g '%56 loc) (g '%61 loc)) loc))
    (loc (s '%63 (fadd-double (g '%55 loc) (g '%62 loc)) loc))
    (mem (store-double (g '%63 loc) '(ret . 0) mem)))
  (mv '@__kernel_tan-%213-bb mem loc)))

(defund @__kernel_tan-%64-bb (mem loc)
  (b* ()
  (mv '@__kernel_tan-%65-bb mem loc)))

(defund @__kernel_tan-%65-bb (mem loc)
  (b* (
    (loc (s '%66 (load-i32 '(ix . 0) mem) loc))
    (loc (s '%67 (icmp-sge-i32 (g '%66 loc) 1072010280) loc)))
  (case (g '%67 loc)
    (-1 (mv '@__kernel_tan-%68-bb mem loc))
    ( 0 (mv '@__kernel_tan-%86-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__kernel_tan-%68-bb (mem loc)
  (b* (
    (loc (s '%69 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%70 (icmp-slt-i32 (g '%69 loc) 0) loc)))
  (case (g '%70 loc)
    (-1 (mv '@__kernel_tan-%71-bb mem loc))
    ( 0 (mv '@__kernel_tan-%76-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__kernel_tan-%71-bb (mem loc)
  (b* (
    (loc (s '%72 (load-double '(x . 0) mem) loc))
    (loc (s '%73 (fsub-double #x8000000000000000 (g '%72 loc)) loc))
    (mem (store-double (g '%73 loc) '(x . 0) mem))
    (loc (s '%74 (load-double '(y . 0) mem) loc))
    (loc (s '%75 (fsub-double #x8000000000000000 (g '%74 loc)) loc))
    (mem (store-double (g '%75 loc) '(y . 0) mem)))
  (mv '@__kernel_tan-%76-bb mem loc)))

(defund @__kernel_tan-%76-bb (mem loc)
  (b* (
    (loc (s '%77 (load-double (getelementptr-double '(xxx . 0) 14) mem) loc))
    (loc (s '%78 (load-double '(x . 0) mem) loc))
    (loc (s '%79 (fsub-double (g '%77 loc) (g '%78 loc)) loc))
    (mem (store-double (g '%79 loc) '(z . 0) mem))
    (loc (s '%80 (load-double (getelementptr-double '(xxx . 0) 15) mem) loc))
    (loc (s '%81 (load-double '(y . 0) mem) loc))
    (loc (s '%82 (fsub-double (g '%80 loc) (g '%81 loc)) loc))
    (mem (store-double (g '%82 loc) '(w . 0) mem))
    (loc (s '%83 (load-double '(z . 0) mem) loc))
    (loc (s '%84 (load-double '(w . 0) mem) loc))
    (loc (s '%85 (fadd-double (g '%83 loc) (g '%84 loc)) loc))
    (mem (store-double (g '%85 loc) '(x . 0) mem))
    (mem (store-double #x0000000000000000 '(y . 0) mem)))
  (mv '@__kernel_tan-%86-bb mem loc)))

(defund @__kernel_tan-%86-bb (mem loc)
  (b* (
    (loc (s '%87 (load-double '(x . 0) mem) loc))
    (loc (s '%88 (load-double '(x . 0) mem) loc))
    (loc (s '%89 (fmul-double (g '%87 loc) (g '%88 loc)) loc))
    (mem (store-double (g '%89 loc) '(z . 0) mem))
    (loc (s '%90 (load-double '(z . 0) mem) loc))
    (loc (s '%91 (load-double '(z . 0) mem) loc))
    (loc (s '%92 (fmul-double (g '%90 loc) (g '%91 loc)) loc))
    (mem (store-double (g '%92 loc) '(w . 0) mem))
    (loc (s '%93 (load-double (getelementptr-double '(xxx . 0) 1) mem) loc))
    (loc (s '%94 (load-double '(w . 0) mem) loc))
    (loc (s '%95 (load-double (getelementptr-double '(xxx . 0) 3) mem) loc))
    (loc (s '%96 (load-double '(w . 0) mem) loc))
    (loc (s '%97 (load-double (getelementptr-double '(xxx . 0) 5) mem) loc))
    (loc (s '%98 (load-double '(w . 0) mem) loc))
    (loc (s '%99 (load-double (getelementptr-double '(xxx . 0) 7) mem) loc))
    (loc (s '%100 (load-double '(w . 0) mem) loc))
    (loc (s '%101 (load-double (getelementptr-double '(xxx . 0) 9) mem) loc))
    (loc (s '%102 (load-double '(w . 0) mem) loc))
    (loc (s '%103 (load-double (getelementptr-double '(xxx . 0) 11) mem) loc))
    (loc (s '%104 (fmul-double (g '%102 loc) (g '%103 loc)) loc))
    (loc (s '%105 (fadd-double (g '%101 loc) (g '%104 loc)) loc))
    (loc (s '%106 (fmul-double (g '%100 loc) (g '%105 loc)) loc))
    (loc (s '%107 (fadd-double (g '%99 loc) (g '%106 loc)) loc))
    (loc (s '%108 (fmul-double (g '%98 loc) (g '%107 loc)) loc))
    (loc (s '%109 (fadd-double (g '%97 loc) (g '%108 loc)) loc))
    (loc (s '%110 (fmul-double (g '%96 loc) (g '%109 loc)) loc))
    (loc (s '%111 (fadd-double (g '%95 loc) (g '%110 loc)) loc))
    (loc (s '%112 (fmul-double (g '%94 loc) (g '%111 loc)) loc))
    (loc (s '%113 (fadd-double (g '%93 loc) (g '%112 loc)) loc))
    (mem (store-double (g '%113 loc) '(r . 0) mem))
    (loc (s '%114 (load-double '(z . 0) mem) loc))
    (loc (s '%115 (load-double (getelementptr-double '(xxx . 0) 2) mem) loc))
    (loc (s '%116 (load-double '(w . 0) mem) loc))
    (loc (s '%117 (load-double (getelementptr-double '(xxx . 0) 4) mem) loc))
    (loc (s '%118 (load-double '(w . 0) mem) loc))
    (loc (s '%119 (load-double (getelementptr-double '(xxx . 0) 6) mem) loc))
    (loc (s '%120 (load-double '(w . 0) mem) loc))
    (loc (s '%121 (load-double (getelementptr-double '(xxx . 0) 8) mem) loc))
    (loc (s '%122 (load-double '(w . 0) mem) loc))
    (loc (s '%123 (load-double (getelementptr-double '(xxx . 0) 10) mem) loc))
    (loc (s '%124 (load-double '(w . 0) mem) loc))
    (loc (s '%125 (load-double (getelementptr-double '(xxx . 0) 12) mem) loc))
    (loc (s '%126 (fmul-double (g '%124 loc) (g '%125 loc)) loc))
    (loc (s '%127 (fadd-double (g '%123 loc) (g '%126 loc)) loc))
    (loc (s '%128 (fmul-double (g '%122 loc) (g '%127 loc)) loc))
    (loc (s '%129 (fadd-double (g '%121 loc) (g '%128 loc)) loc))
    (loc (s '%130 (fmul-double (g '%120 loc) (g '%129 loc)) loc))
    (loc (s '%131 (fadd-double (g '%119 loc) (g '%130 loc)) loc))
    (loc (s '%132 (fmul-double (g '%118 loc) (g '%131 loc)) loc))
    (loc (s '%133 (fadd-double (g '%117 loc) (g '%132 loc)) loc))
    (loc (s '%134 (fmul-double (g '%116 loc) (g '%133 loc)) loc))
    (loc (s '%135 (fadd-double (g '%115 loc) (g '%134 loc)) loc))
    (loc (s '%136 (fmul-double (g '%114 loc) (g '%135 loc)) loc))
    (mem (store-double (g '%136 loc) '(v . 0) mem))
    (loc (s '%137 (load-double '(z . 0) mem) loc))
    (loc (s '%138 (load-double '(x . 0) mem) loc))
    (loc (s '%139 (fmul-double (g '%137 loc) (g '%138 loc)) loc))
    (mem (store-double (g '%139 loc) '(s . 0) mem))
    (loc (s '%140 (load-double '(y . 0) mem) loc))
    (loc (s '%141 (load-double '(z . 0) mem) loc))
    (loc (s '%142 (load-double '(s . 0) mem) loc))
    (loc (s '%143 (load-double '(r . 0) mem) loc))
    (loc (s '%144 (load-double '(v . 0) mem) loc))
    (loc (s '%145 (fadd-double (g '%143 loc) (g '%144 loc)) loc))
    (loc (s '%146 (fmul-double (g '%142 loc) (g '%145 loc)) loc))
    (loc (s '%147 (load-double '(y . 0) mem) loc))
    (loc (s '%148 (fadd-double (g '%146 loc) (g '%147 loc)) loc))
    (loc (s '%149 (fmul-double (g '%141 loc) (g '%148 loc)) loc))
    (loc (s '%150 (fadd-double (g '%140 loc) (g '%149 loc)) loc))
    (mem (store-double (g '%150 loc) '(r . 0) mem))
    (loc (s '%151 (load-double (getelementptr-double '(xxx . 0) 0) mem) loc))
    (loc (s '%152 (load-double '(s . 0) mem) loc))
    (loc (s '%153 (fmul-double (g '%151 loc) (g '%152 loc)) loc))
    (loc (s '%154 (load-double '(r . 0) mem) loc))
    (loc (s '%155 (fadd-double (g '%154 loc) (g '%153 loc)) loc))
    (mem (store-double (g '%155 loc) '(r . 0) mem))
    (loc (s '%156 (load-double '(x . 0) mem) loc))
    (loc (s '%157 (load-double '(r . 0) mem) loc))
    (loc (s '%158 (fadd-double (g '%156 loc) (g '%157 loc)) loc))
    (mem (store-double (g '%158 loc) '(w . 0) mem))
    (loc (s '%159 (load-i32 '(ix . 0) mem) loc))
    (loc (s '%160 (icmp-sge-i32 (g '%159 loc) 1072010280) loc)))
  (case (g '%160 loc)
    (-1 (mv '@__kernel_tan-%161-bb mem loc))
    ( 0 (mv '@__kernel_tan-%184-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__kernel_tan-%161-bb (mem loc)
  (b* (
    (loc (s '%162 (load-i32 '(iy . 0) mem) loc))
    (loc (s '%163 (sitofp-i32-to-double (g '%162 loc)) loc))
    (mem (store-double (g '%163 loc) '(v . 0) mem))
    (loc (s '%164 (load-i32 '(hx . 0) mem) loc))
    (loc (s '%165 (ashr-i32 (g '%164 loc) 30) loc))
    (loc (s '%166 (and-i32 (g '%165 loc) 2) loc))
    (loc (s '%167 (sub-i32 1 (g '%166 loc)) loc))
    (loc (s '%168 (sitofp-i32-to-double (g '%167 loc)) loc))
    (loc (s '%169 (load-double '(v . 0) mem) loc))
    (loc (s '%170 (load-double '(x . 0) mem) loc))
    (loc (s '%171 (load-double '(w . 0) mem) loc))
    (loc (s '%172 (load-double '(w . 0) mem) loc))
    (loc (s '%173 (fmul-double (g '%171 loc) (g '%172 loc)) loc))
    (loc (s '%174 (load-double '(w . 0) mem) loc))
    (loc (s '%175 (load-double '(v . 0) mem) loc))
    (loc (s '%176 (fadd-double (g '%174 loc) (g '%175 loc)) loc))
    (loc (s '%177 (fdiv-double (g '%173 loc) (g '%176 loc)) loc))
    (loc (s '%178 (load-double '(r . 0) mem) loc))
    (loc (s '%179 (fsub-double (g '%177 loc) (g '%178 loc)) loc))
    (loc (s '%180 (fsub-double (g '%170 loc) (g '%179 loc)) loc))
    (loc (s '%181 (fmul-double #x4000000000000000 (g '%180 loc)) loc))
    (loc (s '%182 (fsub-double (g '%169 loc) (g '%181 loc)) loc))
    (loc (s '%183 (fmul-double (g '%168 loc) (g '%182 loc)) loc))
    (mem (store-double (g '%183 loc) '(ret . 0) mem)))
  (mv '@__kernel_tan-%213-bb mem loc)))

(defund @__kernel_tan-%184-bb (mem loc)
  (b* (
    (loc (s '%185 (load-i32 '(iy . 0) mem) loc))
    (loc (s '%186 (icmp-eq-i32 (g '%185 loc) 1) loc)))
  (case (g '%186 loc)
    (-1 (mv '@__kernel_tan-%187-bb mem loc))
    ( 0 (mv '@__kernel_tan-%189-bb mem loc))
    (otherwise (mv nil mem loc)))))

(defund @__kernel_tan-%187-bb (mem loc)
  (b* (
    (loc (s '%188 (load-double '(w . 0) mem) loc))
    (mem (store-double (g '%188 loc) '(ret . 0) mem)))
  (mv '@__kernel_tan-%213-bb mem loc)))

(defund @__kernel_tan-%189-bb (mem loc)
  (b* (
    (loc (s '%190 (load-double '(w . 0) mem) loc))
    (mem (store-double (g '%190 loc) '(z . 0) mem))
    (loc (s '%191 (bitcast-double*-to-i32* '(z . 0)) loc))
    (mem (store-i32 0 (g '%191 loc) mem))
    (loc (s '%192 (load-double '(r . 0) mem) loc))
    (loc (s '%193 (load-double '(z . 0) mem) loc))
    (loc (s '%194 (load-double '(x . 0) mem) loc))
    (loc (s '%195 (fsub-double (g '%193 loc) (g '%194 loc)) loc))
    (loc (s '%196 (fsub-double (g '%192 loc) (g '%195 loc)) loc))
    (mem (store-double (g '%196 loc) '(v . 0) mem))
    (loc (s '%197 (load-double '(w . 0) mem) loc))
    (loc (s '%198 (fdiv-double #xbff0000000000000 (g '%197 loc)) loc))
    (mem (store-double (g '%198 loc) '(a1 . 0) mem))
    (mem (store-double (g '%198 loc) '(t2 . 0) mem))
    (loc (s '%199 (bitcast-double*-to-i32* '(t2 . 0)) loc))
    (mem (store-i32 0 (g '%199 loc) mem))
    (loc (s '%200 (load-double '(t2 . 0) mem) loc))
    (loc (s '%201 (load-double '(z . 0) mem) loc))
    (loc (s '%202 (fmul-double (g '%200 loc) (g '%201 loc)) loc))
    (loc (s '%203 (fadd-double #x3ff0000000000000 (g '%202 loc)) loc))
    (mem (store-double (g '%203 loc) '(s . 0) mem))
    (loc (s '%204 (load-double '(t2 . 0) mem) loc))
    (loc (s '%205 (load-double '(a1 . 0) mem) loc))
    (loc (s '%206 (load-double '(s . 0) mem) loc))
    (loc (s '%207 (load-double '(t2 . 0) mem) loc))
    (loc (s '%208 (load-double '(v . 0) mem) loc))
    (loc (s '%209 (fmul-double (g '%207 loc) (g '%208 loc)) loc))
    (loc (s '%210 (fadd-double (g '%206 loc) (g '%209 loc)) loc))
    (loc (s '%211 (fmul-double (g '%205 loc) (g '%210 loc)) loc))
    (loc (s '%212 (fadd-double (g '%204 loc) (g '%211 loc)) loc))
    (mem (store-double (g '%212 loc) '(ret . 0) mem)))
  (mv '@__kernel_tan-%213-bb mem loc)))

(defund @__kernel_tan-%213-bb (mem loc)
  (b* (
    (loc (s '%214 (load-double '(ret . 0) mem) loc)))
  (mv 'ret mem loc)))

(defund @__kernel_tan-step (label mem loc)
  (case label
    (%-0 (@__kernel_tan-%0-bb mem loc))
    (%-12 (@__kernel_tan-%12-bb mem loc))
    (%-16 (@__kernel_tan-%16-bb mem loc))
    (%-25 (@__kernel_tan-%25-bb mem loc))
    (%-30 (@__kernel_tan-%30-bb mem loc))
    (%-33 (@__kernel_tan-%33-bb mem loc))
    (%-35 (@__kernel_tan-%35-bb mem loc))
    (%-64 (@__kernel_tan-%64-bb mem loc))
    (%-65 (@__kernel_tan-%65-bb mem loc))
    (%-68 (@__kernel_tan-%68-bb mem loc))
    (%-71 (@__kernel_tan-%71-bb mem loc))
    (%-76 (@__kernel_tan-%76-bb mem loc))
    (%-86 (@__kernel_tan-%86-bb mem loc))
    (%-161 (@__kernel_tan-%161-bb mem loc))
    (%-184 (@__kernel_tan-%184-bb mem loc))
    (%-187 (@__kernel_tan-%187-bb mem loc))
    (%-189 (@__kernel_tan-%189-bb mem loc))
    (%-213 (@__kernel_tan-%213-bb mem loc))
    (otherwise (mv nil mem loc))))

(defund @__kernel_tan-steps (label mem loc n)
  (declare (xargs :measure (nfix n)))
  (if (equal label 'ret)
      (g '%214 loc)
    (if (zp n) nil
      (mv-let
        (label mem loc)
        (@__kernel_tan-step label mem loc)
        (@__kernel_tan-steps label mem loc (1- n))))))

(defund @__kernel_tan (%x %y %iy)
  (declare (ignore %x %y %iy))
   nil)
